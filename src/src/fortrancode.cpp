
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE fcodeYYrestart(fcodeYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int fcodeYYleng;

extern FILE *fcodeYYin, *fcodeYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up fcodeYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via fcodeYYrestart()), so that the user can continue scanning by
	 * just pointing fcodeYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when fcodeYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int fcodeYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow fcodeYYwrap()'s to do buffer switches
 * instead of setting up a fresh fcodeYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void fcodeYYrestart (FILE *input_file  );
void fcodeYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE fcodeYY_create_buffer (FILE *file,int size  );
void fcodeYY_delete_buffer (YY_BUFFER_STATE b  );
void fcodeYY_flush_buffer (YY_BUFFER_STATE b  );
void fcodeYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void fcodeYYpop_buffer_state (void );

static void fcodeYYensure_buffer_stack (void );
static void fcodeYY_load_buffer_state (void );
static void fcodeYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER fcodeYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE fcodeYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE fcodeYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE fcodeYY_scan_bytes (yyconst char *bytes,int len  );

void *fcodeYYalloc (yy_size_t  );
void *fcodeYYrealloc (void *,yy_size_t  );
void fcodeYYfree (void *  );

#define yy_new_buffer fcodeYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        fcodeYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            fcodeYY_create_buffer(fcodeYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        fcodeYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            fcodeYY_create_buffer(fcodeYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define fcodeYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *fcodeYYin = (FILE *) 0, *fcodeYYout = (FILE *) 0;

typedef int yy_state_type;

extern int fcodeYYlineno;

int fcodeYYlineno = 1;

extern char *fcodeYYtext;
#define yytext_ptr fcodeYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up fcodeYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	fcodeYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 52
#define YY_END_OF_BUFFER 53
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1138] =
    {   0,
       37,   37,   53,   51,   52,   50,   52,   51,   52,   49,
       51,   52,   51,   52,   41,   51,   52,   51,   52,   50,
       52,   51,   52,   51,   52,   51,   52,   44,   51,   52,
       44,   51,   52,   44,   51,   52,   44,   51,   52,   44,
       51,   52,   44,   51,   52,   44,   51,   52,   44,   51,
       52,   44,   51,   52,   44,   51,   52,   44,   51,   52,
       44,   51,   52,   44,   51,   52,   44,   51,   52,   44,
       51,   52,   44,   51,   52,   44,   51,   52,   51,   52,
       41,   44,   51,   52,   44,   51,   52,   34,   51,   52,
       34,   41,   51,   52,   12,   50,   52,   11,   51,   52,

       11,   41,   51,   52,   19,   50,   52,   18,   51,   52,
       17,   51,   52,   17,   41,   51,   52,   37,   51,   52,
       39,   50,   52,   37,   51,   52,   37,   49,   51,   52,
       37,   51,   52,   37,   41,   51,   52,    9,   50,   52,
       51,   52,    5,   51,   52,    5,   41,   51,   52,   51,
       52,    7,   51,   52,    8,   51,   52,    8,   41,   51,
       52,   23,   51,   52,   22,   51,   52,   22,   41,   51,
       52,   32,   50,   52,   30,   51,   52,   28,   51,   52,
       29,   51,   52,   27,   51,   52,   27,   51,   52,   27,
       51,   52,   27,   51,   52,   27,   51,   52,   27,   51,

       52,   27,   51,   52,   27,   51,   52,   27,   51,   52,
       27,   51,   52,   27,   51,   52,   27,   51,   52,   27,
       41,   51,   52,   31,   50,   52,   48,   51,   52,   48,
       51,   52,   47,   48,   49,   51,   52,   48,   51,   52,
       41,   48,   51,   52,   40,   46,   45,   41,   36,   42,
       43,   35,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,16386,   44,   44,   44,   44,
       44,16386,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   41,   35,   41,   41,   44,   41,   44,   41,

       44,   41,   44,   41,   44,   41,   44,   44,   34,   34,
       34,   41,   34,   41,   11,   11,   11,   41,   11,   41,
       18,   17,   17,   17,   41,   17,   41,   37,   38,   37,
       37,   46,   37,   45,   37,   41,    5,    5,    5,   41,
        5,   41,    7,    7,    8,    8,    8,   41,    8,   41,
       22,   22,   22,   41,   22,   41,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   41,   27,   41,   27,
       41,   27,   41,   43,   43,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44, 8194, 8194, 8194,

       35,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   41,   44,   41,   44,   41,   44,   41,
       44,   41,   44,   41,   44,   44,16398,16404,   38,   38,
       37,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   41,   27,   41,   44,   44,   44,    1,   44,   44,
       44,   44,   44,   44,   44, 8194, 8194, 8194,   35,   44,
       44,    3,    3,   44,   44,   44,   44,   44,   44,   44,

       44,   44,   44,   44,   44,   44,   44,   44,   44,   25,
       44,   44,16399,   44,   44,   44,   44,   44,16394,    4,
       44,   44,   44,16398,16404,    1,   41,   44,   41,   44,
    16386,   41,   44,   41,   44,   41,   44,   41,   44,    3,
    16398,16404,    3, 8206, 8212, 8206, 8212,   44,   44,   44,
       44,   44,   44,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   41,   27,   41,   44,   44,   44,    1,
       33,    1,   35,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,

       44,   44,   44,   44,   44,   44,16399,   24,16399,   24,
       35,   24,   44,   44,   44,   44,   44,   44, 8202, 8202,
       21,   35,16398,16404,    1,   33,   41,    1,   35,   41,
     8194,   41, 8194,   35,   41, 8194,   41,   41,   44,   41,
       44,   41,   44,16398,16404,   44,   44,   44,   44,   44,
       44,    6,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   26,   26,
       26,   27,   27,   27,   41,   27,   41,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,16386,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,16394,   44,

       44,   44,   44,   44,   35,16399,16399,   44,   44,   44,
       44, 8194,   41, 8194,   41, 8194,   35,   41,   41,   44,
       41,   44,   41,   44,   44,   44,   44,   44,   44,   44,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   41,   27,   41,
       44,   44,   44,   44,   44,   44,   44,   44, 8194,    3,
       44,   44,   44,   35,   44,   44, 8202,   44,   44,   44,
    16394,16399,   24,16399,16399,   24,16399,   44,   44,   44,
       44,   41,   44,   41,   44,16399,   41,   44,   44,   44,
       44,   44,   44,   44,16398,   27,   27,   27,   27,   27,

       27,   27,   27,   26,   27,   27,   41,   27,   41,   44,
       44,16386,   44,   44,   44,   44,16386,   44,   44,   44,
       44,   44,   44,   44,   44, 8202,   44,   44,   44,   44,
    16398,   41,   44,   41,16399,   24,   41,16399,   24,   35,
       41,   41,   24,   41,   41,   44,   41,   44,   41,   44,
    16386,   44,   44,   44,   44,   44,16398, 8206,   27,   27,
       27,   27,   27,   27,   27,   27,   41,   41,   26,   41,
       26,   41,   41,   26,   41,   44,   44,   44,16399,   44,
       44,   16,   44,   44,   44,   44,16398,   41,   44,16399,
       35,   41,   41,   41,   41,   41,16399,   41,   41,16399,

       41,   44,   41,   44,   44,   44,   44,   44,16398,   27,
       27,   27,   27,   41,   41,   41,   41,   41,   41,   44,
    16386,16399,   24,16399,   24,   35,   35,   13,   44,   25,
       44,   44,   41,16399,   24,   41,16399,   24,   35,   41,
       41,   41,   41,   41,16399,   24,   41,16399,   41,16399,
       24,   41,16399,   41,   44,   41,   44,   13,16398,   44,
       44,   44,16398,16398,16398,   27,   26,   26,   41,   26,
       41,   26,   41,   41,   41,   26,   41,   35,16399,16399,
       25,   13,   13,   44,   44,   44,   35,   41,   41,   41,
    16399,   41,   41,   41,16399,   41,   41,   41,   44,   41,

       44,   13,16398,   13, 8206,   44,16404,   44,   44,   41,
       41,   41,   41,   41,   41,16399,   24,16399,16399,   25,
       13,   44,   44,16404,   41,16399,   24,   41,16399,   41,
       41,16399,   41,   41,   41,   44,   41,   44,   13,16398,
       13,16398,16404, 8212,   44,   26,   26,   41,   26,   41,
       41,   41,16399,   24,16399,   13, 8207,   44,16404,   41,
    16399,   24,   41,16399,   41,   41,   41,   44,   41,   44,
       13,16398,   13,16398,   13,16398,   13,16398,16404,   26,
       41,   26,   41,   13, 8207,   41,   41,   41,   44,   41,
       44,   13,16398,16404,16404,16404,   13,   41,   41,   41,

       44,   41,   44,   13,16398,16399,   13,   41,   41, 8207,
       41,   41,   44,   13,16398,   13, 8207,   41,   41,   13,
    16398,   13,   13,16398,   13,   13,16398,   13,   13,16398,
        3,   13,    3,   13,16398,    3, 8206
    } ;

static yyconst flex_int16_t yy_accept[1106] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    6,    8,   10,   13,   15,   18,   20,   22,
       24,   26,   28,   31,   34,   37,   40,   43,   46,   49,
       52,   55,   58,   61,   64,   67,   70,   73,   76,   79,
       81,   85,   88,   91,   95,   98,  101,  105,  108,  111,
      114,  118,  121,  124,  127,  131,  134,  138,  141,  143,
      146,  150,  152,  155,  158,  162,  165,  168,  172,  175,
      178,  181,  184,  187,  190,  193,  196,  199,  202,  205,

      208,  211,  214,  217,  220,  224,  227,  230,  233,  238,
      241,  245,  245,  246,  247,  248,  249,  249,  249,  250,
      250,  251,  251,  252,  252,  253,  254,  255,  256,  257,
      258,  259,  260,  261,  262,  263,  264,  265,  267,  268,
      269,  270,  271,  273,  274,  275,  276,  277,  278,  279,
      280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
      290,  291,  292,  293,  293,  293,  294,  296,  298,  300,
      302,  304,  306,  308,  309,  310,  311,  313,  315,  316,
      317,  319,  321,  322,  323,  324,  326,  328,  329,  329,
      330,  331,  333,  335,  337,  337,  337,  338,  339,  341,

      343,  343,  344,  345,  346,  347,  349,  351,  352,  353,
      355,  357,  358,  359,  360,  361,  362,  363,  364,  365,
      366,  367,  368,  369,  370,  371,  372,  373,  374,  375,
      376,  378,  380,  382,  384,  384,  385,  386,  387,  388,
      389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
      399,  400,  402,  403,  404,  405,  406,  407,  408,  409,
      410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
      420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
      430,  431,  432,  433,  434,  434,  436,  438,  440,  442,
      444,  446,  449,  450,  451,  452,  452,  453,  454,  455,

      456,  457,  458,  459,  460,  461,  462,  463,  464,  465,
      466,  467,  468,  469,  470,  471,  473,  475,  476,  477,
      478,  480,  481,  482,  483,  484,  485,  486,  487,  488,
      490,  491,  492,  493,  494,  495,  496,  497,  498,  499,
      500,  501,  502,  503,  504,  505,  506,  507,  508,  509,
      510,  512,  514,  515,  516,  517,  518,  520,  521,  522,
      523,  524,  526,  529,  532,  534,  536,  538,  540,  543,
      546,  548,  549,  550,  551,  552,  553,  554,  554,  555,
      556,  557,  558,  559,  560,  561,  562,  563,  564,  565,
      566,  567,  568,  569,  570,  571,  572,  573,  575,  577,

      578,  579,  580,  582,  584,  585,  586,  587,  588,  589,
      590,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  592,  593,  594,  595,  596,
      597,  598,  599,  600,  601,  602,  603,  604,  605,  606,
      607,  608,  610,  612,  612,  613,  614,  615,  616,  617,
      618,  619,  620,  621,  623,  623,  625,  625,  625,  625,
      625,  625,  625,  628,  631,  633,  636,  638,  640,  642,
      644,  646,  646,  646,  646,  646,  647,  648,  649,  650,
      651,  652,  653,  654,  655,  656,  657,  658,  659,  660,
      661,  662,  663,  664,  665,  666,  667,  668,  669,  670,

      670,  671,  672,  672,  673,  674,  676,  678,  679,  680,
      680,  681,  682,  683,  684,  685,  686,  687,  688,  688,
      688,  688,  688,  688,  688,  688,  688,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      690,  691,  692,  693,  694,  695,  696,  697,  698,  700,
      701,  702,  703,  704,  705,  706,  706,  706,  706,  707,
      707,  708,  709,  710,  711,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  714,  716,  719,  721,  723,  725,
      725,  725,  726,  727,  728,  729,  730,  731,  732,  733,
      734,  735,  736,  737,  738,  739,  740,  741,  742,  743,

      744,  745,  746,  746,  746,  746,  746,  746,  747,  749,
      751,  752,  753,  753,  754,  755,  756,  757,  758,  758,
      759,  759,  759,  759,  759,  759,  759,  759,  759,  761,
      761,  761,  761,  761,  761,  761,  761,  761,  761,  761,
      761,  761,  761,  762,  763,  764,  764,  765,  766,  767,
      768,  769,  770,  772,  772,  772,  773,  775,  776,  778,
      779,  780,  781,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  784,  787,  789,  789,  790,  791,  792,  793,
      794,  796,  797,  798,  799,  799,  800,  801,  801,  801,
      802,  803,  804,  804,  805,  806,  808,  810,  811,  813,

      814,  814,  815,  816,  818,  819,  820,  820,  821,  821,
      821,  821,  821,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  821,  821,  821,  821,  822,  823,  823,  823,
      823,  824,  825,  825,  826,  827,  827,  827,  828,  829,
      830,  831,  831,  831,  831,  831,  831,  831,  831,  832,
      834,  836,  839,  842,  843,  845,  847,  849,  852,  852,
      853,  854,  855,  856,  857,  858,  859,  860,  861,  862,
      862,  863,  863,  863,  863,  864,  865,  866,  868,  869,
      871,  873,  874,  876,  877,  878,  878,  880,  881,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      883,  883,  884,  884,  884,  884,  884,  884,  885,  886,
      887,  887,  887,  887,  887,  887,  887,  887,  888,  891,
      893,  894,  895,  896,  898,  899,  901,  903,  905,  905,
      906,  907,  908,  909,  910,  911,  912,  913,  913,  913,
      913,  915,  916,  917,  918,  919,  920,  921,  922,  923,
      925,  927,  927,  927,  928,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  929,  929,  930,  930,  931,  931,
      931,  931,  931,  931,  932,  933,  933,  933,  933,  933,
      933,  933,  935,  938,  941,  942,  943,  944,  946,  949,
      951,  954,  956,  958,  960,  961,  962,  963,  964,  965,

      966,  967,  967,  968,  969,  969,  969,  969,  969,  969,
      969,  969,  969,  970,  972,  974,  975,  976,  978,  979,
      979,  980,  980,  980,  981,  981,  982,  982,  982,  982,
      982,  982,  982,  982,  983,  984,  984,  985,  985,  985,
      985,  985,  985,  986,  987,  987,  987,  987,  987,  989,
      990,  992,  993,  994,  996,  997,  998, 1000, 1002, 1004,
     1006, 1008, 1009, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1011, 1012, 1013, 1014, 1015,
     1016, 1017, 1019, 1019, 1020, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1022, 1022, 1022, 1022, 1022, 1023, 1024,

     1025, 1025, 1025, 1027, 1030, 1031, 1033, 1034, 1035, 1037,
     1039, 1041, 1043, 1044, 1045, 1046, 1046, 1047, 1047, 1047,
     1047, 1048, 1048, 1049, 1051, 1052, 1053, 1054, 1056, 1056,
     1056, 1056, 1056, 1056, 1057, 1057, 1057, 1057, 1058, 1059,
     1060, 1060, 1062, 1065, 1066, 1067, 1069, 1071, 1073, 1075,
     1077, 1079, 1080, 1080, 1081, 1081, 1082, 1084, 1084, 1084,
     1085, 1085, 1086, 1086, 1087, 1088, 1090, 1092, 1094, 1095,
     1096, 1097, 1097, 1097, 1097, 1098, 1098, 1099, 1100, 1102,
     1104, 1106, 1106, 1107, 1108, 1109, 1110, 1112, 1114, 1116,
     1116, 1117, 1119, 1120, 1122, 1123, 1125, 1126, 1128, 1129,

     1131, 1133, 1136, 1138, 1138
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,    1,   14,    1,    1,    1,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    1,    1,
        1,   17,    1,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   19,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
        1,   18,    1,    1,   19,    1,   20,   21,   22,   23,

       24,   25,   26,   27,   28,   19,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[45] =
    {   0,
        1,    2,    3,    2,    4,    1,    1,    1,    1,    1,
        5,    1,    1,    1,    6,    1,    7,    1,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8
    } ;

static yyconst flex_int16_t yy_base[1181] =
    {   0,
        0,   16,   38,   11,   82,    1,  124,  140,  162,    3,
      130,  204,  226,   14,  268,  284,  306,   15,  350,  115,
      394,  119,  438,  125,  274,  480,  486,  502,  508,  524,
     4016, 4017, 4017, 4012, 4017,    2,    0,  147,  152,   14,
     4011,    0,  209,  495,  178,  268,  511,  491,  182,  520,
      263,  510,  519,  534,  464,  535,  542,  186,  245,  556,
      585,  546, 3998,  629, 4017, 3997,  647, 4017,    0, 3996,
      665,    0,  682,  282,    0,  679,    0, 4017,  686, 3995,
      719,  689,    5, 3994,  737, 4017, 3993,  755, 4017, 4017,
     4017, 4017, 3992,  129,  677,  679,  261,  485,  551,  469,

      759,  681,  140,  562,  798, 4017, 4017, 4003, 4017,  696,
        0, 4002, 4017, 4017, 4017,    0,  696, 3987, 4017, 4000,
     4017,   28, 3987,  707, 4017,  711,  188,  479,  745,  747,
      746,  823,  748,  756,  759,  824,  815,  860,  835,  843,
      818,  846, 3962,  847,  852,  764,  856,  864,  821,  867,
      870,  875,  886,  880,  855,  884,  888,  894,  889,  899,
      908,  911,  912,  845, 3968,  942,    0,  953,  948,  952,
      953,  957,  968,  973,    0, 3984, 1010, 1028,    0, 3983,
     1046, 1064,    0,    0, 3982, 1082, 1100,    0,  989,  910,
     3993,    0,    0,    0,  972, 3963,    0, 3979, 1118, 1136,

     1153,  534,  866,    0, 3978, 1167, 1185,    0, 3977, 1203,
     1221,    0, 3976,  907,  932,  550,  919,  480,  684,  702,
      987,  982, 1118,  268,  928, 1225, 1226, 1143,  991,  680,
     1262, 1280, 1298, 1139, 3987,    0, 3974, 1212, 1213, 1222,
     1218, 1293, 1221, 1224, 1290, 1291, 1302, 1289, 1301, 1331,
        0,    0, 1313, 1310, 1321, 1357, 1325, 1326, 1307, 1327,
     1341, 1339, 1342, 1338, 1354, 1316, 1356, 1359, 1371, 1353,
     1368, 1372, 1373, 1376, 1387, 1390, 1385, 1393, 1396, 1401,
     1414, 1399, 1402, 1404, 3965, 1420, 1425, 1434, 1436, 1445,
     1454, 1491, 3982, 4017, 3983, 3955,  617,  977, 1339, 1241,

     1046, 1151, 1422, 1444, 1461, 1462,  989, 1245, 1124, 1456,
     1433, 1467,  852, 1476, 1473, 1465, 1478, 1480, 1481, 1476,
     1519, 1494, 1496, 1478, 1507, 1502, 1504,    0, 1536,    0,
     1505, 1521, 1557, 4017, 1513, 1523, 1527, 1532, 1537, 1545,
     1570, 1571, 1554, 1567, 1579, 1580, 1583, 1585, 1588, 1598,
     1593, 1634, 1597, 1607, 1609, 1619, 1670, 1649, 1628, 1631,
     1633, 1706, 1743, 1775, 1649, 1663, 1658, 1672, 1807, 4017,
     4017, 1664, 1687, 1683, 1685, 1667, 1693, 3941, 1703, 1489,
     1556, 1428, 1557, 1568, 1447, 1720, 1604, 1711, 1070, 1683,
     1551, 1647, 1626, 1744, 1847, 1713, 1616, 3963, 1709, 1731,

     1734, 1770, 1779, 4017, 1720, 1745, 1757, 1766, 1754, 1789,
     1784,    0, 1767, 3952, 1768, 1800, 1130, 1821, 3948, 3946,
     3955, 1826, 3951, 1639, 1785, 1827, 1837, 1835, 1845, 1840,
     1843, 1849, 1846, 1860, 1855, 1864, 1865, 1861, 1873, 1874,
     1903, 1904, 3965, 1821, 4017, 1882, 1883, 1888, 1893, 1896,
     1906, 1935, 4017, 4017, 1930,    0, 3937, 3943, 3941, 3937,
     3933, 3928, 1943,    0, 1946,    0,    0, 1933, 1932, 1941,
        0, 1945, 3937, 1951, 1915, 1948, 1951, 1961, 1962, 1966,
     1963, 4017, 1712, 1979, 1662,  124, 1665, 1824, 1987, 1741,
     1967, 1989, 1822, 1991, 1885, 1992, 1971, 1993, 4017, 2009,

     2022, 3957, 2010, 1337, 2002, 1532, 2007, 1999, 2008, 2028,
     2022, 2011, 2013, 2024, 2035, 2016, 2056, 2032, 3938, 3930,
     3933, 3928, 3931, 3931, 3924, 3941, 2064, 3923, 3935, 3922,
     3916, 3926, 3912, 3915, 3843, 3827, 3830, 2049, 3806, 2044,
     2046, 2052, 2060, 2055, 2092, 2068, 2065, 2069, 2105, 2080,
     2074, 2078, 2089, 2090, 3820, 3780, 3779, 3780, 2128, 2121,
     2131, 2108, 2113, 2119, 2121, 2150, 1368, 3752, 3730, 3741,
     3728, 3725, 3704,    0, 2153,    0, 2140, 2141, 2149, 1703,
     3711, 2150, 2094, 2155, 2111, 2159, 2167, 2148, 2160, 1146,
     1738, 2186, 2162, 1952, 2178, 2201, 1936, 2187, 2191, 2184,

     2192, 2194, 3719, 3712, 2219, 2211, 2223, 1752, 1186, 2190,
     2216, 2211, 3696, 2213, 2228, 2194, 2224, 2226, 2253, 2240,
     3679, 3676, 3680, 3674, 3654, 3649, 3652, 3638,    0, 3637,
     2243, 3627, 3611, 3607, 3607, 3612, 3608, 3607, 3596, 3581,
     3580, 3568, 2232, 2242, 2238, 2278, 2279, 2256, 2260, 2290,
     2254, 2272, 2304, 3567, 3574,    0,    0, 2296, 2301, 2288,
     2283, 2292, 2286, 3560, 3563, 3555, 3537, 3514, 3523, 3506,
     3510, 2307, 2339, 2324, 3491, 2298, 2309, 2319, 2329, 2330,
     2366, 2205, 2357, 1268, 3489, 2358, 2332, 2373, 2378, 1819,
     2359, 2364, 2381, 2396, 2227, 2142, 2411, 2372, 2415, 2384,

     3481, 2400, 2398, 2437, 2406, 2415, 3480, 2357, 3491, 3490,
     3480, 2451, 3484, 3487, 3476, 2454, 3472, 3465, 3458, 3426,
     3422, 3429, 3420, 3400, 3390, 2455, 2458, 2461, 3381, 3372,
     2437, 2442, 3372, 2439, 2469, 3377, 3356, 2412, 2454, 2469,
     2466, 3347, 3337, 3327, 3325, 3328, 3321, 3322, 2505, 2484,
     2511, 2514, 2387, 2466,    0, 2499, 2501,    0, 3323, 2505,
     2475, 2513, 2524, 2516, 2554, 4017, 2296, 2193, 2401, 3312,
     2371, 2543, 3312, 3304, 2508, 2526, 2408, 1998, 2562, 2566,
     2557, 2570,    0, 2550, 2558, 3320, 2580, 2559, 2588, 3314,
     3314, 3304, 2596, 3298, 3292, 3301, 3285, 3296, 3280, 2599,

     2600, 2575, 2605, 3274, 3269, 3259, 3261, 2585, 2584, 2596,
     3220, 3210, 3208, 3207, 3207, 3208, 3187, 2625, 2633, 2594,
     3178, 3174, 2628, 2645, 2637, 2681, 2630, 2644, 3185, 2618,
     2638, 2636, 2642, 2684, 2471, 2689, 2699, 3183, 2703, 3165,
     2735, 2631, 2642, 2709, 2715, 2717, 2692, 2739, 2743, 2756,
     3189, 2755, 2760, 3182, 3169, 3147, 3161, 2759, 3157, 3119,
     3119, 3097, 3083, 2674, 3069, 2742, 2771, 4017, 3062, 2722,
     3021, 3014, 2998, 2754, 2748, 2992, 3000, 2984, 2966, 2954,
     2942, 2786, 2790, 2678, 2794, 2940, 2944, 2826, 2862, 2804,
     2808, 2816, 2832, 2814, 2770, 2802, 2820, 2851, 2867, 2877,

     2720, 2873, 2887, 2952, 2886, 2856, 2933, 2915, 2881, 2891,
     2894, 2892, 2904, 2907, 2810, 2908, 2920, 2924, 2917, 2909,
     2736, 2928, 2904, 2898, 2891, 2923, 2846, 2837, 2809, 2806,
     2794, 2801, 2782,    0, 2940, 2782, 2917, 2757, 2944, 2765,
     2744, 2738, 2920, 2921, 2741, 2720, 2705, 2684, 2822, 2823,
     2973, 2951, 2956, 3009, 2687, 2672, 2940, 2949, 3046,    0,
     2989, 2966, 2951, 2692, 2686, 2993, 2997, 2682, 3017, 2672,
     3025, 2641, 2615, 2959, 3002, 3003, 3089, 3093, 3032, 3095,
        0,    0, 2630, 2998, 3014, 2587, 3110, 2592, 2574, 3113,
     2548, 3090, 2542, 2543, 2540, 2520, 2521, 3094, 3008, 3116,

     2478, 2465, 3132, 3168, 3120, 3204, 2440, 2433, 3117, 3122,
     3241, 2410, 3124, 4017, 3129, 3160, 3176, 2393, 3184, 3200,
     3208, 2367, 3219, 3223, 3127, 3284,    0,    0, 2363, 2335,
     2324, 3136, 2297, 2266, 2256, 3152, 2253, 3156, 3159, 3288,
     2249, 3299, 3335, 2191, 2089, 3284, 3289, 3303, 3372,    0,
     2068, 3326, 3331, 3348, 2059, 3352, 3389, 2038, 2031, 2025,
     1974, 3161, 1959, 1905, 1889, 3374, 3382, 1902, 3393, 3414,
     3418, 1773, 1760, 1671, 1590, 1579, 1523, 1479, 3423, 3408,
     1194, 1089, 1082, 1026, 3171,  975, 3285, 3412,  928, 3439,
      752, 3195,  734,  629,  539,  486,  463,  107, 3367, 3427,

        0, 3444, 4017, 4017, 3455, 3463, 3471, 3479, 3487, 3495,
     3502, 3509, 3512, 3520, 3523, 3531, 3539, 3542, 3550, 3558,
     3566, 3574, 3577, 3585, 3588, 3596, 3599, 3607, 3610, 3618,
     3621, 3628, 3636, 3639, 3647, 3650, 3658, 3661, 3669, 3677,
     3680, 3688, 3691, 3699, 3702, 3705, 3713, 3721, 3724, 3727,
     3735, 3743, 3751, 3754, 3757, 3765, 3773, 3781, 3789, 3797,
     3805, 3812, 3820, 3827, 3835, 3843, 3851, 3859, 3866, 3874,
     3882, 3890, 3898, 3906, 3914, 3922, 3929, 3937, 3944, 3951
    } ;

static yyconst flex_int16_t yy_def[1181] =
    {   0,
     1105, 1105, 1104,    3, 1104,    5, 1105, 1105, 1104,    9,
     1105, 1105, 1104,   13, 1106, 1106, 1104,   17, 1104,   19,
     1104,   21, 1104,   23, 1105, 1105, 1105, 1105, 1107, 1107,
     1104, 1104, 1104, 1108, 1104, 1104, 1109, 1104, 1104, 1108,
     1110, 1111, 1112, 1112,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   47,   44,   44,   44, 1104,
     1104,   44, 1113, 1114, 1104, 1115, 1116, 1104, 1117, 1118,
     1119, 1120, 1104, 1121, 1120, 1120, 1122, 1104, 1104, 1123,
     1124, 1104, 1104, 1125, 1126, 1104, 1127, 1128, 1104, 1104,
     1104, 1104, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,

     1129, 1129, 1129, 1129, 1104, 1104, 1104, 1108, 1104, 1104,
     1109, 1130, 1104, 1104, 1104, 1109, 1104, 1104, 1104, 1110,
     1104, 1111, 1131, 1104, 1104, 1132,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44, 1112,   44,   44,
       44,   44,  138,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44, 1104, 1104, 1109, 1109, 1133,   61,   61,
       61,   61,   61,   44, 1134, 1113, 1135, 1114, 1136, 1115,
     1137, 1116, 1117, 1138, 1118, 1139, 1119, 1120, 1104, 1104,
     1140, 1120, 1120, 1122, 1104, 1104, 1141, 1123, 1142, 1124,

     1104, 1104, 1104, 1143, 1125, 1144, 1126, 1145, 1146, 1147,
     1148, 1149, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1151, 1152, 1152,  233, 1153, 1154, 1155,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44, 1156,
     1156, 1156,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44, 1104,   61,   61,   61,   61,   61,
       61,  256, 1104, 1104, 1140, 1104, 1150, 1150, 1150, 1150,

     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150,  233,  233,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44, 1156, 1156, 1156,
       44,   44, 1104, 1104,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44, 1104,   44,   44,
       44, 1104,   61,   61,   61,   61,   61,   61, 1104, 1104,
     1104,   44,   44,   44,   44,   44,   44, 1104, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150,  233,  233,   44,

       44,   44, 1104, 1104,   44,   44,   44,   44,   44,   44,
       44,  333, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
     1104, 1104, 1157, 1104, 1104,   44,   44,   44,   44,   44,
       44, 1104, 1104, 1104, 1104,  362, 1104, 1104, 1104, 1104,
     1104, 1104, 1158, 1158, 1159, 1159, 1159,   61,   61,   61,
      369, 1104, 1104, 1104, 1104,   44,   44,   44,   44,   44,
       44, 1104, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1104, 1104,

     1104, 1160, 1104, 1150, 1150,  233,  233,   44,   44, 1104,
       44,   44,   44,   44,   44,   44,   44,   44, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,   44,
       44,   44,   44,   44,   44,   44,   44,   44,  357,   44,
       44,   44,   44,   44, 1157, 1104, 1104, 1157, 1104, 1104,
      559,   44,   44,   44,   44, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1159, 1159, 1159,   61,   61,   61, 1104,
     1104,   44,   44,   44,   44,   44,   44, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,

     1150, 1150, 1160, 1160, 1104, 1104, 1104, 1150,  233,  233,
       44,   44, 1104,   44,   44,   44,   44,   44, 1104,   44,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1156, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104,   44,   44,   44, 1104, 1104,   44,   44, 1104,
       44,   44,  357, 1104, 1104,  559,  559, 1104, 1104,   44,
       44,   44,   44, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104,   61,  364,   61, 1104,   44,   44,   44,   44,   44,
       44, 1150, 1150, 1150, 1104, 1150, 1150, 1104, 1104, 1150,
     1150, 1150, 1104, 1104, 1150,  233,  233,   44,  357,   44,

     1104,   44,   44,  357,   44,   44, 1104,   44, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104,   44,   44, 1104, 1104, 1104,
       44,   44, 1104,   44, 1104, 1104, 1104,   44,   44,   44,
       44, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,   61,
     1158, 1158, 1161, 1158, 1158,   61,   61,  364, 1104,   44,
       44,   44,   44,   44, 1162, 1104, 1150, 1150, 1150, 1104,
     1150, 1104, 1104, 1104, 1150, 1150, 1150,  233, 1158, 1158,
     1163, 1158, 1158,   44,   44, 1104,  352,   44,   44, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,

     1104,   44, 1104, 1104, 1104, 1104, 1104,   44,   44,   44,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1162,  673, 1161,
     1158, 1158, 1161, 1158, 1158, 1158,   61,   61, 1104,   44,
       44,   44,   44, 1164, 1150,  395, 1150, 1104, 1104, 1104,
      233, 1163, 1163, 1158, 1158, 1158,   44, 1104, 1104, 1104,
     1165, 1104, 1104, 1166, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1167, 1104,   44, 1104, 1104, 1104, 1104,
     1104, 1104, 1104,   44,   44, 1104, 1104, 1104, 1104, 1104,
     1104, 1158, 1158, 1168, 1158, 1158, 1158, 1158, 1158, 1158,
     1158,   61,   61, 1167,   44,   44,   44, 1104, 1169, 1164,

     1150, 1104, 1104, 1170, 1104, 1104, 1171, 1104, 1104, 1104,
     1104, 1104, 1158, 1158, 1172, 1158, 1158, 1158, 1165, 1165,
      559, 1104, 1173,  561, 1166, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1167, 1167, 1104,   44, 1104, 1104, 1104,
     1104, 1104,   44,   44, 1104, 1104, 1104, 1104, 1168, 1168,
     1158, 1158, 1174, 1158, 1158, 1158,   61,   61, 1104, 1167,
       44,   44,   44, 1170, 1170, 1104, 1104, 1175, 1104, 1171,
     1104, 1104, 1104, 1104, 1172, 1172, 1158, 1158, 1176, 1158,
      921,  921, 1173,  921, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1167, 1104, 1104, 1104, 1104,   44,   44, 1104,

     1104, 1104, 1158, 1158, 1174, 1158, 1158, 1158,   61,   61,
     1104, 1011, 1177, 1104,   44, 1104, 1104, 1175, 1104, 1104,
     1104, 1104, 1158, 1158, 1176, 1158,  984,  984, 1104, 1104,
     1104, 1104, 1104, 1167, 1104, 1104, 1104, 1104,   44, 1177,
     1104, 1158, 1158, 1158, 1158,   61,   61, 1167, 1178, 1011,
     1011, 1179, 1104, 1104, 1104, 1158, 1158, 1104, 1104, 1167,
     1104, 1104, 1104, 1158, 1158,   61,   61, 1011, 1104, 1180,
     1179, 1104, 1104, 1104, 1167, 1104, 1158, 1158,  364,   61,
     1011, 1104,  561, 1167, 1158, 1158, 1158,   61, 1011, 1104,
     1167, 1158, 1158, 1011, 1167, 1011, 1167, 1011, 1167, 1011,

     1167, 1167, 1104,    0, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104
    } ;

static yyconst flex_int16_t yy_nxt[4062] =
    {   0,
     1104,  122,   33,  122,   34,   35,  203,  114,  203,   35,
     1104,  114,   60,   37,   60,   37,  113,   36,   33,  115,
       34,   35,   64,   37,   67,   35,   37,   37,   37,  122,
      119,  122,   61,   36,   62,   71,   81,   37,   32,   38,
       39,   38,   40,   35,   41,   42,   32,   35,   32,   32,
       32,   32,   32,   32,   32,   36,   43,   44,   45,   46,
       47,   48,   49,   43,   43,   50,   43,   51,   52,   43,
       53,   54,   43,   55,   56,   57,   58,   43,   59,   43,
       43,   43,   32,   32,   33,   32,   34,   35,   32,   32,
       32,   35,   32,   32,   32,   32,   32,   32,   32,   36,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   33,   37,   34,   35,
     1100,   37,   33,   35,   34,   35,   85,   37,  212,   35,
       88,   36,   33,  212,   34,   35,  105,   36,  117,   35,
      117,  118,   37,  117,  212,  117,  118,   36,  214,  229,
      591,   37,   32,   32,   65,   32,   34,   35,   32,   32,
       32,   35,   32,   32,   32,   32,   32,   32,   32,   36,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,

       66,   66,   66,   66,   66,   66,   33,  130,   34,   35,
      124,  127,  124,   35,  127,  127,   37,  127,  127,  125,
      142,   36,  161,  126,  127,   37,   32,   32,   68,   32,
       34,   35,   32,   32,   32,   35,   69,   32,   32,   32,
       32,   32,   32,   36,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       73,  162,   74,   75,  127,  212,  106,   75,   34,   35,
      163,  127,  212,   35,  113,   76,   73,  131,   74,   75,
      219,   36,  127,   75,  132,  146,   77,  133,  188,  127,

      134,   76,  220,  307,  127,   77,   32,   32,   78,   32,
       34,   35,   32,   32,   32,   35,   32,   32,   32,   79,
       32,   32,   32,   36,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       32,   82,   78,   82,   34,   35,   32,   32,   32,   35,
       32,   32,   32,   83,   32,   32,   32,   36,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   32,   32,   33,   32,   34,   35,

       32,   32,   32,   35,   32,   86,   32,   32,   32,   32,
       32,   36,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   32,   32,
       89,   32,   34,   35,   32,   32,   90,   35,   91,   92,
       32,   32,   32,   32,   32,   36,   93,   94,   93,   95,
       96,   97,   93,   93,   93,   98,   93,   99,   93,   93,
      100,  101,   93,  102,  103,  104,   93,   93,   93,   93,
       93,   93,  106,  212,   34,   35, 1099,  153,   33,   35,
       34,   35,   37,  127,  212,   35,  124,   36,  124,  212,

      127,   37,  223,   36,   33,  125,   34,   35,  238,  126,
       33,   35,  108,  109,   37,  127,  221,  109,  301,   36,
      139, 1098,  140,   37,  128,  110,   33,  127,  108,  109,
      135,  129,  141,  109,  136,  203,  111,  203,  137,  127,
      127,  110,  147,  138,  143,  111,  127,  127,  127,  127,
      144,  145,  148,  149,  154,  127,  127,  164,  155,  164,
      118,  158,  156,  127,  212,  212,  150,  127,  159,  151,
      127,  127,  152,  157, 1097,  139,  212,  174,  127,  165,
      299,  230,  127,  222,  160,  116,  166,  141,  166,  116,
      116,  116,  116,  116,  116,  167,  116,  116,  116,  168,

      116,  116,  116,  169,  170,  169,  169,  169,  169,  169,
      169,  171,  169,  169,  172,  169,  169,  173,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  116,
      116,  212,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  177,  116,  116,  116,  116,  116,  379,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  181,  116,  116,  116,  116,  116, 1096,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  186,
      116,  116,  116,  189,  192,  189,  190,  195,  192,  195,
      201,  212,  201,  212,  212,  212,  193,  117,  212,  117,

      118,  114,  202,  215,  228,  114,  217,  302,  124,  216,
      124,  218,  124,  115,  124,  315,  212,  125,  196,  116,
      116,  125,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  199,  116,  116,  116,  116,  116,  303,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  206,  116,  116,  116,  116,  116, 1085,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  210,
      116,  116,  116,  212,  127,  241,  127,  127,  224,  240,
      244,  239,  242,  127,  127,  127,  245,  246,  127,  262,
     1095,  225,  127,  127,  226,  127,  247,  227,  116,  116,

      127,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  231,  116,  116,  116,  232,  232,  232,  232,
      232,  232,  232,  232,  233,  232,  232,  232,  232,  232,
      234,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  243,  248,  127,  249,  164,  127,  164,  118,
      127,  127,  127,  127,  127,  257,  266,  127,  254,  127,
      127,  250,  251,  250,  127,  256,  212,  203,  165,  203,
      252,  255,  127,  251,  126,  127,  127,  258,  263,  127,
      259,  127,  127,  127,  275,  127,  260,  264,  127,  261,
      396,  127,  127,  127,  267,  270,  127,  268,  253,  127,

      127,  265,  269,  127,  127,  272,  127,  273,  277,  127,
      271,  127,  279,  127,  293,  127,  127,  127,  127,  274,
      127,  212,  127,  127,  127,  127,  294,  276,  127,  278,
      127,  281,  280,  212,  282,  127,  297,  127,  283,  284,
      127,  127,  212,  166,  127,  166,  212,  127,  127,  300,
     1094,  298,  167,  116,  166,  308,  166,  116,  116,  116,
      116,  116,  116,  167,  116,  116,  116,  169,  116,  116,
      116,  169,  288,  195,  169,  195,  169,  169,  169,  169,
      169,  286,  169,  169,  169,  169,  169,  169,  287,  289,
      189,  212,  189,  190,  169,  292,  212,  169,  290,  291,

      169,  212,  127,  212,  196,  212, 1093,  305,  390,  127,
      116,  116,  380,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  304,  116,  116,  116,  116,  116,
      314,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  177,  116,  116,  116,  116,  116, 1091,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      212,  116,  116,  116,  116,  116,  383,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  181,  116,
      116,  116,  116,  116,  212,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116, 1104,  116,  116,  116,

      116,  116,  494,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  186,  116,  116,  116,  116,  116,
     1090,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  212,  116,  116,  116,  116,  116,  212,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      199,  116,  116,  116,  201,  306,  201,  212,  232,  528,
      212,  529,  312,  392,  313,  212,  202,  116,  116,  317,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  384,  116,  116,  116,  116,  116,  395,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  206,

      116,  116,  116,  116,  116,  232,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116, 1089,  116,  116,
      116,  116,  116,  696,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  210,  116,  116,  116,  212,
      212,  127,  127,  320,  318,  319,  310,  321,  127,  127,
      127,  127,  309,  127,  127,  212,  322,  127,  127,  212,
      323,  311,  116,  116,  382,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  391,  116,  116,  116,
      116,  116,  212,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  231,  116,  116,  116,  116,  116,

      769,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  231,  116,  116,  116,  143,  316,  326,  127,
      127,  143,  127,  324,  327,  127,  127,  127,  325,  127,
      127,  127,  329,  331,  329,  346,  339,  127,  127,  127,
      332,  330,  127,  127,  143,  127,  127,  338,  337,  127,
      127,  212,  127,  212,  127,  127,  127,  127,  333,  334,
      333,  127,  127,  127,  341,  340,  343,  127,  127,  143,
      127,  127,  381,  608,  127,  127,  342,  127,  127,  335,
      344,  345,  350,  127,  336,  127,  127,  347,  127,  127,
      127,  351,  127,  127,  143,  127,  349,  127,  348,  351,

      127,  352,  127,  664,  127,  127,  665,  127,  127,  127,
      354,  353,  127,  143,  127,  358,  127,  358,  356,  127,
      355,  127,  127,  127,  357,  127,  127,  143,  127,  127,
      127,  360,  127,  127,  359,  127,  212,  127,  127,  169,
      127,  361,  212,  127,  169,  385,  169,  212,  364,  363,
      127,  169,  169,  169,  169,  169,  394,  169,  212,  486,
      169,  212,  169,  169,  169,  169,  169,  386,  169,  365,
      212,  169,  366,  169,  169,  212,  212,  169,  367,  387,
      169,  212,  489,  169,  232,  393,  169,  212,  388,  389,
      212,  368,  369,  370,  369,  371,  395,  232,  397,  394,

      398,  400,  401,  212,  402,  127, 1086,  406,  484,  127,
      127,  399,  127,  405,  127,  372,  127,  127,  373,  143,
      403,  374,  403,  127,  375,  127,  407,  376,  377,  404,
      127,  408,  127,  127,  410,  409,  127,  329,  127,  329,
      127,  127,  127,  127,  411,  143,  330,  143,  127,  127,
      127,  232,  127,  609, 1085,  127,  127,  127,  412,  127,
      412,  127,  425,  127,  427,  212,  127,  125,  127,  426,
      212,  212,  428,  127,  127,  433,  413,  414,  415,  416,
      417,  127,  212,  127,  418,  485,  487,  419,  496,  420,
      127,  488,  421,  422,  423,  429,  434,  424,  432,  127,

      127,  430,  848,  127,  438,  431,  127,  127,  127,  127,
      436,  435,  127, 1084,  127,  127,  127,  127,  212,  127,
      437,  127,  127,  439,  127,  440,  127,  127,  449,  127,
      212,  492,  448,  127,  127,  441,  127,  442,  127,  505,
      212,  450,  451,  127,  443,  127,  444,  445,  127,  445,
      358,  143,  358,  498,  143,  127,  143,  127,  446,  125,
      127,  212,  127,  127,  127,  538,  497,  127,  468,  127,
      447,  452,  453,  452,  539,  169,  212,  169,  169,  212,
      454,  169,  169,  455,  169,  590,  364,  469,  592,  169,
      169,  470,  169,  127,  712,  169,  127,  212,  169,  127,

      127,  169,  476,  127,  169,  480,  127,  456,  371,  456,
      371,  143,  127,  495,  127,  478,  127,  212,  477,  127,
      479,  127,  127,  127,  483,  212,  212,  212,  232,  127,
      457,  588,  493,  458,  212,  481,  459,  633,  507,  460,
      667,  512,  461,  462,  463,  490,  463,  499,  504,  127,
      508,  491,  212,  464,  499,  212,  127,  499,  212,  499,
      127,  509,  169,  127,  595,  684,  212,  127,  513,  169,
      127,  510,  169,  510,  127,  169,  465,  251,  465,  695,
      403,  127,  403,  127,  514,  466,  127,  522,  467,  404,
      516, 1083,  511,  127,  169,  127,  519,  523,  515,  127,

      524,  169,  127,  520,  169, 1082,  127,  169,  471,  371,
      471,  371,  517,  127,  127,  518,  540,  125,  127,  525,
      127,  127,  560,  526,  560,  127,  413,  414,  415,  416,
      417,  457,  527,  212,  472,  561,  212,  473,  212,  420,
      460,  598,  421,  474,  475,  527,  775,  424,  500,  535,
      501,  530,  531,  536,  541,  593,  127,  502,  542,  503,
      499,  212,  499,  127,  127,  548,  127,  546,  544,  127,
      543,  127,  127,  127,  127,  127,  127,  545,  127,  127,
      547,  127,  127,  549,  127,  127,  550,  551,  552,  127,
      127,  127,  554,  127,  127,  351,  127,  127,  553,  212,

      127,  127,  127,  127,  441,  441,  441,  441,  600,  127,
      127,  127,  127,  555,  555,  444,  444,  127,  127,  127,
      562,  563,  127, 1081,  564,  127, 1078,  556,  556,  127,
      143,  566,  127,  566,  565,  127,  452, 1077,  452,  557,
      557,  537,  127,  351,  463,  454,  463,  575,  455,  575,
      212,  169,  169,  464,  577,  578,  576,  573,  169,  169,
      169,  169,  169,  567,  169,  169,  212,  169,  579,  527,
      169,  687,  690,  169,  535,  530,  580,  127,  536,  582,
      127,  212, 1036,  584,  127,  212,  586,  127,  583,  572,
      127,  127,  127,  212,  585,  127,  587,  127,  127,  127,

      589,  212,  127,  212,  596,  212,  212,  212,  602, 1076,
      500,  606,  500,  606,  394,  601,  212,  232,  594,  603,
      597,  503,  599,  500,  607,  500,  232,  612,  127,  510,
      610,  510,  603,  841,  503,  127,  611,  127,  125,  394,
      127,  614,  127,  618,  127,  127, 1075,  127,  615,  127,
      613,  127,  127,  127,  352,  616,  617,  619,  127,  619,
      127,  127, 1074,  643,  127,  629,  629,  629,  127,  620,
     1073,  127,  640,  127,  251,  127,  641,  251,  644,  645,
      127,  127,  127,  143,  127,  127, 1072,  648,  127,  127,
      352,  127,  127,  646,  127,  646,  127,  127,  352,  651,

     1068,  649,  647,  127,  127,  127,  650,  127,  650,  127,
      127,  652,  351,  351,  127,  125,  127,  677,  127,  127,
      653,  127,  560,  127,  560,  127,  127, 1065,  127,  656,
      127,  657,  658,  661,  659,  561,  679,  127,  445,  660,
      127,  445,  127,  445,  127,  561,  662,  127,  127,  127,
      127,  566,  556,  566,  575,  127,  575,  127,  663,  169,
      169,  232,  212,  576,  557,  778,  169,  169,  169,  169,
      169,  676,  169,  169,  212,  169,  212,  672,  169,  127,
      674,  169,  673,  567,  127,  682,  127,  685,  127,  685,
      681,  127,  212,  678,  680,  127,  127,  683,  212,  686,

      212,  212,  688,  127,  688,  212,  212,  212,  212,  232,
      691,  689,  606,  395,  606,  212,  395,  394, 1064,  212,
      693,  692,  694,  127,  767,  607,  499,  394,  836,  499,
      704,  697,  499,  499,  499,  698,  499,  607,  499,  699,
      127,  212,  127,  705,  716,  127,  716,  127,  700,  127,
      702,  703,  127,  127,  124,  127,  124,  127,  706,  708,
      127,  351,  127,  125,  127,  717,  777,  127,  127,  127,
      718,  127, 1000,  726,  127,  727,  127,  731,  127,  646,
      728,  646,  728,  351, 1063,  127,  707,  732,  647,  127,
      127,  650,  127,  650, 1061,  734,  127,  658, 1060,  658,

      125,  127,  658,  455,  658,  735,  729,  735,  127,  738,
      212,  730,  127,  741,  125,  127,  835,  127,  739,  127,
      556,  127,  127,  733,  127,  556,  169,  127,  127, 1059,
      750,  740,  557,  169,  127,  760,  169,  557,  127,  169,
      751, 1104,  752,  169,  761,  127,  212,  712,  762,  753,
      169,  754,  755,  169,  755,  127,  169,  712,  127,  127,
      758,  394,  764,  756,  763,  127,  127,  765,  766,  765,
      766,  212,  212,  212,  688,  757,  688,  771,  212,  772,
      768,  772,  693,  689,  694,  212,  351,  776,  394,  558,
     1058,  499,  784,  127,  499,  127,  499,  693,  824,  694,

      394,  127,  127, 1055, 1019,  773,  499,  785,  127,  499,
      774,  499,  779,  127,  780,  212,  250,  251,  250,  143,
      127,  781,  212,  782,  783,  252,  783,  127,  251,  127,
      232,  394,  837,  787,  127,  127,  127,  143,  250,  251,
      250,  127,  127,  788,  127, 1051,  789,  252,  127,  808,
      251,  127,  334,  334,  334,  716,  800,  716,  800,  801,
      653,  801,  728,  351,  728, 1045,  127,  825,  127,  825,
      735,  127,  735,  127,  351,  127,  717, 1044,  127,  125,
      826,  718,  455,  127,  127,  212,  809,  127,  729,  802,
      127,  127,  351,  730,  127,  127, 1041,  810,  127,  831,

      901,  749,  127,  169,  127,  127,  818,  766,  818,  766,
      169,  127,  751,  169,  751,  751,  169,  751,  169,  819,
      169,  820,  212,  754,  820,  169,  754,  169,  169,  394,
      169,  169,  830,  169,  127,  821,  681,  827,  821,  828,
      212,  127,  127,  832,  772,  127,  772,  822, 1037,  127,
      822, 1036,  127,  127,  833,  765,  766,  765,  766,  604,
      127,  394, 1035,  779,  125,  779,  848,  779,  844,  779,
      773,  845,  842,  845,  782,  774,  842, 1034,  782,  847,
      143,  849,  143,  850,  846, 1031,  127,  127,  127,  853,
      851,  853,  852,  712,  127,  127,  558,  858,  854,  858,

      800,  801,  800,  801,  127,  824,  867,  866,  867,  125,
      125,  127,  874,  127,  127, 1030,  868,  127,  859,  726,
      127,  127,  875, 1029,  127,  127,  818,  766,  818,  766,
      558,  865,  127,  604,  882, 1104,  883,  869,  825,  824,
      825,  984,  844,  884,  604,  885,  888,  127,  889,  169,
      895,  826,  912,  844,  127,  755,  169,  896,  755,  169,
      755,  892,  169,  169,  893,  127,  681,  127, 1022,  821,
      169,  127,  127,  169,  127,  935,  169,  935,  127,  897,
      920,  822,  890,  971,  891,  898,  766,  898,  766,  951,
      902,  755,  903, 1019,  755,  826,  755,  966,  899,  904,

      906,  905,  906,  966,  909,  821,  909, 1008, 1007,  907,
      917, 1002,  918,  212,  910,  351,  845,  822,  845,  783,
      783,  127,  783,  939,  783,  939, 1001,  783,  127,  846,
      783,  846,  783,  868,  212,  911,  913,  981,  914,  982,
      251,  251,  251,  394,  849,  915,  849,  916,  783,  251,
      783, 1000,  251,  919,  232,  852,  922,  849,  922,  849,
      858,  853,  858,  853,  453,  923,  919,  556,  852,  924,
      854,  127,  867,  937,  867,  997,  996,  127,  127,  557,
      556,  859,  868,  127,  127,  944,  943,  882,  995,  882,
      127,  882,  557,  882,  870,  952,  949,  952,  885,  127,

      949,  961,  885,  869,  953,  890,  127,  890,  954,  890,
      821,  890,  965,  994,  821,  959,  766,  959,  960,  992,
      991,  977,  822,  962,  920,  920,  822,  888,  821,  889,
      990,  127,  821,  951,  951,  169,  755,  957,  127,  755,
      822,  755,  169,  989,  822,  169,  988,  963,  169,  127,
      821,  169,  898,  766,  898,  766,  127,  906,  169,  906,
      987,  169,  822,  888,  169,  889,  907,  958,  898,  766,
      898,  766,  755,  986,  902,  755,  902,  755,  898,  766,
      898,  766,  909,  964,  909,  905,  821,  967,  902,  967,
      902,  899,  910,  974,  499,  974,  968,  964,  822,  905,

      969,  499,  926,  910,  499,  913,  499,  913,  913,  978,
      913,  978,  924,  911,  975,  984,  916,  975,  979,  916,
      921,  917,  980,  918,  985,  917,  985,  918,  921,  922,
      783,  922,  973,  783,  783,  783,  972,  783,  923,  783,
      143,  935,  924,  935,  971,  939,  127,  939,  999,  127,
      127,  998,  952,  127,  952,  868,  127,  127,  983,  169,
      974,  953,  974,  966,  956,  954,  169, 1006,  169,  169,
      910,  955,  169,  993, 1003,  169, 1004, 1009,  169,  948,
      127, 1010, 1015,  755,  749,  947,  755,  127,  755,  681,
     1013, 1014, 1013, 1014, 1016,  127, 1017,  821,  967, 1027,

      967, 1028,  127,  499,  965,  965,  499,  968,  499,  822,
      890,  969,  891,  977,  977,  985,  946,  985,  127,  755,
      499,  453,  755,  954,  755,  127, 1020,  499, 1021,  945,
      499,  969,  499,  821, 1018,  499,  942,  127,  499, 1039,
      499,  941,  940, 1026,  127,  822,  934,  959,  766,  959,
      960,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1012,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1023, 1032, 1024, 1032,  978, 1038,  978, 1038,  783,  783,

      938,  936,  783,  979,  783,  783,  712,  980,  783,  980,
      783,  334,  334,  334,  334,  334,  334, 1040, 1014, 1040,
     1014, 1033,  983,  127,  933, 1013, 1014, 1013, 1014, 1018,
      127, 1006,  712, 1003,  125, 1004,  169, 1032, 1026, 1032,
      932,  169,  755,  169, 1046,  755,  169,  755,  169,  169,
      931,  169,  961, 1062,  169, 1062,  821, 1038,  127, 1038,
     1047, 1016, 1062, 1017, 1062,  127,  125, 1033,  822, 1003,
      499, 1004, 1092,  499, 1092,  499,  930, 1016,  755, 1017,
      929,  755,  998,  755,  928, 1053,  499, 1054,  127,  499,
      927,  499,  821,  926,  499,  127, 1092,  499, 1092,  499,

      921, 1020,  912, 1021,  822, 1042,  908, 1043,  894, 1020,
      499, 1021,  887,  499,  755,  499,  886,  755,  499,  755,
     1023,  499, 1024,  499, 1023,  881, 1024,  880,  821,  783,
      749,  879,  783,  783,  783,  878,  783,  877,  783,  876,
      822,  934, 1048,  766, 1048,  960,  934,  934,  934,  934,
      934,  934,  934,  934,  934, 1049,  934,  934,  934, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1056, 1087, 1057, 1087, 1040,
     1014, 1040, 1014,  873,  783,  167,  872,  783, 1104,  783,

     1042,  871, 1043,  169, 1048,  766, 1048,  960,  169,  755,
      169,  870,  755,  169,  755,  169, 1066,  712,  169,  864,
      863,  169,  862,  821,  861,  860, 1067, 1069, 1014, 1069,
     1014,  857, 1053,  856, 1054,  822, 1042,  855, 1043,  848,
     1070,  499,  840,  839,  499,  755,  499,  838,  755, 1053,
      755, 1054,  829, 1056,  817, 1057,  816,  815,  499,  821,
      814,  499,  783,  499,  813,  783,  812,  783, 1101,  334,
     1101,  822,  934, 1048,  766, 1048,  960,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  811,  934,  934,  934,
     1056,  807, 1057,  169, 1069, 1014, 1069, 1014,  806,  783,

      169,  169,  783,  169,  783, 1079,  169,  805,  169, 1080,
      804,  169,  803,  712,  169, 1069, 1014, 1069, 1014, 1069,
     1014, 1069, 1014,  712, 1087, 1104, 1087,  169, 1102, 1103,
     1102,  169, 1070,  167,  169, 1079,  116,  169,  169, 1088,
      169,  169,  499,  712,  169, 1048,  766, 1048,  960,  499,
      799,  798,  499,  797,  499,   32,   32,   32,   32,   32,
       32,   32,   32,   72,   72,   72,   72,   72,   72,   72,
       72,  107,  107,  107,  107,  107,  107,  107,  107,  112,
      112,  112,  112,  112,  112,  796,  112,  116,  116,  712,
      116,  116,  116,  116,  116,  120,  120,  120,  120,  120,

      120,  120,  120,  123,  712,  795,  794,  712,  793,  123,
      127,  792,  791,  127,  127,  790,  127,  176,  786,  176,
      178,  178,  770,  178,  178,  178,  178,  178,  180,  759,
      180,  182,  182,  749,  182,  182,  182,  182,  182,  183,
      183,  748,  183,  183,  183,  183,  183,  185,  747,  185,
      187,  187,  746,  187,  187,  187,  187,  187,  188,  188,
      745,  188,  188,  188,  188,  188,  191,  191,  191,  191,
      191,  191,  191,  191,  194,  194,  744,  194,  194,  194,
      194,  194,  198,  743,  198,  200,  200,  742,  200,  200,
      200,  200,  200,  205,  737,  205,  207,  207,  736,  207,

      207,  207,  207,  207,  209,  725,  209,  211,  211,  724,
      211,  211,  211,  211,  211,  213,  723,  213,  235,  235,
      235,  235,  235,  235,  235,  235,  237,  712,  237,  126,
      712,  722,  126,  126,  712,  126,  168,  168,  712,  168,
      168,  168,  168,  168,  175,  721,  175,  177,  177,  720,
      177,  177,  177,  177,  177,  179,  719,  179,  181,  181,
      712,  181,  181,  181,  181,  181,  184,  715,  184,  186,
      186,  712,  186,  186,  186,  186,  186,  295,  295,  295,
      295,  295,  295,  295,  295,  197,  714,  197,  199,  199,
      713,  199,  199,  199,  199,  199,  204,  712,  204,  206,

      206,  711,  206,  206,  206,  206,  206,  208,  710,  208,
      209,  709,  209,  210,  210,  701,  210,  210,  210,  210,
      210,  211,  211,  605,  211,  211,  211,  211,  211,  212,
      605,  212,  213,  675,  213,  231,  231,  671,  231,  231,
      231,  231,  231,  232,  232,  670,  232,  232,  232,  232,
      232,  235,  235,  235,  235,  235,  235,  235,  235,  236,
      669,  236,  237,  668,  237,  328,  328,  667,  328,  328,
      328,  328,  328,  558,  558,  558,  558,  558,  558,  558,
      558,  116,  116,  666,  116,  116,  116,  116,  116,  574,
      574,  559,  574,  574,  574,  574,  574,  604,  604,  604,

      604,  604,  604,  604,  604,  823,  823,  823,  823,  823,
      823,  823,  823,  834,  834,  834,  834,  655,  654,  834,
      843,  843,  843,  843,  843,  843,  843,  843,  900,  900,
      900,  559,  900,  642,  900,  920,  920,  920,  920,  920,
      920,  920,  920,  925,  925,  925,  925,  925,  925,  925,
      925,  934,  934,  639,  934,  934,  934,  934,  934,  950,
      950,  950,  950,  950,  950,  950,  950,  899,  899,  899,
      638,  899,  637,  899,  965,  965,  965,  965,  965,  965,
      965,  965,  970,  970,  970,  970,  970,  970,  970,  970,
      976,  976,  976,  976,  976,  976,  976,  976,  983,  983,

      983,  983,  983,  983,  983,  983, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1052, 1052, 1052, 1052,  636,  635, 1052, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1071, 1071, 1071,  634, 1071,
      633, 1071, 1070, 1070, 1070,  632, 1070,  631, 1070,  630,
      628,  627,  626,  625,  624,  623,  622,  621,  605,  581,
      573,  572,  571,  570,  569,  568,  559,  537,  534,  533,
      532,  521,  506,  482,  378,  113,  293,  362,  236,  113,
      212,  208,  204,  197,  296,  113,  184,  179,  175,  285,

      127,  236,  121,  119,  113,  113,  212,  208,  204,  197,
      184,  179,  175,  121,  113, 1104,   31, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104
    } ;

static yyconst flex_int16_t yy_chk[4062] =
    {   0,
        0,   42,    1,   42,    1,    1,   83,   36,   83,    1,
        0,   36,    4,    6,    4,   10,   40,    1,    2,   36,
        2,    2,    6,    4,   10,    2,   14,   18,    2,  122,
       40,  122,    4,    2,    4,   14,   18,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7,   20,    7,    7,
     1098,   22,   11,    7,   11,   11,   20,   24,  486,   11,
       22,    7,    8,   94,    8,    8,   24,   11,   38,    8,
       38,   38,    8,   39,  103,   39,   39,    8,   94,  103,
      486,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,   12,   45,   12,   12,
       43,   49,   43,   12,   45,   58,   12,  127,   49,   43,
       49,   12,   58,   43,  127,   12,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       15,   59,   15,   15,   59,   97,   25,   15,   25,   25,
       59,   59,  224,   25,   74,   15,   16,   46,   16,   16,
       97,   25,   51,   16,   46,   51,   16,   46,   74,   51,

       46,   16,   97,  224,   46,   16,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   26,  100,   26,   26, 1097,   55,   27,   26,
       27,   27,   26,   55,  218,   27,   44,   26,   44,   98,

       55,   26,  100,   27,   28,   44,   28,   28,  128,   44,
       29,   28,   29,   29,   28,  128,   98,   29,  218,   28,
       48, 1096,   48,   28,   44,   29,   30,   48,   30,   30,
       47,   44,   48,   30,   47,  202,   30,  202,   47,   52,
       47,   30,   52,   47,   50,   30,   52,   47,   53,   50,
       50,   50,   53,   54,   56,   53,   50,   60,   56,   60,
       60,   57,   56,   54,  216,   99,   54,   56,   57,   54,
       54,   57,   54,   56, 1095,   62,  104,   62,   57,   60,
      216,  104,   62,   99,   57,   61,   61,   62,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   64,
       64,  297,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   67,   67,  297,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   71,   71, 1094,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   73,   76,   73,   73,   79,   76,   79,
       82,   95,   82,   96,  230,  102,   76,  117,  219,  117,

      117,  110,   82,   95,  102,  110,   96,  219,  124,   95,
      124,   96,  126,  110,  126,  230,  220,  124,   79,   81,
       81,  126,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   85,   85,  220,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   88,   88, 1093,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,  101,  129,  131,  130,  133,  101,  130,
      133,  129,  131,  130,  133,  134,  134,  134,  135,  146,
     1091,  101,  134,  146,  101,  135,  135,  101,  105,  105,

      146,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  132,  136,  137,  137,  164,  141,  164,  164,
      149,  137,  132,  136,  141,  141,  149,  149,  139,  132,
      136,  138,  138,  138,  139,  140,  313,  203,  164,  203,
      138,  139,  140,  138,  138,  142,  144,  142,  147,  140,
      144,  145,  142,  144,  155,  147,  145,  148,  145,  145,
      313,  155,  147,  148,  150,  152,  150,  151,  138,  151,

      148,  148,  151,  150,  152,  153,  151,  153,  157,  154,
      152,  152,  159,  156,  190,  153,  154,  157,  159,  154,
      156,  214,  153,  158,  157,  159,  190,  156,  160,  158,
      158,  161,  160,  217,  162,  160,  214,  161,  162,  163,
      162,  163,  225,  166,  161,  166,  215,  162,  163,  217,
     1089,  215,  166,  168,  168,  225,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  169,  168,  168,
      168,  170,  171,  195,  169,  195,  172,  169,  170,  171,
      169,  170,  171,  172,  170,  171,  172,  173,  170,  172,
      189,  298,  189,  189,  173,  174,  222,  173,  173,  173,

      173,  221,  174,  307,  195,  229, 1086,  222,  307,  174,
      177,  177,  298,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  221,  177,  177,  177,  178,  178,
      229,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  181,  181, 1084,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      301,  181,  181,  181,  182,  182,  301,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  186,  186,  389,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186, 1083,  186,  186,  186,

      187,  187,  389,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  199,  199,
     1082,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  223,  199,  199,  199,  200,  200,  309,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  200,  200,  201,  223,  201,  228,  234,  417,
      590,  417,  228,  309,  228,  302,  201,  206,  206,  234,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  302,  206,  206,  206,  207,  207,  590,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  207,  207,  210,  210,  609,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210, 1081,  210,  210,
      210,  211,  211,  609,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  226,
      227,  238,  239,  240,  238,  239,  227,  241,  238,  239,
      243,  240,  226,  244,  241,  300,  243,  243,  240,  308,
      244,  227,  231,  231,  300,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  308,  231,  231,  231,
      232,  232,  684,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  233,  233,

      684,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  242,  233,  248,  245,
      246,  247,  242,  245,  249,  248,  245,  246,  246,  242,
      249,  247,  250,  253,  250,  266,  259,  249,  247,  254,
      254,  250,  253,  259,  255,  266,  254,  258,  257,  253,
      255,  504,  266,  299,  257,  258,  260,  255,  256,  256,
      256,  257,  258,  260,  261,  260,  262,  264,  262,  264,
      261,  263,  299,  504,  264,  262,  261,  261,  263,  256,
      263,  265,  270,  265,  256,  267,  256,  267,  268,  270,
      265,  271,  267,  256,  272,  268,  269,  271,  268,  274,

      269,  272,  273,  567,  271,  274,  567,  269,  272,  273,
      275,  273,  274,  276,  277,  281,  275,  281,  278,  276,
      277,  277,  278,  275,  280,  279,  276,  279,  282,  278,
      280,  283,  279,  284,  282,  282,  303,  280,  283,  286,
      284,  284,  382,  281,  287,  303,  286,  311,  287,  286,
      281,  287,  286,  288,  287,  289,  311,  287,  304,  382,
      288,  385,  289,  288,  290,  289,  288,  304,  289,  288,
      310,  290,  289,  291,  290,  305,  306,  290,  290,  304,
      291,  312,  385,  291,  316,  310,  291,  315,  305,  306,
      314,  291,  292,  292,  292,  292,  312,  317,  315,  314,

      316,  318,  319,  380,  320,  320, 1078,  324,  380,  318,
      319,  317,  320,  322,  324,  292,  318,  319,  292,  323,
      321,  292,  321,  322,  292,  323,  325,  292,  292,  321,
      322,  326,  323,  327,  331,  327,  325,  329,  326,  329,
      327,  331,  335,  325,  332,  335,  329,  336,  321,  335,
      332,  506,  336,  506, 1077,  321,  337,  332,  333,  336,
      333,  338,  337,  337,  339,  391,  339,  333,  338,  338,
      381,  383,  340,  339,  340,  343,  333,  333,  333,  333,
      333,  340,  384,  343,  333,  381,  383,  333,  391,  333,
      343,  384,  333,  333,  333,  341,  344,  333,  342,  341,

      342,  341, 1076,  344,  348,  341,  341,  342,  345,  346,
      346,  345,  347, 1075,  348,  345,  346,  349,  387,  347,
      347,  348,  351,  349,  349,  350,  353,  350,  354,  351,
      397,  387,  353,  353,  350,  352,  354,  352,  355,  397,
      393,  355,  356,  354,  352,  355,  352,  352,  356,  352,
      358,  359,  358,  393,  360,  356,  361,  359,  352,  358,
      360,  392,  361,  352,  359,  424,  392,  360,  365,  361,
      352,  357,  357,  357,  424,  365,  485,  367,  365,  487,
      357,  365,  366,  357,  367,  485,  366,  367,  487,  366,
      367,  368,  366,  372, 1074,  366,  376,  390,  368,  357,

      372,  368,  372,  376,  368,  376,  357,  362,  362,  362,
      362,  373,  374,  390,  375,  374,  373,  379,  373,  374,
      375,  375,  377,  373,  379,  388,  483,  396,  399,  377,
      362,  483,  388,  362,  386,  377,  362,  580,  399,  362,
      580,  405,  362,  362,  363,  386,  363,  394,  396,  405,
      400,  386,  591,  363,  394,  490,  405,  394,  394,  394,
      400,  401,  363,  401,  490,  591,  608,  400,  406,  363,
      401,  402,  363,  402,  406,  363,  364,  364,  364,  608,
      403,  406,  403,  409,  407,  364,  407,  415,  364,  403,
      409, 1073,  402,  407,  364,  408,  413,  415,  408,  402,

      415,  364,  408,  413,  364, 1072,  402,  364,  369,  369,
      369,  369,  410,  411,  425,  411,  425,  369,  410,  416,
      411,  425,  444,  416,  444,  410,  369,  369,  369,  369,
      369,  369,  416,  690,  369,  444,  493,  369,  488,  369,
      369,  493,  369,  369,  369,  418,  690,  369,  395,  422,
      395,  418,  418,  422,  426,  488,  426,  395,  427,  395,
      395,  395,  395,  426,  428,  433,  427,  431,  429,  430,
      428,  428,  431,  427,  429,  433,  430,  430,  432,  431,
      432,  429,  433,  434,  435,  432,  435,  436,  437,  434,
      438,  435,  439,  436,  437,  440,  434,  438,  438,  495,

      436,  437,  439,  440,  441,  442,  441,  442,  495,  439,
      440,  446,  447,  441,  442,  441,  442,  448,  446,  447,
      446,  447,  449, 1068,  448,  450, 1065,  441,  442,  449,
      449,  455,  450,  455,  450,  451,  452, 1064,  452,  441,
      442,  475,  451,  451,  463,  452,  463,  465,  452,  465,
      597,  469,  468,  463,  468,  469,  465,  475,  469,  468,
      470,  469,  468,  455,  469,  468,  594,  470,  470,  472,
      470,  594,  597,  470,  474,  472,  472,  476,  474,  476,
      477,  491, 1063,  478,  476,  497,  480,  477,  477,  474,
      478,  479,  481,  484,  479,  480,  481,  478,  479,  481,

      484,  489,  480,  492,  491,  494,  496,  498,  497, 1061,
      500,  503,  500,  503,  498,  496,  505,  778,  489,  500,
      492,  500,  494,  501,  503,  501,  507,  509,  508,  510,
      507,  510,  501,  778,  501,  508,  508,  509,  510,  505,
      512,  511,  513,  516,  509,  516, 1060,  512,  512,  513,
      510,  511,  516,  514,  513,  514,  515,  517,  511,  517,
      514,  518, 1059,  540,  515,  527,  527,  527,  518,  518,
     1058,  515,  538,  540,  527,  541,  538,  527,  541,  542,
      540,  542,  541,  543,  544,  517, 1055,  546,  542,  543,
      544,  544,  517,  545,  547,  545,  543,  546,  548,  550,

     1051,  547,  545,  551,  546,  548,  549,  552,  549,  550,
      551,  551,  553,  552,  552,  549,  550,  583,  553,  554,
      554,  545,  560,  583,  560,  553,  554, 1045,  545,  559,
      583,  559,  561,  563,  561,  560,  585,  562,  559,  562,
      585,  559,  563,  559,  562,  561,  564,  585,  564,  563,
      565,  566,  559,  566,  575,  564,  575,  565,  565,  577,
      578,  696,  588,  575,  559,  696,  577,  578,  579,  577,
      578,  582,  577,  578,  589,  579,  593,  577,  579,  582,
      579,  579,  578,  566,  584,  588,  582,  592,  586,  592,
      587,  584,  595,  584,  586,  586,  587,  589,  600,  593,

      592,  598,  596,  587,  596,  599,  601,  768,  602,  610,
      599,  596,  606,  595,  606,  596,  598,  602, 1044,  682,
      605,  600,  605,  616,  682,  606,  607,  601,  768,  605,
      616,  610,  605,  607,  605,  611,  607,  607,  607,  611,
      612,  695,  614,  617,  631,  611,  631,  612,  612,  614,
      614,  615,  611,  617,  619,  618,  619,  615,  618,  620,
      617,  643,  618,  619,  615,  631,  695,  645,  643,  620,
      631,  644, 1041,  644,  645,  645,  620,  648,  644,  646,
      647,  646,  647,  651, 1037,  648,  619,  649,  646,  649,
      651,  650,  648,  650, 1035,  652,  649,  658, 1034,  658,

      650,  652,  659,  650,  659,  653,  647,  653,  652,  660,
      767,  647,  661,  663,  653,  663,  767,  660,  661,  661,
      658,  662,  663,  650,  660,  659,  672,  676,  662, 1033,
      672,  662,  658,  672,  676,  676,  672,  659,  677,  672,
      673,  673,  673,  674,  677,  677,  687, 1031,  678,  673,
      674,  673,  673,  674,  673,  678,  674, 1030,  679,  680,
      674,  687,  680,  673,  679,  679,  680,  681,  681,  681,
      681,  683,  686,  691,  688,  673,  688,  686,  692,  689,
      683,  689,  693,  688,  693,  771,  708,  692,  691,  753,
     1029,  693,  698,  708,  693,  681,  693,  694,  753,  694,

      771,  698,  681, 1022, 1018,  689,  694,  700,  698,  694,
      689,  694,  697,  700,  697,  769,  699,  699,  699,  702,
      700,  697,  777,  697,  697,  699,  697,  703,  699,  702,
      697,  777,  769,  703,  703,  705,  702,  699,  704,  704,
      704,  738,  705,  705,  706, 1012,  706,  704,  738,  738,
      704,  706,  712,  712,  712,  716,  726,  716,  726,  727,
      731,  727,  728,  732,  728, 1008,  731,  754,  734,  754,
      735,  732,  735,  731,  734,  734,  716, 1007,  732,  735,
      754,  716,  735,  739,  726,  835,  739,  727,  728,  727,
      739,  726,  740,  728,  727,  741, 1002,  741,  740,  761,

      835, 1001,  741,  750,  761,  740,  749,  749,  749,  749,
      750,  761,  751,  750,  751,  752,  750,  752,  756,  750,
      757,  751,  775,  751,  752,  756,  752,  757,  756,  775,
      757,  756,  760,  757,  760,  751,  762,  756,  752,  757,
      776,  760,  762,  763,  772,  764,  772,  751,  997,  762,
      752,  996,  764,  763,  764,  765,  765,  765,  765,  781,
      763,  776,  995,  779,  765,  779,  994,  780,  781,  780,
      772,  782,  779,  782,  779,  772,  780,  993,  780,  784,
      785,  787,  788,  787,  782,  991,  784,  785,  788,  789,
      787,  789,  787,  989,  785,  788,  820,  793,  789,  793,

      800,  801,  800,  801,  802,  820,  803,  802,  803,  800,
      801,  802,  808,  809,  808,  988,  803,  789,  793,  810,
      809,  808,  809,  986,  789,  810,  818,  818,  818,  818,
      823,  801,  810,  842,  819,  818,  819,  803,  825,  823,
      825,  983,  842,  819,  843,  819,  824,  830,  824,  827,
      830,  825,  973,  843,  830,  824,  827,  831,  824,  827,
      824,  827,  827,  828,  828,  832,  832,  831,  972,  824,
      828,  833,  832,  828,  831,  864,  828,  864,  833,  833,
      884,  824,  826,  970,  826,  834,  834,  834,  834,  884,
      836,  826,  836,  968,  826,  826,  826,  965,  834,  836,

      837,  836,  837,  964,  839,  826,  839,  956,  955,  837,
      844,  948,  844,  837,  839,  847,  845,  826,  845,  844,
      846,  847,  844,  870,  844,  870,  947,  846,  847,  845,
      846,  846,  846,  870,  901,  839,  841,  921,  841,  921,
      848,  848,  848,  901,  849,  841,  849,  841,  841,  848,
      841,  946,  848,  849,  841,  849,  852,  850,  852,  850,
      858,  853,  858,  853,  945,  852,  850,  849,  850,  852,
      853,  866,  867,  866,  867,  942,  941,  875,  866,  849,
      850,  858,  867,  874,  875,  875,  874,  882,  940,  882,
      874,  883,  850,  883,  938,  885,  882,  885,  882,  895,

      883,  895,  883,  867,  885,  890,  895,  890,  885,  891,
      882,  891,  915,  936,  883,  894,  894,  894,  894,  933,
      932,  915,  882,  896,  949,  950,  883,  888,  890,  888,
      931,  896,  891,  949,  950,  892,  888,  892,  896,  888,
      890,  888,  892,  930,  891,  892,  929,  897,  892,  897,
      888,  893,  898,  898,  898,  898,  897,  906,  893,  906,
      928,  893,  888,  889,  893,  889,  906,  893,  899,  899,
      899,  899,  889,  927,  902,  889,  902,  889,  900,  900,
      900,  900,  909,  902,  909,  902,  889,  905,  903,  905,
      903,  900,  909,  912,  910,  912,  905,  903,  889,  903,

      905,  910,  925,  912,  910,  913,  910,  913,  914,  916,
      914,  916,  924,  909,  913,  923,  913,  914,  916,  914,
      920,  917,  916,  917,  926,  918,  926,  918,  919,  922,
      917,  922,  911,  917,  918,  917,  908,  918,  922,  918,
      937,  935,  922,  935,  907,  939,  937,  939,  944,  943,
      944,  943,  952,  937,  952,  939,  943,  944,  953,  957,
      974,  952,  974,  904,  887,  952,  957,  953,  958,  957,
      974,  886,  957,  935,  951,  958,  951,  957,  958,  881,
      963,  958,  963,  951,  880,  879,  951,  963,  951,  962,
      961,  961,  961,  961,  966,  962,  966,  951,  967,  984,

      967,  984,  962,  966,  975,  976,  966,  967,  966,  951,
      954,  967,  954,  975,  976,  985,  878,  985,  961,  954,
      969,  877,  954,  954,  954,  961,  971,  969,  971,  876,
      969,  969,  969,  954,  979,  971,  873,  999,  971,  999,
      971,  872,  871,  979,  999,  954,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  959,  959,
      977,  992,  977,  992,  978,  998,  978,  998,  980,  977,

      869,  865,  977,  978,  977,  980,  863,  978,  980,  980,
      980,  987,  987,  987,  990,  990,  990, 1000, 1000, 1000,
     1000,  992, 1005,  998,  862, 1013, 1013, 1013, 1013, 1025,
      998, 1005,  987, 1003, 1013, 1003, 1009, 1032, 1025, 1032,
      861, 1010, 1003, 1009, 1009, 1003, 1009, 1003, 1010, 1009,
      860, 1010, 1015, 1036, 1010, 1036, 1003, 1038, 1015, 1038,
     1010, 1016, 1062, 1016, 1062, 1015, 1038, 1032, 1003, 1004,
     1016, 1004, 1085, 1016, 1085, 1016,  859, 1017, 1004, 1017,
      857, 1004, 1039, 1004,  856, 1019, 1017, 1019, 1039, 1017,
      855, 1017, 1004,  854, 1019, 1039, 1092, 1019, 1092, 1019,

      851, 1020,  840, 1020, 1004, 1006,  838, 1006,  829, 1021,
     1020, 1021,  822, 1020, 1006, 1020,  821, 1006, 1021, 1006,
     1023, 1021, 1023, 1021, 1024,  817, 1024,  816, 1006, 1023,
      815,  814, 1023, 1024, 1023,  813, 1024,  812, 1024,  811,
     1006, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1026, 1087, 1026, 1087, 1040,
     1040, 1040, 1040,  807, 1026, 1087,  806, 1026, 1040, 1026,

     1042,  805, 1042, 1046, 1048, 1048, 1048, 1048, 1047, 1042,
     1046,  804, 1042, 1046, 1042, 1047, 1046,  799, 1047,  798,
      797, 1047,  796, 1042,  795,  794, 1047, 1052, 1052, 1052,
     1052,  792, 1053,  791, 1053, 1042, 1043,  790, 1043,  786,
     1052, 1053,  774,  773, 1053, 1043, 1053,  770, 1043, 1054,
     1043, 1054,  759, 1056,  748, 1056,  747,  746, 1054, 1043,
      745, 1054, 1056, 1054,  744, 1056,  743, 1056, 1099, 1099,
     1099, 1043, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049,  742, 1049, 1049, 1049,
     1057,  737, 1057, 1066, 1069, 1069, 1069, 1069,  736, 1057,

     1066, 1067, 1057, 1066, 1057, 1066, 1066,  733, 1067, 1067,
      730, 1067,  729,  725, 1067, 1070, 1070, 1070, 1070, 1071,
     1071, 1071, 1071,  724, 1079, 1079, 1079, 1080, 1100, 1100,
     1100, 1088, 1071, 1079, 1080, 1088, 1079, 1080, 1088, 1080,
     1080, 1088, 1090,  723, 1088, 1102, 1102, 1102, 1102, 1090,
      722,  721, 1090,  720, 1090, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1108,
     1108, 1108, 1108, 1108, 1108,  719, 1108, 1109, 1109,  718,
     1109, 1109, 1109, 1109, 1109, 1110, 1110, 1110, 1110, 1110,

     1110, 1110, 1110, 1111,  717,  715,  714,  713,  711, 1111,
     1112,  710,  709, 1112, 1112,  707, 1112, 1113,  701, 1113,
     1114, 1114,  685, 1114, 1114, 1114, 1114, 1114, 1115,  675,
     1115, 1116, 1116,  671, 1116, 1116, 1116, 1116, 1116, 1117,
     1117,  670, 1117, 1117, 1117, 1117, 1117, 1118,  669, 1118,
     1119, 1119,  668, 1119, 1119, 1119, 1119, 1119, 1120, 1120,
      667, 1120, 1120, 1120, 1120, 1120, 1121, 1121, 1121, 1121,
     1121, 1121, 1121, 1121, 1122, 1122,  666, 1122, 1122, 1122,
     1122, 1122, 1123,  665, 1123, 1124, 1124,  664, 1124, 1124,
     1124, 1124, 1124, 1125,  655, 1125, 1126, 1126,  654, 1126,

     1126, 1126, 1126, 1126, 1127,  642, 1127, 1128, 1128,  641,
     1128, 1128, 1128, 1128, 1128, 1129,  640, 1129, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1131,  639, 1131, 1132,
      638,  637, 1132, 1132,  636, 1132, 1133, 1133,  635, 1133,
     1133, 1133, 1133, 1133, 1134,  634, 1134, 1135, 1135,  633,
     1135, 1135, 1135, 1135, 1135, 1136,  632, 1136, 1137, 1137,
      630, 1137, 1137, 1137, 1137, 1137, 1138,  628, 1138, 1139,
     1139,  627, 1139, 1139, 1139, 1139, 1139, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1141,  626, 1141, 1142, 1142,
      625, 1142, 1142, 1142, 1142, 1142, 1143,  624, 1143, 1144,

     1144,  623, 1144, 1144, 1144, 1144, 1144, 1145,  622, 1145,
     1146,  621, 1146, 1147, 1147,  613, 1147, 1147, 1147, 1147,
     1147, 1148, 1148,  604, 1148, 1148, 1148, 1148, 1148, 1149,
      603, 1149, 1150,  581, 1150, 1151, 1151,  573, 1151, 1151,
     1151, 1151, 1151, 1152, 1152,  572, 1152, 1152, 1152, 1152,
     1152, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1154,
      571, 1154, 1155,  570, 1155, 1156, 1156,  569, 1156, 1156,
     1156, 1156, 1156, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1158, 1158,  568, 1158, 1158, 1158, 1158, 1158, 1159,
     1159,  558, 1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1162, 1162, 1162, 1162,  557,  556, 1162,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1164, 1164,
     1164,  555, 1164,  539, 1164, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1167, 1167,  537, 1167, 1167, 1167, 1167, 1167, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1169, 1169, 1169,
      536, 1169,  535, 1169, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1173, 1173,

     1173, 1173, 1173, 1173, 1173, 1173, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1175, 1175, 1175, 1175, 1175, 1175,
     1175, 1175, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1177, 1177, 1177, 1177,  534,  533, 1177, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1179, 1179, 1179,  532, 1179,
      531, 1179, 1180, 1180, 1180,  530, 1180,  529, 1180,  528,
      526,  525,  524,  523,  522,  521,  520,  519,  502,  473,
      462,  461,  460,  459,  458,  457,  443,  423,  421,  420,
      419,  414,  398,  378,  296,  295,  293,  285,  237,  235,
      213,  209,  205,  198,  196,  191,  185,  180,  176,  165,

      143,  123,  120,  118,  112,  108,   93,   87,   84,   80,
       70,   66,   63,   41,   34,   31, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104
    } ;

extern int fcodeYY_flex_debug;
int fcodeYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = yy_full_lp; /* restore orig. accepting pos. */ \
(yy_state_ptr) = yy_full_state; /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *fcodeYYtext;
#line 1 "fortrancode.l"
/******************************************************************************
 *
 * Parser for syntax hightlighting and references for Fortran90 F subset
 *
 * Copyright (C) by Anke Visser
 * based on the work of Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/**
 @todo - continutation lines not always recognized
       - merging of use-statements with same module name and different only-names
       - rename part of use-statement
       - links to interface functions 
       - references to variables
**/
#line 28 "fortrancode.l"

/*
 *	includes
 */
#include "qtbc.h"
#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <qregexp.h>
#include <qdir.h>
#include <qstringlist.h>
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "outputlist.h"
#include "util.h"
#include "membername.h"
#include "searchindex.h"
#include "defargs.h"

#define YY_NEVER_INTERACTIVE 1
#define YY_NO_TOP_STATE 1
   
//--------------------------------------------------------------------------------

/**
  data of an use-statement
*/
class UseEntry 
{
 public: 
   QCString module; // just for debug
   QStringList onlyNames;   /* entries of the ONLY-part */
};

/**
  module name -> list of ONLY/remote entries
  (module name = name of the module, which can be accessed via use-directive)
*/
class UseSDict : public SDict<UseEntry> 
{
  public:
    UseSDict() : SDict<UseEntry>(17) {}
};

/**
  Contains names of used modules and names of local variables.
*/
class Scope 
{
  public:
    QStringList useNames; //!< contains names of used modules
    QDict<void> localVars; //!< contains names of local variables

    Scope() : localVars(7, FALSE /*caseSensitive*/) {}
};

/*===================================================================*/
/* 
 *	statics
 */
  
static QCString  docBlock;                   //!< contents of all lines of a documentation block
static QCString  currentModule=0;            //!< name of the current enclosing module
static UseSDict  *useMembers= new UseSDict;  //!< info about used modules
static UseEntry  *useEntry = 0;              //!< current use statement info
static QList<Scope> scopeStack;
// static QStringList *currentUseNames= new QStringList; //! contains names of used modules of current program unit
static QCString str="";         //!> contents of fortran string

static CodeOutputInterface * g_code;

// TODO: is this still needed? if so, make it work
static QCString      g_parmType;
static QCString      g_parmName;

static const char *  g_inputString;     //!< the code fragment as text
static int	     g_inputPosition;   //!< read offset during parsing 
static int           g_inputLines;      //!< number of line in the code fragment
static int	     g_yyLineNr;        //!< current line number
static bool          g_needsTermination;
static bool          g_isFixedForm;

static bool          g_insideBody;      //!< inside subprog/program body? => create links
static const char *  g_currentFontClass;

static bool          g_exampleBlock;
static QCString      g_exampleName;
static QCString      g_exampleFile;

static FileDef *     g_sourceFileDef;
static Definition *  g_currentDefinition;
static MemberDef *   g_currentMemberDef;
static bool          g_includeCodeFragment;

static char          stringStartSymbol; // single or double quote
// count in variable declaration to filter out
//  declared from referenced names
static int 	     bracketCount = 0; 

// simplified way to know if this is fixed form
// duplicate in fortranscanner.l
static bool recognizeFixedForm(const char* contents)
{
  int column=0;
  bool skipLine=FALSE;

  for (int i=0;;i++) 
  {
    column++;

    switch(contents[i]) 
    {
      case '\n':
        column=0;
        skipLine=FALSE;
        break;
      case ' ':
        break;
      case '\000':
        return FALSE;
      case 'C':
      case 'c':
      case '*':
        if(column==1) return TRUE;
        if(skipLine) break;
        return FALSE;
      case '!':
        if(column>1 && column<7) return FALSE;
        skipLine=TRUE;
        break;
      default:
        if(skipLine) break;
        if(column==7) return TRUE;
        return FALSE;
    }
  }
  return FALSE;
}

static void endFontClass()
{
  if (g_currentFontClass)
  {
    g_code->endFontClass();
    g_currentFontClass=0;
  }
}

static void startFontClass(const char *s)
{
  endFontClass();
  g_code->startFontClass(s);
  g_currentFontClass=s;
}

static void setCurrentDoc(const QCString &name,const QCString &base,const QCString &anchor="")
{
  (void)name;
  (void)base;
  (void)anchor;
  //static bool searchEngineEnabled=Config_getBool("SEARCHENGINE");
  //if (searchEngineEnabled)
  //{
  //  Doxygen::searchIndex->setCurrentDoc(name,base,anchor);
  //}
}

static void addToSearchIndex(const char *text)
{
  (void)text;
  //static bool searchEngineEnabled=Config_getBool("SEARCHENGINE");
  //if (searchEngineEnabled)
  //{
  //  Doxygen::searchIndex->addWord(text,FALSE);
  //}
}

/*! start a new line of code, inserting a line number if g_sourceFileDef
 * is TRUE. If a definition starts at the current line, then the line
 * number is linked to the documentation of that definition.
 */
static void startCodeLine()
{
  if (g_sourceFileDef)
  {
    //QCString lineNumber,lineAnchor;
    //lineNumber.sprintf("%05d",g_yyLineNr);
    //lineAnchor.sprintf("l%05d",g_yyLineNr);
   
    Definition *d   = g_sourceFileDef->getSourceDefinition(g_yyLineNr);
    //printf("startCodeLine %d d=%s\n", g_yyLineNr,d ? d->name().data() : "<null>");
    if (!g_includeCodeFragment && d)
    {
      g_currentDefinition = d;
      g_currentMemberDef = g_sourceFileDef->getSourceMember(g_yyLineNr);
      g_insideBody = FALSE;
      g_parmType.resize(0);
      g_parmName.resize(0);
      QCString lineAnchor;
      lineAnchor.sprintf("l%05d",g_yyLineNr);
      if (g_currentMemberDef)
      {
        g_code->writeLineNumber(g_currentMemberDef->getReference(),
	                        g_currentMemberDef->getOutputFileBase(),
	                        g_currentMemberDef->anchor(),g_yyLineNr);
        setCurrentDoc(
                                g_currentMemberDef->qualifiedName(),
	                        g_sourceFileDef->getSourceFileBase(),
	                        lineAnchor);
      }
      else if (d->isLinkableInProject())
      {
        g_code->writeLineNumber(d->getReference(),
	                        d->getOutputFileBase(),
	                        0,g_yyLineNr);
        setCurrentDoc(
                                d->qualifiedName(),
	                        g_sourceFileDef->getSourceFileBase(),
	                        lineAnchor);
      }
    }
    else
    {
      g_code->writeLineNumber(0,0,0,g_yyLineNr);
    }
  }
  g_code->startCodeLine(); 
  if (g_currentFontClass)
  {
    g_code->startFontClass(g_currentFontClass);
  }
}


static void endFontClass();
static void endCodeLine()
{
  if (g_currentFontClass) { g_code->endFontClass(); }
  g_code->endCodeLine();
}

/*! write a code fragment `text' that may span multiple lines, inserting
 * line numbers for each line.
 */
static void codifyLines(char *text)
{
  //printf("codifyLines(%d,\"%s\")\n",g_yyLineNr,text);
  char *p=text,*sp=p;
  char c;
  bool done=FALSE;
  while (!done)
  {
    sp=p;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      g_code->codify(sp);
      endCodeLine();
      if (g_yyLineNr<g_inputLines) 
      {
	startCodeLine();
      }
    }
    else
    {
      g_code->codify(sp);
      done=TRUE;
    }
  }
}

static void codifyLines(QCString str)
{
  char *tmp= (char *) malloc(str.length()+1);
  strcpy(tmp, str);
  codifyLines(tmp);
  free(tmp);
}

/*! writes a link to a fragment \a text that may span multiple lines, inserting
 * line numbers for each line. If \a text contains newlines, the link will be 
 * split into multiple links with the same destination, one for each line.
 */
static void writeMultiLineCodeLink(CodeOutputInterface &ol,
                  const char *ref,const char *file,
                  const char *anchor,const char *text)
{
  bool done=FALSE;
  char *p=(char *)text;
  while (!done)
  {
    char *sp=p;
    char c;
    while ((c=*p++) && c!='\n') { }
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
      ol.writeCodeLink(ref,file,anchor,sp,0);
      endCodeLine();
      if (g_yyLineNr<g_inputLines) 
      {
	startCodeLine();
      }
    }
    else
    {
      //printf("writeCodeLink(%s,%s,%s,%s)\n",ref,file,anchor,sp);
      ol.writeCodeLink(ref,file,anchor,sp,0);
      done=TRUE;
    }
  }
}

/**
  generates dictionay entries that are used if REFERENCED_BY_RELATION ... options are set
  (e.g. the "referenced by ..." list after the function documentation) 
*/

static void addDocCrossReference(MemberDef *src, MemberDef *dst)
{
  if (dst->isTypedef() || dst->isEnumerate()) return; // don't add types
 //printf("======= addDocCrossReference src=%s,dst=%s\n",src->name().data(),dst->name().data());
  if ((Config_getBool("REFERENCED_BY_RELATION") || Config_getBool("CALLER_GRAPH")) && 
      (src->isFunction()))
  {
    dst->addSourceReferencedBy(src);
  }
  if ((Config_getBool("REFERENCES_RELATION") || Config_getBool("CALL_GRAPH")) && (src->isFunction()))
  {
    src->addSourceReferences(dst);
  }
}

//-------------------------------------------------------------------------------
/**
  searches for definition of a type
  @param tname the name of the type
  @param moduleName name of enclosing module or null, if global entry
  @param cd the entry, if found or null
  @param useDict dictionary of data of USE-statement
  @returns true, if type is found 
*/
static bool getFortranTypeDefs(const QCString &tname, const QCString &moduleName, 
                               ClassDef *&cd, UseSDict *usedict=0)
{
  if (tname.isEmpty()) return FALSE; /* empty name => nothing to link */

  //cout << "=== search for type: " << tname << endl;

  // search for type  
  if ((cd=Doxygen::classSDict->find(tname))) 
  {
    //cout << "=== type found in global module" << endl;
    return TRUE;
  }
  else if (moduleName && (cd= Doxygen::classSDict->find(moduleName+"::"+tname))) 
  {
    //cout << "=== type found in local module" << endl;
    return TRUE;
  }
  else 
  {
    UseEntry *use;
    for (UseSDict::Iterator di(*usedict); (use=di.current()); ++di)
      if ((cd= Doxygen::classSDict->find(use->module+"::"+tname))) 
      {
 	//cout << "===  type found in used module" << endl;
        return TRUE;
      }
  }

  return FALSE;
}

/**
  searches for definition of function memberName
  @param memberName the name of the function/variable
  @param moduleName name of enclosing module or null, if global entry
  @param md the entry, if found or null
  @param usedict array of data of USE-statement
  @returns true, if found 
*/
static bool getFortranDefs(const QCString &memberName, const QCString &moduleName, 
                           MemberDef *&md, UseSDict *usedict=0)
{
  if (memberName.isEmpty()) return FALSE; /* empty name => nothing to link */

  // look in local variables
  for (Scope *scope=scopeStack.last(); scope!=NULL; scope=scopeStack.prev())
  {
    if(scope->localVars.find(memberName))
      return FALSE;
  }

  // search for function
  MemberName *mn = Doxygen::functionNameSDict->find(memberName);

  if (mn) // name is known
  {
      MemberListIterator mli(*mn);
      for (mli.toFirst();(md=mli.current());++mli) // all found functions with given name
      {
        FileDef  *fd=md->getFileDef();
        GroupDef *gd=md->getGroupDef();

 //cout << "found link with same name: " << fd->fileName() << "  " <<  memberName;
 //if (md->getNamespaceDef() != 0) cout << " in namespace " << md->getNamespaceDef()->name();cout << endl;

        if ((gd && gd->isLinkable()) || (fd && fd->isLinkable()))
        {
           NamespaceDef *nspace= md->getNamespaceDef();

           if (nspace == 0) 
	   { // found function in global scope
             return TRUE;
           }
           else if (moduleName == nspace->name()) 
	   { // found in local scope
             return TRUE;
           }
           else 
	   { // else search in used modules
	     QCString moduleName= nspace->name();
	     UseEntry *ue= usedict->find(moduleName);
	     if (ue) 
	     {
               // check if only-list exists and if current entry exists is this list
	       QStringList &only= ue->onlyNames;
	       if (only.isEmpty()) 
	       {
               //cout << " found in module " << moduleName << " entry " << memberName <<  endl;
                 return TRUE; // whole module used
               }
               else
	       {
	         for ( QStringList::Iterator it = only.begin(); it != only.end(); ++it)
                 {
                   //cout << " search in only: " << moduleName << ":: " << memberName << "==" << (*it)<<  endl;
		   if (memberName == (QCString)(*it))
                     return TRUE; // found in ONLY-part of use list
	         }
	       }
             }
           }
        } // if linkable
      } // for
  }
  return FALSE;
}

/**
 gets the link to a generic procedure which depends not on the name, but on the parameter list
 @todo implementation
*/
static bool getGenericProcedureLink(const ClassDef *cd, 
                                    const char *memberText, 
				    CodeOutputInterface &ol) 
{
  (void)cd;
  (void)memberText;
  (void)ol;
  return FALSE;
}

static bool getLink(UseSDict *usedict, // dictonary with used modules
                    const char *memberText,  // exact member text
		    CodeOutputInterface &ol,
		    const char *text)
{
  MemberDef *md;
  QCString memberName= removeRedundantWhiteSpace(memberText);

  if (getFortranDefs(memberName, currentModule, md, usedict) && md->isLinkable())
  { 
    //if (md->isVariable()) return FALSE; // variables aren't handled yet	

    Definition *d = md->getOuterScope()==Doxygen::globalScope ?
	            md->getBodyDef() : md->getOuterScope();
    if (md->getGroupDef()) d = md->getGroupDef();
    if (d && d->isLinkable())
    {
      if (g_currentDefinition && g_currentMemberDef && md!=g_currentMemberDef && g_insideBody)
      { 
	addDocCrossReference(g_currentMemberDef,md); 
      }     
      ol.linkableSymbol(g_yyLineNr,md->name(),md,
	                g_currentMemberDef ? g_currentMemberDef : g_currentDefinition);
      writeMultiLineCodeLink(ol,md->getReference(),
	                        md->getOutputFileBase(),
	                        md->anchor(),
				text ? text : memberText);
      addToSearchIndex(text ? text : memberText);
      return TRUE;
    } 
  }
  return FALSE;
}


static void generateLink(CodeOutputInterface &ol, char *lname)
{
  ClassDef *cd=0;
 
  // check if lname is a linkable type or interface
  if ( (getFortranTypeDefs(lname, currentModule, cd, useMembers)) && cd->isLinkable() )
  {
    if ( (cd->compoundType() == ClassDef::Class) && // was  Entry::INTERFACE_SEC) &&
         (getGenericProcedureLink(cd, lname, ol)) ) 
    {
      //cout << "=== generic procedure resolved" << endl; 
    } 
    else 
    { // write type or interface link
      ol.linkableSymbol(g_yyLineNr, lname, cd, g_currentMemberDef?g_currentMemberDef:g_currentDefinition);
      writeMultiLineCodeLink(ol,cd->getReference(),cd->getOutputFileBase(),0,lname);
      addToSearchIndex(lname);
    }
  }
  // check for function/variable
  else if (getLink(useMembers, lname, ol, lname)) 
  {
    //cout << "=== found link for " << lname << endl;
  }
  else 
  {
    // nothing found, just write out the word
    ol.linkableSymbol(g_yyLineNr, lname, 0, g_currentMemberDef?g_currentMemberDef:g_currentDefinition);
    //startFontClass("charliteral"); //test
    codifyLines(lname);
    //endFontClass(); //test
    addToSearchIndex(lname);
  }
}

/*! counts the number of lines in the input */
static int countLines()
{
  const char *p=g_inputString;
  char c;
  int count=1;
  while ((c=*p)) 
  { 
    p++ ; 
    if (c=='\n') count++;  
  }
  if (p>g_inputString && *(p-1)!='\n') 
  { // last line does not end with a \n, so we add an extra
    // line and explicitly terminate the line after parsing.
    count++, 
    g_needsTermination=TRUE; 
  } 
  return count;
}

//----------------------------------------------------------------------------
/** start scope */
void startScope() 
{
  // fprintf(stderr, "===> startScope %s",fcodeYYtext);
  Scope *scope = new Scope;
  scopeStack.append(scope);
}

/** end scope */
void endScope() 
{
  // fprintf(stderr,"===> endScope %s",fcodeYYtext);
  if (scopeStack.isEmpty()) 
  {
    fprintf(stderr,"WARNING: fortrancode.l: stack empty!"); 
    return;
    //exit(-1);
  }

  Scope *scope = scopeStack.getLast();
  scopeStack.removeLast();
  for ( QStringList::Iterator it = scope->useNames.begin(); it != scope->useNames.end(); ++it) 
  {
    useMembers->remove(*it);
  }
  delete scope;
}

void addUse(QString moduleName) 
{
  if (!scopeStack.isEmpty())
    scopeStack.last()->useNames.append(moduleName);
}

void addLocalVar(QString varName) 
{
  if (!scopeStack.isEmpty())
    scopeStack.last()->localVars.insert(varName, (void*)1);
}

//----------------------------------------------------------------------------

/* -----------------------------------------------------------------*/
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    while( c < max_size && g_inputString[g_inputPosition] )
    {
	*buf = g_inputString[g_inputPosition++] ;
	c++; buf++;
    }
    return c;
}

/* Assume that attribute statements are almost the same as attributes. */
/* |  */
/*%option debug*/














#line 2529 "<stdout>"

#define INITIAL 0
#define Start 1
#define SubCall 2
#define FuncDef 3
#define ClassName 4
#define ClassVar 5
#define Subprog 6
#define DocBlock 7
#define Use 8
#define UseOnly 9
#define TypeDecl 10
#define Declaration 11
#define DeclContLine 12
#define Parameterlist 13
#define String 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int fcodeYYwrap (void );
#else
extern int fcodeYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( fcodeYYtext, fcodeYYleng, 1, fcodeYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( fcodeYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( fcodeYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, fcodeYYin))==0 && ferror(fcodeYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(fcodeYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int fcodeYYlex (void);

#define YY_DECL int fcodeYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after fcodeYYtext and fcodeYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( fcodeYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(fcodeYYtext[fcodeYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 691 "fortrancode.l"

 /*==================================================================*/

 /*-------- ignore ------------------------------------------------------------*/

#line 2715 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)fcodeYYalloc(YY_STATE_BUF_SIZE  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! fcodeYYin )
			fcodeYYin = stdin;

		if ( ! fcodeYYout )
			fcodeYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			fcodeYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				fcodeYY_create_buffer(fcodeYYin,YY_BUF_SIZE );
		}

		fcodeYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of fcodeYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1105 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4017 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */
YY_RULE_SETUP
#line 696 "fortrancode.l"
{ // do not search keywords, intrinsics... TODO: complete list
  					  codifyLines(fcodeYYtext);
                                        }
	YY_BREAK
/*-------- inner construct ---------------------------------------------------*/
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 701 "fortrancode.l"
{ // hightlight rest of fortran statements
   					  /* font class is defined e.g. in doxygen.css */
  					  startFontClass("keyword");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
					}
	YY_BREAK
case 3:
/* rule 3 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */
YY_RULE_SETUP
#line 707 "fortrancode.l"
{ 
  					  startFontClass("keyword");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
					}
	YY_BREAK
/*-------- use statement -------------------------------------------*/
case 4:
YY_RULE_SETUP
#line 714 "fortrancode.l"
{ 
  					  codifyLines(fcodeYYtext);
                                          yy_push_state(YY_START);
					  BEGIN(Use);     
                                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 719 "fortrancode.l"
{
  					  startFontClass("keywordflow");
  					  codifyLines(fcodeYYtext);
					  endFontClass();

					  /* append module name to use dict */
                                          useEntry = new UseEntry();
					  useEntry->module = fcodeYYtext;
                                          useMembers->append(fcodeYYtext, useEntry);
					  addUse(fcodeYYtext);
                                        }           
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 730 "fortrancode.l"
{ // TODO: rename
 					  codifyLines(fcodeYYtext);
                                          yy_push_state(YY_START);
					  BEGIN(UseOnly);     
                                        }           
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 735 "fortrancode.l"
{ codifyLines(fcodeYYtext); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 736 "fortrancode.l"
{
 					  codifyLines(fcodeYYtext);
                                          useEntry->onlyNames.append(fcodeYYtext);
                                        }   
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 740 "fortrancode.l"
{
                                          unput(*fcodeYYtext);
                                          yy_pop_state();
                                        }
	YY_BREAK
/*-------- fortran module  -----------------------------------------*/
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 746 "fortrancode.l"
{  //
					  startScope();
  					  startFontClass("keyword"); 
  					  codifyLines(fcodeYYtext);
					  endFontClass();
                                          yy_push_state(YY_START);
					  BEGIN(ClassName); 
	                                  if (!stricmp(fcodeYYtext,"module")) currentModule="module";
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 755 "fortrancode.l"
{
	                                  if (currentModule == "module") currentModule=fcodeYYtext;
					  generateLink(*g_code,fcodeYYtext);
                                          yy_pop_state();
 					}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 760 "fortrancode.l"
{ // interface may be without name
                                          yy_pop_state();
					  REJECT;
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 764 "fortrancode.l"
{ // just reset currentModule, rest is done in following rule
                                          currentModule=0;
					  REJECT;
                                        }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 768 "fortrancode.l"
{  //
                                          endScope();
 					  startFontClass("keyword"); 
  					  codifyLines(fcodeYYtext);
					  endFontClass();
                                        }
	YY_BREAK
/*-------- subprog definition -------------------------------------*/
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 776 "fortrancode.l"
{   // TYPE_SPEC is for old function style function result
   					  startFontClass("keyword");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
                                       }              
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 781 "fortrancode.l"
{  // Fortran subroutine or function found
   					  startFontClass("keyword");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
                                          yy_push_state(YY_START);
                                          BEGIN(Subprog);
                                        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 788 "fortrancode.l"
{ // subroutine/function name
                                          // fprintf(stderr, "===> start subprogram %s\n", fcodeYYtext);
					  startScope();
					  generateLink(*g_code,fcodeYYtext);
                                        }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 793 "fortrancode.l"
{ // ignore rest of line 
 					  codifyLines(fcodeYYtext);
                                        }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 796 "fortrancode.l"
{ codifyLines(fcodeYYtext);
                                          yy_pop_state();
                                        }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 799 "fortrancode.l"
{  // Fortran subroutine or function ends
                                          //cout << "===> end function " << fcodeYYtext << endl;
                                          endScope();
   					  startFontClass("keyword");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
                                        }
	YY_BREAK
/*-------- variable declaration ----------------------------------*/
case 21:
YY_RULE_SETUP
#line 807 "fortrancode.l"
{
                                          yy_push_state(YY_START);
					  BEGIN(TypeDecl);
   					  startFontClass("keywordtype");
					  g_code->codify(fcodeYYtext);
					  endFontClass();
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 814 "fortrancode.l"
{ // link type
					  g_insideBody=TRUE;
					  generateLink(*g_code,fcodeYYtext);
					  g_insideBody=FALSE;
                                        }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 819 "fortrancode.l"
{ 
					  BEGIN(Declaration);
   					  startFontClass("keywordtype");
					  g_code->codify(fcodeYYtext);
					  endFontClass();
                                        }
	YY_BREAK
case 24:
/* rule 24 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */
YY_RULE_SETUP
#line 825 "fortrancode.l"
{ 
                                          yy_push_state(YY_START);
					  BEGIN(Declaration);
   					  startFontClass("keywordtype");
					  g_code->codify(fcodeYYtext);
					  endFontClass();
                                       }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 832 "fortrancode.l"
{ 
   					  startFontClass("keywordtype");
					  g_code->codify(fcodeYYtext);
					  endFontClass();
                                       }
	YY_BREAK
case 26:
/* rule 26 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */
YY_RULE_SETUP
#line 837 "fortrancode.l"
{ //| variable deklaration
  					  startFontClass("keywordtype");
					  g_code->codify(fcodeYYtext);
					  endFontClass();
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 842 "fortrancode.l"
{ // local var
					  g_code->codify(fcodeYYtext);
					  if (g_currentMemberDef && g_currentMemberDef->isFunction())
					    addLocalVar(fcodeYYtext);
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 847 "fortrancode.l"
{ // start of array specification
					  bracketCount++;
					  g_code->codify(fcodeYYtext);
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 852 "fortrancode.l"
{ // end array specification
					  bracketCount--;
					  g_code->codify(fcodeYYtext);
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 857 "fortrancode.l"
{ // continuation line
                                          yy_push_state(YY_START);
					  BEGIN(DeclContLine);					  
 					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 861 "fortrancode.l"
{ // declaration not yet finished
                                          codifyLines(fcodeYYtext);
					  bracketCount = 0;
                                          yy_pop_state();
 				 	}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 866 "fortrancode.l"
{ // end declaration line
					  codifyLines(fcodeYYtext);
					  bracketCount = 0;
                                          yy_pop_state();
 					}
	YY_BREAK
/*-------- subprog calls  -----------------------------------------*/
case 33:
YY_RULE_SETUP
#line 874 "fortrancode.l"
{
  					  codifyLines(fcodeYYtext);
                                          yy_push_state(YY_START);
					  BEGIN(SubCall);
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 879 "fortrancode.l"
{ // subroutine call
					  g_insideBody=TRUE;
                                          generateLink(*g_code, fcodeYYtext);
					  g_insideBody=FALSE;
	                                  yy_pop_state();
                                        }
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */
YY_RULE_SETUP
#line 885 "fortrancode.l"
{ // function call
					  g_insideBody=TRUE;
                                          generateLink(*g_code, fcodeYYtext);
					  g_insideBody=FALSE;
                                        }
	YY_BREAK
/*-------- comments ---------------------------------------------------*/
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 892 "fortrancode.l"
{ // start comment line or comment block
                                          yy_push_state(YY_START);
					  BEGIN(DocBlock);
                                          docBlock=fcodeYYtext;
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 898 "fortrancode.l"
{ // contents of current comment line
                                          docBlock+=fcodeYYtext;
  					}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 901 "fortrancode.l"
{ //| comment block (next line is also comment line)
					  docBlock+=fcodeYYtext; 
   					}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 904 "fortrancode.l"
{ // comment block ends at the end of this line
 					  docBlock+=fcodeYYtext; 
                                          // remove special comment (default config)
  					  if (Config_getBool("STRIP_CODE_COMMENTS"))
					  {
					    g_yyLineNr+=((QCString)docBlock).contains('\n');
					    endCodeLine();
					    if (g_yyLineNr<g_inputLines) 
					    {
					      startCodeLine();
					    }
					  }
					  else // do not remove comment
					  {
					    startFontClass("comment");
					    codifyLines(docBlock);
					    endFontClass();
					  }
                                         yy_pop_state();
					}
	YY_BREAK
case 40:
*yy_cp = (yy_hold_char); /* undo effects of setting up fcodeYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fcodeYYtext again */
YY_RULE_SETUP
#line 925 "fortrancode.l"
{ // normal comment
					  if(YY_START == String) REJECT; // ignore in strings
  					  startFontClass("comment");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 932 "fortrancode.l"
{ // normal comment
                                          if(! g_isFixedForm) REJECT;

  					  startFontClass("comment");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
					}
	YY_BREAK
/*------ preprocessor  --------------------------------------------*/ 
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 941 "fortrancode.l"
{ startFontClass("preprocessor");
  					  codifyLines(fcodeYYtext);
					  endFontClass();
                                        }
	YY_BREAK
/*------ variable references?  -------------------------------------*/ 
case 43:
YY_RULE_SETUP
#line 947 "fortrancode.l"
{ // ignore references to elements 
					  g_code->codify(fcodeYYtext);
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 950 "fortrancode.l"
{   
  					    g_insideBody=TRUE;
                                            generateLink(*g_code, fcodeYYtext);
					    g_insideBody=FALSE;
                                        }
	YY_BREAK
/*------ strings --------------------------------------------------*/ 
case 45:
YY_RULE_SETUP
#line 956 "fortrancode.l"
{ str+=fcodeYYtext; /* ignore \\  */}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 957 "fortrancode.l"
{ str+=fcodeYYtext; /* ignore \"  */}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 959 "fortrancode.l"
{ // string ends with next quote without previous backspace 
                                          if(fcodeYYtext[0]!=stringStartSymbol) REJECT; // single vs double quote
                                          str+=fcodeYYtext;
  					  startFontClass("stringliteral");
  					  codifyLines(str);
					  endFontClass();
                                          yy_pop_state();
                                        }           
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 967 "fortrancode.l"
{str+=fcodeYYtext;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 969 "fortrancode.l"
{ /* string starts */
					  /* if(YY_START == StrIgnore) REJECT; // ignore in simple comments */
                                          yy_push_state(YY_START);
                                          stringStartSymbol=fcodeYYtext[0]; // single or double quote
                                          BEGIN(String);
					  str=fcodeYYtext;
                                        }
	YY_BREAK
/*-----------------------------------------------------------------------------*/
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 978 "fortrancode.l"
{
  					  codifyLines(fcodeYYtext); 
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 981 "fortrancode.l"
{ 
  					  g_code->codify(fcodeYYtext);
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 984 "fortrancode.l"
ECHO;
	YY_BREAK
#line 3346 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Start):
			case YY_STATE_EOF(SubCall):
			case YY_STATE_EOF(FuncDef):
			case YY_STATE_EOF(ClassName):
			case YY_STATE_EOF(ClassVar):
			case YY_STATE_EOF(Subprog):
			case YY_STATE_EOF(DocBlock):
			case YY_STATE_EOF(Use):
			case YY_STATE_EOF(UseOnly):
			case YY_STATE_EOF(TypeDecl):
			case YY_STATE_EOF(Declaration):
			case YY_STATE_EOF(DeclContLine):
			case YY_STATE_EOF(Parameterlist):
			case YY_STATE_EOF(String):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed fcodeYYin at a new source and called
			 * fcodeYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = fcodeYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( fcodeYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * fcodeYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of fcodeYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			fcodeYYrestart(fcodeYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1105 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1105 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1104);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up fcodeYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					fcodeYYrestart(fcodeYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( fcodeYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve fcodeYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void fcodeYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        fcodeYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            fcodeYY_create_buffer(fcodeYYin,YY_BUF_SIZE );
	}

	fcodeYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	fcodeYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void fcodeYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		fcodeYYpop_buffer_state();
	 *		fcodeYYpush_buffer_state(new_buffer);
     */
	fcodeYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	fcodeYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (fcodeYYwrap()) processing, but the only time this flag
	 * is looked at is after fcodeYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void fcodeYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	fcodeYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE fcodeYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) fcodeYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in fcodeYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) fcodeYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in fcodeYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	fcodeYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with fcodeYY_create_buffer()
 * 
 */
    void fcodeYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		fcodeYYfree((void *) b->yy_ch_buf  );

	fcodeYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a fcodeYYrestart() or at EOF.
 */
    static void fcodeYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	fcodeYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then fcodeYY_init_buffer was _probably_
     * called from fcodeYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void fcodeYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		fcodeYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void fcodeYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	fcodeYYensure_buffer_stack();

	/* This block is copied from fcodeYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from fcodeYY_switch_to_buffer. */
	fcodeYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void fcodeYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	fcodeYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		fcodeYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void fcodeYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)fcodeYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)fcodeYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE fcodeYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) fcodeYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in fcodeYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	fcodeYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to fcodeYYlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       fcodeYY_scan_bytes() instead.
 */
YY_BUFFER_STATE fcodeYY_scan_string (yyconst char * yystr )
{
    
	return fcodeYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to fcodeYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE fcodeYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) fcodeYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in fcodeYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = fcodeYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in fcodeYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) fcodeYYalloc(new_size  );

		else
			(yy_start_stack) = (int *) fcodeYYrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up fcodeYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		fcodeYYtext[fcodeYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = fcodeYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		fcodeYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int fcodeYYget_lineno  (void)
{
        
    return fcodeYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *fcodeYYget_in  (void)
{
        return fcodeYYin;
}

/** Get the output stream.
 * 
 */
FILE *fcodeYYget_out  (void)
{
        return fcodeYYout;
}

/** Get the length of the current token.
 * 
 */
int fcodeYYget_leng  (void)
{
        return fcodeYYleng;
}

/** Get the current token.
 * 
 */

char *fcodeYYget_text  (void)
{
        return fcodeYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void fcodeYYset_lineno (int  line_number )
{
    
    fcodeYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see fcodeYY_switch_to_buffer
 */
void fcodeYYset_in (FILE *  in_str )
{
        fcodeYYin = in_str ;
}

void fcodeYYset_out (FILE *  out_str )
{
        fcodeYYout = out_str ;
}

int fcodeYYget_debug  (void)
{
        return fcodeYY_flex_debug;
}

void fcodeYYset_debug (int  bdebug )
{
        fcodeYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from fcodeYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    fcodeYYin = stdin;
    fcodeYYout = stdout;
#else
    fcodeYYin = (FILE *) 0;
    fcodeYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * fcodeYYlex_init()
     */
    return 0;
}

/* fcodeYYlex_destroy is for both reentrant and non-reentrant scanners. */
int fcodeYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		fcodeYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		fcodeYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	fcodeYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        fcodeYYfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    fcodeYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * fcodeYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *fcodeYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *fcodeYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void fcodeYYfree (void * ptr )
{
	free( (char *) ptr );	/* see fcodeYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 984 "fortrancode.l"



/*@ ----------------------------------------------------------------------------
 */

/*===================================================================*/


void resetFortranCodeParserState() {}

void parseFortranCode(CodeOutputInterface &od,const char *className,const QCString &s, 
                  bool exBlock, const char *exName,FileDef *fd,
		  int startLine,int endLine,bool inlineFragment,
		  MemberDef *memberDef)
{
  //printf("***parseCode() exBlock=%d exName=%s fd=%p\n",exBlock,exName,fd);

  // used parameters
  (void)memberDef;
  (void)className;

  if (s.isEmpty()) return;
  g_code = &od;
  g_inputString   = s;
  g_inputPosition = 0;
  g_isFixedForm = recognizeFixedForm((const char*)s);
  g_currentFontClass = 0;
  g_needsTermination = FALSE;
  if (endLine!=-1)
    g_inputLines  = endLine+1;
  else
    g_inputLines  = countLines();

  if (startLine!=-1)
    g_yyLineNr    = startLine;
  else
    g_yyLineNr    = 1;

  g_exampleBlock  = exBlock; 
  g_exampleName   = exName;
  g_sourceFileDef = fd;
  if (exBlock && fd==0)
  {
    // create a dummy filedef for the example
    g_sourceFileDef = new FileDef("",exName);
  }
  if (g_sourceFileDef) 
  {
    setCurrentDoc(g_sourceFileDef->name(),g_sourceFileDef->getSourceFileBase());
  }
  g_currentDefinition = 0;
  g_currentMemberDef = 0;
  if (!g_exampleName.isEmpty())
  {
    g_exampleFile = convertNameToFile(g_exampleName+"-example");
  }
  g_includeCodeFragment = inlineFragment;
  startCodeLine();
  g_parmName.resize(0);
  g_parmType.resize(0);
  fcodeYYrestart( fcodeYYin );
  BEGIN( Start );
  fcodeYYlex();
  if (g_needsTermination)
  {
    endFontClass();
    g_code->endCodeLine();
  }
  if (exBlock && g_sourceFileDef)
  {
    // delete the temporary file definition used for this example
    delete g_sourceFileDef;
    g_sourceFileDef=0;
  }
  return;
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
  void fcodeYYdummy() { yy_flex_realloc(0,0); } 
}
#elif YY_FLEX_SUBMINOR_VERSION<33
#error "You seem to be using a version of flex newer than 2.5.4 but older than 2.5.33. These versions do NOT work with doxygen! Please use version <=2.5.4 or >=2.5.33 or expect things to be parsed wrongly!"
#else
extern "C" { // some bogus code to keep the compiler happy
  void fcodeYYdummy() { yy_top_state(); } 
}
#endif


