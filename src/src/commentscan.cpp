
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentScanYYrestart(commentScanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentScanYYleng;

extern FILE *commentScanYYin, *commentScanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentScanYYrestart()), so that the user can continue scanning by
	 * just pointing commentScanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentScanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentScanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentScanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentScanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentScanYYrestart (FILE *input_file  );
void commentScanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentScanYY_create_buffer (FILE *file,int size  );
void commentScanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentScanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentScanYYpop_buffer_state (void );

static void commentScanYYensure_buffer_stack (void );
static void commentScanYY_load_buffer_state (void );
static void commentScanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentScanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentScanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentScanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentScanYYalloc (yy_size_t  );
void *commentScanYYrealloc (void *,yy_size_t  );
void commentScanYYfree (void *  );

#define yy_new_buffer commentScanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentScanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentScanYYin = (FILE *) 0, *commentScanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentScanYYlineno;

int commentScanYYlineno = 1;

extern char *commentScanYYtext;
#define yytext_ptr commentScanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentScanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentScanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 164
#define YY_END_OF_BUFFER 165
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[671] =
    {   0,
      105,  105,  118,  118,  161,  161,  165,  164,   29,  164,
       28,  164,   29,  164,   29,  164,   27,   29,  164,   29,
      164,   29,  164,   21,   29,  164,   29,  164,   29,  164,
       27,   29,  164,   74,  164,   73,  164,   74,  164,   71,
       74,  164,   74,  164,   74,  164,  164,   75,  164,   95,
      164,   94,  164,   95,  164,   92,   95,  164,   95,  164,
       56,  164,   56,  164,   55,  164,   56,  164,   56,  164,
       56,  164,   52,   56,  164,   56,  164,   56,  164,   60,
      164,   59,  164,   60,  164,   57,   60,  164,   60,  164,
       60,  164,   64,  164,   63,  164,   64,  164,   61,   64,

      164,   64,  164,   64,  164,   64,  164,   56,  164,   55,
      164,   56,  164,   56,  164,   56,  164,   56,  164,   56,
      164,   83,  164,   82,  164,   83,  164,   80,   83,  164,
       83,  164,   87,  164,   86,  164,   87,  164,   87,  164,
       91,  164,   90,  164,   91,  164,   91,  164,   79,  164,
       76,  164,   79,  164,   77,   79,  164,   79,  164,   79,
      164,   43,  164,   42,  164,   43,  164,   40,   43,  164,
       43,  164,   47,  164,   47,  164,   46,  164,   47,  164,
       47,  164,   47,  164,   44,   47,  164,   47,  164,   47,
      164,   51,  164,   50,  164,   51,  164,   48,   51,  164,

       51,  164,   67,  164,  164,   65,  164,  164,   69,  164,
       70,  164,  164,  101,  164,  100,  164,   99,  101,  164,
      101,  164,  105,  108,  164,  102,  164,  105,  108,  164,
      108,  164,  108,  164,  110,  164,  109,  164,  164,  113,
      164,  113,  164,  111,  164,  113,  164,  113,  164,  118,
      122,  164,  119,  164,  122,  164,  122,  164,  122,  164,
      122,  164,  122,  164,   98,  164,   96,  164,   98,  164,
      126,  164,  124,  164,  123,  126,  164,  126,  164,  133,
      134,  164,  132,  164,  134,  164,  134,  164,  134,  164,
      136,  137,  164,  135,  164,  137,  164,  137,  164,  140,

      164,  138,  164,  140,  164,  144,  164,  142,  164,  144,
      164,  141,  144,  164,  144,  164,  147,  150,  164,  145,
      164,  148,  150,  164,  149,  150,  164,  150,  164,  150,
      164,  153,  164,  151,  164,  153,  164,  156,  164,  155,
      164,  156,  164,  154,  156,  164,  156,  164,  159,  164,
      158,  164,  159,  164,  157,  159,  164,  159,  164,   37,
       39,  164,   38,  164,   39,  164,   39,  164,  116,  164,
      115,  164,  114,  116,  164,  116,  164,   32,   33,  164,
       31,  164,   33,  164,   33,  164,  161,  163,  164,  162,
      164,  163,  164,  163,  164,  163,  164,   26,    4,   25,

       23,   20,   20,   12,   20,   12,   12,   12,   12,   12,
       18,   19,   14,   20,   21,   12,   12,   12,   12,   12,
       12,   12,   22,   71,   72,   71,   75,   92,   92,   93,
       52,   52,   54,   52,   57,   58,   57,   61,   61,   62,
       61,   80,   80,   81,   84,   85,   89,   88,   89,   77,
       78,   77,   40,   40,   40,   41,   44,   44,   45,   44,
       48,   48,   49,   65,   65,   66,   69,   68,   99,  105,
      102,  105,  107,  107,  104,  109,  112,  118,  121,  120,
       97,  123,  125,  133,  136,  139,  141,  141,  143,  147,
      146,  152,  154,  154,  157,  157,   37,  114,   32,  161,

      160,   24,    7,    1,    1,    2,   12,   12,   12,   16,
       17,   12,   12,   12,   14,    5,   12,   12,   12,   12,
       12,   12,   71,   71,   71,   52,   57,   57,   57,   61,
       61,   61,   77,   77,   77,   40,   40,   40,   40,   44,
       48,  106,   34,   35,   36,   30,  160,   11,    1,   13,
        2, 8198,   12,16390,   12,   12,   12,   12,   12, 8198,
       12,16390,   12,   12,   12,   12,   71,   57,   61,   53,
       77,   40,   40,   40,   48,  106,  128,   30, 8198, 8198,
       12,   12,   15,   12,   12,    5, 8198,   12,   12,   71,
       57,   61,   77,    3,   12,   15,   12,   12,   12,   12,

       71,   57,   61,   77,   65,  130,   12,   12,   12,   12,
       12,   71,   57,   61,   77,  129,  127,   12,   12,   12,
       12,   12,   71,   73,   94,   55,   57,   59,   61,   63,
       82,   86,   90,   76,   77,   42,   46,   50,   67,   70,
      100,  103,  110,  111,  117,  119,   96,  124,  131,  132,
      135,  138,  142,  145,  151,  155,  158,  115,   31,  162,
        9,    8,   12,   12,    5,   12,   10,   12,   12,   26
    } ;

static yyconst flex_int16_t yy_accept[936] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    6,    7,    8,    9,   11,
       13,   15,   17,   20,   22,   24,   27,   29,   31,   34,
       36,   38,   40,   43,   45,   47,   48,   50,   52,   54,

       56,   59,   61,   63,   65,   67,   69,   71,   73,   76,
       78,   80,   82,   84,   86,   89,   91,   93,   95,   97,
       99,  102,  104,  106,  108,  110,  112,  114,  116,  118,
      120,  122,  124,  126,  128,  131,  133,  135,  137,  139,
      141,  143,  145,  147,  149,  151,  153,  155,  158,  160,
      162,  164,  166,  168,  171,  173,  175,  177,  179,  181,
      183,  185,  188,  190,  192,  194,  196,  198,  201,  203,
      205,  206,  208,  209,  211,  213,  214,  216,  218,  221,
      223,  226,  228,  231,  233,  235,  237,  239,  240,  242,
      244,  246,  248,  250,  253,  255,  257,  259,  261,  263,

      265,  267,  269,  271,  273,  275,  278,  280,  283,  285,
      287,  289,  291,  294,  296,  298,  300,  302,  304,  306,
      308,  310,  312,  315,  317,  320,  322,  325,  328,  330,
      332,  334,  336,  338,  340,  342,  344,  347,  349,  351,
      353,  355,  358,  360,  363,  365,  367,  369,  371,  373,
      376,  378,  381,  383,  385,  387,  390,  392,  394,  396,
      398,  398,  399,  399,  399,  400,  400,  400,  401,  401,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  403,  404,  405,  406,  407,  408,  409,
      410,  411,  412,  413,  415,  416,  417,  418,  419,  420,

      421,  422,  423,  423,  423,  423,  424,  424,  425,  425,
      425,  425,  426,  427,  427,  428,  429,  429,  430,  430,
      430,  431,  431,  431,  431,  431,  431,  432,  432,  432,
      433,  433,  434,  434,  434,  434,  435,  435,  436,  436,
      436,  436,  437,  438,  438,  439,  439,  439,  440,  440,
      440,  441,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  443,  444,  444,  445,
      445,  445,  446,  446,  448,  448,  448,  449,  449,  450,
      450,  450,  451,  451,  451,  451,  452,  453,  454,  454,
      454,  455,  455,  456,  456,  457,  457,  457,  457,  457,

      457,  458,  458,  458,  459,  459,  460,  460,  460,  460,
      461,  462,  462,  463,  463,  464,  464,  465,  465,  466,
      466,  467,  467,  468,  468,  469,  469,  470,  470,  471,
      472,  473,  473,  474,  475,  475,  476,  476,  477,  477,
      477,  477,  477,  478,  478,  479,  480,  481,  481,  481,
      481,  482,  482,  483,  483,  484,  484,  485,  485,  485,
      485,  486,  486,  486,  487,  487,  488,  489,  489,  490,
      490,  491,  491,  492,  492,  492,  493,  493,  494,  494,
      495,  495,  495,  496,  496,  497,  497,  497,  498,  498,
      498,  499,  499,  500,  500,  500,  501,  502,  502,  502,

      502,  503,  503,  503,  503,  503,  503,  503,  504,  504,
      504,  504,  504,  505,  506,  507,  508,  509,  510,  511,
      512,  512,  513,  514,  515,  516,  517,  518,  519,  520,
      521,  522,  523,  524,  525,  525,  526,  526,  526,  526,
      527,  528,  529,  529,  530,  531,  532,  532,  533,  533,
      533,  533,  533,  533,  533,  534,  535,  535,  536,  537,
      538,  539,  540,  540,  540,  541,  541,  542,  542,  542,
      542,  542,  542,  542,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  544,  545,  546,  546,  546,

      547,  547,  548,  548,  548,  548,  549,  549,  549,  549,
      549,  549,  549,  549,  550,  551,  552,  555,  556,  556,
      557,  558,  559,  559,  560,  563,  564,  565,  566,  567,
      568,  568,  568,  569,  570,  571,  571,  571,  571,  572,
      572,  573,  574,  575,  575,  575,  576,  576,  576,  576,
      576,  576,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  580,  582,  583,  584,  585,  586,  588,
      589,  590,  591,  591,  591,  592,  593,  593,  593,  593,

      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  594,  594,  595,  595,
      595,  595,  595,  596,  597,  598,  599,  600,  601,  602,
      602,  602,  603,  604,  604,  604,  604,  605,  605,  605,
      605,  605,  605,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      606,  606,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,

      607,  607,  608,  609,  610,  611,  612,  613,  613,  613,
      614,  615,  615,  615,  615,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  617,  618,  618,
      618,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  619,  620,  621,  622,  623,
      625,  626,  627,  629,  631,  632,  633,  634,  636,  637,
      638,  639,  640,  641,  642,  643,  644,  645,  646,  646,
      646,  646,  646,  646,  646,  647,  648,  649,  650,  651,
      652,  653,  654,  655,  656,  657,  658,  659,  660,  661,

      661,  661,  662,  663,  664,  665,  666,  667,  667,  667,
      667,  667,  667,  667,  668,  669,  669,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  671,  671
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    8,    8,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   18,   18,   18,   20,    1,   21,
        1,   22,    1,   23,   24,   25,   26,   27,   28,   26,
       29,   30,   31,   26,   26,   32,   33,   26,   34,   35,
       26,   36,   26,   37,   38,   26,   26,   26,   26,   26,
       39,   40,   41,    1,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   26,   52,   53,   54,   55,
       56,   57,   26,   58,   59,   60,   61,   62,   26,   63,
       64,   26,   65,    1,   66,   67,    1,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   18,
        7,   19,   20,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,    1,   22,
        1,   23,   21,   21,   21,   21,   21,   21,   21,   21,
       24,   21,   21,   21,   25,   21,   21,   21,   21,   21,
       21,   21,   21,   21,    7,   26,   27,   28
    } ;

static yyconst flex_int16_t yy_base[1131] =
    {   0,
        0,    0,    0,   67,   83,  150, 3972, 3971,  217,    0,
      285,    0,  353,  420,  487,  554,  621,    0,  689,    0,
       67,   68,   70,   73,  757,  824,  891,    0,  959,    0,
     1027,    0, 1095,    0,   99,  106, 1163,    0,  162,  165,
     1231,    0,  123,  129,  374,  393,   75,   76, 1299,    0,
      173,  377,  441,  442,   79,   93, 1367,    0,  172,  460,
       95,   98, 1435,    0, 1503,    0,  412,  435,  499,  502,
     1571,    0,  363,  368,  508,  509, 3970, 7191, 7191,  139,
     3961, 3944,  500, 1634, 1688,  185, 1748,  379,  576, 7191,
     7191,    0,  433,  527,  797, 3961, 7191, 7191, 7191,    0,

      101,  464, 7191,  452,  580,  785, 1639, 3942,  846,  475,
      532, 7191, 7191,    0,  766,  775, 1684, 7191, 7191,    0,
      837, 1630, 1659, 1700,  865, 1742, 1763, 1771, 3941, 1796,
      599, 7191, 7191,    0,    0,  816, 7191, 7191, 3953, 1710,
     7191, 7191, 3952, 1736, 7191, 7191,    0, 1637, 1744, 1802,
     7191, 7191,    0, 1830, 1818, 7191, 1849, 1854, 1859, 1878,
     3938, 1886, 1824,  608, 7191, 7191,    0, 3941, 1890, 7191,
        0, 3940, 1894,    0, 7191, 1898, 7191, 7191,    0, 3913,
      399, 7191, 3914, 1899, 1965, 7191,    0, 3905, 7191,  138,
     7191, 3936, 3899,    0, 7191, 7191, 3923, 3926, 3890,  139,

     7191, 7191, 1907, 7191, 7191,    0, 1911,    0, 7191, 7191,
      133,  362,    0, 7191, 7191, 3893, 7191, 7191, 1922, 7191,
     7191,    0,    0, 1939,    0, 7191, 7191, 7191, 7191, 1949,
     7191, 7191, 1953, 7191, 7191,    0,  177, 3892, 7191, 7191,
        0,  190, 3891,    0, 7191, 3884, 3883, 7191, 7191,    0,
     3888,    0, 7191, 3913, 3885,    0, 7191, 7191, 3854,   70,
     1838, 1932, 3878, 3909, 7191, 3891,    0, 7191,  859, 3890,
      209, 3895,  329,  336,  514,  352,  492, 1926,  495,  498,
     3860, 3845, 7191,  521,  446, 3835, 1658, 1716, 1941, 1913,
      802, 7191, 7191,    0, 1981,  770, 1784, 1973, 1974, 1980,

     1988, 1871,  871,  604,  806, 7191, 3864, 2006, 1710, 2013,
      881, 7191, 2020, 3867, 7191,  598, 3855,  765, 3843, 2006,
     7191, 3804, 2045, 2054, 3813, 2073, 2064, 2083, 2092, 2100,
     2013, 7191, 3777, 2120, 2128,    0, 3811, 2022, 2094, 2122,
     2022, 7191, 2127, 3810, 2129, 2133, 2138, 7191, 3809, 2049,
     7191, 2148, 2179, 2187, 3795, 2206, 2214, 2233, 2241, 2260,
        0, 2279, 2283, 2298,  474,    0,    0, 2104, 7191, 3761,
     3806, 7191, 2169, 7191, 3759, 3804, 7191, 2174, 7191, 3757,
     3802, 2211, 2146, 2232, 2195, 7191, 2251, 2307, 2315,    0,
     2319, 3783, 2327, 2218, 7191, 3747, 2338, 2346, 3779, 2365,

     2373, 2392, 2400, 2419, 2253, 7191, 3744, 2424, 2438,    0,
     3778, 3774, 3766, 2272, 7191, 3728, 3764, 3729, 3762, 2291,
     7191, 3724,    0, 2354, 7191, 3723,    0, 3722, 1695, 7191,
     3734, 3723, 7191, 3755, 2358, 7191, 3709,    0, 3701, 1996,
     3744, 3743, 7191, 3695,    0, 7191, 7191, 3690, 3665, 2377,
     7191, 3073,    0, 2381, 7191, 3071,    0,   74, 3074, 3066,
        0, 3065, 2385, 7191, 3064,    0,    0, 2405, 7191, 3055,
        0, 2409, 7191, 3048, 2443, 7191, 3047,  796, 3090, 1629,
     3075, 3032, 1642, 3072, 1658, 3057, 3023,    0, 3060,  532,
        0, 3014,    0,  849, 3012,    0,    0, 3010, 3006, 3038,

     7191, 3037, 3000, 2979, 1780,  158, 1823, 7191,  558,  759,
     2982, 2980, 1928, 2429,    0, 2108, 2264, 2413, 7191, 7191,
        0, 2200, 2447, 2448,    0,    0, 2449, 2456, 2457, 2458,
     2464, 2469, 7191, 2459, 2461, 2467,    0, 2979, 2973,    0,
     7191, 2486, 2495, 2503, 2994, 2505, 2512, 2520, 3001, 2480,
     2528, 2960, 2953, 2947, 7191, 2530, 2539, 2541, 2564, 2584,
     2592, 2604, 2943, 2930,    0,    0, 2961, 2924, 2909, 2916,
     2912, 2901,    0,    0, 2894, 2885, 2883, 2884, 2875, 2868,
     2866, 2856, 2866, 2855, 2853, 2852, 2842, 2837, 2833, 2832,
        0, 2831,    0, 2826, 7191, 7191, 7191, 2785, 2813, 2113,

     2774,    0, 2772, 2764,    0, 7191, 2754, 2752, 2778, 2486,
     1635, 2746, 2730, 2227, 7191,    0, 2624, 2560, 2716, 2539,
     2546, 2572, 2702, 2691, 2746, 2730, 2731, 2736, 2697, 2684,
     2679, 2675, 2689, 2761, 7191, 2668, 2666, 2660, 2777,    0,
     2708, 2800, 2770, 2659, 2653, 2691, 2648, 2567, 2564, 2562,
     2561,    0, 2560, 2559, 2550, 2776, 2543, 2536, 2535, 2538,
     2529, 7191, 2522, 2521, 2509, 2508, 2498, 2494, 2484, 2476,
     2469, 2458, 2570, 2437, 2431, 2425, 2457, 2429, 2411,  814,
     2406, 2414,    0, 2598, 2693, 2391, 2692, 2793, 2840, 2826,
     2862, 2852, 2408, 2397, 2854, 2869, 2390, 2389, 2383, 2880,

     2919, 2378, 2372, 2370, 2353, 2353, 2352, 2351, 2345, 2344,
     2326, 2316, 2315, 2305, 2321, 1690, 2293, 2305, 2290, 2287,
     2286, 2268, 2263, 2258, 2245, 2251, 2250, 2243, 2232, 2231,
     2213, 2206, 2200, 2194, 2193, 2192, 2186, 2209, 2156, 2170,
     2160, 2148, 2873, 7191, 2720, 2885, 2909, 2893, 2915, 2160,
     2150, 2924, 2926, 2149, 2143, 2141, 2940, 2969, 2988, 2131,
     2117, 2113, 7191, 2112, 2108, 2104, 2097, 2092, 2091, 2082,
     2067, 2072, 2059, 2062, 2055, 2051, 2040, 2038, 2046, 2039,
     2037, 7191, 2031,    0,    0, 2028, 2027, 2020, 2011, 1999,
     1997, 1987, 1973, 1968, 1966, 1958, 1948, 1931, 1919, 1912,

     1901, 2794, 2956, 2960, 2974, 2980, 2979, 1905, 1903, 2985,
     2993, 1901, 1899, 1889, 3006, 1880, 1865, 1861, 1859, 1847,
     1846, 1828, 1827, 1826, 1830,    0, 1819, 1824, 1811, 1799,
     1803, 1790, 1778, 1773, 1759,    0, 7191, 7191, 1752, 1751,
     1745, 1739, 1737, 1735, 1723, 1719, 1701, 1685, 1679, 1673,
     1655, 1619, 1660, 1651, 2805, 2822, 3026, 2981, 3030, 3022,
     7191, 7191, 3028, 3033, 7191, 7191, 7191, 3040, 7191, 7191,
     7191, 7191, 7191, 7191, 7191, 7191, 7191, 7191, 1600,  825,
      825,  824,  835,  801, 7191, 7191, 7191, 7191, 7191, 7191,
     7191, 7191, 7191, 7191, 7191, 7191, 7191, 7191, 7191,  821,

      798, 7191, 7191, 3056, 3069,  152, 3073,  738,  720,  717,
      493,  469,  465, 7191, 3077,  359, 3081,  421,  407,  343,
      308,  158,  135,  350,   83,   67,   60, 1668,   17,  540,
     1685,  557, 3085, 7191, 3127, 3155, 3183, 3211, 3239, 3267,
     3295, 3323, 3351, 3379, 3407, 3435, 3463, 3491, 3519, 3547,
     3575, 3603, 3631, 3659, 3687, 3715, 3732, 3746, 3765, 3781,
     3800, 3827, 3844, 3872, 3880, 3894, 3921, 3948, 3975, 4003,
     4020, 4048, 4065, 4092, 4119, 4146, 4154, 4166, 4194, 4222,
     4250, 4267, 4275, 4302, 4329, 4356, 4383, 4391, 4405, 4413,
     4427, 4455, 4470, 4498, 4526, 4541, 4569, 4597, 4612, 4640,

     4668, 4676, 4688, 4716, 4724, 4738, 4746, 4760, 4788, 4803,
     4831, 4859, 4887, 4904, 4916, 4930, 4935, 4961, 2695, 4975,
     4999, 5024, 5041, 5058, 5086, 5100, 5121, 5148, 5175, 5202,
     5214, 5242, 5259, 5276, 5304, 5321, 5338, 5365, 5392, 5419,
     5447, 5474, 5486, 5514, 5542, 5570, 5587, 5604, 5631, 5639,
     5666, 5693, 5720, 5747, 5759, 5773, 5794, 5808, 5836, 5851,
     5879, 5907, 5928, 5943, 5971, 5999, 6014, 6042, 6070, 6082,
     6110, 6124, 6145, 6159, 6180, 6208, 6223, 6251, 6279, 2926,
     6294, 6319, 6346, 3068, 6370, 6395, 3073, 3081, 6422, 6436,
     6453, 6461, 6473, 6490, 6507, 6524, 6541, 6569, 6596, 6613,

     6630, 6657, 6684, 6711, 6723, 6731, 6745, 6753, 6765, 6793,
     6801, 6809, 3086, 6824, 6849, 3091, 6876, 6901, 6909, 6933,
     6947, 6955, 6970, 6995, 7022, 7050, 7078, 7106, 7134, 7162
    } ;

static yyconst flex_int16_t yy_def[1131] =
    {   0,
      935,  935,  934,    3,  936,  936,  937,  937,  934,    9,
      934,   11,  938,  938,  939,  939,  934,   17,  934,   19,
      940,  940,  941,  941,  942,  942,  934,   27,  934,   29,
      934,   31,  934,   33,  943,  943,  934,   37,  944,  944,
      934,   41,  945,  945,  946,  946,  947,  947,  934,   49,
      948,  948,  949,  949,  950,  950,  934,   57,  951,  951,
      952,  952,  934,   63,  934,   65,  953,  953,  953,  953,
      934,   71,  954,  954,  955,  955,  934,  934,  934,  934,
      956,  957,  958,  934,  959,  960,  961,  934,  958,  934,
      934,  962,  963,  963,  963,  964,  934,  934,  934,  965,

      966,  934,  934,  934,  934,  967,  967,  934,  968,  934,
      969,  934,  934,  970,  971,  971,  971,  934,  934,  972,
      973,  973,  973,  973,  934,  934,  974,  974,  934,  975,
      976,  934,  934,  977,  978,  934,  934,  934,  979,  934,
      934,  934,  980,  934,  934,  934,  981,  982,  982,  982,
      934,  934,  983,  984,  934,  934,  934,  934,  985,  985,
      934,  986,  934,  987,  934,  934,  988,  989,  934,  934,
      990,  991,  934,  992,  934,  934,  934,  934,  993,  934,
      994,  934,  995,  934,  934,  934,  996,  934,  934,  934,
      934,  997,  934,  998,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  999,  934, 1000,  934,  934,
      934,  934, 1001,  934,  934,  934,  934,  934,  934,  934,
      934, 1002, 1003,  934, 1004,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934, 1005, 1006,  934,  934,  934,
     1007, 1008,  934, 1009,  934,  934,  934,  934,  934, 1010,
      934, 1011,  934,  934,  934, 1012,  934,  934,  934,  934,
      934,  934,  934, 1013,  934, 1014, 1015,  934, 1016, 1014,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934, 1017, 1018, 1017, 1018, 1018, 1018, 1018,
     1018,  934,  934, 1019, 1020, 1021, 1021, 1021, 1021, 1021,

     1021, 1021,  934,  934,  934,  934, 1022, 1023, 1024, 1023,
      934,  934, 1023, 1025,  934, 1026, 1027, 1026,  934,  934,
      934,  934,  934, 1028,  934, 1028, 1029, 1030, 1028, 1029,
      934,  934,  934, 1030, 1030, 1031, 1032, 1033, 1034, 1033,
      934,  934, 1033, 1035, 1036, 1037, 1036,  934, 1035,  934,
      934, 1036,  934, 1038,  934, 1038, 1039, 1040, 1038,  934,
     1041, 1039, 1040, 1040, 1042, 1043, 1043,  934,  934,  934,
     1044,  934,  934,  934,  934, 1045,  934,  934,  934,  934,
     1046, 1047, 1048, 1047,  934,  934, 1047, 1049,  934, 1050,
     1049,  934, 1051,  934,  934,  934,  934, 1052,  934, 1052,

     1053, 1054, 1052, 1053,  934,  934,  934, 1054, 1054, 1055,
     1056, 1057, 1056,  934,  934,  934, 1058,  934, 1058,  934,
      934,  934, 1059,  934,  934,  934, 1060,  934, 1061,  934,
     1062,  934,  934, 1063,  934,  934,  934, 1064,  934,  934,
     1065, 1065,  934,  934, 1066,  934,  934,  934,  934,  934,
      934,  934, 1067,  934,  934,  934, 1068,  934,  934,  934,
     1069,  934,  934,  934,  934, 1070, 1070,  934,  934,  934,
     1071,  934,  934,  934,  934,  934,  934, 1072, 1073, 1072,
      934,  934, 1074, 1075, 1074,  934,  934, 1076,  934,  934,
     1077,  934, 1078,  934,  934, 1079, 1080,  934,  934, 1081,

      934,  934,  934,  934,  934,  934, 1082,  934,  934,  934,
      934,  934, 1083, 1083, 1084,  934, 1085, 1085,  934,  934,
     1086, 1085, 1085, 1085, 1087, 1088, 1089, 1089, 1089, 1089,
     1089, 1089,  934, 1090, 1090, 1091, 1092,  934,  934, 1093,
      934, 1094, 1094, 1095,  934, 1096, 1096, 1097, 1098,  934,
     1099,  934,  934,  934,  934, 1100, 1100, 1101, 1102, 1103,
     1104, 1104,  934,  934, 1105, 1106, 1107,  934,  934,  934,
      934,  934, 1108, 1109,  934,  934,  934,  934,  934,  934,
      934,  934,  934, 1110,  934,  934,  934,  934,  934,  934,
     1111,  934, 1112,  934,  934,  934,  934,  934,  934,  934,

      934, 1113,  934,  934, 1114,  934,  934,  934, 1115, 1115,
      934,  934,  934,  934,  934, 1116,  934, 1117, 1118, 1117,
     1117, 1117, 1119, 1120, 1120, 1120, 1120, 1120, 1120, 1121,
      934,  934, 1095, 1097,  934,  934,  934,  934, 1101, 1122,
     1102, 1102, 1103,  934,  934, 1107,  934,  934,  934,  934,
      934, 1109,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934, 1123,  934,  934,  934,
      934,  934, 1124, 1124, 1117,  934, 1117, 1120, 1119, 1120,
     1120, 1121,  934,  934, 1095, 1097,  934,  934,  934, 1101,

     1125,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934, 1126,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934, 1123,  934,  934,
      934,  934, 1117,  934, 1117, 1120, 1120, 1120, 1121,  934,
      934, 1095, 1097,  934,  934,  934, 1101, 1125, 1125,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934, 1127, 1128,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934, 1117, 1117, 1120, 1120, 1120, 1121,  934,  934, 1095,
     1097,  934,  934,  934, 1101,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934, 1129,  934,  934,  934,  934,
      934,  934,  934,  934,  934, 1130,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934, 1117, 1117, 1120, 1120, 1120, 1121,
      934,  934, 1095, 1097,  934,  934,  934, 1101,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934, 1117,  934, 1119, 1120,  934,  934,  934,
      934,  934,  934,  934, 1117, 1119, 1120,  934,  934,  934,
      934,  934,  934, 1119,  934,  934,  934, 1119,  934, 1119,
     1119, 1119, 1119,    0,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934
    } ;

static yyconst flex_int16_t yy_nxt[7260] =
    {   0,
       79,   79,   80,   79,   79,   79,   81,   79,   79,   79,
       79,   79,   82,   79,   82,   83,   79,   82,   82,   79,
       84,   79,   85,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   79,   87,
       79,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   79,   79,   79,   79,   88,  138,
      138,   88,  142,  139,  139,  142,  143,  202,  202,  143,
      826,  218,   89,   90,   90,   91,   90,   90,   90,   92,
       90,   90,   90,   90,   90,  218,   90,  232,   90,   94,

      232,  175,   94,   90,   90,   90,  140,  140,  175,  144,
       78,  498,  144,  826,  203,  203,  317,   78,  219,  929,
      319,   90,   95,   90,  190,  191,  582,  190,  583,  192,
      190,  191,  219,  190,  233,  192,  497,  233,  176,  440,
      261,  262,  440,  261,  441,  176,  826,   90,   90,   90,
       90,   90,   91,   90,   90,   90,   92,   90,   90,   90,
       90,   90,  193,   90,  182,   90,   94,  182,  193,   94,
       90,   90,   90,  183,  226,  209,  183,  210,  263,  458,
      449,  227,  228,  459,  184,  448,  505,  184,   90,   95,
       90,  934,  479,  916,  229,  211,  481,  266,  826,  266,

      266,  185,  266,  266,  185,  484,  505,  267,  927,  486,
      501,  230,  212,  501,   90,   90,   90,   98,   98,   99,
       98,   98,   98,   98,   98,  100,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,   98,  102,   98,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,   98,   98,   98,  101,  103,  104,  105,  104,  104,
      103,  103,  103,  106,  103,  103,  103,  103,  103,  103,

      107,  103,  103,  103,  108,  103,  103,  103,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  103,  110,  103,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  103,
      103,  111,  109,  112,  112,  113,  112,  112,  112,  114,
      112,  112,  112,  112,  112,  253,  112,  505,  112,  116,
      253,  826,  116,  112,  112,  112,  195,  254,  196,  209,
      303,  210,  254,  303,  506,  197,  503,  504,  505,  526,
      198,  112,  117,  112,  304,  195,  199,  196,  526,  211,

      928,  430,  255,  460,  197,  506,  826,  255,  458,  198,
      431,  924,  459,  200,  245,  199,  212,  112,  112,  112,
      112,  112,  113,  112,  112,  112,  114,  112,  112,  112,
      112,  112,  200,  112,  246,  112,  116,  245,  432,  116,
      112,  112,  112,  214,  214,  215,  215,  516,  309,  310,
      516,  246,  310,  323,  323,  323,  323,  246,  112,  117,
      112,  926,  226,  215,  215,  320,  321,  324,  320,  227,
      228,  325,  310,  925,  246,  550,  331,  332,  550,  331,
      216,  216,  229,  361,  112,  112,  112,  118,  118,  119,
      118,  118,  118,  120,  118,  118,  118,  118,  118,  230,

      118,  245,  118,  122,  245,  322,  122,  123,  118,  118,
      257,  257,  266,  268,  266,  269,  333,  923,  510,  258,
      258,  247,  267,  505,  247,  118,  124,  118,  922,  505,
      259,  259,  505,  334,  334,  334,  334,  510,  247,  271,
      335,  247,  934,  310,  505,  921,  310,  260,  260,  505,
      505,  118,  118,  118,  118,  118,  119,  118,  118,  118,
      120,  118,  118,  118,  118,  118,  310,  118,  514,  118,
      122,  505,  596,  122,  123,  118,  118,  305,  306,  526,
      305,  323,  323,  323,  323,  505,  931,  515,  266,  268,
      266,  269,  118,  124,  118,  324,  526,  597,  267,  325,

      363,  363,  363,  363,  505,  305,  306,  364,  305,  408,
      408,  408,  408,  317,  933,  271,  409,  319,  118,  118,
      118,  103,  125,  126,  125,  125,  103,  103,  103,  127,
      103,  103,  103,  103,  103,  103,  128,  103,  103,  103,
      129,  103,  103,  103,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  103,
      110,  103,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  103,  103,  131,  130,  132,
      132,  133,  132,  132,  132,  132,  132,  134,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  132,  136,  132,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  132,  132,  132,  135,  145,  145,  146,
      145,  145,  145,  147,  145,  145,  145,  145,  145,  920,
      145,  516,  145,  149,  516,  919,  149,  145,  145,  145,
      317,  339,  340,  611,  319,  340,  323,  323,  323,  323,
      934,  340,  918,  326,  340,  145,  150,  145,  311,  312,

      324,  311,  611,  516,  325,  340,  516,  305,  306,  526,
      305,  479,  934,  310,  340,  481,  310,  368,  369,  902,
      368,  145,  145,  145,  145,  145,  146,  145,  145,  145,
      147,  145,  145,  145,  145,  145,  310,  145,  313,  145,
      149,  505,  914,  149,  145,  145,  145,  323,  323,  323,
      323,  328,  346,  347,  599,  913,  347,  370,  348,  524,
      505,  324,  145,  150,  145,  325,  353,  353,  353,  353,
      600,  266,  303,  266,  269,  303,  347,  912,  911,  910,
      354,  267,  311,  312,  355,  311,  304,  909,  145,  145,
      145,  151,  151,  152,  151,  151,  151,  151,  151,  153,

      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  151,
      155,  151,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  151,  151,  151,  154,  156,
      157,  158,  157,  157,  156,  156,  156,  159,  156,  156,
      156,  156,  156,  156,  160,  156,  156,  156,  161,  156,
      156,  156,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  156,  163,  156,

      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  156,  156,  164,  162,  165,  165,  166,
      165,  165,  165,  165,  165,  167,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  165,  169,  165,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  165,  165,  165,  168,   78,   78,  170,   78,   78,

       78,   78,   78,  171,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,   78,  173,   78,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,   78,
       78,   78,  172,  177,  177,  178,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

      179,  177,  180,  177,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  177,  177,  177,
      179,   78,   78,  186,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,   78,
      188,   78,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,   78,   78,   78,  187,  204,

      204,  205,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  204,  207,  204,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  204,  204,  204,  206,  220,  220,  221,
      220,  220,  220,  220,  220,  222,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      223,  223,  223,  223,  223,  220,  224,  220,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  220,  220,  220,  223,  234,  234,  235,  234,  234,
      234,  234,  234,  236,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  234,  238,  234,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  234,

      234,  234,  237,  239,  239,  240,  239,  239,  239,  239,
      239,  241,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  239,  243,  239,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  239,  239,  239,
      242,  248,  248,  249,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  250,  250,  250,  250,  250,  250,

      250,  250,  250,  250,  250,  250,  250,  250,  250,  248,
      251,  248,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  248,  248,  248,  250,  272,
      329,  329,  329,  329,  479,  934,  347,  326,  481,  347,
      273,  934,  383,  384,  324,  908,  384,  484,  325,  516,
      274,  486,  516,  275,  276,  349,  680,  277,  278,  347,
      279,  280,  903,  484,  934,  347,  384,  486,  347,  274,
      934,  902,  901,  275,  276,  341,  342,  680,  341,  277,
      278,  281,  282,  279,  280,  283,  283,  430,  347,  934,

      340,  350,  351,  340,  350,  328,  431,  526,  283,  283,
      284,  373,  374,  900,  373,  934,  347,  516,  517,  347,
      516,  934,  930,  340,  526,  343,  535,  286,  932,  535,
      262,  287,  774,  288,  432,  289,  899,  378,  379,  347,
      378,  352,  898,  353,  353,  353,  353,  290,  775,  535,
      291,  375,  292,  293,  294,  283,  283,  354,  897,  934,
      384,  355,  518,  384,  353,  353,  353,  353,  283,  283,
      286,  356,  359,  359,  359,  359,  896,  380,  354,  356,
      895,  507,  355,  384,  507,  516,  354,  284,  516,  297,
      355,  298,  894,  299,  893,  300,  892,  360,  353,  353,

      360,  508,  891,  385,  386,  361,  385,  301,  890,  889,
      302,  354,  292,  293,  294,  355,  887,  934,  384,  394,
      395,  384,  394,  526,  610,  405,  406,  610,  405,  358,
      886,  389,  389,  389,  389,  885,  527,  358,  390,  261,
      262,  384,  261,  387,  508,  884,  883,  391,  391,  392,
      397,  397,  397,  397,  882,  397,  397,  397,  397,  396,
      397,  397,  397,  397,  398,  407,  881,  400,  399,  398,
      880,  879,  516,  399,  398,  516,  826,  263,  399,  403,
      403,  403,  403,  877,  876,  875,  400,  397,  397,  397,
      397,  414,  415,  398,  414,  420,  421,  399,  420,  424,

      425,  398,  424,  874,  873,  399,  433,  433,  450,  451,
      526,  450,  454,  455,  516,  454,  872,  516,  871,  433,
      433,  434,  870,  463,  464,  402,  463,  507,  532,  614,
      507,  416,  614,  261,  262,  422,  261,  869,  433,  426,
      468,  469,  516,  468,  402,  516,  867,  508,  452,  519,
      472,  473,  456,  472,  475,  476,  866,  475,  865,  522,
      862,  509,  861,  465,  854,  433,  435,  436,  523,  435,
      853,  263,  433,  433,  516,  516,  852,  516,  516,  520,
      470,  516,  851,  509,  516,  433,  433,  433,  519,  516,
      474,  850,  516,  266,  477,  266,  266,  440,  266,  266,

      440,  849,  441,  267,  434,  521,  437,  320,  321,  848,
      320,  847,  526,  526,  331,  332,  846,  331,  520,  526,
      529,  309,  310,  341,  342,  310,  341,  526,  934,  310,
      845,  433,  310,  528,  530,  309,  310,  339,  340,  310,
      844,  340,  843,  531,  521,  310,  323,  323,  323,  323,
      350,  351,  310,  350,  842,  329,  329,  329,  329,  310,
      324,  340,  326,  841,  325,  323,  323,  323,  323,  324,
      840,  839,  536,  325,  934,  934,  934,  934,  836,  324,
      835,  934,  834,  325,  334,  334,  334,  334,  934,  833,
      832,  335,  934,  329,  329,  329,  329,  831,  830,  826,

      326,  323,  323,  323,  323,  368,  369,  324,  368,  516,
      543,  325,  516,  543,  673,  324,  829,  673,  828,  325,
      328,  334,  334,  334,  334,  827,  826,  825,  335,  934,
      934,  934,  934,  543,  824,  823,  934,  934,  340,  934,
      822,  340,  339,  340,  346,  347,  340,  821,  347,  547,
      348,  820,  547,  934,  347,  819,  818,  347,  328,  934,
      817,  340,  557,  346,  347,  557,  340,  347,  347,  348,
      373,  374,  547,  373,  816,  378,  379,  347,  378,  544,
      353,  353,  353,  353,  814,  557,  813,  347,  359,  359,
      359,  359,  812,  809,  354,  356,  385,  386,  355,  385,

      548,  516,  354,  808,  516,  801,  355,  934,  934,  934,
      934,  800,  799,  798,  934,  360,  353,  353,  360,  394,
      395,  934,  394,  361,  605,  934,  383,  384,  614,  354,
      384,  614,  797,  355,  363,  363,  363,  363,  796,  795,
      794,  364,  359,  359,  359,  359,  793,  934,  384,  356,
      384,  384,  792,  358,  405,  406,  354,  405,  620,  791,
      355,  360,  353,  353,  360,  516,  383,  384,  516,  361,
      384,  384,  934,  414,  415,  354,  414,  790,  789,  355,
      360,  353,  353,  360,  363,  363,  363,  363,  361,  788,
      384,  364,  420,  421,  354,  420,  787,  786,  355,  934,

      934,  934,  934,  558,  785,  784,  934,  358,  389,  389,
      389,  389,  617,  783,  781,  390,  389,  389,  389,  389,
      389,  389,  389,  389,  391,  391,  392,  390,  389,  389,
      389,  389,  780,  779,  392,  390,  391,  391,  392,  397,
      397,  397,  397,  778,  561,  561,  392,  403,  403,  403,
      403,  777,  776,  398,  400,  424,  425,  399,  424,  435,
      436,  398,  435,  773,  772,  399,  934,  934,  934,  934,
      771,  770,  769,  934,  397,  397,  397,  397,  450,  451,
      934,  450,  454,  455,  934,  454,  463,  464,  398,  463,
      768,  767,  399,  408,  408,  408,  408,  766,  765,  764,

      409,  403,  403,  403,  403,  763,  468,  469,  400,  468,
      472,  473,  402,  472,  516,  398,  762,  516,  761,  399,
      397,  397,  397,  397,  760,  408,  408,  408,  408,  756,
      614,  934,  409,  614,  398,  755,  754,  615,  399,  934,
      934,  934,  934,  751,  475,  476,  934,  475,  516,  516,
      516,  516,  516,  516,  750,  744,  742,  516,  516,  516,
      516,  516,  516,  741,  740,  516,  402,  615,  516,  618,
      516,  739,  605,  516,  309,  535,  934,  535,  535,  737,
      535,  550,  309,  310,  550,  736,  310,  610,  526,  361,
      610,  735,  621,  615,  622,  526,  526,  526,  535,  624,

      535,  339,  543,  526,  625,  543,  310,  508,  526,  628,
      934,  543,  734,  626,  543,  629,  627,  630,  339,  340,
      346,  547,  340,  733,  547,  543,  348,  934,  547,  550,
      732,  547,  550,  934,  543,  346,  347,  361,  731,  347,
      516,  348,  340,  516,  547,  383,  557,  516,  730,  557,
      516,  547,  729,  633,  934,  557,  383,  384,  557,  347,
      384,  516,  728,  727,  516,  389,  389,  389,  389,  557,
      634,  673,  640,  516,  673,  726,  516,  725,  557,  724,
      384,  641,  641,  392,  723,  643,  643,  643,  643,  722,
      721,  639,  390,  389,  389,  389,  389,  720,  617,  684,

      390,  617,  684,  392,  711,  389,  389,  389,  389,  561,
      561,  392,  390,  710,  709,  708,  707,  685,  706,  687,
      705,  561,  561,  392,  683,  684,  683,  683,  684,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  683,  683,  683,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  683,  683,
      683,  683,  516,  516,  516,  516,  516,  516,  516,  309,

      310,  516,  704,  310,  339,  340,  412,  703,  340,  389,
      389,  389,  389,  702,  699,  525,  640,  525,  525,  525,
      698,  516,  697,  310,  516,  641,  641,  392,  340,  694,
      526,  516,  516,  693,  516,  516,  526,  516,  692,  743,
      516,  526,  745,  695,  691,  688,  683,  684,  683,  683,
      684,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  526,
      526,  643,  643,  643,  643,  526,  346,  347,  390,  803,
      347,  686,  348,  682,  683,  689,  683,  690,  681,  392,
      625,  625,  383,  384,  516,  516,  384,  516,  516,  508,

      347,  389,  389,  389,  389,  679,  516,  678,  640,  516,
      683,  683,  683,  683,  676,  696,  384,  641,  641,  392,
      712,  713,  675,  516,  674,  714,  516,  516,  715,  716,
      516,  700,  526,  717,  600,  672,  855,  718,  719,  746,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  516,  904,  526,  516,  309,  310,  339,
      340,  310,  747,  340,  516,  617,  671,  516,  683,  683,
      683,  670,  669,  668,  346,  347,  516,  667,  347,  516,
      348,  310,  666,  340,  516,  383,  384,  516,  749,  384,

      752,  526,  665,  664,  683,  683,  683,  683,  347,  663,
      516,  661,  748,  516,  660,  753,  659,  802,  658,  384,
      389,  389,  389,  389,  526,  657,  757,  640,  804,  656,
      309,  310,  526,  655,  310,  654,  758,  758,  392,  339,
      340,  346,  347,  340,  653,  347,  602,  348,  526,  602,
      602,  651,  806,  805,  310,  383,  384,  516,  807,  384,
      516,  516,  650,  340,  516,  347,  649,  810,  648,  811,
      389,  389,  389,  389,  647,  516,  412,  640,  516,  384,
      645,  516,  516,  815,  516,  516,  758,  758,  392,  389,
      389,  389,  389,  644,  309,  310,  640,  638,  310,  526,

      339,  340,  856,  637,  340,  758,  758,  392,  346,  347,
      636,  635,  347,  526,  348,  348,  858,  857,  310,  526,
      526,  383,  384,  632,  340,  384,  859,  905,  262,  631,
      905,  516,  347,  613,  516,  612,  860,  309,  310,  608,
      907,  310,  863,  339,  340,  384,  607,  340,  346,  347,
      864,  606,  347,  605,  348,  383,  384,  516,  604,  384,
      516,  310,  603,  868,  601,  906,  598,  340,  595,  526,
      905,  262,  347,  905,  516,  594,  484,  516,  516,  384,
      593,  516,  516,  625,  592,  516,  261,  262,  616,  261,
      616,  616,  616,  525,  479,  525,  525,  525,  591,  590,

      589,  623,  915,  623,  623,  623,  602,  588,  263,  602,
      602,  616,  526,  616,  616,  616,  587,  586,  585,  917,
      526,  584,  617,  581,  906,  580,  625,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,

      225,  225,  225,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,

      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  264,  264,  579,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  266,  578,  266,  266,  577,  266,  443,
      443,  266,  266,  576,  266,  266,  266,  270,  270,  270,
      270,  575,  270,  573,  437,  270,  270,  270,  270,  270,
      270,  285,  285,  432,  572,  571,  570,  418,  569,  418,
      568,  412,  566,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  295,  412,  295,  295,  564,  295,  398,  563,

      295,  295,  560,  295,  295,  295,  296,  296,  555,  554,
      377,  553,  372,  552,  354,  934,  545,  541,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  307,  307,  539,
      307,  307,  324,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  308,  538,  308,  308,  308,
      308,  308,  317,  537,  308,  308,  308,  308,  308,  315,
      533,  308,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      316,  515,  316,  316,  316,  512,  511,  316,  318,  502,
      318,  318,  267,  267,  318,  265,  318,  318,  318,  499,
      497,  318,  327,  327,  327,  327,  495,  494,  327,  492,
      490,  489,  487,  482,  462,  327,  448,  447,  327,  446,
      444,  327,  443,  327,  327,  327,  439,  327,  327,  330,
      330,  330,  330,  432,  428,  418,  412,  398,  377,  372,
      354,  324,  330,  315,  330,  330,  267,  265,  330,  934,
      330,  330,  330,   97,   97,  330,  336,  336,  336,  336,
      934,  934,  336,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  336,  934,  336,  336,  336,

      934,  934,  336,  337,  337,  934,  337,  337,  934,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  338,  934,  338,  338,  338,  338,  338,  934,  934,
      338,  338,  338,  338,  338,  934,  934,  338,  344,  344,
      934,  344,  344,  934,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  345,  934,  345,  345,
      345,  345,  345,  345,  934,  345,  345,  345,  345,  345,
      934,  934,  345,  357,  357,  357,  357,  934,  934,  357,

      934,  934,  934,  934,  934,  934,  357,  934,  934,  357,
      934,  934,  357,  934,  357,  357,  357,  934,  357,  357,
      362,  362,  362,  362,  934,  934,  934,  362,  934,  934,
      934,  934,  934,  362,  934,  362,  362,  934,  934,  362,
      934,  362,  362,  362,  934,  934,  362,  365,  365,  365,
      365,  934,  934,  365,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  365,  934,  365,  365,
      365,  934,  934,  365,  366,  934,  366,  366,  366,  934,
      934,  366,  367,  934,  934,  934,  367,  934,  367,  367,
      367,  934,  934,  367,  371,  371,  934,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  376,  376,  934,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      381,  381,  934,  381,  381,  934,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  382,  934,
      382,  382,  382,  382,  382,  934,  934,  382,  382,  382,
      382,  382,  934,  934,  382,  388,  934,  388,  388,  388,

      934,  934,  388,  393,  393,  393,  393,  934,  934,  393,
      934,  934,  934,  934,  934,  934,  934,  934,  393,  393,
      934,  934,  393,  934,  393,  393,  393,  934,  934,  393,
      401,  401,  401,  401,  934,  934,  401,  934,  934,  934,
      934,  934,  934,  401,  934,  934,  401,  934,  934,  401,
      934,  401,  401,  401,  934,  401,  401,  404,  404,  404,
      404,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      404,  934,  404,  404,  934,  934,  404,  934,  404,  404,
      404,  934,  934,  404,  410,  410,  410,  410,  934,  934,
      410,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  410,  934,  410,  410,  410,  934,  934,
      410,  411,  934,  411,  411,  411,  934,  934,  411,  413,
      934,  413,  934,  934,  934,  413,  934,  413,  413,  413,
      934,  934,  413,  417,  934,  417,  417,  417,  934,  934,
      417,  419,  934,  419,  934,  934,  934,  419,  934,  419,
      419,  419,  934,  934,  419,  423,  423,  934,  423,  423,
      423,  423,  423,  423,  423,  934,  423,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  934,  423,  423,  423,
      423,  423,  423,  427,  934,  934,  427,  934,  934,  934,
      427,  934,  427,  427,  427,  934,  934,  427,  429,  429,

      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  934,  429,  429,
      429,  429,  429,  429,  429,  429,  431,  431,  934,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  934,  431,  431,  431,  431,
      431,  431,  431,  431,  438,  934,  934,  438,  934,  934,
      934,  438,  934,  438,  438,  438,  934,  934,  438,  442,
      442,  934,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  445,  445,  934,

      445,  934,  445,  445,  445,  445,  445,  934,  445,  445,
      445,  445,  934,  445,  445,  445,  934,  445,  934,  445,
      445,  445,  445,  445,  445,  453,  934,  934,  453,  934,
      934,  934,  453,  934,  453,  453,  453,  934,  934,  453,
      457,  457,  934,  457,  934,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  934,
      457,  934,  457,  457,  457,  457,  457,  457,  461,  461,
      934,  461,  934,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  934,  461,  934,
      461,  461,  461,  461,  461,  461,  466,  934,  466,  466,

      466,  934,  934,  466,  467,  934,  934,  934,  467,  934,
      467,  467,  467,  934,  934,  467,  471,  471,  934,  471,
      471,  471,  471,  471,  934,  934,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  934,  471,  934,  471,  471,
      471,  471,  471,  471,  478,  934,  478,  478,  478,  934,
      934,  478,  480,  934,  480,  480,  934,  934,  480,  934,
      480,  480,  480,  934,  934,  480,  483,  934,  483,  483,
      483,  934,  934,  483,  485,  934,  485,  485,  934,  934,
      485,  934,  485,  485,  485,  934,  934,  485,  488,  488,
      934,  488,  488,  488,  488,  488,  488,  488,  488,  488,

      488,  488,  488,  488,  488,  488,  488,  934,  488,  934,
      488,  488,  488,  488,  488,  488,  491,  934,  934,  491,
      934,  934,  934,  491,  934,  491,  491,  491,  934,  934,
      491,  493,  493,  934,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  934,  493,  493,  493,  493,  493,
      493,  493,  934,  493,  493,  493,  493,  493,  493,  496,
      496,  934,  496,  496,  496,  496,  496,  496,  496,  934,
      496,  496,  496,  496,  496,  496,  496,  496,  934,  496,
      934,  496,  496,  496,  496,  496,  496,  264,  264,  934,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  266,  934,  266,  266,  934,
      266,  934,  934,  266,  266,  934,  266,  266,  266,  500,
      934,  934,  500,  934,  934,  934,  500,  934,  500,  500,
      500,  270,  934,  270,  270,  934,  270,  934,  934,  270,
      270,  934,  270,  270,  270,  513,  934,  513,  513,  513,
      934,  513,  285,  934,  934,  285,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  285,  934,  285,  285,  285,  295,  934,  295,  295,
      934,  295,  934,  934,  295,  295,  934,  295,  295,  295,

      296,  934,  934,  296,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  296,
      296,  296,  296,  296,  307,  307,  934,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  308,  934,  308,  308,  308,  308,  308,  934,
      934,  308,  308,  308,  308,  308,  934,  934,  308,  534,
      934,  534,  934,  534,  534,  534,  934,  934,  534,  534,
      534,  534,  534,  934,  934,  534,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  318,  934,  318,  318,  934,  934,
      318,  934,  318,  318,  318,  934,  934,  318,  316,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  316,  934,  316,  316,  316,  934,  934,  316,  327,
      327,  327,  327,  934,  934,  327,  934,  934,  934,  934,
      934,  934,  327,  934,  934,  327,  934,  934,  327,  934,
      327,  327,  327,  934,  327,  327,  330,  330,  330,  330,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  330,
      934,  330,  330,  934,  934,  330,  934,  330,  330,  330,

      934,  934,  330,  336,  336,  336,  336,  934,  934,  336,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  336,  934,  336,  336,  336,  934,  934,  336,
      540,  934,  934,  934,  540,  934,  540,  540,  540,  934,
      934,  540,  337,  337,  934,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      338,  934,  338,  338,  338,  338,  338,  934,  934,  338,
      338,  338,  338,  338,  934,  934,  338,  542,  934,  542,
      934,  542,  542,  542,  934,  934,  542,  542,  542,  542,

      542,  934,  934,  542,  344,  344,  934,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  345,  934,  345,  345,  345,  345,  345,  345,
      934,  345,  345,  345,  345,  345,  934,  934,  345,  546,
      934,  546,  934,  546,  546,  546,  934,  934,  546,  546,
      546,  546,  546,  934,  934,  546,  357,  357,  357,  357,
      934,  934,  357,  934,  934,  934,  934,  934,  934,  357,
      934,  934,  357,  934,  934,  357,  934,  357,  357,  357,
      934,  357,  357,  362,  362,  362,  362,  934,  934,  934,

      362,  934,  934,  934,  934,  934,  362,  934,  362,  362,
      934,  934,  362,  934,  362,  362,  362,  934,  934,  362,
      365,  365,  365,  365,  934,  934,  365,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  365,
      934,  365,  365,  365,  934,  934,  365,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  934,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  551,  934,  934,  551,  934,
      934,  934,  551,  934,  934,  934,  934,  934,  934,  934,
      551,  934,  934,  934,  551,  934,  551,  551,  551,  934,

      934,  551,  367,  934,  934,  934,  367,  934,  367,  367,
      367,  934,  934,  367,  371,  371,  934,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  376,  376,  934,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      381,  381,  934,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
      381,  381,  381,  381,  381,  381,  381,  381,  382,  934,

      382,  382,  382,  382,  382,  934,  934,  382,  382,  382,
      382,  382,  934,  934,  382,  556,  934,  556,  934,  556,
      556,  556,  934,  934,  556,  556,  556,  556,  556,  934,
      934,  556,  393,  393,  393,  393,  934,  934,  393,  934,
      934,  934,  934,  934,  934,  934,  934,  393,  393,  934,
      934,  393,  934,  393,  393,  393,  934,  934,  393,  559,
      934,  559,  559,  559,  934,  934,  559,  562,  562,  562,
      562,  934,  934,  562,  934,  934,  934,  934,  934,  934,
      934,  934,  562,  562,  934,  934,  562,  934,  562,  562,
      562,  934,  934,  562,  401,  401,  401,  401,  934,  934,

      401,  934,  934,  934,  934,  934,  934,  401,  934,  934,
      401,  934,  934,  401,  934,  401,  401,  401,  934,  401,
      401,  404,  404,  404,  404,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  404,  934,  404,  404,  934,  934,
      404,  934,  404,  404,  404,  934,  934,  404,  410,  410,
      410,  410,  934,  934,  410,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  410,  934,  410,
      410,  410,  934,  934,  410,  565,  934,  934,  934,  565,
      934,  565,  565,  565,  934,  934,  565,  413,  934,  413,
      934,  934,  934,  413,  934,  413,  413,  413,  934,  934,

      413,  567,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  567,  934,  567,  567,  567,  934,
      934,  567,  419,  934,  419,  934,  934,  934,  419,  934,
      419,  419,  419,  934,  934,  419,  423,  423,  934,  423,
      423,  423,  423,  423,  423,  423,  934,  423,  423,  423,
      423,  423,  423,  423,  423,  423,  423,  934,  423,  423,
      423,  423,  423,  423,  427,  934,  934,  427,  934,  934,
      934,  427,  934,  427,  427,  427,  934,  934,  427,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  429,  429,  429,  934,  429,

      429,  429,  429,  429,  429,  429,  429,  431,  431,  934,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  934,  431,  431,  431,
      431,  431,  431,  431,  431,  574,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  574,  934,
      574,  574,  574,  934,  934,  574,  438,  934,  934,  438,
      934,  934,  934,  438,  934,  438,  438,  438,  934,  934,
      438,  442,  442,  934,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  445,

      445,  934,  445,  934,  445,  445,  445,  445,  445,  934,
      445,  445,  445,  445,  934,  445,  445,  445,  934,  445,
      934,  445,  445,  445,  445,  445,  445,  453,  934,  934,
      453,  934,  934,  934,  453,  934,  453,  453,  453,  934,
      934,  453,  457,  457,  934,  457,  934,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  934,  457,  934,  457,  457,  457,  457,  457,  457,
      461,  461,  934,  461,  934,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  934,
      461,  934,  461,  461,  461,  461,  461,  461,  467,  934,

      934,  934,  467,  934,  467,  467,  467,  934,  934,  467,
      471,  471,  934,  471,  471,  471,  471,  471,  934,  934,
      471,  471,  471,  471,  471,  471,  471,  471,  471,  934,
      471,  934,  471,  471,  471,  471,  471,  471,  480,  934,
      480,  480,  934,  934,  480,  934,  480,  480,  480,  934,
      934,  480,  478,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  478,  934,  478,  478,  478,
      934,  934,  478,  485,  934,  485,  485,  934,  934,  485,
      934,  485,  485,  485,  934,  934,  485,  483,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      483,  934,  483,  483,  483,  934,  934,  483,  488,  488,
      934,  488,  488,  488,  488,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  488,  488,  934,  488,  934,
      488,  488,  488,  488,  488,  488,  491,  934,  934,  491,
      934,  934,  934,  491,  934,  491,  491,  491,  934,  934,
      491,  493,  493,  934,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  934,  493,  493,  493,  493,  493,
      493,  493,  934,  493,  493,  493,  493,  493,  493,  496,
      496,  934,  496,  496,  496,  496,  496,  496,  496,  934,
      496,  496,  496,  496,  496,  496,  496,  496,  934,  496,

      934,  496,  496,  496,  496,  496,  496,  500,  500,  934,
      500,  934,  934,  934,  500,  934,  500,  500,  500,  609,
      609,  934,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  513,  934,  934,
      513,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  513,  934,  513,  513,
      513,  285,  934,  934,  285,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      285,  934,  285,  285,  285,  619,  619,  934,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      934,  619,  619,  296,  934,  934,  296,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  296,  296,  296,  296,  296,  534,  934,  534,
      534,  534,  534,  534,  934,  934,  534,  534,  534,  534,
      534,  934,  934,  534,  308,  934,  308,  308,  308,  308,
      308,  934,  934,  308,  308,  308,  308,  308,  934,  934,
      308,  316,  934,  316,  316,  316,  934,  934,  316,  540,
      934,  934,  934,  540,  934,  540,  540,  540,  934,  934,

      540,  542,  934,  542,  542,  542,  542,  542,  934,  934,
      542,  542,  542,  542,  542,  934,  934,  542,  338,  934,
      338,  338,  338,  338,  338,  934,  934,  338,  338,  338,
      338,  338,  934,  934,  338,  546,  934,  546,  546,  546,
      546,  546,  546,  934,  546,  546,  546,  546,  546,  934,
      934,  546,  345,  934,  345,  345,  345,  345,  345,  345,
      934,  345,  345,  345,  345,  345,  934,  934,  345,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  551,  934,  934,

      551,  934,  934,  934,  551,  934,  934,  934,  934,  934,
      934,  934,  551,  934,  934,  934,  551,  934,  551,  551,
      551,  934,  934,  551,  556,  934,  556,  556,  556,  556,
      556,  934,  934,  556,  556,  556,  556,  556,  934,  934,
      556,  382,  934,  382,  382,  382,  382,  382,  934,  934,
      382,  382,  382,  382,  382,  934,  934,  382,  642,  642,
      642,  642,  934,  934,  642,  934,  934,  934,  934,  934,
      934,  934,  934,  642,  642,  934,  934,  642,  934,  642,
      642,  642,  934,  934,  642,  559,  559,  559,  559,  934,
      934,  559,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  559,  934,  934,  559,  934,  559,  559,  559,  934,
      934,  559,  562,  562,  562,  562,  934,  934,  562,  934,
      934,  934,  934,  934,  934,  934,  934,  562,  562,  934,
      934,  562,  934,  562,  562,  562,  934,  934,  562,  565,
      934,  934,  934,  565,  934,  565,  565,  565,  934,  934,
      565,  567,  934,  567,  567,  567,  934,  934,  567,  646,
      934,  646,  934,  934,  934,  646,  934,  646,  646,  646,
      934,  934,  646,  574,  934,  574,  574,  574,  934,  934,
      574,  652,  934,  934,  934,  652,  934,  652,  652,  652,
      934,  934,  652,  662,  662,  662,  662,  662,  662,  662,

      662,  662,  662,  662,  662,  662,  662,  662,  662,  934,
      662,  662,  662,  934,  662,  934,  934,  662,  662,  662,
      662,  478,  934,  478,  478,  478,  934,  934,  478,  483,
      934,  483,  483,  483,  934,  934,  483,  677,  934,  934,
      677,  934,  934,  934,  677,  934,  677,  677,  677,  609,
      609,  934,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  285,  934,  934,
      285,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  285,  934,  285,  285,

      285,  619,  619,  934,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  623,
      623,  623,  623,  623,  296,  934,  934,  296,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  296,  296,  296,  296,  296,  308,  934,
      308,  308,  308,  308,  308,  934,  934,  308,  308,  308,
      308,  308,  934,  934,  308,  701,  934,  701,  701,  701,
      934,  934,  701,  738,  738,  934,  738,  934,  934,  934,
      738,  934,  738,  738,  738,  683,  683,  683,  683,  683,

      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  683,  683,  683,  934,  683,  934,  934,  934,
      683,  683,  683,  759,  759,  759,  759,  934,  934,  759,
      934,  934,  934,  934,  934,  934,  934,  934,  759,  759,
      934,  934,  759,  934,  759,  759,  759,  934,  934,  759,
      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  934,  782,  782,  782,
      934,  782,  934,  782,  934,  782,  782,  782,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  934,  837,  837,  837,  934,  837,

      934,  934,  934,  837,  837,  837,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  934,  838,  838,  838,  934,  838,  934,  934,
      934,  838,  838,  838,  878,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  878,  878,  878,  878,  878,
      934,  878,  878,  878,  934,  878,  934,  934,  934,  878,
      878,  878,  888,  888,  888,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  888,  888,  888,  934,  888,
      888,  888,  934,  888,  934,  934,  934,  888,  888,  888,
       77,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934
    } ;

static yyconst flex_int16_t yy_chk[7260] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,   21,
       22,    4,   23,   21,   22,   24,   23,   47,   48,   24,
      929,   55,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   56,    5,   61,    5,    5,

       62,   35,    5,    5,    5,    5,   21,   22,   36,   23,
       35,  260,   24,  927,   47,   48,  101,   36,   55,  926,
      101,    5,    5,    5,   43,   43,  458,   43,  458,   43,
       44,   44,   56,   44,   61,   44,  260,   62,   35,  190,
       80,   80,  190,   80,  190,   36,  925,    5,    5,    5,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,   43,    6,   39,    6,    6,   40,   44,    6,
        6,    6,    6,   39,   59,   51,   40,   51,   80,  211,
      200,   59,   59,  211,   39,  200,  506,   40,    6,    6,
        6,  906,  237,  906,   59,   51,  237,   86,  923,   86,

       86,   39,   86,   86,   40,  242,  506,   86,  922,  242,
      271,   59,   51,  271,    6,    6,    6,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   73,   13,  274,   13,   13,
       74,  921,   13,   13,   13,   13,   45,   73,   45,   52,
       88,   52,   74,   88,  276,   45,  273,  273,  274,  924,
       45,   13,   13,   13,   88,   46,   45,   46,  916,   52,

      924,  181,   73,  212,   46,  276,  920,   74,  212,   46,
      181,  916,  212,   45,   67,   46,   52,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   46,   14,   67,   14,   14,   68,  181,   14,
       14,   14,   14,   53,   54,   53,   54,  285,   93,   93,
      285,   67,   93,  104,  104,  104,  104,   68,   14,   14,
       14,  919,   60,   53,   54,  102,  102,  104,  102,   60,
       60,  104,   93,  918,   68,  365,  110,  110,  365,  110,
       53,   54,   60,  365,   14,   14,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   60,

       15,   69,   15,   15,   70,  102,   15,   15,   15,   15,
       75,   76,   83,   83,   83,   83,  110,  913,  279,   75,
       76,   69,   83,  277,   70,   15,   15,   15,  912,  280,
       75,   76,  275,  111,  111,  111,  111,  279,   69,   83,
      111,   70,   94,   94,  277,  911,   94,   75,   76,  275,
      280,   15,   15,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   94,   16,  284,   16,
       16,  275,  490,   16,   16,   16,   16,   89,   89,  930,
       89,  105,  105,  105,  105,  509,  930,  284,   89,   89,
       89,   89,   16,   16,   16,  105,  932,  490,   89,  105,

      131,  131,  131,  131,  509,  304,  304,  131,  304,  164,
      164,  164,  164,  316,  932,   89,  164,  316,   16,   16,
       16,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,  910,
       25,  296,   25,   25,  296,  909,   25,   25,   25,   25,
      318,  115,  115,  510,  318,  115,  106,  106,  106,  106,
      116,  116,  908,  106,  116,   25,   25,   25,   95,   95,

      106,   95,  510,  291,  106,  115,  291,  305,  305,  296,
      305,  478,   95,   95,  116,  478,   95,  136,  136,  901,
      136,   25,   25,   25,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   95,   26,   95,   26,
       26,  680,  900,   26,   26,   26,   26,  109,  109,  109,
      109,  106,  121,  121,  494,  884,  121,  136,  121,  291,
      680,  109,   26,   26,   26,  109,  125,  125,  125,  125,
      494,  269,  303,  269,  269,  303,  121,  883,  882,  881,
      125,  269,  311,  311,  125,  311,  303,  880,   26,   26,
       26,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   84,
      107,  107,  107,  107,  480,  122,  122,  107,  480,  122,
       84,  122,  148,  148,  107,  879,  148,  483,  107,  287,
       84,  483,  287,   84,   84,  123,  611,   84,   84,  122,
       84,   84,  854,  485,  123,  123,  148,  485,  123,   84,
      123,  853,  852,   84,   84,  117,  117,  611,  117,   84,
       84,   84,   84,   84,   84,   85,   85,  429,  123,  117,

      117,  124,  124,  117,  124,  107,  429,  928,   85,   85,
       85,  140,  140,  851,  140,  124,  124,  288,  287,  124,
      288,  124,  928,  117,  931,  117,  309,   85,  931,  309,
      850,   85,  716,   85,  429,   85,  849,  144,  144,  124,
      144,  124,  848,  126,  126,  126,  126,   85,  716,  309,
       85,  140,   85,   85,   85,   87,   87,  126,  847,  149,
      149,  126,  288,  149,  127,  127,  127,  127,   87,   87,
       87,  127,  128,  128,  128,  128,  846,  144,  127,  128,
      845,  505,  127,  149,  505,  297,  128,   87,  297,   87,
      128,   87,  844,   87,  843,   87,  842,  130,  130,  130,

      130,  505,  841,  150,  150,  130,  150,   87,  840,  839,
       87,  130,   87,   87,   87,  130,  835,  150,  150,  155,
      155,  150,  155,  297,  507,  163,  163,  507,  163,  127,
      834,  154,  154,  154,  154,  833,  297,  128,  154,  261,
      261,  150,  261,  150,  507,  832,  831,  154,  154,  154,
      157,  157,  157,  157,  830,  158,  158,  158,  158,  155,
      159,  159,  159,  159,  157,  163,  829,  159,  157,  158,
      828,  827,  302,  158,  159,  302,  825,  261,  159,  160,
      160,  160,  160,  824,  823,  822,  160,  162,  162,  162,
      162,  169,  169,  160,  169,  173,  173,  160,  173,  176,

      176,  162,  176,  821,  820,  162,  184,  184,  203,  203,
      302,  203,  207,  207,  290,  207,  819,  290,  818,  184,
      184,  184,  817,  219,  219,  159,  219,  278,  302,  513,
      278,  169,  513,  262,  262,  173,  262,  816,  184,  176,
      224,  224,  289,  224,  160,  289,  814,  278,  203,  289,
      230,  230,  207,  230,  233,  233,  813,  233,  812,  290,
      809,  278,  808,  219,  801,  184,  185,  185,  290,  185,
      800,  262,  185,  185,  298,  299,  799,  298,  299,  289,
      224,  300,  798,  278,  300,  185,  185,  185,  300,  301,
      230,  797,  301,  295,  233,  295,  295,  440,  295,  295,

      440,  796,  440,  295,  185,  289,  185,  320,  320,  795,
      320,  794,  298,  299,  331,  331,  793,  331,  300,  300,
      299,  308,  308,  341,  341,  308,  341,  301,  310,  310,
      792,  185,  310,  298,  301,  313,  313,  338,  338,  313,
      791,  338,  790,  301,  300,  308,  323,  323,  323,  323,
      350,  350,  310,  350,  789,  324,  324,  324,  324,  313,
      323,  338,  324,  788,  323,  327,  327,  327,  327,  324,
      787,  786,  313,  324,  326,  326,  326,  326,  783,  327,
      781,  326,  780,  327,  328,  328,  328,  328,  326,  779,
      778,  328,  326,  329,  329,  329,  329,  777,  776,  775,

      329,  330,  330,  330,  330,  368,  368,  329,  368,  516,
      339,  329,  516,  339,  600,  330,  774,  600,  773,  330,
      324,  334,  334,  334,  334,  772,  771,  770,  334,  335,
      335,  335,  335,  339,  769,  768,  335,  340,  340,  326,
      767,  340,  343,  343,  345,  345,  343,  766,  345,  346,
      345,  765,  346,  347,  347,  764,  762,  347,  329,  347,
      761,  340,  383,  352,  352,  383,  343,  352,  345,  352,
      373,  373,  346,  373,  760,  378,  378,  347,  378,  343,
      353,  353,  353,  353,  756,  383,  755,  352,  354,  354,
      354,  354,  754,  751,  353,  354,  385,  385,  353,  385,

      352,  522,  354,  750,  522,  742,  354,  356,  356,  356,
      356,  741,  740,  739,  356,  357,  357,  357,  357,  394,
      394,  356,  394,  357,  738,  356,  382,  382,  614,  357,
      382,  614,  737,  357,  358,  358,  358,  358,  736,  735,
      734,  358,  359,  359,  359,  359,  733,  384,  384,  359,
      382,  384,  732,  354,  405,  405,  359,  405,  522,  731,
      359,  360,  360,  360,  360,  517,  387,  387,  517,  360,
      387,  384,  356,  414,  414,  360,  414,  730,  729,  360,
      362,  362,  362,  362,  363,  363,  363,  363,  362,  728,
      387,  363,  420,  420,  362,  420,  727,  726,  362,  364,

      364,  364,  364,  387,  725,  724,  364,  359,  388,  388,
      388,  388,  517,  723,  722,  388,  389,  389,  389,  389,
      391,  391,  391,  391,  388,  388,  388,  391,  393,  393,
      393,  393,  721,  720,  389,  393,  391,  391,  391,  397,
      397,  397,  397,  719,  393,  393,  393,  398,  398,  398,
      398,  718,  717,  397,  398,  424,  424,  397,  424,  435,
      435,  398,  435,  715,  714,  398,  400,  400,  400,  400,
      713,  712,  711,  400,  401,  401,  401,  401,  450,  450,
      400,  450,  454,  454,  400,  454,  463,  463,  401,  463,
      710,  709,  401,  402,  402,  402,  402,  708,  707,  706,

      402,  403,  403,  403,  403,  705,  468,  468,  403,  468,
      472,  472,  398,  472,  518,  403,  704,  518,  703,  403,
      404,  404,  404,  404,  702,  408,  408,  408,  408,  699,
      514,  400,  408,  514,  404,  698,  697,  514,  404,  409,
      409,  409,  409,  694,  475,  475,  409,  475,  523,  524,
      527,  523,  524,  527,  693,  686,  682,  528,  529,  530,
      528,  529,  530,  681,  679,  531,  403,  514,  531,  518,
      532,  678,  677,  532,  534,  534,  535,  535,  534,  676,
      535,  550,  536,  536,  550,  675,  536,  610,  527,  550,
      610,  674,  523,  514,  524,  528,  529,  530,  534,  527,

      535,  542,  542,  531,  528,  542,  536,  610,  532,  531,
      543,  543,  672,  529,  543,  532,  530,  536,  544,  544,
      546,  546,  544,  671,  546,  542,  546,  547,  547,  551,
      670,  547,  551,  547,  543,  548,  548,  551,  669,  548,
      620,  548,  544,  620,  546,  556,  556,  621,  668,  556,
      621,  547,  667,  544,  557,  557,  558,  558,  557,  548,
      558,  618,  666,  665,  618,  559,  559,  559,  559,  556,
      548,  673,  559,  622,  673,  664,  622,  663,  557,  661,
      558,  559,  559,  559,  660,  560,  560,  560,  560,  659,
      658,  558,  560,  561,  561,  561,  561,  657,  620,  684,

      561,  621,  684,  560,  655,  562,  562,  562,  562,  561,
      561,  561,  562,  654,  653,  651,  650,  618,  649,  622,
      648,  562,  562,  562,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  624,  687,  685,  624,  687,  685,  629,  630,

      630,  629,  647,  630,  633,  633,  646,  645,  633,  641,
      641,  641,  641,  644,  638, 1019,  641, 1019, 1019, 1019,
      637,  745,  636,  630,  745,  641,  641,  641,  633,  632,
      624,  626,  627,  631,  626,  627,  629,  628,  630,  685,
      628,  623,  687,  633,  629,  624,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  626,
      627,  643,  643,  643,  643,  628,  634,  634,  643,  745,
      634,  619,  634,  613,  625,  625,  625,  626,  612,  643,
      627,  628,  639,  639,  688,  802,  639,  688,  802,  609,

      634,  642,  642,  642,  642,  608,  855,  607,  642,  855,
      625,  625,  625,  625,  604,  634,  639,  642,  642,  642,
      656,  656,  603,  856,  601,  656,  856,  690,  656,  656,
      690,  639,  688,  656,  599,  598,  802,  656,  656,  688,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  691,  855,  690,  691,  692,  692,  695,
      695,  692,  690,  695,  743,  856,  594,  743,  689,  689,
      689,  592,  590,  589,  696,  696,  746,  588,  696,  746,
      696,  692,  587,  695,  748,  700,  700,  748,  692,  700,

      695,  691,  586,  585,  689,  689,  689,  689,  696,  584,
      747,  583,  691,  747,  582,  696,  581,  743,  580,  700,
      701,  701,  701,  701,  746,  579,  700,  701,  746,  578,
      749,  749,  748,  577,  749,  576,  701,  701,  701,  752,
      752,  753,  753,  752,  575,  753, 1080,  753,  747, 1080,
     1080,  572,  748,  747,  749,  757,  757,  803,  749,  757,
      803,  804,  571,  752,  804,  753,  570,  752,  569,  753,
      758,  758,  758,  758,  568,  805,  567,  758,  805,  757,
      564,  806,  858,  757,  806,  858,  758,  758,  758,  759,
      759,  759,  759,  563,  807,  807,  759,  554,  807,  804,

      810,  810,  803,  553,  810,  759,  759,  759,  811,  811,
      552,  549,  811,  805,  811,  545,  805,  804,  807,  806,
      858,  815,  815,  539,  810,  815,  806,  857,  857,  538,
      857,  859,  811,  512,  859,  511,  807,  860,  860,  504,
      858,  860,  810,  863,  863,  815,  503,  863,  864,  864,
      811,  502,  864,  500,  864,  868,  868,  904,  499,  868,
      904,  860,  498,  815,  495,  857,  492,  863,  489,  859,
      905,  905,  864,  905,  907,  487,  486,  907,  915,  868,
      484,  915,  917,  859,  482,  917,  933,  933, 1084,  933,
     1084, 1084, 1084, 1087,  481, 1087, 1087, 1087,  479,  477,

      474, 1088,  904, 1088, 1088, 1088, 1113,  470,  905, 1113,
     1113, 1116,  907, 1116, 1116, 1116,  465,  462,  460,  907,
      917,  459,  915,  456,  933,  452,  917,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  937,  937,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,

      937,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  939,  939,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  941,  941,  941,  941,  941,

      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  944,  944,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  948,  948,  948,  948,  948,  948,  948,  948,  948,

      948,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  948,  948,  948,  948,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  951,  951,  951,  951,  951,  951,

      951,  951,  951,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
      952,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,

      955,  955,  955,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  956,  956,  449,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  956,
      956,  956,  956,  957,  448,  957,  957,  444,  957,  442,
      441,  957,  957,  439,  957,  957,  957,  958,  958,  958,
      958,  437,  958,  434,  432,  958,  958,  958,  958,  958,
      958,  959,  959,  431,  428,  426,  422,  419,  418,  417,
      416,  413,  412,  959,  959,  959,  959,  959,  959,  959,
      959,  959,  960,  411,  960,  960,  407,  960,  399,  396,

      960,  960,  392,  960,  960,  960,  961,  961,  381,  380,
      376,  375,  371,  370,  355,  349,  344,  337,  961,  961,
      961,  961,  961,  961,  961,  961,  961,  962,  962,  333,
      962,  962,  325,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  963,  322,  963,  963,  963,
      963,  963,  319,  317,  963,  963,  963,  963,  963,  314,
      307,  963,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,

      965,  286,  965,  965,  965,  282,  281,  965,  966,  272,
      966,  966,  270,  266,  966,  264,  966,  966,  966,  263,
      259,  966,  967,  967,  967,  967,  255,  254,  967,  251,
      247,  246,  243,  238,  216,  967,  199,  198,  967,  197,
      193,  967,  192,  967,  967,  967,  188,  967,  967,  968,
      968,  968,  968,  183,  180,  172,  168,  161,  143,  139,
      129,  108,  968,   96,  968,  968,   82,   81,  968,   77,
      968,  968,  968,    8,    7,  968,  969,  969,  969,  969,
        0,    0,  969,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  969,    0,  969,  969,  969,

        0,    0,  969,  970,  970,    0,  970,  970,    0,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      970,  971,    0,  971,  971,  971,  971,  971,    0,    0,
      971,  971,  971,  971,  971,    0,    0,  971,  972,  972,
        0,  972,  972,    0,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  973,    0,  973,  973,
      973,  973,  973,  973,    0,  973,  973,  973,  973,  973,
        0,    0,  973,  974,  974,  974,  974,    0,    0,  974,

        0,    0,    0,    0,    0,    0,  974,    0,    0,  974,
        0,    0,  974,    0,  974,  974,  974,    0,  974,  974,
      975,  975,  975,  975,    0,    0,    0,  975,    0,    0,
        0,    0,    0,  975,    0,  975,  975,    0,    0,  975,
        0,  975,  975,  975,    0,    0,  975,  976,  976,  976,
      976,    0,    0,  976,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  976,    0,  976,  976,
      976,    0,    0,  976,  977,    0,  977,  977,  977,    0,
        0,  977,  978,    0,    0,    0,  978,    0,  978,  978,
      978,    0,    0,  978,  979,  979,    0,  979,  979,  979,

      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  979,  979,  979,  979,  979,  979,  979,  979,
      979,  979,  980,  980,    0,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      980,  980,  980,  980,  980,  980,  980,  980,  980,  980,
      981,  981,    0,  981,  981,    0,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  982,    0,
      982,  982,  982,  982,  982,    0,    0,  982,  982,  982,
      982,  982,    0,    0,  982,  983,    0,  983,  983,  983,

        0,    0,  983,  984,  984,  984,  984,    0,    0,  984,
        0,    0,    0,    0,    0,    0,    0,    0,  984,  984,
        0,    0,  984,    0,  984,  984,  984,    0,    0,  984,
      985,  985,  985,  985,    0,    0,  985,    0,    0,    0,
        0,    0,    0,  985,    0,    0,  985,    0,    0,  985,
        0,  985,  985,  985,    0,  985,  985,  986,  986,  986,
      986,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      986,    0,  986,  986,    0,    0,  986,    0,  986,  986,
      986,    0,    0,  986,  987,  987,  987,  987,    0,    0,
      987,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  987,    0,  987,  987,  987,    0,    0,
      987,  988,    0,  988,  988,  988,    0,    0,  988,  989,
        0,  989,    0,    0,    0,  989,    0,  989,  989,  989,
        0,    0,  989,  990,    0,  990,  990,  990,    0,    0,
      990,  991,    0,  991,    0,    0,    0,  991,    0,  991,
      991,  991,    0,    0,  991,  992,  992,    0,  992,  992,
      992,  992,  992,  992,  992,    0,  992,  992,  992,  992,
      992,  992,  992,  992,  992,  992,    0,  992,  992,  992,
      992,  992,  992,  993,    0,    0,  993,    0,    0,    0,
      993,    0,  993,  993,  993,    0,    0,  993,  994,  994,

      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,    0,  994,  994,
      994,  994,  994,  994,  994,  994,  995,  995,    0,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  995,    0,  995,  995,  995,  995,
      995,  995,  995,  995,  996,    0,    0,  996,    0,    0,
        0,  996,    0,  996,  996,  996,    0,    0,  996,  997,
      997,    0,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  997,  997,  997,
      997,  997,  997,  997,  997,  997,  997,  998,  998,    0,

      998,    0,  998,  998,  998,  998,  998,    0,  998,  998,
      998,  998,    0,  998,  998,  998,    0,  998,    0,  998,
      998,  998,  998,  998,  998,  999,    0,    0,  999,    0,
        0,    0,  999,    0,  999,  999,  999,    0,    0,  999,
     1000, 1000,    0, 1000,    0, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,    0,
     1000,    0, 1000, 1000, 1000, 1000, 1000, 1000, 1001, 1001,
        0, 1001,    0, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001,    0, 1001,    0,
     1001, 1001, 1001, 1001, 1001, 1001, 1002,    0, 1002, 1002,

     1002,    0,    0, 1002, 1003,    0,    0,    0, 1003,    0,
     1003, 1003, 1003,    0,    0, 1003, 1004, 1004,    0, 1004,
     1004, 1004, 1004, 1004,    0,    0, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004,    0, 1004,    0, 1004, 1004,
     1004, 1004, 1004, 1004, 1005,    0, 1005, 1005, 1005,    0,
        0, 1005, 1006,    0, 1006, 1006,    0,    0, 1006,    0,
     1006, 1006, 1006,    0,    0, 1006, 1007,    0, 1007, 1007,
     1007,    0,    0, 1007, 1008,    0, 1008, 1008,    0,    0,
     1008,    0, 1008, 1008, 1008,    0,    0, 1008, 1009, 1009,
        0, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,

     1009, 1009, 1009, 1009, 1009, 1009, 1009,    0, 1009,    0,
     1009, 1009, 1009, 1009, 1009, 1009, 1010,    0,    0, 1010,
        0,    0,    0, 1010,    0, 1010, 1010, 1010,    0,    0,
     1010, 1011, 1011,    0, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011,    0, 1011, 1011, 1011, 1011, 1011,
     1011, 1011,    0, 1011, 1011, 1011, 1011, 1011, 1011, 1012,
     1012,    0, 1012, 1012, 1012, 1012, 1012, 1012, 1012,    0,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,    0, 1012,
        0, 1012, 1012, 1012, 1012, 1012, 1012, 1013, 1013,    0,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,

     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1014,    0, 1014, 1014,    0,
     1014,    0,    0, 1014, 1014,    0, 1014, 1014, 1014, 1015,
        0,    0, 1015,    0,    0,    0, 1015,    0, 1015, 1015,
     1015, 1016,    0, 1016, 1016,    0, 1016,    0,    0, 1016,
     1016,    0, 1016, 1016, 1016, 1017,    0, 1017, 1017, 1017,
        0, 1017, 1018,    0,    0, 1018,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1018,    0, 1018, 1018, 1018, 1020,    0, 1020, 1020,
        0, 1020,    0,    0, 1020, 1020,    0, 1020, 1020, 1020,

     1021,    0,    0, 1021,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1021,
     1021, 1021, 1021, 1021, 1022, 1022,    0, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1023,    0, 1023, 1023, 1023, 1023, 1023,    0,
        0, 1023, 1023, 1023, 1023, 1023,    0,    0, 1023, 1024,
        0, 1024,    0, 1024, 1024, 1024,    0,    0, 1024, 1024,
     1024, 1024, 1024,    0,    0, 1024, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,

     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1026,    0, 1026, 1026,    0,    0,
     1026,    0, 1026, 1026, 1026,    0,    0, 1026, 1027,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1027,    0, 1027, 1027, 1027,    0,    0, 1027, 1028,
     1028, 1028, 1028,    0,    0, 1028,    0,    0,    0,    0,
        0,    0, 1028,    0,    0, 1028,    0,    0, 1028,    0,
     1028, 1028, 1028,    0, 1028, 1028, 1029, 1029, 1029, 1029,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1029,
        0, 1029, 1029,    0,    0, 1029,    0, 1029, 1029, 1029,

        0,    0, 1029, 1030, 1030, 1030, 1030,    0,    0, 1030,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1030,    0, 1030, 1030, 1030,    0,    0, 1030,
     1031,    0,    0,    0, 1031,    0, 1031, 1031, 1031,    0,
        0, 1031, 1032, 1032,    0, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1033,    0, 1033, 1033, 1033, 1033, 1033,    0,    0, 1033,
     1033, 1033, 1033, 1033,    0,    0, 1033, 1034,    0, 1034,
        0, 1034, 1034, 1034,    0,    0, 1034, 1034, 1034, 1034,

     1034,    0,    0, 1034, 1035, 1035,    0, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035,
     1035, 1035, 1036,    0, 1036, 1036, 1036, 1036, 1036, 1036,
        0, 1036, 1036, 1036, 1036, 1036,    0,    0, 1036, 1037,
        0, 1037,    0, 1037, 1037, 1037,    0,    0, 1037, 1037,
     1037, 1037, 1037,    0,    0, 1037, 1038, 1038, 1038, 1038,
        0,    0, 1038,    0,    0,    0,    0,    0,    0, 1038,
        0,    0, 1038,    0,    0, 1038,    0, 1038, 1038, 1038,
        0, 1038, 1038, 1039, 1039, 1039, 1039,    0,    0,    0,

     1039,    0,    0,    0,    0,    0, 1039,    0, 1039, 1039,
        0,    0, 1039,    0, 1039, 1039, 1039,    0,    0, 1039,
     1040, 1040, 1040, 1040,    0,    0, 1040,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1040,
        0, 1040, 1040, 1040,    0,    0, 1040, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041,    0, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1041, 1041, 1041, 1041, 1042,    0,    0, 1042,    0,
        0,    0, 1042,    0,    0,    0,    0,    0,    0,    0,
     1042,    0,    0,    0, 1042,    0, 1042, 1042, 1042,    0,

        0, 1042, 1043,    0,    0,    0, 1043,    0, 1043, 1043,
     1043,    0,    0, 1043, 1044, 1044,    0, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
     1044, 1044, 1045, 1045,    0, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1046, 1046,    0, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1047,    0,

     1047, 1047, 1047, 1047, 1047,    0,    0, 1047, 1047, 1047,
     1047, 1047,    0,    0, 1047, 1048,    0, 1048,    0, 1048,
     1048, 1048,    0,    0, 1048, 1048, 1048, 1048, 1048,    0,
        0, 1048, 1049, 1049, 1049, 1049,    0,    0, 1049,    0,
        0,    0,    0,    0,    0,    0,    0, 1049, 1049,    0,
        0, 1049,    0, 1049, 1049, 1049,    0,    0, 1049, 1050,
        0, 1050, 1050, 1050,    0,    0, 1050, 1051, 1051, 1051,
     1051,    0,    0, 1051,    0,    0,    0,    0,    0,    0,
        0,    0, 1051, 1051,    0,    0, 1051,    0, 1051, 1051,
     1051,    0,    0, 1051, 1052, 1052, 1052, 1052,    0,    0,

     1052,    0,    0,    0,    0,    0,    0, 1052,    0,    0,
     1052,    0,    0, 1052,    0, 1052, 1052, 1052,    0, 1052,
     1052, 1053, 1053, 1053, 1053,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1053,    0, 1053, 1053,    0,    0,
     1053,    0, 1053, 1053, 1053,    0,    0, 1053, 1054, 1054,
     1054, 1054,    0,    0, 1054,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1054,    0, 1054,
     1054, 1054,    0,    0, 1054, 1055,    0,    0,    0, 1055,
        0, 1055, 1055, 1055,    0,    0, 1055, 1056,    0, 1056,
        0,    0,    0, 1056,    0, 1056, 1056, 1056,    0,    0,

     1056, 1057,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1057,    0, 1057, 1057, 1057,    0,
        0, 1057, 1058,    0, 1058,    0,    0,    0, 1058,    0,
     1058, 1058, 1058,    0,    0, 1058, 1059, 1059,    0, 1059,
     1059, 1059, 1059, 1059, 1059, 1059,    0, 1059, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059,    0, 1059, 1059,
     1059, 1059, 1059, 1059, 1060,    0,    0, 1060,    0,    0,
        0, 1060,    0, 1060, 1060, 1060,    0,    0, 1060, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061,    0, 1061,

     1061, 1061, 1061, 1061, 1061, 1061, 1061, 1062, 1062,    0,
     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1062,    0, 1062, 1062, 1062,
     1062, 1062, 1062, 1062, 1062, 1063,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1063,    0,
     1063, 1063, 1063,    0,    0, 1063, 1064,    0,    0, 1064,
        0,    0,    0, 1064,    0, 1064, 1064, 1064,    0,    0,
     1064, 1065, 1065,    0, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1066,

     1066,    0, 1066,    0, 1066, 1066, 1066, 1066, 1066,    0,
     1066, 1066, 1066, 1066,    0, 1066, 1066, 1066,    0, 1066,
        0, 1066, 1066, 1066, 1066, 1066, 1066, 1067,    0,    0,
     1067,    0,    0,    0, 1067,    0, 1067, 1067, 1067,    0,
        0, 1067, 1068, 1068,    0, 1068,    0, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068,    0, 1068,    0, 1068, 1068, 1068, 1068, 1068, 1068,
     1069, 1069,    0, 1069,    0, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,    0,
     1069,    0, 1069, 1069, 1069, 1069, 1069, 1069, 1070,    0,

        0,    0, 1070,    0, 1070, 1070, 1070,    0,    0, 1070,
     1071, 1071,    0, 1071, 1071, 1071, 1071, 1071,    0,    0,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,    0,
     1071,    0, 1071, 1071, 1071, 1071, 1071, 1071, 1072,    0,
     1072, 1072,    0,    0, 1072,    0, 1072, 1072, 1072,    0,
        0, 1072, 1073,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1073,    0, 1073, 1073, 1073,
        0,    0, 1073, 1074,    0, 1074, 1074,    0,    0, 1074,
        0, 1074, 1074, 1074,    0,    0, 1074, 1075,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1075,    0, 1075, 1075, 1075,    0,    0, 1075, 1076, 1076,
        0, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076,    0, 1076,    0,
     1076, 1076, 1076, 1076, 1076, 1076, 1077,    0,    0, 1077,
        0,    0,    0, 1077,    0, 1077, 1077, 1077,    0,    0,
     1077, 1078, 1078,    0, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078,    0, 1078, 1078, 1078, 1078, 1078,
     1078, 1078,    0, 1078, 1078, 1078, 1078, 1078, 1078, 1079,
     1079,    0, 1079, 1079, 1079, 1079, 1079, 1079, 1079,    0,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,    0, 1079,

        0, 1079, 1079, 1079, 1079, 1079, 1079, 1081, 1081,    0,
     1081,    0,    0,    0, 1081,    0, 1081, 1081, 1081, 1082,
     1082,    0, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1083,    0,    0,
     1083,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1083,    0, 1083, 1083,
     1083, 1085,    0,    0, 1085,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1085,    0, 1085, 1085, 1085, 1086, 1086,    0, 1086, 1086,

     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
        0, 1086, 1086, 1089,    0,    0, 1089,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1089, 1089, 1089, 1089, 1089, 1090,    0, 1090,
     1090, 1090, 1090, 1090,    0,    0, 1090, 1090, 1090, 1090,
     1090,    0,    0, 1090, 1091,    0, 1091, 1091, 1091, 1091,
     1091,    0,    0, 1091, 1091, 1091, 1091, 1091,    0,    0,
     1091, 1092,    0, 1092, 1092, 1092,    0,    0, 1092, 1093,
        0,    0,    0, 1093,    0, 1093, 1093, 1093,    0,    0,

     1093, 1094,    0, 1094, 1094, 1094, 1094, 1094,    0,    0,
     1094, 1094, 1094, 1094, 1094,    0,    0, 1094, 1095,    0,
     1095, 1095, 1095, 1095, 1095,    0,    0, 1095, 1095, 1095,
     1095, 1095,    0,    0, 1095, 1096,    0, 1096, 1096, 1096,
     1096, 1096, 1096,    0, 1096, 1096, 1096, 1096, 1096,    0,
        0, 1096, 1097,    0, 1097, 1097, 1097, 1097, 1097, 1097,
        0, 1097, 1097, 1097, 1097, 1097,    0,    0, 1097, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098,
     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099,    0,    0,

     1099,    0,    0,    0, 1099,    0,    0,    0,    0,    0,
        0,    0, 1099,    0,    0,    0, 1099,    0, 1099, 1099,
     1099,    0,    0, 1099, 1100,    0, 1100, 1100, 1100, 1100,
     1100,    0,    0, 1100, 1100, 1100, 1100, 1100,    0,    0,
     1100, 1101,    0, 1101, 1101, 1101, 1101, 1101,    0,    0,
     1101, 1101, 1101, 1101, 1101,    0,    0, 1101, 1102, 1102,
     1102, 1102,    0,    0, 1102,    0,    0,    0,    0,    0,
        0,    0,    0, 1102, 1102,    0,    0, 1102,    0, 1102,
     1102, 1102,    0,    0, 1102, 1103, 1103, 1103, 1103,    0,
        0, 1103,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 1103,    0,    0, 1103,    0, 1103, 1103, 1103,    0,
        0, 1103, 1104, 1104, 1104, 1104,    0,    0, 1104,    0,
        0,    0,    0,    0,    0,    0,    0, 1104, 1104,    0,
        0, 1104,    0, 1104, 1104, 1104,    0,    0, 1104, 1105,
        0,    0,    0, 1105,    0, 1105, 1105, 1105,    0,    0,
     1105, 1106,    0, 1106, 1106, 1106,    0,    0, 1106, 1107,
        0, 1107,    0,    0,    0, 1107,    0, 1107, 1107, 1107,
        0,    0, 1107, 1108,    0, 1108, 1108, 1108,    0,    0,
     1108, 1109,    0,    0,    0, 1109,    0, 1109, 1109, 1109,
        0,    0, 1109, 1110, 1110, 1110, 1110, 1110, 1110, 1110,

     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,    0,
     1110, 1110, 1110,    0, 1110,    0,    0, 1110, 1110, 1110,
     1110, 1111,    0, 1111, 1111, 1111,    0,    0, 1111, 1112,
        0, 1112, 1112, 1112,    0,    0, 1112, 1114,    0,    0,
     1114,    0,    0,    0, 1114,    0, 1114, 1114, 1114, 1115,
     1115,    0, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1117,    0,    0,
     1117,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1117,    0, 1117, 1117,

     1117, 1118, 1118,    0, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1119,
     1119, 1119, 1119, 1119, 1120,    0,    0, 1120,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1120, 1120, 1120, 1120, 1120, 1121,    0,
     1121, 1121, 1121, 1121, 1121,    0,    0, 1121, 1121, 1121,
     1121, 1121,    0,    0, 1121, 1122,    0, 1122, 1122, 1122,
        0,    0, 1122, 1123, 1123,    0, 1123,    0,    0,    0,
     1123,    0, 1123, 1123, 1123, 1124, 1124, 1124, 1124, 1124,

     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124,    0, 1124,    0,    0,    0,
     1124, 1124, 1124, 1125, 1125, 1125, 1125,    0,    0, 1125,
        0,    0,    0,    0,    0,    0,    0,    0, 1125, 1125,
        0,    0, 1125,    0, 1125, 1125, 1125,    0,    0, 1125,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126,    0, 1126, 1126, 1126,
        0, 1126,    0, 1126,    0, 1126, 1126, 1126, 1127, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1127, 1127,    0, 1127, 1127, 1127,    0, 1127,

        0,    0,    0, 1127, 1127, 1127, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128,    0, 1128, 1128, 1128,    0, 1128,    0,    0,
        0, 1128, 1128, 1128, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
        0, 1129, 1129, 1129,    0, 1129,    0,    0,    0, 1129,
     1129, 1129, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,    0, 1130,
     1130, 1130,    0, 1130,    0,    0,    0, 1130, 1130, 1130,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934
    } ;

extern int commentScanYY_flex_debug;
int commentScanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = yy_full_lp; /* restore orig. accepting pos. */ \
(yy_state_ptr) = yy_full_state; /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentScanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2008 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 17 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         0,                       TRUE  },
  { "copybrief",       0,                       FALSE },
  { "copydetails",     0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       TRUE  },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       TRUE  },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  printf("Error: DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e,const char *fileName);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         sectionLabel;
static QCString		sectionTitle;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;

static int              g_commentCount;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
}

//-----------------------------------------------------------------------------

static QCString getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:       return "\\class";
    case Entry::STRUCTDOC_SEC:      return "\\struct";
    case Entry::UNIONDOC_SEC:       return "\\union";
    case Entry::EXCEPTIONDOC_SEC:   return "\\exception";
    case Entry::NAMESPACEDOC_SEC:   return "\\namespace";
    case Entry::PROTOCOLDOC_SEC:    return "\\protocol";
    case Entry::CATEGORYDOC_SEC:    return "\\category";
    case Entry::ENUMDOC_SEC:        return "\\enum";
    case Entry::PAGEDOC_SEC:        return "\\page";
    case Entry::MEMBERDOC_SEC:      return "\\fn";
    case Entry::OVERLOADDOC_SEC:    return "\\overload";
    case Entry::FILEDOC_SEC:        return "\\file";
    case Entry::DEFINEDOC_SEC:      return "\\def";
    case Entry::GROUPDOC_SEC:       return "\\defgroup";
    case Entry::MAINPAGEDOC_SEC:    return "\\mainpage";
    case Entry::PACKAGEDOC_SEC:     return "\\package";
    case Entry::DIRDOC_SEC:         return "\\dir";
    case Entry::EXAMPLE_SEC:        return "\\example";
    case Entry::MEMBERGRP_SEC:      return "\\name";
    default: return "";
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  if (!getDocSectionName(current->section).isEmpty())
  {
    //warn(yyFileName,yyLineNr,
    //	    "Warning: found a structural command %s for a section already "
    //	    "marked with structural command %s. Ignoring the latter command.",
    //	     getDocSectionName(s).data(),
    //         getDocSectionName(current->section).data()
    //	);
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentScanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (strcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    item->text += outputXRef;
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    item->text = outputXRef;
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si=new SectionInfo(listName,anchorLabel,
	                            sectionTitle,SectionInfo::Anchor);
    Doxygen::sectionDict.insert(anchorLabel,si);
    docEntry->anchors->append(si);
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict[fText])==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList.append(f);
    Doxygen::formulaDict.insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict.insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="\\_fakenl"; // add fake newlines to
                                                          // keep the warnings 
                                                          // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static void addSection()
{
  sectionTitle+=commentScanYYtext;
  sectionTitle=sectionTitle.stripWhiteSpace();
  //printf("Adding new section file=%s label=%s title=%s\n",yyFileName,sectionLabel.data(),sectionTitle.data()); 
  SectionInfo *si = new SectionInfo(yyFileName,sectionLabel,sectionTitle,SectionInfo::Anchor);
  current->anchors->append(si);
  Doxygen::sectionDict.insert(commentScanYYtext,si);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string upto and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentScanYYtext);
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */





































#line 3310 "<stdout>"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define SkipGuardedSection 25
#define SkipInternal 26
#define NameParam 27
#define InGroupParam 28
#define FnParam 29
#define OverloadParam 30
#define InheritParam 31
#define ExtendsParam 32
#define ReadFormulaShort 33
#define ReadFormulaLong 34
#define AnchorLabel 35
#define HtmlComment 36
#define SkipLang 37

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentScanYYwrap (void );
#else
extern int commentScanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( commentScanYYtext, commentScanYYleng, 1, commentScanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentScanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentScanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentScanYYin))==0 && ferror(commentScanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentScanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentScanYYlex (void);

#define YY_DECL int commentScanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentScanYYtext and commentScanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentScanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentScanYYtext[commentScanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 865 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail adress (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 3523 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentScanYYalloc(YY_STATE_BUF_SIZE  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentScanYYin )
			commentScanYYin = stdin;

		if ( ! commentScanYYout )
			commentScanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentScanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
		}

		commentScanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentScanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 935 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7191 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 884 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 887 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 890 "commentscan.l"
{ // mail adress
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 893 "commentscan.l"
{ // quoted text
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 896 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 899 "commentscan.l"
{ // xref command 
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
/*
<Comment>{DETAILEDCMD}/[^a-z_A-Z]*	{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
   */
case 7:
YY_RULE_SETUP
#line 916 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 921 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
  					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 924 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 927 "commentscan.l"
{ // end of a brief or detailed description
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 929 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 932 "commentscan.l"
{ // potentially interesting command
  					  QCString cmdName = QCString(&commentScanYYtext[1]).stripWhiteSpace();
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  if (cmdPtr) // special action is required
					  {
					    if (cmdPtr->endsBrief)
					    { 
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
					      inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
#else
					      inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf;
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentScanYYtext);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentScanYYtext);
					  }
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 973 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 976 "commentscan.l"
{ // language switch command
                                          QCString langId = &commentScanYYtext[2];
			       	          if (!langId.isEmpty() &&
					      stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 984 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=&commentScanYYtext[2];
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 996 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1001 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1006 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1010 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr);
                                          g_memberGroupHeader.resize(0);
                                        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1015 "commentscan.l"
{ // escaped character
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1018 "commentscan.l"
{ // normal word
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1021 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentScanYYtext); 
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1024 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1027 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentScanYYtext[0]);
  					  addOutput(commentScanYYtext[2]);
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1031 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 1034 "commentscan.l"
{ // at least one blank line (or blank line command)
  					  if (inContext!=OutputBrief)
					  {
  					    addOutput("\n\n");
					    setOutput(OutputDoc);
					  }
					  else 
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1047 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentScanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 1055 "commentscan.l"
{ // newline
  					  addOutput(*commentScanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1059 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 30:
YY_RULE_SETUP
#line 1066 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 1067 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1070 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1072 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 34:
YY_RULE_SETUP
#line 1077 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1082 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1087 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1093 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentScanYYtext; 
 					} 
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 1096 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentScanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1101 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentScanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 1107 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 1111 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 1115 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "Warning: missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 1123 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 1128 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1132 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1136 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "Warning: missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1145 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 48:
YY_RULE_SETUP
#line 1150 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1154 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 1158 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "Warning: missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1167 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 1172 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 1181 "commentscan.l"
{
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1185 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1189 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "Warning: missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1198 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1201 "commentscan.l"
{ // second argument; include file
					  current->includeFile = stripQuotes(commentScanYYtext);
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1205 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1209 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 1214 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 1217 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentScanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1221 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1225 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1229 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 65:
YY_RULE_SETUP
#line 1234 "commentscan.l"
{ // group name
  					  current->name = commentScanYYtext;
					  //lastDefGroup.groupname = commentScanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1246 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1250 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "Warning: missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 1259 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1263 "commentscan.l"
{ // title (stored in type)
					  current->type += commentScanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 1267 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "Warning: missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 71:
YY_RULE_SETUP
#line 1284 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1288 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1291 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "Warning: missing argument after "
					       "\\page."
                                              );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1300 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 1302 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentScanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1311 "commentscan.l"
{ // no file name specfied
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1316 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1320 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1323 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 80:
YY_RULE_SETUP
#line 1328 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentScanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1333 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1337 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "Warning: Missing first argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1346 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1349 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentScanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1353 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1357 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: Missing second argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1366 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1369 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentScanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1374 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1378 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: Missing third argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1387 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 92:
YY_RULE_SETUP
#line 1393 "commentscan.l"
{ // argument
  					  current->relates = commentScanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentScanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1401 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1405 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1413 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1419 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 1424 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1428 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 99:
YY_RULE_SETUP
#line 1434 "commentscan.l"
{ // first argyment
  					  sectionLabel=commentScanYYtext;
                                          addOutput(commentScanYYtext);
					  sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1440 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: \\section command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1448 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "Warning: Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 102:
/* rule 102 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1455 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 103:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1460 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1465 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1469 "commentscan.l"
{ // any character without special meaning
  					  sectionTitle+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1473 "commentscan.l"
{ // unescape escaped command
  					  sectionTitle+=&commentScanYYtext[1];
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1477 "commentscan.l"
{ // unescape escaped character
  					  sectionTitle+=commentScanYYtext[1];
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1481 "commentscan.l"
{ // anything else
  					  sectionTitle+=commentScanYYtext;
					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 109:
YY_RULE_SETUP
#line 1488 "commentscan.l"
{ // first argument
                                          addOutput(commentScanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentScanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 1495 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: \\subpage command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1503 "commentscan.l"
{ // no title, end command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1507 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1511 "commentscan.l"
{ // no title, end of command
  					  unput(*commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 114:
YY_RULE_SETUP
#line 1518 "commentscan.l"
{ // found argument
                                          SectionInfo  *si = new SectionInfo(yyFileName,commentScanYYtext,0,SectionInfo::Anchor);
                                          Doxygen::sectionDict.insert(commentScanYYtext,si);
  					  current->anchors->append(si);
					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1525 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: \\anchor command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1533 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Warning: Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 117:
/* rule 117 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1543 "commentscan.l"
{ // possible ends
  					  addOutput(commentScanYYtext);
					  if (&commentScanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1550 "commentscan.l"
{ // some word
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1553 "commentscan.l"
{ // new line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1557 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1561 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentScanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "Warning: found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1570 "commentscan.l"
{
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1573 "commentscan.l"
{
                                          warn(yyFileName,yyLineNr,
	                                    "Warning: reached end of comment while inside a @%s block; check for missing @end%s tag!",
	                                    blockName.data(),blockName.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 123:
YY_RULE_SETUP
#line 1583 "commentscan.l"
{ // parameter of if/ifnot guard
                                          bool sectionEnabled = Config_getList("ENABLED_SECTIONS").find(commentScanYYtext)!=-1;
					  bool parentEnabled = TRUE;
					  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
					  if (parentEnabled)
					  {
					    if (
						(sectionEnabled && guardType==Guard_If) ||  
						(!sectionEnabled && guardType==Guard_IfNot)
					       ) // section is visible
					    {
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( Comment );
					    }
					    else // section is invisible
					    {
					      if (guardType!=Guard_Skip)
					      {
					      	guards.push(new GuardedSection(FALSE,TRUE));
					      }
					      BEGIN( SkipGuardedSection );
					    }
					  }
					  else // invisible because of parent
					  {
					    guards.push(new GuardedSection(FALSE,FALSE));
					    BEGIN( SkipGuardedSection );
					  }
  					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1613 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 1618 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1622 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 127:
/* rule 127 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1628 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1632 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1636 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"Warning: found @endif without matching start command");
					  }
					  else
					  {
					    delete guards.pop();
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 130:
/* rule 130 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1648 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"Warning: found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( Comment );
					    }
					  }
  					}
	YY_BREAK
case 131:
/* rule 131 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1665 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"Warning: found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1680 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1684 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1686 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
#line 1692 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1696 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1698 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1704 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1709 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1714 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentScanYYtext;
					  current->name+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 141:
YY_RULE_SETUP
#line 1721 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentScanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1727 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "Warning: Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1738 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1742 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1748 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentScanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 1757 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1761 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentScanYYtext;
  					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1764 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1768 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1772 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 1780 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 1794 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1798 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 154:
YY_RULE_SETUP
#line 1804 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 1810 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: \\inherit command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1818 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Warning: Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 157:
YY_RULE_SETUP
#line 1827 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 1833 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Warning: \\extends or \\implements command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1841 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 160:
YY_RULE_SETUP
#line 1846 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentScanYYtext[2];
				     if (langId.isEmpty() ||
					 stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1854 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1856 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentScanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1859 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1863 "commentscan.l"
ECHO;
	YY_BREAK
#line 5305 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentScanYYin at a new source and called
			 * commentScanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentScanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentScanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentScanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentScanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentScanYYrestart(commentScanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 935 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 935 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 934);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentScanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentScanYYrestart(commentScanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentScanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentScanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentScanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentScanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
	}

	commentScanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentScanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentScanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentScanYYpop_buffer_state();
	 *		commentScanYYpush_buffer_state(new_buffer);
     */
	commentScanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentScanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentScanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentScanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentScanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentScanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentScanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentScanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentScanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentScanYY_create_buffer()
 * 
 */
    void commentScanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentScanYYfree((void *) b->yy_ch_buf  );

	commentScanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentScanYYrestart() or at EOF.
 */
    static void commentScanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentScanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentScanYY_init_buffer was _probably_
     * called from commentScanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentScanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentScanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentScanYYensure_buffer_stack();

	/* This block is copied from commentScanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentScanYY_switch_to_buffer. */
	commentScanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentScanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentScanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentScanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentScanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentScanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentScanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentScanYYlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentScanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char * yystr )
{
    
	return commentScanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentScanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentScanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentScanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentScanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentScanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentScanYYtext[commentScanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentScanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentScanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentScanYYget_lineno  (void)
{
        
    return commentScanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentScanYYget_in  (void)
{
        return commentScanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentScanYYget_out  (void)
{
        return commentScanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentScanYYget_leng  (void)
{
        return commentScanYYleng;
}

/** Get the current token.
 * 
 */

char *commentScanYYget_text  (void)
{
        return commentScanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentScanYYset_lineno (int  line_number )
{
    
    commentScanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentScanYY_switch_to_buffer
 */
void commentScanYYset_in (FILE *  in_str )
{
        commentScanYYin = in_str ;
}

void commentScanYYset_out (FILE *  out_str )
{
        commentScanYYout = out_str ;
}

int commentScanYYget_debug  (void)
{
        return commentScanYY_flex_debug;
}

void commentScanYYset_debug (int  bdebug )
{
        commentScanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentScanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentScanYYin = stdin;
    commentScanYYout = stdout;
#else
    commentScanYYin = (FILE *) 0;
    commentScanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentScanYYlex_init()
     */
    return 0;
}

/* commentScanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentScanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentScanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentScanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentScanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentScanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentScanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentScanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentScanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentScanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentScanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1863 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) current->name = "mainpage";
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput("@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput("@"+s+" ");
  BEGIN(SectionLabel);
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"Warning: found \\subpage command in a comment block that is not marked as a page!");
  }
  addOutput("@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput("@"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput("@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"Warning: found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"Warning: found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"Warning: found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool("INTERNAL_DOCS"))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    BEGIN( SkipInternal );
  }
  else
  {
    addOutput("\\internal "); 
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"Warning: End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in */     int lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;

  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[%s]\n",fileName.data(),lineNr,comment.data()
              );
  
  commentScanYYrestart( commentScanYYin );
  BEGIN( Comment );
  commentScanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[%s]\ndocs=[%s]\ninbody=[%s]\n===========\n",
	       current->brief.data(),current->doc.data(),current->inbodyDocs.data()
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry,fileName);

  newEntryNeeded = needNewEntry;

  if (parseMore) position=inputPosition; else position=0;

  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"Warning: end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"Warning: end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"Warning: try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
}

void groupLeaveCompound(const char *,int,const char *)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"Warning: end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	stricmp(mi->header,info->header)==0  // same header
       )
    {
      //printf("Found it!\n");
      return di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
    //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
    //	e->name.data(),e->section,g_autoGroupStack.count());
  }
  else // start of a member group
  {
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int)
{
  //printf("==> closeGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    e->groups->removeLast();
    //printf("Removing %s\n",grp->groupname.data());
    delete grp;
    initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s)\n",g_memberGroupId,
  //       g_memberGroupRelates.data());
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e,const char *fileName)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}


#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentScanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


