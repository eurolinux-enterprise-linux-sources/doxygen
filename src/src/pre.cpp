
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE preYYrestart(preYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int preYYleng;

extern FILE *preYYin, *preYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up preYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via preYYrestart()), so that the user can continue scanning by
	 * just pointing preYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when preYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int preYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow preYYwrap()'s to do buffer switches
 * instead of setting up a fresh preYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void preYYrestart (FILE *input_file  );
void preYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE preYY_create_buffer (FILE *file,int size  );
void preYY_delete_buffer (YY_BUFFER_STATE b  );
void preYY_flush_buffer (YY_BUFFER_STATE b  );
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void preYYpop_buffer_state (void );

static void preYYensure_buffer_stack (void );
static void preYY_load_buffer_state (void );
static void preYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER preYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE preYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE preYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE preYY_scan_bytes (yyconst char *bytes,int len  );

void *preYYalloc (yy_size_t  );
void *preYYrealloc (void *,yy_size_t  );
void preYYfree (void *  );

#define yy_new_buffer preYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        preYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            preYY_create_buffer(preYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define preYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *preYYin = (FILE *) 0, *preYYout = (FILE *) 0;

typedef int yy_state_type;

extern int preYYlineno;

int preYYlineno = 1;

extern char *preYYtext;
#define yytext_ptr preYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up preYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	preYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 156
#define YY_END_OF_BUFFER 157
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1138] =
    {   0,
      139,  139,  157,  155,  156,    1,  155,  156,  154,  156,
        3,  155,  156,  155,  156,  155,  156,    2,  155,  156,
        6,  155,  156,    1,    6,  155,  156,    6,  155,  156,
        6,  154,  156,    3,    6,  155,  156,    5,  155,  156,
        6,  155,  156,    6,  155,  156,    6,  155,  156,    2,
        6,  155,  156,   53,  155,  156,    1,   53,  155,  156,
       49,  154,  156,    3,   53,  155,  156,   53,  155,  156,
       53,  155,  156,   50,   53,  155,  156,   50,   53,  155,
      156,   50,   53,  155,  156,   50,   53,  155,  156,   50,
       53,  155,  156,    2,   53,  155,  156,   77,  155,  156,

        1,   77,  155,  156,   75,  154,  156,    3,   77,  155,
      156,   77,  155,  156,   77,  155,  156,   76,   77,  155,
      156,   76,   77,  155,  156,   76,   77,  155,  156,    2,
       77,  155,  156,   78,   79,  155,  156,    1,   78,   79,
      155,  156,   82,  154,  156,    3,   78,   79,  155,  156,
       79,  155,  156,   78,   79,  155,  156,    2,   78,   79,
      155,  156,   23,  155,  156,    1,   23,  155,  156,   24,
      154,  156,    3,   23,  155,  156,   16,   23,  155,  156,
       23,  155,  156,   23,  155,  156,   23,  155,  156,   21,
       23,  155,  156,16404,   23,  155,  156,   21,   23,  155,

      156,16404,   11,   23,  155,  156,   12,   23,  155,  156,
        2,   23,  155,  156,   17,  155,  156,    1,   17,  155,
      156,   19,  155,  156,   17,  155,  156,   17,  155,  156,
      155,  156,    2,   17,  155,  156,  155,  156,    1,  155,
      156,    3,  155,  156,  155,  156,  155,  156,    2,  155,
      156,   84,  155,  156,   88,  155,  156,    1,   88,  155,
      156,   86,  154,  156,    3,   88,  155,  156,   88,  155,
      156,   88,  155,  156,   88,  155,  156,    2,   88,  155,
      156, 8282,  155,  156,16474,16475,  155,  156,   93,  155,
      156,   94,  155,  156,   92,  155,  156,  155,  156,   96,

      155,  156,  151,  155,  156,    1,  151,  155,  156,  139,
      151,  155,  156,  138,  154,  156,    3,  151,  155,  156,
      142,  151,  155,  156,  134,  151,  155,  156,  143,  151,
      155,  156,  151,  155,  156,  151,  155,  156,  141,  151,
      155,  156,  135,  151,  155,  156,  151,  155,  156,    2,
      151,  155,  156,   70,  155,  156,    1,   70,  155,  156,
       69,  154,  156,    3,   70,  155,  156,   70,  155,  156,
       70,  155,  156,    2,   70,  155,  156,   68,   70,  155,
      156,    1,   68,   70,  155,  156,   68,   70,  155,  156,
       68,   69,  154,  156,    3,   68,   70,  155,  156,   67,

       70,  155,  156,   68,   70,  155,  156,   68,   70,  155,
      156,    2,   68,   70,  155,  156,  112,  114,  155,  156,
        1,  114,  155,  156,  113,  154,  156,    3,  112,  114,
      155,  156,  114,  155,  156,  114,  155,  156,  112,  114,
      155,  156,  114,  155,  156,    2,  112,  114,  155,  156,
      115,  136,  155,  156,    1,  115,  136,  155,  156,  117,
      154,  156,    3,  115,  136,  155,  156,  136,  155,  156,
      115,  136,  155,  156,  115,  136,  155,  156,  135,  136,
      155,  156,    2,  115,  136,  155,  156,  114,  155,  156,
      114,  155,  156,  114,  155,  156,  124,  128,  129,  155,

      156,    1,  124,  129,  155,  156,  125,  154,  156,    3,
      124,  128,  129,  155,  156,  128,  129,  155,  156,  124,
      128,  129,  155,  156,  129,  155,  156,    2,  124,  128,
      129,  155,  156,  121,  123,  155,  156,    1,  123,  155,
      156,  122,  154,  156,    3,  121,  123,  155,  156,  123,
      155,  156,  121,  123,  155,  156,  121,  123,  155,  156,
        2,  121,  123,  155,  156,  132,  133,  155,  156,    1,
      133,  155,  156,    3,  132,  133,  155,  156,  132,  133,
      155,  156,  132,  133,  155,  156,    2,  132,  133,  155,
      156,   59,  155,  156,    1,   59,  155,  156,   60,  154,

      156,    3,   59,  155,  156,   59,  155,  156,   59,  155,
      156,   58,   59,  155,  156,   59,  155,  156,   58,   59,
      155,  156,    2,   59,  155,  156,   66,  155,  156,    1,
       66,  155,  156,   64,  154,  156,    3,   66,  155,  156,
       66,  155,  156,   66,  155,  156,   62,   66,  155,  156,
       66,  155,  156,    2,   66,  155,  156,   65,   66,  155,
      156,   63,   66,  155,  156,  149,  155,  156,    1,  149,
      155,  156,    3,  149,  155,  156,  146,  149,  155,  156,
      149,  155,  156,  149,  155,  156,  149,  155,  156,    2,
      149,  155,  156,  150,  155,  156,    1,  150,  155,  156,

        3,  150,  155,  156,  148,  150,  155,  156,  150,  155,
      156,  150,  155,  156,  150,  155,  156,    2,  150,  155,
      156,   54,  155,  156,   52,  155,  156,    1,   52,  155,
      156,    3,   52,  155,  156,   52,  155,  156,   52,  155,
      156,   52,  155,  156,    2,   52,  155,  156,   31,  155,
      156,    1,   31,  155,  156,   29,  154,  156,    3,   31,
      155,  156,   28,   31,  155,  156,   31,  155,  156,   25,
       31,  155,  156,   26,   31,  155,  156,   31,  155,  156,
       31,  155,  156,   30,   31,  155,  156,    2,   31,  155,
      156,   35,  155,  156,    1,   35,  155,  156,    3,   35,

      155,  156,   32,   35,  155,  156,   35,  155,  156,   35,
      155,  156,   35,  155,  156,    2,   35,  155,  156,  108,
      155,  156,    1,  108,  155,  156,    3,  108,  155,  156,
      108,  155,  156,  108,  155,  156,  106,  108,  155,  156,
        2,  108,  155,  156,  152,  153,    6,    6,    5,    6,
       50,   50,   50,   50,   50,   50,   50,   50,   81,  152,
       80,  153,   76,   76,   76,   76,   78,   78, 8212,   21,
    16404,   22,   21,16404,   17,   17,  152,   17,  153,   17,
       18,   85,  152,  153,   83,   84,   86,  152,  153,   87,
     8282, 8283,   89, 8282,16474,16475,   94,   93,   94,   92,

       96,   96,  139,  140,   97,  152,   98,  153,  135,  137,
       68,   68,   67,  112,   99,  101,  152,  100,  153,  112,
      115,  116,  115,  153,  115,  111,  111,  152,  124,  128,
      124,  128,  126,  128,  152,  127,  128,  153,  124,  128,
      121,  118,  120,  152,  119,  121,  153,  121,  132,  130,
      132,  152,  131,  132,  153,  132,   58,   55,   58,   62,
       61,   63,  145,  152,  144,  153,  147,   54,   51,   33,
      152,   33,  153,   34,  106,  152,  153,    4,16391,   50,
       50,   50,   50,   43,   50,   50,   50,   50,   50,   81,
       81,  152,   80,   80,  153,   76,   76,   76,   71,   76,

       76,    4,   78,   15,   15,   21,16404,   17,  152,   17,
      153,    4,   17,  152,  153,    4,    4,   85,  152,  153,
        4,   95,  140,    4,  112,  115,  153,    4,  115,  110,
      128,  152,  128,  153,    4,  124,  128,    4,  128,  121,
      153,    4,  121,  132,  152,  132,  153,    4,  132,   58,
       27,16391,    9, 8199,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   76,   72,   76,   76,   76,   14,   13,
       14,   21,16404,   96,  102,   58,   27,    9, 8199,    9,
       50,   44,   47,   45,   45,   50,   50,   50,   50,   50,
       50,   50,   73,   76,   74,   76,   76,   13,   21,16404,

      104,   58,    8,    9,   50,   48,   40,   39,   50,   50,
       50,   46,   21,16404,  103,  105,  107,   58,    9,   38,
       42,   41,16420,   37,   10,   58,    9, 8228,   57,   56,
        9, 8228,  109,    9,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_accept[1107] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    6,    9,   11,   14,
       16,   18,   21,   24,   28,   31,   34,   38,   41,   44,
       47,   50,   54,   57,   61,   64,   68,   71,   74,   78,
       82,   86,   90,   94,   98,  101,  105,  108,  112,  115,

      118,  122,  126,  130,  134,  138,  143,  146,  151,  154,
      158,  163,  166,  170,  173,  177,  181,  184,  187,  190,
      195,  198,  203,  207,  211,  215,  218,  222,  225,  228,
      231,  233,  237,  239,  242,  245,  247,  249,  252,  255,
      258,  262,  265,  269,  272,  275,  278,  282,  287,  289,
      292,  295,  298,  300,  303,  306,  310,  314,  317,  321,
      325,  329,  333,  336,  339,  343,  347,  350,  354,  357,
      361,  364,  368,  371,  374,  378,  382,  387,  391,  395,
      400,  404,  408,  412,  417,  421,  425,  428,  433,  436,
      439,  443,  446,  451,  455,  460,  463,  468,  471,  475,

      479,  483,  488,  491,  494,  497,  502,  507,  510,  516,
      520,  525,  528,  534,  538,  542,  545,  550,  553,  557,
      561,  566,  570,  574,  579,  583,  587,  592,  595,  599,
      602,  606,  609,  612,  616,  619,  623,  627,  630,  634,
      637,  641,  644,  647,  651,  654,  658,  662,  666,  669,
      673,  677,  681,  684,  687,  690,  694,  697,  701,  705,
      709,  712,  715,  718,  722,  725,  728,  732,  736,  739,
      742,  745,  749,  752,  756,  759,  763,  767,  770,  774,
      778,  781,  784,  788,  792,  795,  799,  803,  807,  810,
      813,  816,  820,  823,  827,  831,  834,  837,  841,  845,

      846,  847,  847,  848,  849,  850,  851,  851,  851,  851,
      852,  853,  854,  855,  856,  857,  858,  859,  861,  863,
      864,  865,  866,  867,  868,  869,  869,  869,  869,  870,
      872,  873,  873,  875,  876,  878,  880,  881,  882,  882,
      883,  884,  885,  885,  885,  886,  887,  887,  888,  889,
      890,  890,  891,  891,  892,  893,  894,  897,  897,  898,
      899,  900,  901,  901,  902,  902,  903,  904,  904,  905,
      907,  909,  910,  911,  911,  912,  913,  914,  915,  916,
      918,  920,  921,  921,  921,  921,  921,  921,  921,  921,
      921,  921,  921,  922,  923,  925,  926,  927,  929,  929,

      929,  931,  932,  933,  936,  939,  941,  941,  942,  943,
      945,  948,  949,  950,  953,  956,  957,  958,  959,  959,
      960,  961,  962,  963,  965,  967,  968,  969,  970,  970,
      970,  970,  972,  974,  975,  976,  977,  978,  979,  979,
      979,  979,  980,  981,  982,  983,  984,  985,  986,  987,
      988,  989,  990,  991,  993,  994,  996,  997,  998,  999,
     1000, 1001, 1002, 1004, 1005, 1005, 1006, 1006, 1006, 1008,
     1010, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022,
     1023, 1023, 1024, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,

     1026, 1026, 1028, 1030, 1030, 1031, 1033, 1035, 1038, 1040,
     1040, 1042, 1044, 1046, 1048, 1050, 1051, 1051, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1053, 1053, 1054, 1054, 1055,
     1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
     1067, 1068, 1069, 1070, 1072, 1072, 1072, 1074, 1075, 1075,
     1075, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1077,
     1077, 1078, 1078, 1078, 1078, 1078, 1079, 1079, 1079, 1079,
     1079, 1080, 1080, 1081, 1081, 1082, 1084, 1085, 1086, 1087,
     1088, 1089, 1090, 1091, 1092, 1093, 1094, 1094, 1095, 1097,

     1098, 1099, 1099, 1099, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1102, 1102, 1102, 1102, 1102, 1102,
     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
     1103, 1103, 1103, 1103, 1103, 1103, 1103, 1104, 1104, 1105,
     1105, 1106, 1106, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
     1113, 1113, 1113, 1115, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1117, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1119,
     1119, 1119, 1119, 1120, 1120, 1121, 1121, 1122, 1123, 1124,
     1125, 1125, 1125, 1125, 1125, 1126, 1126, 1126, 1126, 1126,

     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1127, 1127, 1127, 1127,
     1128, 1128, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1130, 1131, 1131, 1131, 1131, 1132, 1132, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,

     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,

     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,

     1138, 1138, 1138, 1138, 1138, 1138
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,    1,    1,   10,   11,
       12,   13,    1,   14,   15,   16,   17,   18,   18,   18,
       18,   18,   18,   18,   18,   19,   19,   20,    1,   21,
       22,   23,   24,   25,   26,   26,   27,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       28,   29,   30,    1,   26,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   37,   37,   40,   41,   42,
       43,   44,   37,   45,   46,   47,   48,   49,   37,   50,
       51,   37,   52,    1,   53,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[55] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    1,    1,    8,
        9,    6,   10,    1,   11,   12,   13,   14,   14,    1,
       15,    6,    6,    1,   16,   17,   17,    1,   18,    1,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1169] =
    {   0,
        0,    4,    8,   61,  115,    0,  169,    0,   14,   18,
      223,    0,   32,  276,  280,  284,  338,    0,  391,  395,
      424,    0,  475,    0,  529,    0,   43,  399,  582,  586,
      590,  596,  649,  702,  756,    0,  809,  862,  613,  655,
      622,  681,  617,  697,  916,    0,  970,    0, 1013,    0,
      823,  841,  827, 1063, 1092,    0, 1067, 1142, 1195, 1248,
     1150, 1156, 1302,    0, 2392, 4756, 4756, 4756, 4756,   13,
     2366, 4756, 4756, 4756,   47, 4756, 4756, 4756,   16, 2362,
       72, 4756, 4756, 4756, 4756, 4756,   27, 2359,    0, 2334,
        1,   10, 2309, 4756, 4756, 4756, 4756, 4756,   40, 2318,

        0,   37, 2305, 4756,    0,    0, 4756,    0,   63, 2315,
        0, 4756, 4756, 4756, 4756, 4756, 2306,   76, 2309,   91,
       10,  684, 4756, 4756, 4756,    0,    0, 4756,   87, 2308,
        0,    0,    4,   85,  272,  289,  287,  291,   98, 2326,
     2325, 4756, 2315,  305,  295,   66, 2310,  102,  100, 2310,
     2308, 2307, 2285,  310, 4756, 4756,  312, 4756, 4756, 4756,
     2292, 4756,   94, 2265, 4756,    0,   77, 4756, 4756, 4756,
     4756, 4756,   97, 2263, 4756, 4756, 4756,  313, 4756, 4756,
     4756,  310, 2261, 4756,    0, 4756, 4756,    0, 2262,  311,
     2248, 1332,    0,    0,    0, 4756,    0, 2253,  312, 2244,

        0,    0, 2249,  318,  297,  392,    0, 4756,  396,  393,
      409,  257,  412,    0, 4756, 4756,    0, 2243,  404, 2229,
        0,    0, 4756,    0,  405, 2227,    0, 4756, 4756, 4756,
     4756,  414, 2222,    0,  332, 2210, 4756, 4756, 4756, 4756,
     4756,  415, 2218,    0, 2230, 4756, 4756,    0, 4756, 4756,
     4756, 4756,  417, 2205,    0, 4756, 4756, 4756, 4756, 4756,
      422, 2203,    0, 4756,    0, 4756, 4756, 4756,  423, 2202,
      433, 4756, 4756, 4756, 4756, 4756, 4756, 2194, 4756, 4756,
      429, 2191, 4756, 4756, 4756, 4756, 4756, 4756,  430, 2185,
        0, 4756, 4756, 4756, 4756,  431, 2184,    0, 4756, 2193,

     2184,    0, 4756,  655, 4756,  714,  582,  585,  719,    0,
     2164,  563, 2164,  622, 2152, 2162, 2151, 2166, 2156,    0,
      565, 2138,  705,    0, 1377, 2160,  598,  644, 4756,  739,
     4756, 2160,  812,    0, 2144, 2130, 1395, 4756,  418, 4756,
      705,  706, 1413,  620, 4756,  658, 2134, 4756,  639,  628,
     1433, 4756, 2133,  687, 4756, 4756,  689,  665, 2120, 2119,
     2116, 2110, 2096,  694, 2094,  733,  662, 2101, 2100, 2087,
     2078,    0, 4756, 2088, 4756,  745, 4756,    0, 4756,  707,
     2074, 1451, 1442, 2041, 2039, 2039, 2031, 2046, 2038, 2011,
     2015, 2008,    0, 4756, 2030, 1487, 4756, 2029, 1999,  809,

      818,    0,    0, 2026, 2015, 1509, 1988,    0, 4756, 2011,
     2003, 1527,    0, 2001, 1996, 1545,    0, 4756, 2002, 1968,
        0, 4756,    0, 1972, 1967, 4756,    0, 4756, 1973, 1966,
     1956, 1960, 1952, 4756,    0, 4756, 4756, 4756,  743,  830,
     1952, 1023, 1924, 1922, 1921, 1913, 4756, 1912, 1910, 1900,
     1895, 1899,    0,    0,    0,    0, 1896, 1893, 1886, 4756,
     1889, 1887,    0, 4756, 1910, 1903,  839,  850,  869,    0,
        0,    0,  582,  853,  861, 4756, 1905, 1901, 1899, 4756,
     1886, 1897,    0, 1856, 1849,  841, 1839, 1854, 1852, 1833,
     1841, 1830,  848, 1821, 1828, 1818, 1811, 1809, 1811, 1797,

     1800,    0,    0, 1795, 4756,    0,    0,  819,    0, 1784,
        0,    0,    0,    0,    0, 1786, 1814, 4756, 1807,  878,
      886, 1796,  896, 1795, 1096, 1172, 1178, 1183, 4756, 1763,
      899, 1568, 1768, 1763, 1762, 1746, 1742, 1752,  900,  868,
     1749, 1748, 4756, 4756,  891, 1026, 1031, 4756, 1742, 1728,
     4756, 1732, 1721, 1725, 1729, 1719, 1715, 1717, 1717,  909,
     1716, 1707, 1711, 1702, 1700, 1703, 1691, 1045, 1691, 1720,
     4756, 1023, 1716, 1085, 1078, 4756, 1062, 1211, 1222, 1099,
     1094, 1234, 1241, 1359, 1692, 4756, 4756, 1074, 1689, 1622,
     1101, 1687, 1675, 1686, 1716, 4756, 1106, 1681,    0, 1104,

     4756, 1702, 1190, 1410, 1676, 1146, 1659, 1663, 1653, 1650,
     1660, 1647, 1165, 1186, 1522, 1521, 1513, 1519, 1517, 1527,
     1510, 1500, 1498, 1493, 1505, 1503, 1478, 1488, 1476, 1481,
     1503, 1502, 1205, 1502, 1674, 1161, 4756, 1466, 1677, 1680,
     1500, 1117, 1465, 4756, 1111, 4756, 1210, 1215, 1465, 1492,
     1458, 1264, 1684, 1273, 1442, 1434, 1439, 1437, 1446, 1425,
     1276, 4756, 1279, 1423, 1422, 1417, 1419, 1418, 1406, 1411,
     1415, 1400, 1405, 1395, 1399, 1404, 1393, 1393, 1398, 1698,
     1701, 1704, 1711, 1734, 1428, 1237, 1230, 4756, 1383, 4756,
     1284, 1392, 1737, 1402, 4756, 1385, 1383, 1382, 1369, 1361,

     1362, 1359, 1351, 1343, 1333, 1329, 1339, 1325, 1340, 1334,
     1336, 1326, 1325, 1328, 1316, 1253, 1754, 1757, 1767, 1775,
     1778,    0, 1485, 1789, 1351, 1231, 1224, 1206, 1200, 1208,
     1177,    0, 1160, 1144, 1137, 1129, 1112, 1111, 1069, 1074,
     1051, 1259, 4756, 1798, 1808, 1811, 1818, 1829,    0, 1524,
     1832, 1841, 1019,  998,  991, 4756,  864,  866,  851,  845,
      843,  831,  784, 1849, 1852, 1862, 1870, 1874, 1542, 1884,
     1893,  768,  772,  710,  645,  624,  590,  561, 1903, 1907,
     1913, 1926, 1934, 1937, 1946, 1957,  403,  412,  364, 1963,
     1967, 1977, 1985, 1988, 1991, 1996, 2007,  266, 2013, 2018,

     2023, 2031, 2041, 2049, 2069, 2052, 2059, 2082, 2085, 2094,
     2063, 2103, 2113, 2122, 2125, 2128, 2137, 2140, 2145, 2150,
     2155, 2164, 2158, 2173, 2183, 2178, 2188, 2200, 2209, 2214,
     2217, 2228, 2233, 2236, 2245, 2251, 2260, 2254, 2270, 2279,
     2273, 2288, 2291, 2300, 2304, 2313, 2318, 2323, 2333, 2342,
     2345, 2350, 2355, 2363, 2368, 2359, 2373, 2384, 2377, 2393,
     2405, 2396, 2410, 2419, 2414, 2428, 2438, 2447, 2450, 2465,
     2455, 2470, 2475, 2459, 2480, 2489, 2484, 2498, 2501, 2510,
     2515, 2518, 2527, 2534, 2539, 2530, 2544, 2553, 2562, 2569,
     2581, 2572, 2590, 2593, 2603, 2606, 2615, 2624, 2627, 2632,

     2637, 2643, 2646, 2655, 2658, 2661, 2670, 2674, 2683, 2677,
     2688, 2697, 2692, 2706, 2716, 2711, 2721, 2734, 2743, 2747,
     2750, 2761, 2766, 2769, 2778, 2785, 2794, 2788, 2803, 2812,
     2806, 2821, 2824, 2833, 2838, 2848, 2857, 2862, 2867, 2876,
     2879, 2884, 2889, 2893, 2903, 2898, 2912, 2922, 2908, 2927,
     2940, 2917, 2953, 2968, 2949, 2973, 2978, 2958, 2983, 2992,
     2962, 3001, 3004, 3013, 3018, 3021, 3030, 3034, 3043, 3037,
     3048, 3057, 3066, 3072, 3081, 3075, 3093, 3096, 3107, 3110,
     3119, 3131, 3134, 3139, 3148, 3151, 3161, 3170, 3173, 3182,
     3176, 3191, 3194, 3203, 3206, 3216, 3211, 3221, 3226, 3235,

     3238, 3247, 3256, 3261, 3266, 3271, 3277, 3286, 3280,   73,
     3291, 3300, 3306, 3311, 3317, 3322, 3326, 3331, 3337, 3342,
     3346, 3351, 3356, 3361, 3367, 3372, 3376,    7, 3381, 3387,
     3392, 3396, 3401, 3406, 3411, 3417, 3422, 3426, 3431, 3437,
     3442, 3446, 3451, 3456, 3461, 3467, 3472, 3476, 3481, 3487,
     3492, 3496, 3501, 3506, 3511, 3517, 3522, 3526, 3531, 3537,
     3542, 3546, 3551, 3556, 3561, 3567, 3572, 3576, 3581, 3587,
     3592, 3596, 3601, 3606, 3611, 3617, 3622, 3626, 3631, 3637,
     3642, 3646, 3651, 3656, 3661, 3667, 3672, 3676, 3681, 3687,
     3692, 3696, 3701, 3706, 3711, 3717, 3722, 3726, 3731, 3737,

     3742, 3746, 3751, 3756, 4756, 3808, 3826, 3844, 3862, 3880,
     3898, 3916, 3934, 3952, 3970, 3988, 4006, 4024, 4042, 4060,
     4078, 4096, 4114,  875, 1215, 4132, 4150, 4166, 4183, 4200,
     4218, 4234, 4251, 4266, 4281, 1271, 4298, 4316, 4333, 4351,
     4368, 4385, 4402, 4420, 1275, 1277, 1282, 4438, 1283, 4456,
     4474, 4482, 4494, 4509, 4527, 4545, 4563, 4581, 4598, 4616,
     4634, 4652, 4669, 4687, 4705, 4720, 1284, 4737
    } ;

static yyconst flex_int16_t yy_def[1169] =
    {   0,
     1106, 1106, 1106, 1107, 1105,    5, 1105,    7, 1108, 1108,
     1105,   11, 1109, 1109, 1110, 1110, 1105,   17, 1111, 1111,
       17,   21, 1105,   23, 1105,   25, 1112, 1113, 1106, 1106,
     1106, 1106, 1114, 1114, 1105,   35, 1114, 1114, 1115, 1115,
     1116, 1116, 1117, 1117, 1105,   45, 1105,   47,   47,   49,
     1118, 1118, 1119, 1119,   21,   55, 1120, 1120, 1121, 1121,
     1122, 1122, 1105,   63, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1123, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1124, 1124,
     1124, 1124, 1124, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

     1125, 1125, 1125, 1105, 1126, 1126, 1105, 1126, 1105, 1126,
     1126, 1105, 1105, 1105, 1105, 1105, 1127, 1105, 1105, 1128,
     1105, 1128, 1105, 1105, 1105, 1129, 1129, 1105, 1129, 1129,
     1130, 1129, 1131, 1131, 1131, 1131, 1131, 1131, 1132, 1133,
     1133, 1105, 1133, 1133, 1133, 1105, 1133, 1134, 1105, 1105,
     1105, 1105, 1105, 1135, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1136, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1137, 1105, 1105,
     1105, 1105, 1105, 1105, 1138, 1105, 1105, 1138, 1105, 1105,
     1138, 1105, 1138, 1139, 1139, 1105, 1139, 1105, 1139, 1139,

     1136, 1139, 1105, 1105, 1105, 1140, 1141, 1105, 1140, 1142,
     1140, 1105, 1140, 1143, 1105, 1105, 1143, 1105, 1143, 1143,
     1143, 1144, 1105, 1144, 1144, 1144, 1144, 1105, 1105, 1105,
     1105, 1105, 1105, 1145, 1105, 1145, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1146, 1105, 1105, 1105, 1147, 1105, 1105,
     1105, 1105, 1105, 1105, 1148, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1148, 1105, 1149, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1150, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1151, 1105, 1105, 1105, 1105, 1105, 1105, 1152, 1105, 1105,

     1105, 1153, 1105, 1123, 1105, 1105, 1105, 1154, 1105, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1155, 1156, 1125,
     1125, 1125, 1125, 1126, 1126, 1105, 1157, 1105, 1105, 1128,
     1105, 1105, 1128, 1129, 1129, 1129, 1129, 1105, 1131, 1105,
     1131, 1131, 1131, 1105, 1105, 1132, 1133, 1105, 1133, 1133,
     1133, 1105, 1105, 1105, 1105, 1105, 1134, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1135, 1105, 1105, 1105, 1105,
     1105, 1136, 1105, 1105, 1105, 1137, 1105, 1138, 1105, 1105,
     1105, 1138, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1139, 1105, 1139, 1139, 1105, 1105, 1105, 1105,

     1140, 1141, 1142, 1142, 1142, 1140, 1105, 1143, 1105, 1105,
     1143, 1143, 1144, 1144, 1144, 1144, 1145, 1105, 1105, 1145,
     1146, 1105, 1147, 1105, 1105, 1105, 1149, 1105, 1105, 1158,
     1159, 1105, 1105, 1105, 1152, 1105, 1105, 1105, 1160, 1154,
     1161, 1105, 1124, 1124, 1124, 1124, 1105, 1124, 1124, 1124,
     1124, 1124, 1155, 1155, 1156, 1156, 1125, 1125, 1125, 1105,
     1125, 1125, 1126, 1105, 1105, 1105, 1105, 1105, 1128, 1129,
     1129, 1129, 1131, 1131, 1131, 1105, 1133, 1133, 1133, 1105,
     1105, 1105, 1138, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

     1105, 1139, 1139, 1105, 1105, 1142, 1142, 1140, 1142, 1105,
     1143, 1143, 1144, 1144, 1144, 1145, 1162, 1105, 1105, 1105,
     1160, 1163, 1105, 1161, 1164, 1105, 1105, 1105, 1105, 1124,
     1124, 1105, 1124, 1124, 1124, 1124, 1124, 1124, 1125, 1125,
     1125, 1125, 1105, 1105, 1105, 1105, 1128, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1145, 1165,
     1105, 1105, 1163, 1164, 1105, 1105, 1164, 1164, 1164, 1105,
     1164, 1105, 1105, 1105, 1124, 1105, 1105, 1105, 1124, 1105,
     1124, 1124, 1124, 1124, 1124, 1105, 1105, 1125, 1125, 1125,

     1105, 1105, 1105, 1128, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1145,
     1105, 1105, 1164, 1164, 1164, 1105, 1105, 1105, 1105, 1105,
     1124, 1105, 1105, 1105, 1105, 1105, 1124, 1124, 1124, 1105,
     1105, 1105, 1128, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1145, 1164,
     1164, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1166, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1145, 1164, 1164, 1105, 1105,
     1105, 1167, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1168, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1164, 1164, 1105, 1105, 1105, 1167, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1164, 1164, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1164, 1164,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1164,
     1164, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1164, 1164,

     1105, 1105, 1105, 1105, 1105, 1105, 1164, 1164, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

     1105, 1105, 1105, 1105,    0, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105
    } ;

static yyconst flex_int16_t yy_nxt[4811] =
    {   0,
     1105,   67, 1105,   68,   69,   67, 1105,   68,   69,   67,
      340,   68,   69,  331,  332,  106,   70,  107,  108,  106,
       70,  107,  108,   71,   70,  300,  340,   71,  300,  301,
      109,   71,  301,  127,  109,   68,   69,  110,  128,  300,
      312,  110,  313,  301,  170,  314,  171,  172,  129,  304,
      315,  316,  318,   72,  305,  130,  319,   72,  695,  173,
      131,   72,   74,   75,   76,   77,  174,  111,   78,  352,
      353,  111,  306,  306,  307,  318,  321,   79,  322,  319,
      373,  374,  308,  329,   80,  132,   81,   81,  300,  309,
      309,  340,  301,  328,  328,  328,  175,  309,  309,  335,

      344,  329,  358,  336,  354,  355,  370,  340,  345,  318,
      371,  359,  356,  319,   82,   83,   84,   83,   85,   86,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   87,   83,   83,   83,   83,   83,   83,   88,   83,
       89,   89,   83,   83,   83,   89,   89,   89,   90,   91,
       89,   89,   89,   92,   89,   89,   89,   89,   89,   89,
       89,   89,   93,   89,   89,   89,   83,   83,   94,   95,
       96,   95,   97,   98,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   99,   95,   95,   95,   95,
       95,   95,  100,   95,  101,  101,   95,   95,   95,  101,

      101,  101,  101,  102,  101,  101,  101,  103,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
       95,   95,  104,  112,  113,  112,  114,  115,  112,  116,
      112,  112,  117,  112,  112,  112,  112,  112,  112,  118,
      112,  112,  112,  112,  112,  112,  119,  112,  120,  120,
      112,  121,  112,  120,  120,  120,  120,  122,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  123,  124,  125,  127,  340,   68,
       69,  134,  128,   68,  135,  134,   66,   68,  135,  407,
       66,  386,  129,  340,  340,  340,  136,  340,  348,  130,

      136,  341,   66,  137,  131,  342,   66,  137,  348,  340,
      343,  340,  364,  340,  367,  376,  505,  349,  351,  368,
      377,  350,  318,  380,  300,  365,  319,  381,  395,  132,
      398,  399,  400,  138,  301,  418,  419,  138,   66,   67,
       66,   68,   69,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   70,   66,   66,   66,   66,   66,
       66,   71,   66,  139,  139,   66,   66,   66,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,   66,
       66,   72,  141,  402,  142,  143,  141,  402,  142,  143,

      177,  178,  179,  180,  505,  404,  181,  144,  403,  405,
      402,  144,  403,  402,  145,  182,  410,  414,  145,  146,
      411,  415,  183,  146,  340,  403,  300,  300,  403,  424,
      301,  301,  406,  425,  300,  300,  428,  429,  301,  301,
      340,  300,  432,  300,  147,  301,  433,  301,  147,  148,
      148,  798,  184,  505,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,   66,   67,  149,   68,   69,
       66,   66,   66,   66,   66,  150,  151,   66,  152,   66,
      153,   70,   66,   66,   66,   66,   66,   66,   71,   66,

      154,  154,   66,   66,   66,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,   66,   66,   72,  155,
      156,  157,  158,  159,  155,  160,  161,  155,  162,  155,
      155,  155,  155,  155,  155,  163,  155,  155,  155,  155,
      155,  155,  164,  165,  166,  166,  155,  167,  155,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      155,  155,  168,   67,  307,   68,   69,   67,  340,   68,
       69,   67,  439,   68,   69,  441,  442,   67,   70,   68,

       69,  444,   70,  457,  340,   71,   70,  466,  445,   71,
      458,  505,   70,   71,  207,  467,  208,  209,  223,   71,
      208,  224,  344,  215,  447,  216,  217,  447,  789,  210,
      345,  348,  447,  225,  218,   72,  211,  212,  219,   72,
      226,  212,  348,   72,  478,  220,  468,  468,  468,   72,
      186,  477,  187,  188,  329,  448,  207,  304,  208,  209,
      344,  189,  305,  449,  367,  190,  213,  358,  345,  368,
      227,  210,  191,  192,  505,  221,  359,  192,  211,  212,
      306,  306,  215,  212,  216,  217,  328,  328,  328,  354,
      355,  354,  355,  218,  329,  505,  364,  219,  223,  356,

      208,  224,  193,  186,  220,  187,  188,  460,  213,  365,
      460,  340,  340,  225,  189,  460,  307,  473,  190,  436,
      226,  307,  474,  379,  308,  191,  192,  340,  340,  308,
      192,  309,  309,  333,  221,  364,  309,  309,  461,  309,
      309,  328,  328,  328,  309,  309,  462,  376,  365,  329,
      227,  788,  377,  522,  523,  193,  194,  195,  194,  196,
      197,  194,  194,  194,  194,  194,  194,  194,  198,  194,
      194,  194,  199,  194,  194,  194,  194,  194,  194,  200,
      194,  201,  201,  194,  194,  194,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  201,  201,  201,  194,  194,  202,
      186,  787,  187,  188,  328,  328,  328,  505,  606,  402,
      402,  203,  329,  778,  250,  204,   68,  251,  258,  252,
       68,  259,  191,  205,  403,  403,  260,  205,  505,  253,
      441,  442,  250,  261,   68,  251,  254,  252,  544,  551,
      262,  255,  546,  546,  546,  263,  545,  253,  469,  340,
      329,  505,  193,  186,  254,  187,  188,  340,  551,  255,
      597,  328,  328,  328,  203,  340,  256,  777,  204,  329,
      264,  558,  776,  340,  775,  191,  205,  571,  310,  559,
      205,  310,  551,  774,  256,  572,  522,  523,  575,  576,

      601,  586,  596,  547,  586,  596,  598,  773,  602,  586,
      596,  614,  614,  614,  560,  193,  228,  229,  228,  230,
      231,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  232,  228,  228,  228,  228,  228,  228,  233,
      228,  234,  234,  228,  235,  228,  234,  234,  234,  236,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  228,  228,  237,
      238,  239,  238,  240,  241,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  242,  238,  238,  238,
      238,  238,  238,  243,  238,  244,  244,  238,  245,  238,

      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  238,  238,  246,  247,  526,  527,  528,  603,  603,
      603,  606,  518,  328,  328,  328,  329,  772,  248,  248,
      632,  329,  529,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  258, 1105,   68,  259,  267,  606,
       85,  268,  260,  580,  529,  604,  642,  622,  623,  261,
      575,  576,  624,  269,  625,  626,  262,  633,  576,  627,
      270,  263,  763,  628,  629,  271,  580, 1105,  578,  527,

      579,  636,  637,  645,  762,  580,  460,  580,  597,  460,
      761,  646,  643,  645,  460,  581,  264,  265,  265,  642,
      272,  646,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  267,  651,   85,  268,  581,  654,  654,
      654,  286,  760,   68,  287,  643,  288,  286,  269,   68,
      287,  759,  288,  636,  637,  270,  289,  661,  662,  663,
      271,  758,  289,  290,  582,  583,  584,  560,  291,  290,
      584,  584,  584,  757,  291,  584,  584,  584,  614,  614,
      614,  529,  652,  652,  652,  272,  274,  529,  275,  276,

      329,  277,  529,  292,  278,  279,  280,  633,  576,  292,
      560,  281,  687,  634,  583,  635,  580,  689,  282,  283,
      688,  690,  580,  529,  635,  584,  635,  606,  320,  529,
      581,  320,  687,  580,  529,  690,  638,  639,  640,  586,
      688,  581,  586,  640,  640,  640,  755,  586,  284,  274,
      606,  275,  276,  529,  277,  742,  606,  278,  279,  280,
      529,  742,  581,  743,  281,  754,  692,  692,  692,  743,
      753,  282,  283,  581,  329,  654,  654,  654,  661,  662,
      663,  663,  662,  663,  372,  529,  596,  372,  417,  596,
      421,  417,  529,  421,  596,  423,  427,  749,  423,  427,

      749,  284,  293,  294,  293,   68,  295,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  296,  293,
      293,  293,  293,  293,  293,  297,  293,  298,  298,  293,
      293,  293,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  293,  293,  299,  383,  752,  741,  740,
      383,  640,  640,  640,  384,  385,  386,  739,  738,  387,
      737,  388,  389,  736,  505,  560,  390,  735,  529,  560,
      391,  392,  463,  560,  734,  689,  463,  463,  463,  690,
      733,  463,  732,  438,  723,  723,  723,  463,  463,  463,

      472,  731,  329,  690,  472,  472,  472,  730,  729,  472,
      529,  472,  328,  328,  328,  472,  472,  472,  475,  340,
      329,  728,  475,  475,  475,  727,  726,  475,  725,  475,
      685,  716,  715,  475,  475,  476,  348,  714,  479,  713,
      712,  711,  479,  479,  479,  710,  505,  479,  709,  479,
      708,  653,  707,  479,  479,  479,  483,  706,  705,  704,
      483,  483,  483,  703,  702,  483,  701,  438,  682,  683,
      684,  483,  483,  483,  484,  485,  700,  486,  699,  487,
      698,  488,  489,  697,  696,  529,  490,  750,  750,  750,
      491,  492,  503,  691,  650,  329,  503,  503,  503,  648,

      686,  503,  685,  503,  680,  639,  681,  503,  503,  503,
      402,  518,  518,  580,  508,  679,  678,  529,  508,  508,
      508,  581,  677,  508,  676,  509,  769,  769,  769,  508,
      508,  508,  512,  675,  329,  674,  512,  512,  512,  673,
      672,  512,  671,  512,  784,  784,  784,  512,  512,  512,
      515,  670,  329,  581,  515,  515,  515,  669,  668,  515,
      667,  515,  666,  665,  664,  515,  515,  515,  587,  587,
      588,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  310,  310,  587,  587,  587,
      587,  587,  587,  310,  310,  587,  587,  587,  310,  310,

      310,  310,  310,  310,  310,  310,  589,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  587,
      587,  587,  644,  644,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  310,
      310,  644,  644,  644,  644,  644,  644,  310,  310,  644,
      644,  644,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  644,  644,  644,  681,  640,  681,  684,
      684,  684,  684,  684,  684,  580,  693,  693,  693,  660,
      694,  659,  658,  581,  329,  657,  529,  656,  655,  529,

      717,  683,  718,  718,  684,  718,  719,  720,  721,  580,
      606,  601,  580,  721,  721,  721,  539,  581,  650,  649,
      581,  648,  647,  529,  531,  581,  641,  574,  529,  518,
      529,  529,  630,  621,  620,  695,  721,  721,  721,  724,
      724,  724,  619,  694,  618,  617,  616,  329,  615,  581,
      613,  560,  581,  529,  612,  529,  744,  720,  745,  745,
      721,  745,  529,  611,  610,  580,  609,  608,  580,  746,
      747,  748,  607,  581,  606,  605,  581,  748,  748,  748,
      748,  748,  748,  600,  599,  529,  529,  595,  695,  594,
      593,  751,  751,  751,  529,  694,  592,  529,  591,  329,

      764,  747,  765,  590,  585,  581,  525,  574,  581,  580,
      765,  748,  765,  766,  767,  768,  518,  581,  529,  580,
      768,  768,  768,  518,  569,  559,  529,  581,  568,  529,
      529,  768,  768,  768,  770,  770,  770,  529,  694,  567,
      695,  566,  329,  771,  771,  771,  565,  694,  529,  581,
      564,  779,  767,  780,  780,  768,  780,  563,  562,  581,
      580,  561,  529,  580,  781,  782,  783,  560,  581,  529,
      557,  581,  783,  783,  783,  556,  783,  783,  783,  555,
      529,  529,  554,  695,  553,  552,  785,  785,  785,  529,
      694,  550,  695,  529,  329,  786,  786,  786,  549,  482,

      581,  548,  348,  581,  348,  790,  782,  791,  348,  791,
      783,  791,  543,  529,  580,  792,  793,  794,  580,  543,
      461,  529,  581,  542,  541,  529,  581,  540,  794,  794,
      794,  539,  529,  538,  537,  695,  794,  794,  794,  795,
      795,  795,  536,  535,  695,  529,  534,  329,  796,  796,
      796,  533,  694,  529,  581,  532,  329,  531,  581,  797,
      797,  797,  530,  525,  529,  799,  793,  800,  437,  800,
      794,  800,  436,  520,  580,  518,  428,  529,  580,  801,
      802,  803,  581,  437,  436,  529,  581,  803,  803,  803,
      803,  803,  803,  804,  804,  804,  529,  695,  805,  805,

      805,  329,  694,  516,  529,  418,  329,  529,  695,  806,
      806,  806,  514,  513,  581,  807,  802,  808,  581,  511,
      808,  803,  808,  436,  580,  801,  802,  803,  529,  580,
      510,  507,  581,  803,  803,  803,  529,  581,  506,  529,
      504,  436,  529,  803,  803,  803,  502,  695,  501,  500,
      529,  809,  809,  809,  811,  811,  811,  499,  695,  329,
      529,  807,  802,  808,  581,  814,  814,  814,  498,  581,
      580,  810,  810,  810,  529,  694,  497,  496,  581,  329,
      495,  494,  529,  493,  808,  803,  808,  812,  812,  812,
      437,  373,  529,  580,  437,  329,  813,  813,  813,  436,

      694,  581,  482,  695,  329,  815,  815,  815,  369,  481,
      581,  480,  362,  329,  695,  816,  816,  816,  361,  694,
      695,  360,  361,  329,  817,  817,  817,  818,  818,  818,
      819,  819,  819,  581,  694,  329,  352,  348,  329,  820,
      820,  820,  821,  821,  821,  695,  471,  822,  822,  822,
      329,  694,  823,  823,  823,  329,  470,  824,  824,  824,
      826,  826,  826,  331,  695,  329,  825,  825,  825,  464,
      694,  459,  456,  695,  329,  827,  827,  827,  454,  695,
      829,  829,  829,  329,  452,  828,  828,  828,  695,  694,
      830,  830,  830,  329,  451,  450,  695,  446,  329,  443,

      437,  695,  831,  831,  831,  436,  694,  302,  302,  695,
      329,  832,  832,  832,  302,  695,  833,  833,  833,  834,
      834,  834,  431,  694,  329,  302,  302,  329,  302,  695,
      835,  835,  835,  422,  695,  836,  836,  836,  837,  837,
      837,  302,  694,  329,  420,  302,  329,  838,  838,  838,
      416,  695,  412,  839,  839,  839,  841,  841,  841,  409,
      695,  329,  840,  840,  840,  397,  694,  396,  695,  394,
      329,  382,  842,  842,  842,  844,  844,  844,  379,  695,
      329,  843,  843,  843,  302,  694,  302,  695,  302,  329,
      845,  845,  845,  846,  846,  846,  695,  694,  329,  369,

      363,  329,  847,  847,  847,  695,  848,  848,  848,  362,
      361,  695,  360,  348,  329,  849,  849,  849,  348,  694,
      850,  850,  850,  329,  695,  851,  851,  851,  348,  348,
      695,  337,  302,  329,  327,  852,  852,  852,  325,  694,
      323,  302,  695,  329,  853,  853,  853,  854,  854,  854,
      317,  695,  855,  855,  855,  329,  694,  856,  856,  856,
      329,  859,  859,  859,  695,  857,  857,  857,  311,  695,
      858,  858,  858,  329,  694,  860,  860,  860,  329,  862,
      862,  862,  302,  329,  695,  302,  861,  861,  861,  302,
      694, 1105, 1105,  695,  329,  863,  863,  863,  865,  865,

      865,  695, 1105,  329, 1105, 1105,  695,  864,  864,  864,
      695,  694,  866,  866,  866,  329,  868,  868,  868,  695,
      329,  867,  867,  867, 1105,  694, 1105, 1105,  695,  329,
      869,  869,  869, 1105, 1105,  695, 1105, 1105,  329, 1105,
      870,  870,  870, 1105,  694, 1105, 1105,  695,  329,  871,
      871,  871,  872,  872,  872, 1105,  695,  874,  874,  874,
      329,  877,  877,  877, 1105,  695, 1105,  873,  873,  873,
      695,  694,  875,  875,  875,  329, 1105,  876,  876,  876,
      329,  694,  878,  878,  878,  329,  880,  880,  880,  695,
      329,  879,  879,  879, 1105,  694, 1105, 1105,  695,  329,

      881,  881,  881,  882,  882,  882,  695,  694,  329, 1105,
      695,  329,  883,  883,  883, 1105,  695,  884,  884,  884,
      885,  885,  885, 1105,  694,  329,  695, 1105,  329,  886,
      886,  886,  889,  889,  889,  695,  887,  887,  887, 1105,
      695,  888,  888,  888,  329,  694,  890,  890,  890,  329,
     1105, 1105,  695, 1105,  329,  891,  891,  891, 1105,  694,
     1105,  695, 1105,  329,  892,  892,  892, 1105, 1105,  695,
     1105,  893,  893,  893,  895,  895,  895, 1105,  695,  329,
     1105,  695, 1105,  894,  894,  894, 1105,  694, 1105, 1105,
      695,  329,  896,  896,  896,  897,  897,  897, 1105,  694,

      329, 1105, 1105,  329,  695,  898,  898,  898,  899,  899,
      899, 1105, 1105,  695, 1105, 1105,  329,  900,  900,  900,
     1105,  694, 1105,  695, 1105,  329,  901,  901,  901,  902,
      902,  902,  695, 1105,  903,  903,  903,  329,  694,  904,
      904,  904,  329, 1105,  695,  905,  905,  905,  906,  906,
      906, 1105,  694,  329,  695, 1105,  329,  907,  907,  907,
      908,  908,  908,  909,  909,  909,  695,  694,  329, 1105,
     1105,  329,  910,  910,  910,  695,  911,  911,  911,  913,
      913,  913, 1105,  695,  329,  912,  912,  912,  695,  694,
      914,  914,  914,  329,  916,  916,  916,  695,  329,  915,

      915,  915, 1105,  694, 1105, 1105,  695,  329,  917,  917,
      917, 1105,  695,  919,  919,  919,  329, 1105,  918,  918,
      918,  695,  694,  920,  920,  920,  329, 1105,  695, 1105,
     1105,  329, 1105, 1105,  695, 1105,  921,  921,  921, 1105,
      694, 1105, 1105,  695,  329,  922,  922,  922,  695,  923,
      923,  923,  924,  924,  924, 1105,  694,  329, 1105, 1105,
      329, 1105,  695,  925,  925,  925, 1105,  695,  926,  926,
      926,  927,  927,  927, 1105,  694,  329, 1105, 1105,  329,
      928,  928,  928, 1105, 1105,  695, 1105,  929,  929,  929,
      931,  931,  931, 1105,  695,  329,  930,  930,  930, 1105,

      694,  695, 1105, 1105,  329,  932,  932,  932,  934,  934,
      934, 1105,  695,  329,  933,  933,  933, 1105,  694, 1105,
      695, 1105,  329,  935,  935,  935,  936,  936,  936,  695,
      694,  329, 1105, 1105,  329,  937,  937,  937, 1105,  695,
      938,  938,  938, 1105, 1105,  695, 1105, 1105,  329, 1105,
      939,  939,  939, 1105,  694, 1105, 1105,  695,  329,  940,
      940,  940, 1105,  695,  941,  941,  941, 1105, 1105,  942,
      942,  942,  329,  694, 1105,  695, 1105,  329,  943,  943,
      943,  944,  944,  944,  695, 1105,  945,  945,  945,  329,
      694,  946,  946,  946,  329,  947,  947,  947, 1105,  695,

      949,  949,  949,  329, 1105,  948,  948,  948,  695,  694,
      952,  952,  952,  329,  950,  950,  950, 1105,  695,  955,
      955,  955,  329, 1105,  951,  951,  951,  695,  694,  953,
      953,  953,  329, 1105, 1105,  695, 1105,  329, 1105, 1105,
      695, 1105,  954,  954,  954, 1105,  694, 1105, 1105,  695,
      329,  958,  958,  958,  695,  956,  956,  956, 1105,  695,
      961,  961,  961,  329,  964,  964,  964, 1105,  695, 1105,
      957,  957,  957,  695,  694,  959,  959,  959,  329, 1105,
      960,  960,  960,  329,  694,  962,  962,  962,  329, 1105,
     1105,  695, 1105,  329,  963,  963,  963, 1105,  694, 1105,

      695, 1105,  329,  965,  965,  965,  966,  966,  966,  695,
      694,  329, 1105,  695,  329,  967,  967,  967, 1105,  695,
      968,  968,  968,  969,  969,  969, 1105,  694,  329,  695,
     1105,  329,  970,  970,  970, 1105,  971,  971,  971,  973,
      973,  973, 1105,  695,  329,  972,  972,  972, 1105,  694,
      974,  974,  974,  329, 1105,  695, 1105, 1105,  329,  975,
      975,  975, 1105,  694,  695, 1105, 1105,  329,  976,  976,
      976, 1105,  695, 1105,  977,  977,  977,  979,  979,  979,
     1105,  695,  329,  978,  978,  978, 1105,  694,  695, 1105,
     1105,  329, 1105, 1105,  695,  980,  980,  980,  981,  981,

      981, 1105,  694,  329, 1105, 1105,  329, 1105,  695,  982,
      982,  982,  983,  983,  983, 1105, 1105,  695, 1105, 1105,
      329,  984,  984,  984, 1105,  694,  695, 1105, 1105,  329,
     1105, 1105,  695,  985,  985,  985,  986,  986,  986, 1105,
     1105,  987,  987,  987,  329,  694, 1105,  695, 1105,  329,
      988,  988,  988,  989,  989,  989, 1105, 1105,  695, 1105,
     1105,  329, 1105,  990,  990,  990, 1105,  694, 1105, 1105,
      695,  329,  991,  991,  991,  992,  992,  992,  994,  994,
      994, 1105,  695,  329,  993,  993,  993, 1105,  694, 1105,
      695, 1105,  329,  995,  995,  995,  996,  996,  996,  695,

      694,  329, 1105, 1105,  329,  997,  997,  997,  998,  998,
      998, 1105,  695, 1000, 1000, 1000,  329, 1105,  999,  999,
      999,  695,  694, 1001, 1001, 1001,  329,  695, 1002, 1002,
     1002,  329,  694,  695, 1105, 1105,  329, 1003, 1003, 1003,
     1004, 1004, 1004, 1105, 1105,  695, 1105, 1105,  329, 1005,
     1005, 1005, 1105,  694,  695, 1105, 1105,  329, 1006, 1006,
     1006, 1105,  695, 1007, 1007, 1007, 1105,  695, 1008, 1008,
     1008,  329,  694, 1009, 1009, 1009,  329,  695, 1105, 1010,
     1010, 1010, 1012, 1012, 1012, 1105,  695,  329, 1011, 1011,
     1011, 1105,  694, 1013, 1013, 1013,  329,  694,  695, 1105,

     1105,  329, 1014, 1014, 1014, 1105, 1105,  695, 1015, 1015,
     1015, 1105,  694, 1016, 1016, 1016,  329,  695, 1105, 1017,
     1017, 1017,  695,  694, 1018, 1018, 1018,  329, 1019, 1019,
     1019,  695,  694, 1020, 1020, 1020,  329,  695, 1105, 1021,
     1021, 1021,  695,  694, 1022, 1022, 1022,  329, 1023, 1023,
     1023,  695,  694, 1024, 1024, 1024,  329,  695, 1025, 1025,
     1025, 1105,  695, 1026, 1026, 1026, 1105, 1105,  695, 1027,
     1027, 1027, 1105,  695, 1028, 1028, 1028,  695, 1029, 1029,
     1029, 1105,  695, 1030, 1030, 1030, 1105, 1105,  695, 1031,
     1031, 1031, 1105,  695, 1032, 1032, 1032,  695, 1033, 1033,

     1033, 1105,  695, 1034, 1034, 1034, 1105,  695, 1035, 1035,
     1035, 1105,  695, 1036, 1036, 1036, 1105, 1105,  695, 1037,
     1037, 1037, 1105,  695, 1038, 1038, 1038,  695, 1039, 1039,
     1039, 1105,  695, 1040, 1040, 1040, 1105, 1105,  695, 1041,
     1041, 1041, 1105,  695, 1042, 1042, 1042,  695, 1043, 1043,
     1043, 1105,  695, 1044, 1044, 1044, 1105,  695, 1045, 1045,
     1045, 1105,  695, 1046, 1046, 1046, 1105, 1105,  695, 1047,
     1047, 1047, 1105,  695, 1048, 1048, 1048,  695, 1049, 1049,
     1049, 1105,  695, 1050, 1050, 1050, 1105, 1105,  695, 1051,
     1051, 1051, 1105,  695, 1052, 1052, 1052,  695, 1053, 1053,

     1053, 1105,  695, 1054, 1054, 1054, 1105,  695, 1055, 1055,
     1055, 1105,  695, 1056, 1056, 1056, 1105, 1105,  695, 1057,
     1057, 1057, 1105,  695, 1058, 1058, 1058,  695, 1059, 1059,
     1059, 1105,  695, 1060, 1060, 1060, 1105, 1105,  695, 1061,
     1061, 1061, 1105,  695, 1062, 1062, 1062,  695, 1063, 1063,
     1063, 1105,  695, 1064, 1064, 1064, 1105,  695, 1065, 1065,
     1065, 1105,  695, 1066, 1066, 1066, 1105, 1105,  695, 1067,
     1067, 1067, 1105,  695, 1068, 1068, 1068,  695, 1069, 1069,
     1069, 1105,  695, 1070, 1070, 1070, 1105, 1105,  695, 1071,
     1071, 1071, 1105,  695, 1072, 1072, 1072,  695, 1073, 1073,

     1073, 1105,  695, 1074, 1074, 1074, 1105,  695, 1075, 1075,
     1075, 1105,  695, 1076, 1076, 1076, 1105, 1105,  695, 1077,
     1077, 1077, 1105,  695, 1078, 1078, 1078,  695, 1079, 1079,
     1079, 1105,  695, 1080, 1080, 1080, 1105, 1105,  695, 1081,
     1081, 1081, 1105,  695, 1082, 1082, 1082,  695, 1083, 1083,
     1083, 1105,  695, 1084, 1084, 1084, 1105,  695, 1085, 1085,
     1085, 1105,  695, 1086, 1086, 1086, 1105, 1105,  695, 1087,
     1087, 1087, 1105,  695, 1088, 1088, 1088,  695, 1089, 1089,
     1089, 1105,  695, 1090, 1090, 1090, 1105, 1105,  695, 1091,
     1091, 1091, 1105,  695, 1092, 1092, 1092,  695, 1093, 1093,

     1093, 1105,  695, 1094, 1094, 1094, 1105,  695, 1095, 1095,
     1095, 1105,  695, 1096, 1096, 1096, 1105, 1105,  695, 1097,
     1097, 1097, 1105,  695, 1098, 1098, 1098,  695, 1099, 1099,
     1099, 1105,  695, 1100, 1100, 1100, 1105, 1105,  695, 1101,
     1101, 1101, 1105,  695, 1102, 1102, 1102,  695, 1103, 1103,
     1103, 1105,  695, 1104, 1104, 1104, 1105,  695, 1028, 1028,
     1028, 1105,  695, 1105, 1105, 1105, 1105, 1105,  695, 1105,
     1105, 1105, 1105,  695, 1105, 1105, 1105,  695, 1105, 1105,
     1105, 1105,  695, 1105, 1105, 1105, 1105, 1105,  695, 1105,
     1105, 1105, 1105,  695, 1105, 1105, 1105,  695, 1105, 1105,

     1105, 1105,  695, 1105, 1105, 1105, 1105,  695,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  140,  140,

      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,

      214,  214,  214,  214,  214,  214,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  285,  285,  285,  285,

      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  324,  324,  324, 1105,  324,  324,  324,  324,
      324,  324,  324,  324, 1105,  324,  324,  324,  324,  324,
      326,  326,  326, 1105,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  330,  330,
      330, 1105, 1105, 1105,  330, 1105, 1105, 1105, 1105,  330,
     1105, 1105,  330,  334,  334,  334, 1105, 1105,  334, 1105,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,

      338,  338,  338, 1105,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  339,  339,
      339, 1105,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  346, 1105, 1105, 1105,
     1105, 1105,  346, 1105, 1105, 1105, 1105,  346, 1105, 1105,
      346,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  357,  357,
     1105, 1105, 1105, 1105,  357, 1105, 1105, 1105, 1105,  357,
     1105, 1105,  357,  366, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105,  366, 1105,  366, 1105, 1105,  366,  375,  375,

      375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  375,  375,  378, 1105,  378, 1105,
      378,  378,  378,  378,  378, 1105,  378,  378, 1105,  378,
      378, 1105,  378,  393,  393,  393, 1105,  393,  393,  393,
      393,  393, 1105,  393,  393,  393,  393,  393,  393, 1105,
      393,  401,  401,  401, 1105,  401,  401,  401,  401,  401,
      401,  401,  401,  401,  401,  401, 1105,  401,  402,  402,
      402, 1105,  402,  402,  402,  402,  402,  402,  402,  402,
     1105,  402,  402, 1105,  402,  403, 1105,  403, 1105,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  403,  403,

     1105,  403,  408, 1105,  408, 1105,  408,  408,  408,  408,
      408, 1105,  408,  408,  408,  408,  408,  408,  408,  408,
      413, 1105,  413, 1105,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  426,  426,
      426, 1105,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  430,  430,  430, 1105,
      430,  430,  430, 1105,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  434,  434,  434, 1105,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  435,  435, 1105,  435, 1105, 1105,  435,  438,

     1105,  438,  438, 1105,  438, 1105,  438, 1105,  438,  440,
      440,  440, 1105,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  453,  453,  453,
     1105,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  455,  455,  455, 1105,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  465,  465,  465, 1105,  465,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  517,  517,  517, 1105,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  519,  519,

      519, 1105,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  521,  521,  521, 1105,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  524,  524,  524, 1105,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  570,  570,  570, 1105,  570,  570,  570,  570,
      570,  570,  570,  570,  570,  570,  570,  570,  570,  573,
      573,  573, 1105,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  573,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  577,  577,  577,  577,  631,  631,  631, 1105,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  722, 1105, 1105, 1105,  722, 1105, 1105, 1105,
     1105, 1105, 1105, 1105,  722, 1105,  722,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
     1105,  756,  756, 1105,  756,   65, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105
    } ;

static yyconst flex_int16_t yy_chk[4811] =
    {   0,
        0,    1,    0,    1,    1,    2,    0,    2,    2,    3,
      133,    3,    3,  121,  121,    9,    1,    9,    9,   10,
        2,   10,   10,    1,    3,   70,  133,    2,   79,   70,
        9,    3,   79,   13,   10,   13,   13,    9,   13,   87,
       91,   10,   91,   87,   27,   92,   27,   27,   13,   75,
       92,   92,   99,    1,   75,   13,   99,    2, 1028,   27,
       13,    3,    4,    4,    4,    4,   27,    9,    4,  146,
      146,   10,   75,   75,   81,  109,  102,    4,  102,  109,
      167,  167,   81, 1010,    4,   13,    4,    4,  118,   81,
       81,  134,  118,  120,  120,  120,   27,   81,   81,  129,

      139,  120,  149,  129,  148,  148,  163,  134,  139,  173,
      163,  149,  148,  173,    4,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   14,  135,   14,
       14,   15,   14,   15,   15,   16,   15,   16,   16,  212,
       16,  212,   14,  137,  135,  136,   15,  138,  145,   14,

       16,  136,   15,   15,   14,  136,   16,   16,  144,  137,
      137,  136,  154,  138,  157,  178,  798,  144,  145,  157,
      178,  144,  182,  190,  199,  154,  182,  190,  199,   14,
      204,  205,  205,   15,  204,  235,  235,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   19,  206,   19,   19,   20,  209,   20,   20,

       28,   28,   28,   28,  789,  210,   28,   19,  206,  210,
      211,   20,  209,  213,   19,   28,  219,  225,   20,   19,
      219,  225,   28,   20,  339,  211,  232,  242,  213,  253,
      232,  242,  211,  253,  261,  269,  271,  271,  261,  269,
      339,  281,  289,  296,   19,  281,  289,  296,   20,   21,
       21,  788,   28,  787,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,  307,   29,   29,   30,  473,   30,
       30,   31,  307,   31,   31,  308,  308,   32,   29,   32,

       32,  312,   30,  321,  473,   29,   31,  327,  312,   30,
      321,  778,   32,   31,   39,  327,   39,   39,   43,   32,
       43,   43,  344,   41,  314,   41,   41,  314,  777,   39,
      344,  350,  314,   43,   41,   29,   39,   39,   41,   30,
       43,   39,  349,   31,  350,   41,  328,  328,  328,   32,
       33,  349,   33,   33,  328,  314,   40,  304,   40,   40,
      346,   33,  304,  314,  367,   33,   39,  358,  346,  367,
       43,   40,   33,   33,  776,   41,  358,   33,   40,   40,
      304,  304,   42,   40,   42,   42,  122,  122,  122,  354,
      354,  357,  357,   42,  122,  775,  364,   42,   44,  357,

       44,   44,   33,   34,   42,   34,   34,  323,   40,  364,
      323,  341,  342,   44,   34,  323,  306,  341,   34,  380,
       44,  309,  342,  380,  306,   34,   34,  341,  342,  309,
       34,  306,  306,  122,   42,  366,  309,  309,  323,  306,
      306,  330,  330,  330,  309,  309,  323,  376,  366,  330,
       44,  774,  376,  439,  439,   34,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       37,  773,   37,   37,  333,  333,  333,  400,  772,  401,
      508,   37,  333,  763,   51,   37,   51,   51,   53,   51,
       53,   53,   37,   37,  401,  508,   53,   37,  400,   51,
      440,  440,   52,   53,   52,   52,   51,   52,  467,  486,
       53,   51,  468,  468,  468,   53,  467,   52,  333,  474,
      468,  400,   37,   38,   52,   38,   38,  475,  486,   52,
      540,  469,  469,  469,   38,  474,   51,  762,   38,  469,
       53,  493,  761,  475,  760,   38,   38,  520, 1124,  493,
       38, 1124,  486,  759,   52,  520,  521,  521,  523,  523,

      545,  531,  539,  469,  531,  539,  540,  758,  545,  531,
      539,  560,  560,  560,  757,   38,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   49,  442,  442,  442,  546,  546,
      546,  755,  572,  547,  547,  547,  546,  754,   49,   49,
      572,  547,  442,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   54,  577,   54,   54,   57,  753,
       57,   57,   54,  577,  442,  547,  588,  568,  568,   54,
      575,  575,  568,   57,  568,  568,   54,  574,  574,  568,
       57,   54,  741,  568,  568,   57,  574,  581,  525,  525,

      525,  580,  580,  591,  740,  581,  600,  525,  597,  600,
      739,  591,  588,  645,  600,  525,   54,   55,   55,  642,
       57,  645,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   58,  597,   58,   58,  525,  606,  606,
      606,   61,  738,   61,   61,  642,   61,   62,   58,   62,
       62,  737,   62,  636,  636,   58,   61,  613,  613,  613,
       58,  736,   62,   61,  526,  526,  526,  735,   61,   62,
      527,  527,  527,  734,   62,  528,  528,  528,  614,  614,
      614,  526,  603,  603,  603,   58,   59,  527,   59,   59,

      603,   59,  528,   61,   59,   59,   59,  633,  633,   62,
      733,   59,  647,  578,  578,  578,  633,  648,   59,   59,
      647,  648,  578,  526,  579,  579,  579,  731, 1125,  527,
      578, 1125,  687,  579,  528,  648,  582,  582,  582,  686,
      687,  579,  686,  583,  583,  583,  730,  686,   59,   60,
      729,   60,   60,  582,   60,  716,  728,   60,   60,   60,
      583,  742,  578,  716,   60,  727,  652,  652,  652,  742,
      726,   60,   60,  579,  652,  654,  654,  654,  661,  661,
      661,  663,  663,  663, 1136,  582,  691, 1136, 1145,  691,
     1146, 1145,  583, 1146,  691, 1147, 1149, 1167, 1147, 1149,

     1167,   60,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,  192,  725,  715,  714,
      192,  584,  584,  584,  192,  192,  192,  713,  712,  192,
      711,  192,  192,  710,  709,  708,  192,  707,  584,  706,
      192,  192,  325,  705,  704,  689,  325,  325,  325,  689,
      703,  325,  702,  325,  692,  692,  692,  325,  325,  325,

      337,  701,  692,  689,  337,  337,  337,  700,  699,  337,
      584,  337,  604,  604,  604,  337,  337,  337,  343,  343,
      604,  698,  343,  343,  343,  697,  696,  343,  694,  343,
      685,  679,  678,  343,  343,  343,  351,  677,  351,  676,
      675,  674,  351,  351,  351,  673,  672,  351,  671,  351,
      670,  604,  669,  351,  351,  351,  382,  668,  667,  666,
      382,  382,  382,  665,  664,  382,  660,  382,  638,  638,
      638,  382,  382,  382,  383,  383,  659,  383,  658,  383,
      657,  383,  383,  656,  655,  638,  383,  723,  723,  723,
      383,  383,  396,  651,  650,  723,  396,  396,  396,  649,

      643,  396,  641,  396,  634,  634,  634,  396,  396,  396,
      406,  632,  631,  634,  406,  630,  629,  638,  406,  406,
      406,  634,  628,  406,  627,  406,  750,  750,  750,  406,
      406,  406,  412,  626,  750,  625,  412,  412,  412,  624,
      623,  412,  622,  412,  769,  769,  769,  412,  412,  412,
      416,  621,  769,  634,  416,  416,  416,  620,  619,  416,
      618,  416,  617,  616,  615,  416,  416,  416,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  635,  635,  635,  639,
      639,  639,  640,  640,  640,  635,  653,  653,  653,  612,
      653,  611,  610,  635,  653,  609,  639,  608,  607,  640,

      680,  680,  680,  681,  681,  681,  682,  682,  682,  680,
      605,  602,  681,  683,  683,  683,  598,  680,  595,  594,
      681,  593,  592,  682,  589,  635,  585,  573,  639,  570,
      683,  640,  569,  567,  566,  653,  684,  684,  684,  693,
      693,  693,  565,  693,  564,  563,  562,  693,  561,  680,
      559,  558,  681,  684,  557,  682,  717,  717,  717,  718,
      718,  718,  683,  556,  555,  717,  554,  553,  718,  719,
      719,  719,  552,  717,  550,  549,  718,  720,  720,  720,
      721,  721,  721,  542,  541,  684,  719,  538,  693,  537,
      536,  724,  724,  724,  720,  724,  535,  721,  534,  724,

      744,  744,  744,  533,  530,  717,  524,  522,  718,  744,
      745,  745,  745,  746,  746,  746,  519,  744,  719,  745,
      747,  747,  747,  517,  516,  510,  720,  745,  504,  721,
      746,  748,  748,  748,  751,  751,  751,  747,  751,  501,
      724,  500,  751,  752,  752,  752,  499,  752,  748,  744,
      498,  764,  764,  764,  765,  765,  765,  497,  496,  745,
      764,  495,  746,  765,  766,  766,  766,  494,  764,  747,
      492,  765,  767,  767,  767,  491,  768,  768,  768,  490,
      748,  766,  489,  751,  488,  487,  770,  770,  770,  767,
      770,  485,  752,  768,  770,  771,  771,  771,  484,  482,

      764,  481,  479,  765,  478,  779,  779,  779,  477,  780,
      780,  780,  466,  766,  779,  781,  781,  781,  780,  465,
      462,  767,  779,  461,  459,  768,  780,  458,  782,  782,
      782,  457,  781,  452,  451,  770,  783,  783,  783,  784,
      784,  784,  450,  449,  771,  782,  448,  784,  785,  785,
      785,  446,  785,  783,  779,  445,  785,  444,  780,  786,
      786,  786,  443,  441,  781,  790,  790,  790,  433,  791,
      791,  791,  432,  431,  790,  430,  429,  782,  791,  792,
      792,  792,  790,  425,  424,  783,  791,  793,  793,  793,
      794,  794,  794,  795,  795,  795,  792,  785,  796,  796,

      796,  795,  796,  420,  793,  419,  796,  794,  786,  797,
      797,  797,  415,  414,  790,  799,  799,  799,  791,  411,
      800,  800,  800,  410,  799,  801,  801,  801,  792,  800,
      407,  405,  799,  802,  802,  802,  793,  800,  404,  794,
      399,  398,  801,  803,  803,  803,  395,  796,  392,  391,
      802,  804,  804,  804,  806,  806,  806,  390,  797,  804,
      803,  807,  807,  807,  799,  811,  811,  811,  389,  800,
      807,  805,  805,  805,  801,  805,  388,  387,  807,  805,
      386,  385,  802,  384,  808,  808,  808,  809,  809,  809,
      381,  374,  803,  808,  371,  809,  810,  810,  810,  370,

      810,  808,  369,  806,  810,  812,  812,  812,  368,  365,
      807,  363,  362,  812,  811,  813,  813,  813,  361,  813,
      805,  360,  359,  813,  814,  814,  814,  815,  815,  815,
      816,  816,  816,  808,  816,  815,  353,  347,  816,  817,
      817,  817,  818,  818,  818,  810,  336,  819,  819,  819,
      818,  819,  820,  820,  820,  819,  335,  821,  821,  821,
      823,  823,  823,  332,  813,  821,  822,  822,  822,  326,
      822,  322,  319,  814,  822,  824,  824,  824,  318,  816,
      826,  826,  826,  824,  317,  825,  825,  825,  817,  825,
      827,  827,  827,  825,  316,  315,  819,  313,  827,  311,

      301,  820,  828,  828,  828,  300,  828,  297,  290,  823,
      828,  829,  829,  829,  282,  822,  830,  830,  830,  831,
      831,  831,  278,  831,  830,  270,  262,  831,  254,  826,
      832,  832,  832,  245,  825,  833,  833,  833,  834,  834,
      834,  243,  834,  833,  236,  233,  834,  835,  835,  835,
      226,  828,  220,  836,  836,  836,  838,  838,  838,  218,
      829,  836,  837,  837,  837,  203,  837,  200,  831,  198,
      837,  191,  839,  839,  839,  841,  841,  841,  189,  832,
      839,  840,  840,  840,  183,  840,  174,  834,  164,  840,
      842,  842,  842,  843,  843,  843,  835,  843,  842,  161,

      153,  843,  844,  844,  844,  838,  845,  845,  845,  152,
      151,  837,  150,  147,  845,  846,  846,  846,  143,  846,
      847,  847,  847,  846,  841,  848,  848,  848,  141,  140,
      840,  130,  119,  848,  117,  849,  849,  849,  110,  849,
      103,  100,  843,  849,  850,  850,  850,  851,  851,  851,
       93,  844,  852,  852,  852,  851,  852,  853,  853,  853,
      852,  856,  856,  856,  846,  854,  854,  854,   90,  847,
      855,  855,  855,  854,  855,  857,  857,  857,  855,  859,
      859,  859,   88,  857,  849,   80,  858,  858,  858,   71,
      858,   65,    0,  850,  858,  860,  860,  860,  862,  862,

      862,  852,    0,  860,    0,    0,  853,  861,  861,  861,
      856,  861,  863,  863,  863,  861,  865,  865,  865,  855,
      863,  864,  864,  864,    0,  864,    0,    0,  859,  864,
      866,  866,  866,    0,    0,  858,    0,    0,  866,    0,
      867,  867,  867,    0,  867,    0,    0,  862,  867,  868,
      868,  868,  869,  869,  869,    0,  861,  871,  871,  871,
      869,  874,  874,  874,    0,  865,    0,  870,  870,  870,
      864,  870,  872,  872,  872,  870,    0,  873,  873,  873,
      872,  873,  875,  875,  875,  873,  877,  877,  877,  867,
      875,  876,  876,  876,    0,  876,    0,    0,  868,  876,

      878,  878,  878,  879,  879,  879,  871,  879,  878,    0,
      874,  879,  880,  880,  880,    0,  870,  881,  881,  881,
      882,  882,  882,    0,  882,  881,  873,    0,  882,  883,
      883,  883,  886,  886,  886,  877,  884,  884,  884,    0,
      876,  885,  885,  885,  884,  885,  887,  887,  887,  885,
        0,    0,  879,    0,  887,  888,  888,  888,    0,  888,
        0,  880,    0,  888,  889,  889,  889,    0,    0,  882,
        0,  890,  890,  890,  892,  892,  892,    0,  883,  890,
        0,  886,    0,  891,  891,  891,    0,  891,    0,    0,
      885,  891,  893,  893,  893,  894,  894,  894,    0,  894,

      893,    0,    0,  894,  888,  895,  895,  895,  896,  896,
      896,    0,    0,  889,    0,    0,  896,  897,  897,  897,
        0,  897,    0,  892,    0,  897,  898,  898,  898,  899,
      899,  899,  891,    0,  900,  900,  900,  899,  900,  901,
      901,  901,  900,    0,  894,  902,  902,  902,  903,  903,
      903,    0,  903,  902,  895,    0,  903,  904,  904,  904,
      905,  905,  905,  906,  906,  906,  897,  906,  905,    0,
        0,  906,  907,  907,  907,  898,  908,  908,  908,  910,
      910,  910,    0,  900,  908,  909,  909,  909,  901,  909,
      911,  911,  911,  909,  913,  913,  913,  903,  911,  912,

      912,  912,    0,  912,    0,    0,  904,  912,  914,  914,
      914,    0,  906,  916,  916,  916,  914,    0,  915,  915,
      915,  907,  915,  917,  917,  917,  915,    0,  910,    0,
        0,  917,    0,    0,  909,    0,  918,  918,  918,    0,
      918,    0,    0,  913,  918,  919,  919,  919,  912,  920,
      920,  920,  921,  921,  921,    0,  921,  920,    0,    0,
      921,    0,  916,  922,  922,  922,    0,  915,  923,  923,
      923,  924,  924,  924,    0,  924,  923,    0,    0,  924,
      925,  925,  925,    0,    0,  918,    0,  926,  926,  926,
      928,  928,  928,    0,  919,  926,  927,  927,  927,    0,

      927,  921,    0,    0,  927,  929,  929,  929,  931,  931,
      931,    0,  922,  929,  930,  930,  930,    0,  930,    0,
      924,    0,  930,  932,  932,  932,  933,  933,  933,  925,
      933,  932,    0,    0,  933,  934,  934,  934,    0,  928,
      935,  935,  935,    0,    0,  927,    0,    0,  935,    0,
      936,  936,  936,    0,  936,    0,    0,  931,  936,  937,
      937,  937,    0,  930,  938,  938,  938,    0,    0,  939,
      939,  939,  938,  939,    0,  933,    0,  939,  940,  940,
      940,  941,  941,  941,  934,    0,  942,  942,  942,  941,
      942,  943,  943,  943,  942,  944,  944,  944,    0,  936,

      946,  946,  946,  944,    0,  945,  945,  945,  937,  945,
      949,  949,  949,  945,  947,  947,  947,    0,  939,  952,
      952,  952,  947,    0,  948,  948,  948,  940,  948,  950,
      950,  950,  948,    0,    0,  942,    0,  950,    0,    0,
      943,    0,  951,  951,  951,    0,  951,    0,    0,  946,
      951,  955,  955,  955,  945,  953,  953,  953,    0,  949,
      958,  958,  958,  953,  961,  961,  961,    0,  952,    0,
      954,  954,  954,  948,  954,  956,  956,  956,  954,    0,
      957,  957,  957,  956,  957,  959,  959,  959,  957,    0,
        0,  951,    0,  959,  960,  960,  960,    0,  960,    0,

      955,    0,  960,  962,  962,  962,  963,  963,  963,  958,
      963,  962,    0,  961,  963,  964,  964,  964,    0,  954,
      965,  965,  965,  966,  966,  966,    0,  966,  965,  957,
        0,  966,  967,  967,  967,    0,  968,  968,  968,  970,
      970,  970,    0,  960,  968,  969,  969,  969,    0,  969,
      971,  971,  971,  969,    0,  963,    0,    0,  971,  972,
      972,  972,    0,  972,  964,    0,    0,  972,  973,  973,
      973,    0,  966,    0,  974,  974,  974,  976,  976,  976,
        0,  967,  974,  975,  975,  975,    0,  975,  970,    0,
        0,  975,    0,    0,  969,  977,  977,  977,  978,  978,

      978,    0,  978,  977,    0,    0,  978,    0,  972,  979,
      979,  979,  980,  980,  980,    0,    0,  973,    0,    0,
      980,  981,  981,  981,    0,  981,  976,    0,    0,  981,
        0,    0,  975,  982,  982,  982,  983,  983,  983,    0,
        0,  984,  984,  984,  983,  984,    0,  978,    0,  984,
      985,  985,  985,  986,  986,  986,    0,    0,  979,    0,
        0,  986,    0,  987,  987,  987,    0,  987,    0,    0,
      981,  987,  988,  988,  988,  989,  989,  989,  991,  991,
      991,    0,  982,  989,  990,  990,  990,    0,  990,    0,
      984,    0,  990,  992,  992,  992,  993,  993,  993,  985,

      993,  992,    0,    0,  993,  994,  994,  994,  995,  995,
      995,    0,  987,  997,  997,  997,  995,    0,  996,  996,
      996,  988,  996,  998,  998,  998,  996,  991,  999,  999,
      999,  998,  999,  990,    0,    0,  999, 1000, 1000, 1000,
     1001, 1001, 1001,    0,    0,  993,    0,    0, 1001, 1002,
     1002, 1002,    0, 1002,  994,    0,    0, 1002, 1003, 1003,
     1003,    0,  997, 1004, 1004, 1004,    0,  996, 1005, 1005,
     1005, 1004, 1005, 1006, 1006, 1006, 1005,  999,    0, 1007,
     1007, 1007, 1009, 1009, 1009,    0, 1000, 1007, 1008, 1008,
     1008,    0, 1008, 1011, 1011, 1011, 1008, 1011, 1002,    0,

        0, 1011, 1012, 1012, 1012,    0,    0, 1003, 1013, 1013,
     1013,    0, 1013, 1014, 1014, 1014, 1013, 1005,    0, 1015,
     1015, 1015, 1006, 1015, 1016, 1016, 1016, 1015, 1017, 1017,
     1017, 1009, 1017, 1018, 1018, 1018, 1017, 1008,    0, 1019,
     1019, 1019, 1011, 1019, 1020, 1020, 1020, 1019, 1021, 1021,
     1021, 1012, 1021, 1022, 1022, 1022, 1021, 1013, 1023, 1023,
     1023,    0, 1014, 1024, 1024, 1024,    0,    0, 1015, 1025,
     1025, 1025,    0, 1016, 1026, 1026, 1026, 1017, 1027, 1027,
     1027,    0, 1018, 1029, 1029, 1029,    0,    0, 1019, 1030,
     1030, 1030,    0, 1020, 1031, 1031, 1031, 1021, 1032, 1032,

     1032,    0, 1022, 1033, 1033, 1033,    0, 1023, 1034, 1034,
     1034,    0, 1024, 1035, 1035, 1035,    0,    0, 1025, 1036,
     1036, 1036,    0, 1026, 1037, 1037, 1037, 1027, 1038, 1038,
     1038,    0, 1029, 1039, 1039, 1039,    0,    0, 1030, 1040,
     1040, 1040,    0, 1031, 1041, 1041, 1041, 1032, 1042, 1042,
     1042,    0, 1033, 1043, 1043, 1043,    0, 1034, 1044, 1044,
     1044,    0, 1035, 1045, 1045, 1045,    0,    0, 1036, 1046,
     1046, 1046,    0, 1037, 1047, 1047, 1047, 1038, 1048, 1048,
     1048,    0, 1039, 1049, 1049, 1049,    0,    0, 1040, 1050,
     1050, 1050,    0, 1041, 1051, 1051, 1051, 1042, 1052, 1052,

     1052,    0, 1043, 1053, 1053, 1053,    0, 1044, 1054, 1054,
     1054,    0, 1045, 1055, 1055, 1055,    0,    0, 1046, 1056,
     1056, 1056,    0, 1047, 1057, 1057, 1057, 1048, 1058, 1058,
     1058,    0, 1049, 1059, 1059, 1059,    0,    0, 1050, 1060,
     1060, 1060,    0, 1051, 1061, 1061, 1061, 1052, 1062, 1062,
     1062,    0, 1053, 1063, 1063, 1063,    0, 1054, 1064, 1064,
     1064,    0, 1055, 1065, 1065, 1065,    0,    0, 1056, 1066,
     1066, 1066,    0, 1057, 1067, 1067, 1067, 1058, 1068, 1068,
     1068,    0, 1059, 1069, 1069, 1069,    0,    0, 1060, 1070,
     1070, 1070,    0, 1061, 1071, 1071, 1071, 1062, 1072, 1072,

     1072,    0, 1063, 1073, 1073, 1073,    0, 1064, 1074, 1074,
     1074,    0, 1065, 1075, 1075, 1075,    0,    0, 1066, 1076,
     1076, 1076,    0, 1067, 1077, 1077, 1077, 1068, 1078, 1078,
     1078,    0, 1069, 1079, 1079, 1079,    0,    0, 1070, 1080,
     1080, 1080,    0, 1071, 1081, 1081, 1081, 1072, 1082, 1082,
     1082,    0, 1073, 1083, 1083, 1083,    0, 1074, 1084, 1084,
     1084,    0, 1075, 1085, 1085, 1085,    0,    0, 1076, 1086,
     1086, 1086,    0, 1077, 1087, 1087, 1087, 1078, 1088, 1088,
     1088,    0, 1079, 1089, 1089, 1089,    0,    0, 1080, 1090,
     1090, 1090,    0, 1081, 1091, 1091, 1091, 1082, 1092, 1092,

     1092,    0, 1083, 1093, 1093, 1093,    0, 1084, 1094, 1094,
     1094,    0, 1085, 1095, 1095, 1095,    0,    0, 1086, 1096,
     1096, 1096,    0, 1087, 1097, 1097, 1097, 1088, 1098, 1098,
     1098,    0, 1089, 1099, 1099, 1099,    0,    0, 1090, 1100,
     1100, 1100,    0, 1091, 1101, 1101, 1101, 1092, 1102, 1102,
     1102,    0, 1093, 1103, 1103, 1103,    0, 1094, 1104, 1104,
     1104,    0, 1095,    0,    0,    0,    0,    0, 1096,    0,
        0,    0,    0, 1097,    0,    0,    0, 1098,    0,    0,
        0,    0, 1099,    0,    0,    0,    0,    0, 1100,    0,
        0,    0,    0, 1101,    0,    0,    0, 1102,    0,    0,

        0,    0, 1103,    0,    0,    0,    0, 1104, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1106, 1106, 1106, 1106, 1106, 1106, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1111, 1111,

     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,

     1116, 1116, 1116, 1116, 1116, 1116, 1117, 1117, 1117, 1117,
     1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
     1117, 1117, 1117, 1117, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,
     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1121, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,
     1121, 1121, 1121, 1121, 1121, 1121, 1122, 1122, 1122, 1122,

     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1126, 1126, 1126,    0, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126,    0, 1126, 1126, 1126, 1126, 1126,
     1127, 1127, 1127,    0, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1128, 1128,
     1128,    0,    0,    0, 1128,    0,    0,    0,    0, 1128,
        0,    0, 1128, 1129, 1129, 1129,    0,    0, 1129,    0,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,

     1130, 1130, 1130,    0, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1131, 1131,
     1131,    0, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1132,    0,    0,    0,
        0,    0, 1132,    0,    0,    0,    0, 1132,    0,    0,
     1132, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1134, 1134,
        0,    0,    0,    0, 1134,    0,    0,    0,    0, 1134,
        0,    0, 1134, 1135,    0,    0,    0,    0,    0,    0,
        0,    0, 1135,    0, 1135,    0,    0, 1135, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1138,    0, 1138,    0,
     1138, 1138, 1138, 1138, 1138,    0, 1138, 1138,    0, 1138,
     1138,    0, 1138, 1139, 1139, 1139,    0, 1139, 1139, 1139,
     1139, 1139,    0, 1139, 1139, 1139, 1139, 1139, 1139,    0,
     1139, 1140, 1140, 1140,    0, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140,    0, 1140, 1141, 1141,
     1141,    0, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
        0, 1141, 1141,    0, 1141, 1142,    0, 1142,    0, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,

        0, 1142, 1143,    0, 1143,    0, 1143, 1143, 1143, 1143,
     1143,    0, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1144,    0, 1144,    0, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1148, 1148,
     1148,    0, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1150, 1150, 1150,    0,
     1150, 1150, 1150,    0, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1151, 1151, 1151,    0, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1152, 1152,    0, 1152,    0,    0, 1152, 1153,

        0, 1153, 1153,    0, 1153,    0, 1153,    0, 1153, 1154,
     1154, 1154,    0, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155,
        0, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1156, 1156, 1156,    0, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1157, 1157, 1157,    0, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1158, 1158, 1158,    0, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1159, 1159,

     1159,    0, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160,    0,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1161, 1161, 1161,    0, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1162, 1162, 1162,    0, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1163,
     1163, 1163,    0, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,

     1164, 1164, 1164, 1164, 1164, 1165, 1165, 1165,    0, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1166,    0,    0,    0, 1166,    0,    0,    0,
        0,    0,    0,    0, 1166,    0, 1166, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
        0, 1168, 1168,    0, 1168, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105
    } ;

extern int preYY_flex_debug;
int preYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = yy_full_lp; /* restore orig. accepting pos. */ \
(yy_state_ptr) = yy_full_state; /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *preYYtext;
#line 1 "pre.l"
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2008 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "pre.l"

/*
 *	includes
 */

#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <errno.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qfile.h>
#include <qstrlist.h>
#include <qdict.h>
#include <qregexp.h>
#include <qfileinfo.h>
#include <qdir.h>
  
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "doxygen.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"
#include "portable.h"

#define YY_NEVER_INTERACTIVE 1
  

struct FileState
{
  int lineNr;
  FILE *filePtr;
  FILE *oldYYin;
  bool isPlainFile;
  YY_BUFFER_STATE bufState;
  QCString fileName;
};  

/* -----------------------------------------------------------------
 *
 *	scanner's state
 */

static int                g_yyLineNr   = 1;
static QCString           g_yyFileName;
static FileDef           *g_yyFileDef;
static FileDef           *g_inputFileDef;
static int                g_ifcount    = 0;
static QStrList          *g_pathList = 0;  
static QStack<FileState>  g_includeStack;
static QDict<int>        *g_argDict;
static int                g_defArgs = -1;
static QCString           g_defName;
static QCString           g_defText;
static QCString           g_defLitText;
static QCString           g_defArgsStr;
static bool               g_defVarArgs;
static int                g_level;
static int                g_lastCContext;
static int                g_lastCPPContext;
static QArray<int>        g_levelGuard;
static BufStr            *g_outputBuf;
static int                g_roundCount;
static bool               g_quoteArg;
static DefineDict        *g_fileDefineDict = new DefineDict(10009);
static DefineDict        *g_expandedDict;
static int                g_findDefArgContext;
static QCString           g_lastGuardName;
static QCString           g_incName;
static QCString           g_guardExpr;
static int                g_curlyCount;
static bool               g_nospaces; // add extra spaces during macro expansion

static bool               g_macroExpansion; // from the configuration
static bool               g_expandOnlyPredef; // from the configuration
static int                g_commentCount;
static bool               g_insideComment;
static bool               g_isImported;
static QCString           g_blockName;
static int                g_condCtx;
static bool               g_skip;
static QStack<bool>       g_condStack;
static bool               g_insideCS; // C# has simpler preprocessor

static bool               g_lexInit = FALSE;

DefineDict* getFileDefineDict() 
{
  return g_fileDefineDict;
}

static void setFileName(const char *name)
{
  bool ambig;
  QFileInfo fi(name);
  g_yyFileName=convertToQCString(fi.absFilePath());
  g_yyFileDef=findFileDef(Doxygen::inputNameDict,g_yyFileName,ambig);
  if (g_yyFileDef && g_yyFileDef->isReference()) g_yyFileDef=0;
  g_insideCS = g_yyFileName.right(3)==".cs";
}

static void incrLevel()
{
  g_level++;
  g_levelGuard.resize(g_level);
  g_levelGuard[g_level-1]=FALSE;
  //printf("%s line %d: incrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
}

static void decrLevel()
{
  //printf("%s line %d: decrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
  if (g_level > 0)
  {
    g_level--;
    g_levelGuard.resize(g_level);
  }
  else
  {
    err("%s:%d: Error: More #endif's than #if's found.\n",
	g_yyFileName.data(),g_yyLineNr);
  }
}

static bool otherCaseDone()
{
  if (g_level==0)
  {
    err("%s:%d: Error: Found an #else without a preceding #if.\n",
	g_yyFileName.data(),g_yyLineNr);
    return TRUE;
  }
  else
  {
    return g_levelGuard[g_level-1];
  }
}

static void setCaseDone(bool value)
{
  g_levelGuard[g_level-1]=value;
}

static Define *isDefined(const char *name)
{
  if (name)
  {
    Define *def;
    //if ((def=fileDefineCache->findDefine(g_yyFileName,name)) && !def->undef) 
    //	return def;
    if ((def=g_fileDefineDict->find(name)) && !def->undef) return def; 
  }
  return 0;
}

static QDict<void> g_allIncludes(10009);

static FileState *checkAndOpenFile(const QCString &fileName,bool &alreadyIncluded)
{
  alreadyIncluded = FALSE;
  FileState *fs = 0;
  //printf("checkAndOpenFile(%s)\n",fileName.data());
  QFileInfo fi(fileName);
  if (fi.exists() && fi.isFile())
  {
    QCString absName = convertToQCString(fi.absFilePath());

    // global guard
    if (g_curlyCount==0) // not #include inside { ... }
    {
      if (g_allIncludes.find(absName)==0) 
      {
	alreadyIncluded = TRUE;
	//printf("  already included 1\n");
	return 0; // already done
      }
      g_allIncludes.insert(absName,(void *)0x8);
    }
    // check include stack for absName

    QStack<FileState> tmpStack;
    g_includeStack.setAutoDelete(FALSE);
    while ((fs=g_includeStack.pop()))
    {
      if (fs->fileName==absName) alreadyIncluded=TRUE;
      tmpStack.push(fs);
    }
    while ((fs=tmpStack.pop()))
    {
      g_includeStack.push(fs);
    }
    g_includeStack.setAutoDelete(TRUE);

    if (alreadyIncluded) 
    {
      //printf("  already included 2\n");
      return 0; 
    }
    //printf("#include %s\n",absName.data());

    fs = new FileState;
    alreadyIncluded = FALSE;

    QCString filterName = getFileFilter(absName);
    if (!filterName.isEmpty())
    {
      fs->isPlainFile = FALSE;
      QCString cmd = filterName+" \""+absName+"\"";
      fs->filePtr=portable_popen(cmd,"r");
      if (!fs->filePtr)
      {
        err("Error: could not execute filter %s, reason: %s\n",cmd.data(),
            strerror(errno));
      }
    }
    else
    {
      fs->isPlainFile = TRUE;
      fs->filePtr=fopen(absName,"r");
      if (!fs->filePtr)
      {
        err("Error: could not open file %s for reading, reason: %s \n",
            absName.data(),strerror(errno));
      }
    }
    if (!fs->filePtr) // error -> cleanup
    {
      delete fs;
      fs=0;
    }
    else
    {
      fs->oldYYin = preYYin;
    }
  }
  return fs;
}

static FileState *findFile(const char *fileName,bool localInclude,bool &alreadyIncluded)
{
  //printf("** findFile(%s,%d) g_yyFileName=%s\n",fileName,localInclude,g_yyFileName.data());
  if (localInclude && !g_yyFileName.isEmpty())
  {
    QFileInfo fi(g_yyFileName);
    if (fi.exists())
    {
      QCString absName = QCString(fi.dirPath(TRUE).data())+"/"+fileName;
      FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
      if (fs)
      {
	setFileName(absName);
	g_yyLineNr=1;
	return fs;
      }
      else if (alreadyIncluded)
      {
	return 0;
      }
    }
  }
  if (g_pathList==0) 
  {
    return 0;
  }
  char *s=g_pathList->first();
  while (s)
  {
    QCString absName = (QCString)s+"/"+fileName;
    FileState *fs = checkAndOpenFile(absName,alreadyIncluded);
    if (fs)
    {
      setFileName(absName);
      g_yyLineNr=1;
      return fs;
    }
    else if (alreadyIncluded)
    {
      return 0;
    }

    s=g_pathList->next();
  } 
  return 0;
}

static QCString extractTrailingComment(const char *s)
{
  if (s==0) return "";
  int i=strlen(s)-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
	{
	  i--;
	  if (i>=0 && s[i]=='*') // end of a comment block
	  {
	    i--;
	    while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
	    if (i==0) return s; else return &s[i-1];
	  }
	  else
	  {
	    return "";
	  }
	} 
	break;
	// whitespace or line-continuation
      case ' ':
      case '\t': 
      case '\r':
      case '\n':
      case '\\':
	break;
      default:
	return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos);
static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c);
static void expandExpression(QCString &expr,QCString *rest,int pos);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
	c=s.at(i++);
	if (c=='"')
	{
	  result+="\\\"";
	  inString=TRUE;
	}
	else if (c=='\'')
	{
	  result+=c;
	  inChar=TRUE;
	}
	else
	{
	  result+=c;
	}
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
	c=s.at(i++);
	if (c=='\'')
	{
	  result+='\'';
	  inChar=FALSE;
	}
	else if (c=='\\')
	{
	  result+="\\\\";
	}
	else
	{
	  result+=c;
	}
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
	char c=s.at(i++);
	if (c=='"') 
	{
	  result+="\\\"";
	  inString= pc=='\\';
	}
	else if (c=='\\')
	  result+="\\\\";
	else
	  result+=c;
	pc=c;
      }
    }
  }
  //printf("stringize `%s'->`%s'\n",s.data(),result.data());
  return result;
}

/*! Execute all ## operators in expr. 
 * If the macro name before or after the operator contains a no-rescan 
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  //printf("processConcatOperators: in=`%s'\n",expr.data());
  QRegExp r("[ \\t\\n]*##[ \\t\\n]*"); 
  int l,n,i=0;
  if (expr.isEmpty()) return;
  while ((n=r.match(expr,i,&l))!=-1)
  {
    //printf("Match: `%s'\n",expr.data()+i);
    if (n+l+1<(int)expr.length() && expr.at(n+l)=='@' && expr.at(n+l+1)=='-')
    {
      // remove no-rescan marker after ID
      l+=2;
    }
    //printf("found `%s'\n",expr.mid(n,l).data());
    // remove the ## operator and the surrounding whitespace
    expr=expr.left(n)+expr.right(expr.length()-n-l);
    int k=n-1;
    while (k>=0 && isId(expr.at(k))) k--; 
    if (k>0 && expr.at(k)=='-' && expr.at(k-1)=='@')
    {
      // remove no-rescan marker before ID
      expr=expr.left(k-1)+expr.right(expr.length()-k-1);
      n-=2;
    }
    i=n;
  }
  //printf("processConcatOperators: out=`%s'\n",expr.data());
}

static void yyunput (int c,char *buf_ptr  );
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  int cc;
  while ((cc=getNextChar(expr,rest,pos))!=EOF)
  {
    if (cc=='\\') arg+=(char)cc,cc=getNextChar(expr,rest,pos);
    else if (cc==term) return;
    arg+=(char)cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr. 
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the 
 * length of the (unexpanded) argument list is stored in \a len.
 */ 
static bool replaceFunctionMacro(const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result)
{
  //printf("replaceFunctionMacro(expr=%s,rest=%s,pos=%d,def=%s) level=%d\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),g_level);
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(expr,rest,j))!=EOF && cc==' ') 
  { 
    len++; 
    getNextChar(expr,rest,j); 
  }
  if (cc!='(') 
  { 
    unputChar(expr,rest,j,' '); 
    return FALSE; 
  }
  getNextChar(expr,rest,j); // eat the `(' character

  QDict<QCString> argTable;  // list of arguments
  argTable.setAutoDelete(TRUE);
  QCString arg;
  int argCount=0;
  bool done=FALSE;
  
  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(expr,rest,j))!=EOF)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) && 
	((cc=getNextChar(expr,rest,j))!=EOF)
	  )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
	int level=1;
	arg+=c;
	//char term='\0';
	while ((cc=getNextChar(expr,rest,j))!=EOF)
	{
	  char c=(char)cc;
	  //printf("processing %c: term=%c (%d)\n",c,term,term);
	  if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
	  {
	    arg+=c;
	    addTillEndOfString(expr,rest,j,c,arg);
	  }
	  if (c==')')
	  {
	    level--;
	    arg+=c;
	    if (level==0) break;
	  }
	  else if (c=='(')
	  {
	    level++;
	    arg+=c;
	  }
	  else
	    arg+=c;
	}
      }
      else if (c==')' || c==',') // last or next argument found
      {
	if (c==',' && argCount==def->nargs-1 && def->varArgs)
	{
	  arg=arg.stripWhiteSpace();
	  arg+=',';
	}
	else
	{
	  QCString argKey;
	  argKey.sprintf("@%d",argCount++); // key name
	  arg=arg.stripWhiteSpace();
	  // add argument to the lookup table
	  argTable.insert(argKey, new QCString(arg));
	  arg.resize(0);
	  if (c==')') // end of the argument list
	  {
	    done=TRUE;
	  }
	}
      } 
      else if (c=='\"') // append literal strings
      {
	arg+=c; 
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF)
	{
	  found = cc=='"';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF) break;
	  }
	  c=(char)cc;	  
	  arg+=c;
	}
      }
      else if (c=='\'') // append literal characters
      {
	arg+=c;
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF)
	{
	  found = cc=='\'';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF) break;
	  }
	  c=(char)cc;
	  arg+=c;
	}
      }	    
      else // append other characters
      {
	arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || 
      (argCount>def->nargs && def->varArgs)) // matching parameters lists
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    //printf("Macro definition: %s\n",d.data());
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
	if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
	{
	  k+=2;
	  resExpr+="@@"; // we unescape these later
	}
	else if (d.at(k+1)=='-') // no-rescan marker
	{
	  k+=2;
	  resExpr+="@-";
	}
	else // argument marker => read the argument number
	{
	  QCString key="@";
	  QCString *subst=0;
	  bool hash=FALSE;
	  int l=k-1;
	  // search for ## backward
	  if (l>=0 && d.at(l)=='"') l--;
	  while (l>=0 && d.at(l)==' ') l--;
	  if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
	  k++;
	  // scan the number
	  while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
	  if (!hash) 
	  {
	    // search for ## forward
	    l=k;
	    if (l<(int)d.length() && d.at(l)=='"') l++;
	    while (l<(int)d.length() && d.at(l)==' ') l++;
	    if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
	  }
	  //printf("request key %s result %s\n",key.data(),argTable[key]->data());
	  if (key.length()>1 && (subst=argTable[key])) 
	  {
	    QCString substArg=*subst;
	    //printf("substArg=`%s'\n",substArg.data());
	    // only if no ## operator is before or after the argument
	    // marker we do macro expansion.
	    if (!hash) expandExpression(substArg,0,0);
	    if (inString)
	    {
	      //printf("`%s'=stringize(`%s')\n",stringize(*subst).data(),subst->data());

	      // if the marker is inside a string (because a # was put 
	      // before the macro name) we must escape " and \ characters
	      resExpr+=stringize(substArg);
	    }
	    else
	    {
	      if (hash && substArg.isEmpty())
	      {
		resExpr+="@E"; // empty argument will be remove later on
	      }
	      else if (g_nospaces)
	      {
	        resExpr+=substArg;
	      }
	      else
	      {
	        resExpr+=" "+substArg+" ";
	      }
	    }
	  }
	}
      }
      else // no marker, just copy
      {
	if (!inString && d.at(k)=='\"') 
	{
	  inString=TRUE; // entering a literal string
	}
	else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
	{
	  inString=FALSE; // leaving a literal string
	}
	resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("result after substitution `%s' expr=`%s'\n",
    //       result.data(),expr.mid(pos,len).data());
    return TRUE;
  }
  return FALSE;
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isdigit(c)) // skip number
    {
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
    }
    else if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))) p++;
      *l=p-n;
      return n; 
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\'))) 
	// continue as long as no " is found, but ignoring \", but not \\"
      {
	ppc=pc;
	pc=c;
	c=expr.at(p);
	p++;
      }
    }
    else if (c=='/') // skip C Comment
    {
      char pc=c;
      if (p<(int)expr.length()) 
      {
	c=expr.at(++p);
        if (c=='*')  // Start of C comment
        { 
  	  while (p<(int)expr.length() && !(pc=='*' && c=='/'))
	  {
	    pc=c;
	    c=expr.at(++p);
	  }
	  p++;
        }
      }
    }
  }
  return -1;
}

/*! preforms recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c TRUE then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QCString &expr,QCString *rest,int pos)
{
  //printf("expandExpression(%s,%s)\n",expr.data(),rest ? rest->data() : 0);
  QCString macroName;
  QCString expMacro;
  bool definedTest=FALSE;
  int i=pos,l,p,len;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (g_expandedDict->find(macroName)==0) // expand macro
      {
	Define *def=isDefined(macroName);
	if (definedTest) // macro name was found after defined 
	{
	  if (def) expMacro = " 1 "; else expMacro = " 0 ";
	  replaced=TRUE;
	  len=l;
	  definedTest=FALSE;
	}
	else if (def && def->nargs==-1) // simple macro
	{
	  // substitute the definition of the macro
	  //printf("macro `%s'->`%s'\n",macroName.data(),def->definition.data());
	  if (g_nospaces)
	  {
	    expMacro=def->definition.stripWhiteSpace();
	  }
	  else
	  {
	    expMacro=" "+def->definition.stripWhiteSpace()+" ";
	  }
	  //expMacro=def->definition.stripWhiteSpace();
	  replaced=TRUE;
	  len=l;
	  //printf("simple macro expansion=`%s'->`%s'\n",macroName.data(),expMacro.data());
	}
	else if (def && def->nargs>=0) // function macro
	{
	  replaced=replaceFunctionMacro(expr,rest,p+l,len,def,expMacro);
	  len+=l;
	}
        else if (macroName=="defined")
        {
  	  //printf("found defined inside macro definition '%s'\n",expr.right(expr.length()-p).data());
	  definedTest=TRUE;
        }

	if (replaced) // expand the macro and rescan the expression
	{
	    
	  //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
	  QCString resultExpr=expMacro;
	  QCString restExpr=expr.right(expr.length()-len-p);
	  processConcatOperators(resultExpr);
	  if (def && !def->nonRecursive)
	  {
	    g_expandedDict->insert(macroName,def);
	    expandExpression(resultExpr,&restExpr,0);
	    g_expandedDict->remove(macroName);
	  }
	  expr=expr.left(p)+resultExpr+restExpr;
	  i=p;
	  //printf("new expression: %s\n",expr.data());
	}
	else // move to the next macro name
	{
	  //printf("moving to the next macro old=%d new=%d\n",i,p+l);
	  i=p+l;
	}
      }
      else // move to the next macro name
      {
	expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
	//printf("macro already expanded, moving to the next macro expr=%s\n",expr.data());
	i=p+l+2;
	//i=p+l;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QCString removeIdsAndMarkers(const char *s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  const char *p=s;
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
	if (*(p+1)=='@')
	{
	  result+=c; 
	}
	else if (*(p+1)=='E')
	{
	  // skip
	}
	p+=2;
      }
      else if (isdigit(c)) // number
      {
	result+=c;
	p++;
        inNum=TRUE;	
      }
      else if (c=='d' && !inNum) // identifier starting with a `d'
      {
	if (strncmp(p,"defined ",8)==0 || strncmp(p,"defined(",8)==0) 
	           // defined keyword
	{
	  p+=7; // skip defined
	}
	else
	{
	  result+="0L";
	  p++;
	  while ((c=*p) && isId(c)) p++;
	}
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
	result+="0L";
	p++;
	while ((c=*p) && isId(c)) p++;
      }
      else if (c=='/') // skip C comments
      {
	char pc=c;
	c=*++p;
	if (c=='*') // start of C comment
	{ 
	  while (*p && !(pc=='*' && c=='/')) // search end of comment
	  {
	    pc=c;
	    c=*++p;
	  }
	  p++;
	}
	else // oops, not comment but division
	{
	  result+=pc;
	  goto nextChar;
	}
      }
      else 
      {
nextChar:
	result+=c;
	char lc=tolower(c);
	if (!isId(lc) && lc!='.' && lc!='-' && lc!='+') inNum=FALSE;
	p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption: 
 *   \a s only contains pairs of @@'s
 */
QCString removeMarkers(const char *s)
{
  const char *p=s;
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      switch(c)
      {
	case '@': // replace @@ with @
	  {
	    if (*(p+1)=='@')
	    {
	      result+=c; 
	    }
	    p+=2;
	  }
	  break;
	case '/': // skip C comments
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    if (c=='*') // start of C comment
	    { 
	      while (*p && !(pc=='*' && c=='/')) // search end of comment
	      {
		if (*p=='@' && *(p+1)=='@') 
		  result+=c,p++;
		else 
		  result+=c;
		pc=c;
		c=*++p;
	      }
	      if (*p)
	      {
	        result+=c;
	        p++;
	      }
	    }
	  }
	  break;
	case '"': // skip string literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='"' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	  }
	  break;
	case '\'': // skip char literals
	  {
	    result+=c;
	    char pc=c;
	    c=*++p;
	    while (*p && (c!='\'' || pc=='\\')) // no end quote
	    {
	      result+=c;
	      c=*++p;
	    }
	  }
	  break;
	default:
	  {
	    result+=c;
	    p++;
	  }
	  break;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

bool computeExpression(const QCString &expr)
{
  QCString e=expr;
  expandExpression(e,0,0);
  //printf("after expansion `%s'\n",e.data());
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing `%s'\n",e.data());
  return parseCppExpression(g_yyFileName,g_yyLineNr,e);
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QCString expandMacro(const QCString &name)
{
  QCString n=name;
  expandExpression(n,0,0);
  n=removeMarkers(n);
  //printf("expandMacro `%s'->`%s'\n",name.data(),n.data());
  return n;
}

Define *newDefine()
{
  Define *def=new Define;
  def->name = g_defName;
  def->definition = g_defText.stripWhiteSpace();
  def->nargs = g_defArgs;
  def->fileName = g_yyFileName; 
  def->lineNr = g_yyLineNr;
  def->varArgs = g_defVarArgs;
  //printf("newDefine: `%s'->`%s'\n",def->name.data(),def->definition.data());
  if (!def->name.isEmpty() && Doxygen::expandAsDefinedDict[def->name])
  {
    def->isPredefined=TRUE;
  }
  return def;
}

void addDefine()
{
  if (g_skip) return; // do not add this define as it is inside a 
                      // conditional section (cond command) that is disabled.
  if (!Doxygen::gatherDefines) return;

  //printf("addDefine %s %s\n",g_defName.data(),g_defArgsStr.data());
  //ArgumentList *al = new ArgumentList;
  //stringToArgumentList(g_defArgsStr,al);
  MemberDef *md=new MemberDef(
      g_yyFileName,g_yyLineNr,
      "#define",g_defName,g_defArgsStr,0,
      Public,Normal,FALSE,Member,MemberDef::Define,0,0);
  if (!g_defArgsStr.isEmpty())
  {
    ArgumentList *argList = new ArgumentList;
    //printf("addDefine() g_defName=`%s' g_defArgsStr=`%s'\n",g_defName.data(),g_defArgsStr.data());
    stringToArgumentList(g_defArgsStr,argList);
    md->setArgumentList(argList);
  }
  //printf("Setting initializer for `%s' to `%s'\n",g_defName.data(),g_defText.data());
  int l=g_defLitText.find('\n');
  if (l>0 && g_defLitText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash
    g_defLitText = g_defLitText.right(g_defLitText.length()-l-1);
  }
  else if (l>0)
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=g_defLitText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    g_defLitText=g_defLitText.mid(l+1,k-l-1)+g_defLitText.stripWhiteSpace();
  }
  md->setInitializer(g_defLitText.stripWhiteSpace());

  md->setFileDef(g_inputFileDef);
  md->setDefinition("#define "+g_defName);

  MemberName *mn=Doxygen::functionNameSDict->find(g_defName);
  if (mn==0)
  {
    mn = new MemberName(g_defName);
    Doxygen::functionNameSDict->append(g_defName,mn);
  }
  mn->append(md);
  if (g_yyFileDef) g_yyFileDef->insertMember(md);

  //Define *d;
  //if ((d=defineDict[g_defName])==0) defineDict.insert(g_defName,newDefine()); 
}

static inline void outputChar(char c)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addChar(c);
}

static inline void outputArray(const char *a,int len)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addArray(a,len);
}

static void readIncludeFile(const QCString &inc)
{
  if (!Config_getBool("SEARCH_INCLUDES")) return; // do not read include files
  uint i=0;

  // find the start of the include file name
  while (i<inc.length() && 
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
	) i++;
  uint s=i;

  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';

  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++;

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace();

    QCString oldFileName = g_yyFileName.copy();
    FileDef *oldFileDef  = g_yyFileDef;
    int oldLineNr        = g_yyLineNr;
    //printf("Searching for `%s'\n",incFileName.data());

    // findFile will overwrite g_yyFileDef if found
    FileState *fs;
    bool alreadyIncluded = FALSE;
    //printf("calling findFile(%s)\n",incFileName.data());
    if ((fs=findFile(incFileName,localInclude,alreadyIncluded))) // see if the include file can be found
    {
      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<g_includeStack.count();i++) msg("  ");
        msg("#include %s: parsing...\n",incFileName.data());
      }
      if (oldFileDef)
      {
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(g_yyFileDef,incFileName,localInclude,g_isImported);
	// add included by dependency
        if (g_yyFileDef)
        {
	  //printf("Adding include dependency %s->%s\n",oldFileDef->name().data(),incFileName.data());
  	  g_yyFileDef->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      fs->bufState=YY_CURRENT_BUFFER;
      fs->lineNr=oldLineNr;
      fs->fileName=oldFileName;
      // push the state on the stack
      g_includeStack.push(fs);
      // set the scanner to the include file

      // Deal with file changes due to 
      // #include's within { .. } blocks
      QCString lineStr(g_yyFileName.length()+20);
      lineStr.sprintf("# 1 \"%s\" 1\n",g_yyFileName.data());
      outputArray(lineStr.data(),lineStr.length());

      //fprintf(stderr,"Switching to include file %s\n",incFileName.data());
      preYYin=fs->filePtr;
      preYY_switch_to_buffer(preYY_create_buffer(preYYin,YY_BUF_SIZE));
    }
    else
    {
      //printf("  calling findFile(%s) alreadyInc=%d\n",incFileName.data(),alreadyIncluded);
      if (oldFileDef)
      {
	bool ambig;
	FileDef *fd = findFileDef(Doxygen::inputNameDict,incFileName,ambig);
	//printf("findFileDef(%s)=%p\n",incFileName.data(),fd);
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(fd,incFileName,localInclude,g_isImported);
	// add included by dependency
        if (fd)
        {
          //printf("Adding include dependency (2) %s->%s ambig=%d\n",oldFileDef->name().data(),fd->name().data(),ambig);
          fd->addIncludedByDependency(oldFileDef,oldFileDef->docName(),localInclude,g_isImported);
        }
      }
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        msg("#include %s: not found or already included! skipping...\n",incFileName.data());
        //printf("Error: include file %s not found\n",preYYtext);
      }
      if (g_curlyCount>0 && !alreadyIncluded) // failed to find #include inside { ... }
      {
	warn(g_yyFileName,g_yyLineNr,"Warning: include file %s not found, perhaps you forgot to add its directory to INCLUDE_PATH?",incFileName.data());
      }
    }
  }
}

/* ----------------------------------------------------------------- */

static void startCondSection(const char *sectId)
{
  g_condStack.push(new bool(g_skip));
  if (Config_getList("ENABLED_SECTIONS").find(sectId)==-1)
  {
    g_skip=TRUE;
  }
}

static void endCondSection()
{
  if (g_condStack.isEmpty())
  {
    g_skip=FALSE;
  }
  else
  {
    bool *ctx = g_condStack.pop();
    g_skip=*ctx;
  }
}

static QCString escapeAt(const char *text)
{
  QCString result;
  if (text)
  {
    char c;
    const char *p=text;
    while ((c=*p++))
    {
      if (c=='@') result+="@@"; else result+=c;
    }
  }
  return result;
}

static char resolveTrigraph(char c)
{
  switch (c)
  {
    case '=': return '#';
    case '/': return '\\';
    case '\'': return '^';
    case '(': return '[';
    case ')': return ']';
    case '!': return '|';
    case '<': return '{';
    case '>': return '}';
    case '-': return '~';
  }
  return '?';
}

/* ----------------------------------------------------------------- */

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int len = fread( buf, 1, max_size, preYYin );
  if (len==0 && ferror( preYYin ))
  {
    yy_fatal_error( "input in flex scanner failed" );
    return len;
  }
  return filterCRLF(buf,len);
}

/* ----------------------------------------------------------------- */
































#line 3385 "<stdout>"

#define INITIAL 0
#define Start 1
#define Command 2
#define SkipCommand 3
#define SkipLine 4
#define CopyLine 5
#define CopyString 6
#define Include 7
#define IncludeID 8
#define EndImport 9
#define DefName 10
#define DefineArg 11
#define DefineText 12
#define SkipCPPBlock 13
#define Ifdef 14
#define Ifndef 15
#define SkipCComment 16
#define CopyCComment 17
#define SkipVerbatim 18
#define SkipCPPComment 19
#define RemoveCComment 20
#define RemoveCPPComment 21
#define Guard 22
#define DefinedExpr1 23
#define DefinedExpr2 24
#define SkipDoubleQuote 25
#define SkipSingleQuote 26
#define UndefName 27
#define IgnoreLine 28
#define FindDefineArgs 29
#define ReadString 30
#define CondLine 31

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int preYYwrap (void );
#else
extern int preYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( preYYtext, preYYleng, 1, preYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( preYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( preYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, preYYin))==0 && ferror(preYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(preYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int preYYlex (void);

#define YY_DECL int preYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after preYYtext and preYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( preYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(preYYtext[preYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 1364 "pre.l"


#line 3575 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)preYYalloc(YY_STATE_BUF_SIZE  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! preYYin )
			preYYin = stdin;

		if ( ! preYYout )
			preYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			preYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				preYY_create_buffer(preYYin,YY_BUF_SIZE );
		}

		preYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of preYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1106 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4756 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1366 "pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1367 "pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1368 "pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1369 "pre.l"
{ // Trigraph
  					  unput(resolveTrigraph(preYYtext[2]));
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1372 "pre.l"
{ BEGIN(Command); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1373 "pre.l"
{
 					  outputArray(preYYtext,preYYleng); 
  					  BEGIN(CopyLine); 
					}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 1377 "pre.l"
{ // constructors?
					  int i;
					  for (i=preYYleng-1;i>=0;i--)
					  {
					    unput(preYYtext[i]);
					  }
					  BEGIN(CopyLine);
                                        }
	YY_BREAK
case 8:
/* rule 8 can match eol */
#line 1386 "pre.l"
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 1386 "pre.l"
{ // function like macro
  					  static bool skipFuncMacros = Config_getBool("SKIP_FUNCTION_MACROS");
					  QCString name(preYYtext);
					  name=name.left(name.find('(')).stripWhiteSpace();

					  Define *def=0;
					  if (skipFuncMacros && 
					      name!="Q_PROPERTY" &&
					      !(
					         (g_includeStack.isEmpty() || g_curlyCount>0) &&
					         g_macroExpansion &&
					         (def=g_fileDefineDict->find(name)) &&
					         (!g_expandOnlyPredef || def->isPredefined)
					       )
					     )
					  {
					    outputChar('\n');
					    g_yyLineNr++;
					  }
					  else // don't skip
					  {
					    int i;
					    for (i=preYYleng-1;i>=0;i--)
					    {
					      unput(preYYtext[i]);
					    }
					    BEGIN(CopyLine);
					  }
  					}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 1415 "pre.l"
{
                                          QCString text=preYYtext;
  					  g_yyLineNr+=text.contains('\n');
					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1420 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty()) 
					  {
					    g_curlyCount++;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1427 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty() && g_curlyCount>0) 
					  {
					    g_curlyCount--;
					  }
					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1434 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1437 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1440 "pre.l"
{ 
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1443 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyString );
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1447 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1450 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1453 "pre.l"
{
					  outputChar(*preYYtext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 1457 "pre.l"
{
  					  Define *def=0;
					  //def=g_fileDefineDict->find(preYYtext);
					  //printf("Search for define %s found=%d g_includeStack.isEmpty()=%d "
					  //       "g_curlyCount=%d g_macroExpansion=%d g_expandOnlyPredef=%d "
					  //	 "isPreDefined=%d\n",preYYtext,def ? 1 : 0,
					  //	 g_includeStack.isEmpty(),g_curlyCount,g_macroExpansion,g_expandOnlyPredef,
					  //	 def ? def->isPredefined : -1
					  //	);
					  if ((g_includeStack.isEmpty() || g_curlyCount>0) &&
					      g_macroExpansion &&
					      (def=g_fileDefineDict->find(preYYtext)) &&
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it!\n");
					    g_roundCount=0;
					    g_defArgsStr=preYYtext;
					    if (def->nargs==-1) // no function macro
					    {
					      QCString result = expandMacro(g_defArgsStr);
					      outputArray(result,result.length());
					    }
					    else // zero or more arguments
					    {
					      g_findDefArgContext = CopyLine;
					      BEGIN(FindDefineArgs);
					    }
					  }
					  else
					  {
					    outputArray(preYYtext,preYYleng);
					  }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1491 "pre.l"
{
                                          Define *def=0;
					  //printf("Search for define %s\n",preYYtext);
  					  if ((g_includeStack.isEmpty() || g_curlyCount>0) && 
					      g_macroExpansion &&
					      (def=g_fileDefineDict->find(preYYtext)) &&
					      def->nargs==-1 &&
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it!\n");
                                            QCString name=preYYtext;
					    QCString result=expandMacro(name); 
					    //printf("result=`%s'\n",result.data());
					    outputArray(result,result.length());
					  }
					  else
					  {
					    outputArray(preYYtext,preYYleng);
					  }
  					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1512 "pre.l"
{ // strip line continuation characters
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1514 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 1517 "pre.l"
{
  					  outputChar('\n');
					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1522 "pre.l"
{
  					  g_defArgsStr+='(';
  					  g_roundCount++;
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1526 "pre.l"
{
  					  g_defArgsStr+=')';
					  g_roundCount--;
					  if (g_roundCount==0)
					  {
					    QCString result=expandMacro(g_defArgsStr);
					    //printf("g_defArgsStr=`%s'->`%s'\n",g_defArgsStr.data(),result.data());
					    if (g_findDefArgContext==CopyLine)
					    {
					      outputArray(result,result.length());
					      BEGIN(g_findDefArgContext);
					    }
					    else // g_findDefArgContext==IncludeID
					    {
					      readIncludeFile(result);
					      g_nospaces=FALSE;
					      BEGIN(Start);
					    }
					  }
  					}
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("		{
  					  g_defArgsStr+=preYYtext;
  					}
  */
case 27:
YY_RULE_SETUP
#line 1551 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1554 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					  BEGIN(ReadString);
  					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 1558 "pre.l"
{
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1562 "pre.l"
{
  					  g_defArgsStr+="@@";
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1565 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1568 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1572 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1575 "pre.l"
{
  					  g_defArgsStr+=preYYtext;
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1578 "pre.l"
{
  					  g_defArgsStr+=*preYYtext;
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1581 "pre.l"
{
  					  g_isImported = preYYtext[1]=='m';
  					  if (g_macroExpansion) 
					    BEGIN(IncludeID);
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1586 "pre.l"
{ 
  					  g_isImported = preYYtext[1]=='m';
					  char c[2];
					  c[0]=preYYtext[preYYleng-1];c[1]='\0';
					  g_incName=c;
  					  BEGIN(Include); 
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1593 "pre.l"
{ 
  			                  //printf("!!!DefName\n"); 
  					  BEGIN(DefName); 
					}
	YY_BREAK
case 39:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1597 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr2);
  					}
	YY_BREAK
case 40:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1602 "pre.l"
{
  					  //printf("Pre.l: ifdef\n");
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 41:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1608 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr2);
					}
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1613 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 43:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1618 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
					  BEGIN(Guard);
					}
	YY_BREAK
case 44:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1623 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
					    BEGIN(Guard);  
					  }
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1635 "pre.l"
{
					  //printf("else g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
  					  if (otherCaseDone())
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
					  else
					  {
					    setCaseDone(TRUE);
					    //g_levelGuard[g_level-1]=TRUE;
					  } 
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1648 "pre.l"
{
  					  BEGIN(UndefName);
  					}
	YY_BREAK
case 47:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1651 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
  					    BEGIN(Guard);
					  }
  					}
	YY_BREAK
case 48:
/* rule 48 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1658 "pre.l"
{
  					  //printf("Pre.l: #endif\n");
  					  decrLevel();
  					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1662 "pre.l"
{
  					  outputChar('\n');
  					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1667 "pre.l"
{ // unknown directive
					  BEGIN(IgnoreLine);
					}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1670 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1674 "pre.l"

	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1675 "pre.l"

	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1676 "pre.l"
{
  					  Define *def;
  					  if ((def=isDefined(preYYtext)) 
					      /*&& !def->isPredefined*/
					      && !def->nonRecursive
					     )
					  {
					    //printf("undefining %s\n",preYYtext);
					    def->undef=TRUE;
					  }
					  BEGIN(Start);
  					}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1688 "pre.l"
{
  					  outputChar('\n');
  					  g_guardExpr+=' ';
					  g_yyLineNr++;
  					}
	YY_BREAK
case 56:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1693 "pre.l"
{
    					  BEGIN(DefinedExpr2);
    					}
	YY_BREAK
case 57:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1696 "pre.l"
{
    					  BEGIN(DefinedExpr1);
    					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 1699 "pre.l"
{ g_guardExpr+=preYYtext; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1700 "pre.l"
{ g_guardExpr+=*preYYtext; }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1701 "pre.l"
{
  					  unput(*preYYtext);
  					  //printf("Guard: `%s'\n",
					  //    g_guardExpr.data());
					  bool guard=computeExpression(g_guardExpr);
					  setCaseDone(guard);
					  //printf("if g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
					  if (guard)
					  {
					    BEGIN(Start);
					  } 
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1718 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1719 "pre.l"
{
  					  if (isDefined(preYYtext))
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=preYYtext;
					  BEGIN(Guard);
  					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1727 "pre.l"
{
  					  if (isDefined(preYYtext))
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName.resize(0);
  					}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 1734 "pre.l"
{ // should not happen, handle anyway
                                          g_yyLineNr++;
  					  g_ifcount=0;
 					  BEGIN(SkipCPPBlock); 
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1739 "pre.l"
{
  					  BEGIN(Guard);
  					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1742 "pre.l"

	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1743 "pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 68:
/* rule 68 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1744 "pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1745 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1746 "pre.l"

	YY_BREAK
case 71:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1747 "pre.l"
{ 
  					  incrLevel();
                                          g_ifcount++; 
  					  //printf("#if... depth=%d\n",g_ifcount);
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1752 "pre.l"
{
					  //printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());
  					  if (g_ifcount==0 && !otherCaseDone())
					  {
					    setCaseDone(TRUE);
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 73:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1761 "pre.l"
{
  					  if (g_ifcount==0) 
					  {
  					    if (!otherCaseDone())
					    {
					      g_guardExpr.resize(0);
					      g_lastGuardName.resize(0);
  					      BEGIN(Guard);
					    }
					    else
					    {
					      BEGIN(SkipCPPBlock);
					    }
					  }
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1776 "pre.l"
{ 
  					  decrLevel();
  				          if (--g_ifcount<0)
  					  {
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
					}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 1784 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1789 "pre.l"
{ // unknown directive 
  					  BEGIN(SkipLine); 
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1792 "pre.l"

	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1793 "pre.l"

	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1794 "pre.l"

	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1795 "pre.l"
{
  					  g_lastCPPContext=YY_START;
  					  BEGIN(RemoveCPPComment);
					}
	YY_BREAK
case 81:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1799 "pre.l"
{
					  g_lastCContext=YY_START;
  					  BEGIN(RemoveCComment);
  					}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1803 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;  
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 83:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1808 "pre.l"
{
  					  g_nospaces=TRUE;
				          g_roundCount=0;
					  g_defArgsStr=preYYtext;
					  g_findDefArgContext = IncludeID;
					  BEGIN(FindDefineArgs);
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1815 "pre.l"
{
  					  g_nospaces=TRUE;
                                          readIncludeFile(expandMacro(preYYtext));
					  BEGIN(Start);
  					}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1820 "pre.l"
{ 
					  g_incName+=preYYtext;
					  readIncludeFile(g_incName);
					  if (g_isImported)
					  {
					    BEGIN(EndImport);
					  }
					  else
					  {
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1832 "pre.l"
{
  					  BEGIN(Start);
  					}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1835 "pre.l"
{ 
					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1839 "pre.l"
{
  					}
	YY_BREAK
case 89:
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 1841 "pre.l"
{
  					  //printf("Define() `%s'\n",preYYtext);
					  g_argDict = new QDict<int>(31);
					  g_argDict->setAutoDelete(TRUE);
					  g_defArgs = 0; 
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  BEGIN(DefineArg);
  					}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1853 "pre.l"
{
  					  //printf("Define `%s'\n",preYYtext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = preYYtext;
					  g_defVarArgs = FALSE;
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
					  BEGIN(DefineText); 
  					}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1868 "pre.l"
{ // bare define
  					  g_argDict = 0;
					  g_defArgs = -1;
					  g_defName = preYYtext;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defVarArgs = FALSE;
					  if ( g_defName!=g_lastGuardName )
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    if (g_insideCS) g_defText="1"; // for C#, use "1" as define text
					    BEGIN(DefineText);
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",preYYtext);
#if 0
  					    Define *def=g_fileDefineDict->find(g_defName);
					    if (def==0) // new define name for this file
					    {
					      g_fileDefineDict->insert(g_defName,newDefine());
					    }
					    else // name already exists
					    {
					      if (def->undef) // undefined name
					      {
					        def->undef = FALSE;
					        def->name = g_defName;
					        def->definition = g_defText.stripWhiteSpace();
					        def->nargs = g_defArgs;
					        def->fileName = g_yyFileName.copy(); 
					        def->lineNr = g_yyLineNr;
					      }
					      else
					      {
					        //printf("Error: define %s is defined more than once!\n",g_defName.data());
					      }
					    }
#endif
					    g_lastGuardName.resize(0);
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1915 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1916 "pre.l"
{ g_defArgsStr+=preYYtext; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1917 "pre.l"
{
                                          g_defArgsStr+=preYYtext; 
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
  					  BEGIN(DefineText);
  					}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1925 "pre.l"
{ // Variadic macro
					  g_defVarArgs = TRUE;
					  g_defArgsStr+=preYYtext;
					  g_argDict->insert("__VA_ARGS__",new int(g_defArgs));
					  g_defArgs++;
  					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1931 "pre.l"
{
  					  //printf("Define addArg(%s)\n",preYYtext);
  					  QCString argName=preYYtext;
  					  g_defVarArgs = preYYtext[preYYleng-1]=='.';
					  if (g_defVarArgs) // strip ellipsis
					  {
					    argName=argName.left(argName.length()-3);
					  }
					  argName = argName.stripWhiteSpace();
                                          g_defArgsStr+=preYYtext;
					  g_argDict->insert(argName,new int(g_defArgs)); 
					  g_defArgs++;
  					}
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=TRUE;
  					}
<DefineText>"* /"			{
  					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_insideComment=FALSE;
  					}
  */
case 97:
YY_RULE_SETUP
#line 1956 "pre.l"
{
					  g_defText+=preYYtext;
					  g_defLitText+=preYYtext;
					  g_lastCContext=YY_START;
					  g_commentCount=1;
  					  BEGIN(CopyCComment);
  					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1963 "pre.l"
{
  				          outputChar('/');outputChar('/');
  					  g_lastCPPContext=YY_START;
					  g_defLitText+=' ';
  					  BEGIN(SkipCPPComment);
  					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1969 "pre.l"
{
  					  if (preYYtext[0]=='/') outputChar('/');
  					  outputChar('*');outputChar('/');
					  if (--g_commentCount<=0)
					  {
					    if (g_lastCContext==Start) 
					      // small hack to make sure that ^... rule will
					      // match when going to Start... Example: "/*...*/ some stuff..."
					    {
					      YY_CURRENT_BUFFER->yy_at_bol=1;
					    }
  					    BEGIN(g_lastCContext);  
					  }
  					}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1983 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1986 "pre.l"
{
  					  outputChar('/');outputChar('*');
					  //g_commentCount++;
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1990 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1993 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1997 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
					  if (preYYtext[1]=='f')
					  {
					    g_blockName="f";
					  }
					  else
					  {
					    g_blockName=QCString(&preYYtext[1]).stripWhiteSpace();
					  }
					  BEGIN(SkipVerbatim);
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 2010 "pre.l"
{ // conditional section
  					  g_condCtx = YY_START;
  					  outputArray(preYYtext,preYYleng);
  					  BEGIN(CondLine);
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 2015 "pre.l"
{
  				          startCondSection(preYYtext);
  					  outputArray(preYYtext,preYYleng);
  					  BEGIN(g_condCtx);
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
#line 2021 "pre.l"
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 2021 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  g_yyLineNr+=QCString(preYYtext).contains('\n');
  					  startCondSection(" ");
					  if (YY_START==CondLine) BEGIN(g_condCtx);
  					}
	YY_BREAK
case 109:
/* rule 109 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up preYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up preYYtext again */
YY_RULE_SETUP
#line 2027 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					  endCondSection();
  					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 2031 "pre.l"
{ /* end of verbatim block */
  					  outputArray(preYYtext,preYYleng);
					  if (preYYtext[1]=='f' && g_blockName=="f")
					  {
					    BEGIN(SkipCComment);
					  }
					  else if (&preYYtext[4]==g_blockName)
					  {
					    BEGIN(SkipCComment);
					  }
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 2042 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 2045 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 2048 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
  					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 2052 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 2055 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=escapeAt(preYYtext);
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 2059 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					  BEGIN(g_lastCContext);
  					}
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 2064 "pre.l"
{ 
  					  g_yyLineNr++;
					  g_defLitText+=preYYtext;
					  g_defText+=' ';
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 2069 "pre.l"
{ BEGIN(g_lastCContext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 2070 "pre.l"

	YY_BREAK
case 120:
YY_RULE_SETUP
#line 2071 "pre.l"

	YY_BREAK
case 121:
YY_RULE_SETUP
#line 2072 "pre.l"

	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 2073 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 2074 "pre.l"

	YY_BREAK
case 124:
YY_RULE_SETUP
#line 2075 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 2078 "pre.l"
{
  					  unput(*preYYtext);
  					  BEGIN(g_lastCPPContext);
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 2082 "pre.l"
{
  					  outputChar('/');outputChar('*');
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 2085 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 2088 "pre.l"
{
  					  outputArray(preYYtext,preYYleng);
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 2091 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 2094 "pre.l"

	YY_BREAK
case 131:
YY_RULE_SETUP
#line 2095 "pre.l"

	YY_BREAK
case 132:
YY_RULE_SETUP
#line 2096 "pre.l"

	YY_BREAK
case 133:
YY_RULE_SETUP
#line 2097 "pre.l"

	YY_BREAK
case 134:
YY_RULE_SETUP
#line 2098 "pre.l"
{
  					  g_quoteArg=TRUE;
					  g_defLitText+=preYYtext;
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 2102 "pre.l"
{
					  g_defLitText+=preYYtext;
  					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  if (g_defArgs>0)
					  {
					    int *n;
					    if ((n=(*g_argDict)[preYYtext]))
					    {
					      //if (!g_quoteArg) g_defText+=' ';
					      g_defText+='@';
					      QCString numStr;
					      numStr.sprintf("%d",*n);
					      g_defText+=numStr;
					      //if (!g_quoteArg) g_defText+=' ';
					    }
					    else
					    {
					      g_defText+=preYYtext;
					    }
					  }
					  else
					  {
					    g_defText+=preYYtext;
					  }
					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  g_quoteArg=FALSE;
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 2135 "pre.l"
{
					  g_defLitText+=preYYtext;
					  g_defText+=preYYtext;
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 2139 "pre.l"
{ 
					  g_defLitText+=preYYtext;
					  outputChar('\n');
  					  g_defText += ' '; g_yyLineNr++; 
					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 2144 "pre.l"
{
					  QCString comment=extractTrailingComment(g_defLitText);
					  g_defLitText+=preYYtext;
					  if (!comment.isEmpty())
					  {
					    outputArray(comment,comment.length());
					    g_defLitText=g_defLitText.left(g_defLitText.length()-comment.length()-1);
					  }
  					  outputChar('\n');
  					  Define *def=0;
					  //printf("Define name=`%s' text=`%s' litTexti=`%s'\n",g_defName.data(),g_defText.data(),g_defLitText.data());
					  if (g_includeStack.isEmpty() || g_curlyCount>0) 
					  {
					    addDefine();
					  }
					  def=g_fileDefineDict->find(g_defName);
					  if (def==0) // new define
					  {
					    //printf("new define!\n");
					    g_fileDefineDict->insert(g_defName,newDefine());
					  }
					  else if (def)// name already exists
					  {
					    //printf("existing define!\n");
					    //printf("define found\n");
					    if (def->undef) // undefined name
					    {
					      def->undef = FALSE;
					      def->name = g_defName;
					      def->definition = g_defText.stripWhiteSpace();
					      def->nargs = g_defArgs;
					      def->fileName = g_yyFileName.copy(); 
					      def->lineNr = g_yyLineNr;
					    }
					    else
					    {
					      //printf("Error: define %s is defined more than once!\n",g_defName.data());
					    }
					  }
					  delete g_argDict; g_argDict=0;
					  g_yyLineNr++;
					  g_lastGuardName.resize(0);
					  BEGIN(Start);
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 2188 "pre.l"
{ g_defText += ' '; g_defLitText+=preYYtext; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 2189 "pre.l"
{ g_defText += "##"; g_defLitText+=preYYtext; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 2190 "pre.l"
{ g_defText += "@@"; g_defLitText+=preYYtext; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 2191 "pre.l"
{ 
                                          g_defText += *preYYtext; 
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
					    BEGIN(SkipDoubleQuote);
					  }
  					}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 2199 "pre.l"
{ g_defText += *preYYtext;
  					  g_defLitText+=preYYtext; 
					  if (!g_insideComment)
					  {
  					    BEGIN(SkipSingleQuote);
					  }
					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 2206 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 2207 "pre.l"
{ g_defText += preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 2208 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext; 
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 2212 "pre.l"
{
  					  g_defText += preYYtext; g_defLitText+=preYYtext;
					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 2215 "pre.l"
{
  					  g_defText += *preYYtext; g_defLitText+=preYYtext;
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 2219 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 2220 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 2221 "pre.l"
{ g_defText += *preYYtext; g_defLitText+=preYYtext; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(EndImport):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
case YY_STATE_EOF(CondLine):
#line 2222 "pre.l"
{
                                          //fprintf(stderr,"End of include file\n");
					  //printf("Include stack depth=%d\n",g_includeStack.count());
  					  if (g_includeStack.isEmpty())
					  {
					    //fprintf(stderr,"Terminating scanner!\n");
					    yyterminate();
					  }
					  else
					  {
					    FileState *fs=g_includeStack.pop();
					    //fileDefineCache->merge(g_yyFileName,fs->fileName);
					    if (fs->isPlainFile)
					    {
					      if (fs->filePtr && fclose(fs->filePtr)!=0)
					      {
						err("Error: could not close file %s: %s\n",fs->fileName.data(),strerror(errno));
					      }
				              fs->filePtr=0;
					    }
					    else
					    {
					      if (fs->filePtr && portable_pclose(fs->filePtr)!=0)
					      {
						err("Error: could not close pipe: %s\n",strerror(errno));
					      }
				    	      fs->filePtr=0;
					    }
					    YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
					    preYY_switch_to_buffer(fs->bufState );
					    preYY_delete_buffer(oldBuf );
					    g_yyLineNr=fs->lineNr;
                                            preYYin = fs->oldYYin;
					    setFileName(fs->fileName.copy());
					    //fprintf(stderr,"######## FileName %s\n",g_yyFileName.data());
					    
                                            // Deal with file changes due to 
                                            // #include's within { .. } blocks
                                            QCString lineStr(15+g_yyFileName.length());
                                            lineStr.sprintf("# %d \"%s\" 2",g_yyLineNr,g_yyFileName.data());
                                            outputArray(lineStr.data(),lineStr.length());
					    
					    delete fs; fs=0;
					  }
  					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 2267 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
  					  g_lastCContext=YY_START;
					  g_commentCount=1;
					  if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					  BEGIN(SkipCComment);
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 2274 "pre.l"
{
					  outputArray(preYYtext,preYYleng);
  					  g_lastCPPContext=YY_START;
					  if (preYYleng==3) g_lastGuardName.resize(0); // reset guard in case the #define is documented!
					  BEGIN(SkipCPPComment);
					}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 2280 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 2284 "pre.l"
{
  					  outputChar(*preYYtext);
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 2288 "pre.l"
ECHO;
	YY_BREAK
#line 5359 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed preYYin at a new source and called
			 * preYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = preYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( preYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * preYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of preYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			preYYrestart(preYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 54);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1106 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 54;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1106 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1105);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up preYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					preYYrestart(preYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( preYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve preYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void preYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        preYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            preYY_create_buffer(preYYin,YY_BUF_SIZE );
	}

	preYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	preYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void preYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		preYYpop_buffer_state();
	 *		preYYpush_buffer_state(new_buffer);
     */
	preYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	preYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (preYYwrap()) processing, but the only time this flag
	 * is looked at is after preYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void preYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	preYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE preYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) preYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	preYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with preYY_create_buffer()
 * 
 */
    void preYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		preYYfree((void *) b->yy_ch_buf  );

	preYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a preYYrestart() or at EOF.
 */
    static void preYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	preYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then preYY_init_buffer was _probably_
     * called from preYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void preYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		preYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void preYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	preYYensure_buffer_stack();

	/* This block is copied from preYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from preYY_switch_to_buffer. */
	preYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void preYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	preYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		preYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void preYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)preYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE preYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) preYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	preYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to preYYlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       preYY_scan_bytes() instead.
 */
YY_BUFFER_STATE preYY_scan_string (yyconst char * yystr )
{
    
	return preYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to preYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE preYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) preYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in preYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = preYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in preYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up preYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		preYYtext[preYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = preYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		preYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int preYYget_lineno  (void)
{
        
    return preYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *preYYget_in  (void)
{
        return preYYin;
}

/** Get the output stream.
 * 
 */
FILE *preYYget_out  (void)
{
        return preYYout;
}

/** Get the length of the current token.
 * 
 */
int preYYget_leng  (void)
{
        return preYYleng;
}

/** Get the current token.
 * 
 */

char *preYYget_text  (void)
{
        return preYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void preYYset_lineno (int  line_number )
{
    
    preYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see preYY_switch_to_buffer
 */
void preYYset_in (FILE *  in_str )
{
        preYYin = in_str ;
}

void preYYset_out (FILE *  out_str )
{
        preYYout = out_str ;
}

int preYYget_debug  (void)
{
        return preYY_flex_debug;
}

void preYYset_debug (int  bdebug )
{
        preYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from preYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    preYYin = stdin;
    preYYout = stdout;
#else
    preYYin = (FILE *) 0;
    preYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * preYYlex_init()
     */
    return 0;
}

/* preYYlex_destroy is for both reentrant and non-reentrant scanners. */
int preYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		preYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		preYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	preYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    preYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * preYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *preYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *preYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void preYYfree (void * ptr )
{
	free( (char *) ptr );	/* see preYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2288 "pre.l"



/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}
 
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    returnCharToStream(cc);
    //unput((char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
}

void addSearchDir(const char *dir)
{
  QFileInfo fi(dir);
  if (fi.isDir()) g_pathList->append(fi.absFilePath());
} 

void initPreprocessor()
{
  g_pathList = new QStrList;
  addSearchDir(".");
  //defineNameList.setAutoDelete(TRUE);
  //defineNameList.clear();
  //defineDict.clear();
  //fileDefineCache = new DefineCache(1009);
  g_expandedDict = new DefineDict(17);
  //g_fileDefineDict = new DefineDict(1009);
}

void cleanUpPreprocessor()
{
  //delete fileDefineCache;
  //delete g_fileDefineDict; g_fileDefineDict=0;
  delete g_expandedDict; g_expandedDict=0;
  delete g_pathList; g_pathList=0;
}


void preprocessFile(const char *fileName,BufStr &output)
{
  uint orgOffset=output.curPos();

  g_macroExpansion = Config_getBool("MACRO_EXPANSION");
  g_expandOnlyPredef = Config_getBool("EXPAND_ONLY_PREDEF");
  g_curlyCount=0;
  g_nospaces=FALSE;
  g_outputBuf=&output;
  g_includeStack.setAutoDelete(TRUE);
  g_includeStack.clear();
  //g_fileDefineDict->setAutoDelete(TRUE);
  //g_fileDefineDict->clear();
  g_expandedDict->setAutoDelete(FALSE);
  g_expandedDict->clear();
  g_condStack.clear();
  g_condStack.setAutoDelete(TRUE);
  
  static bool firstTime=TRUE;
  if (firstTime)
  {
    // add predefined macros
    char *defStr;
    QStrList &predefList = Config_getList("PREDEFINED");
    QStrListIterator sli(predefList);
    for (sli.toFirst();(defStr=sli.current());++sli)
    {
      QCString ds = defStr;
      int i_equals=ds.find('=');
      int i_obrace=ds.find('(');
      int i_cbrace=ds.find(')');
      bool nonRecursive = i_equals>0 && ds.at(i_equals-1)==':';

      if (i_obrace==0) continue; // no define name

      if (i_obrace<i_equals && i_cbrace<i_equals && 
	  i_obrace!=-1      && i_cbrace!=-1      && 
	  i_obrace<i_cbrace
	 ) // predefined function macro definition
      {
	QRegExp reId("[a-z_A-Z][a-z_A-Z0-9]*"); // regexp matching an id
	QDict<int> argDict(17);
	argDict.setAutoDelete(TRUE);
	int i=i_obrace+1,p,l,count=0;
	// gather the formal arguments in a dictionary 
	while (i<i_cbrace && (p=reId.match(ds,i,&l)))
	{
	  argDict.insert(ds.mid(p,l),new int(count++));
	  i=p+l;
	}
	// strip definition part
	QCString tmp=ds.right(ds.length()-i_equals-1);
	QCString definition;
	i=0;
	// substitute all occurrences of formal arguments by their 
	// corresponding markers
	while ((p=reId.match(tmp,i,&l))!=-1)
	{
	  if (p>i) definition+=tmp.mid(i,p-i);
	  int *argIndex;
	  if ((argIndex=argDict[tmp.mid(p,l)])!=0)
	  {
	    QCString marker;
	    marker.sprintf(" @%d ",*argIndex);
	    definition+=marker;
	  }
	  else
	  {
	    definition+=tmp.mid(p,l);
	  }
	  i=p+l;
	}
	if (i<(int)tmp.length()) definition+=tmp.mid(i,tmp.length()-i);

	// add define definition to the dictionary of defines for this file
	QCString dname = ds.left(i_obrace);
	if (!dname.isEmpty())
	{
	  Define *def = new Define;
	  def->name = dname;
	  def->definition = definition; 
	  def->nargs = count;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  g_fileDefineDict->insert(def->name,def);
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
      else if ((i_obrace==-1 || i_obrace>i_equals) &&
	  (i_cbrace==-1 || i_cbrace>i_equals) &&
	  !ds.isEmpty() && (int)ds.length()>i_equals
	  ) // predefined non-function macro definition
      {
	Define *def = new Define;
	if (i_equals==-1) // simple define without argument
	{
	  def->name = ds;
	  def->definition = "1"; // substitute occurrences by 1 (true)
	}
	else // simple define with argument
	{
	  int ine=i_equals - (nonRecursive ? 1 : 0);
	  def->name = ds.left(ine);
	  def->definition = ds.right(ds.length()-i_equals-1);
	}
	if (!def->name.isEmpty())
	{
	  def->nargs = -1;
	  def->isPredefined = TRUE;
	  def->nonRecursive = nonRecursive;
	  g_fileDefineDict->insert(def->name,def);
	}
	else
	{
	  delete def;
	}

	//printf("#define `%s' `%s' #nargs=%d\n",
	//  def->name.data(),def->definition.data(),def->nargs);
      }
    }
    firstTime=FALSE;
  }
 
  QCString inputFilter = getFileFilter(fileName);
  if (inputFilter.isEmpty())
  {
    preYYin = fopen(fileName,"r");
    if (!preYYin)
    {
      err("Error: could not open file %s\n",fileName);
      return;
    }
  }
  else
  {
    QCString cmd = inputFilter+" \""+fileName+"\"";
    Debug::print(Debug::ExtCmd,0,"Executing popen(`%s`)\n",cmd.data());
    preYYin = portable_popen(cmd,"r");
    if (!preYYin)
    {
      err("Error: could not execute filter %s\n",cmd.data());
      return;
    }
  }
  g_yyLineNr = 1;
  g_level    = 0;
  g_ifcount  = 0;
  setFileName(fileName);
  g_inputFileDef = g_yyFileDef;
  BEGIN( Start );
  
  g_lastGuardName.resize(0);
  g_guardExpr.resize(0);
  
  preYYlex();
  g_lexInit=TRUE;
  if (inputFilter.isEmpty())
    fclose(preYYin);
  else
    portable_pclose(preYYin);
  
  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    msg("Preprocessor output (size: %d bytes):\n",newPos-orgPos);
    int line=1;
    msg("---------\n00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n') printf("%05d ",++line);
      orgPos++;
    }
    msg("\n---------\n");
  }
}

void preFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION) 
  if (g_lexInit)
  {
    preYYlex_destroy();
  }
#endif
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
//  int  preYYwrap() { return 1 ; }
  void preYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


