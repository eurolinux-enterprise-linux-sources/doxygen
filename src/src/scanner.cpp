
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE scanYYrestart(scanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int scanYYleng;

extern FILE *scanYYin, *scanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up scanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via scanYYrestart()), so that the user can continue scanning by
	 * just pointing scanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when scanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int scanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow scanYYwrap()'s to do buffer switches
 * instead of setting up a fresh scanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void scanYYrestart (FILE *input_file  );
void scanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE scanYY_create_buffer (FILE *file,int size  );
void scanYY_delete_buffer (YY_BUFFER_STATE b  );
void scanYY_flush_buffer (YY_BUFFER_STATE b  );
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void scanYYpop_buffer_state (void );

static void scanYYensure_buffer_stack (void );
static void scanYY_load_buffer_state (void );
static void scanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER scanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE scanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE scanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE scanYY_scan_bytes (yyconst char *bytes,int len  );

void *scanYYalloc (yy_size_t  );
void *scanYYrealloc (void *,yy_size_t  );
void scanYYfree (void *  );

#define yy_new_buffer scanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        scanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define scanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *scanYYin = (FILE *) 0, *scanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int scanYYlineno;

int scanYYlineno = 1;

extern char *scanYYtext;
#define yytext_ptr scanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up scanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	scanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 616
#define YY_END_OF_BUFFER 617
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[4282] =
    {   0,
       38,   38,  310,  310,  310,  310,  310,  310,  307,  307,
       50,   50,   56,   56,  365,  365,  365,  365,  617,  611,
      616,  606,  616,  607,  610,  611,  616,  608,  611,  616,
      609,  611,  616,  611,  616,  611,  616,  189,  611,  616,
      195,  611,  616,  195,  611,  616,  190,  606,  616,  194,
      195,  607,  610,  611,  616,  195,  608,  611,  616,  195,
      609,  611,  616,  195,  611,  616,  195,  611,  616,  611,
      616,  606,  616,  611,  616,  611,  616,  611,  616,  611,
      616,  611,  616,  470,  611,  616,  480,  481,  611,  616,
    16863,  506,  611,  616,  611,  616,  611,  616,  606,  616,

      611,  616,  611,  616,  611,  616,  500,  611,  616,  486,
      611,  616,  505,  611,  616,  483,  611,  616,  611,  616,
      499,  611,  616,  517,  611,  616,  611,  616,  485,  611,
      616,  485,  611,  616,  485,  611,  616,  496,  611,  616,
      495,  606,  616,  496,  607,  610,  611,  616,  488,  496,
      608,  611,  616,  496,  611,  616,  496,  609,  611,  616,
      496,  611,  616,  491,  496,  611,  616,  490,  496,  611,
      616,  492,  496,  611,  616,  496,  611,  616,  494,  496,
      611,  616,  494,  496,  611,  616,  489,  496,  611,  616,
      611,  616,  498,  611,  616,  497,  611,  616,  476,  611,

      616,  476,  607,  610,  611,  616,  476,  608,  611,  616,
      476,  609,  611,  616,  144,  476,  611,  616,  145,  476,
      611,  616,  476,  611,  616,  475,  476,  611,  616,  474,
      476,  611,  616,   39,  611,  616,   38,   39,  611,  616,
       37,  606,  616,   39,  607,  610,  611,  616,   39,  608,
      611,  616,   39,  611,  616,   39,  609,  611,  616,   39,
      611,  616,   36,   39,  611,  616,   33,   39,  611,  616,
       34,   39,  611,  616,   35,   39,  611,  616,   41,  611,
      616,   41,  607,  610,  611,  616,   41,  608,  611,  616,
       41,  609,  611,  616,   41,  611,  616,   40,   41,  611,

      616,  415,  611,  616,  414,  606,  616,  415,  607,  610,
      611,  616,  415,  608,  611,  616,  415,  611,  616,  415,
      609,  611,  616,  415,  611,  616,  412,  415,  611,  616,
      413,  415,  611,  616,  611,  616,  606,  616,  611,  616,
      611,  616,  533,  611,  616,  611,  616,  518,  611,  616,
      533,  611,  616,  513,  514,  611,  616,  534,  611,  616,
      512,  611,  616,  511,  512,  611,  616,  511,  606,  616,
      512,  607,  610,  611,  616,  512,  608,  611,  616,  512,
      609,  611,  616,  512,  611,  616,  512,  611,  616,  512,
      611,  616,    9,  607,  610,  611,  616,    7,  609,  611,

      616,    2,  611,  616,   10,  611,  616,   10,  611,  616,
        1,  611,  616,  274,  611,  616,  274,  607,  610,  611,
      616,  274,  608,  611,  616,  274,  609,  611,  616,   11,
      274,  611,  616,  274,  611,  616,   11,  274,  611,  616,
       60,  611,  616,   60,  606,  616,   60,  611,  616,  611,
      616,  179,  608,  611,  616,  611,  616,  197,  611,  616,
      198,  611,  616,  361,  611,  616,   46,  611,  616,  275,
      611,  616,  166,  611,  616,  611,  616,  611,  616,  273,
      611,  616,  275,  611,  616,  297,  611,  616,  204,  611,
      616,  611,  616,  611,  616,  164,  611,  616,  164,  611,

      616,  276,  611,  616,  197,  611,  616,  164,  611,  616,
      164,  611,  616,  164,  611,  616,  164,  611,  616,  164,
      611,  616,  164,  611,  616,  164,  611,  616,  164,  611,
      616,  164,  611,  616,  164,  611,  616,  164,  611,  616,
      164,  611,  616,  164,  611,  616,  164,  611,  616,  164,
      611,  616,  164,  611,  616,  164,  611,  616,  164,  611,
      616,  552,  611,  616,   14,   16,  611,  616,   15,  606,
      616,   14,   16,  607,  610,  611,  616,   14,   16,  608,
      611,  616,   14,   16,  609,  611,  616,   14,   16,  611,
      616,   16,  611,  616,  611,  616,  606,  616,  611,  616,

      611,  616,  611,  616,  164,  611,  616,  611,  616,  606,
      616,  611,  616,  179,  608,  611,  616,  611,  616,  303,
      611,  616,  308,  611,  616,  611,  616,  305,  611,  616,
      304,  611,  616,  302,  611,  616,  309,  611,  616,  611,
      616,  410,  608,  611,  616,  440,  611,  616,  442,  611,
      616,  441,  611,  616,  442,  611,  616,  428,  611,  616,
      409,  428,  611,  616,  409,  606,  616,  428,  607,  610,
      611,  616,  410,  428,  608,  611,  616,  428,  609,  611,
      616,  398,  428,  611,  616,  399,  428,  611,  616,  408,
      428,  611,  616,  428,  611,  616,  435,  611,  616,  435,

      607,  610,  611,  616,  435,  608,  611,  616,  435,  609,
      611,  616,  433,  435,  611,  616,  434,  435,  611,  616,
      435,  611,  616,  439,  611,  616,  438,  606,  616,  439,
      607,  610,  611,  616,  439,  608,  611,  616,  439,  609,
      611,  616,  439,  611,  616,  437,  439,  611,  616,  436,
      439,  611,  616,  409,  428,  611,  616,  409,  606,  616,
      428,  611,  616,  400,  428,  611,  616,  428,  611,  616,
      411,  428,  611,  616,  423,  428,  611,  616,  423,  428,
      611,  616,  423,  428,  611,  616,  423,  428,  611,  616,
      423,  428,  611,  616,  423,  428,  611,  616,  423,  428,

      611,  616,  423,  428,  611,  616,  423,  428,  611,  616,
      119,  611,  616,  119,  606,  616,  119,  607,  610,  611,
      616,  119,  608,  611,  616,  119,  609,  611,  616,  121,
      611,  616,  119,  611,  616,  118,  119,  611,  616,  119,
      611,  616,  292,  611,  616,  292,  607,  610,  611,  616,
      292,  608,  611,  616,  292,  609,  611,  616,  292,  611,
      616,  291,  292,  611,  616,  289,  292,  611,  616,  310,
      333,  611,  616,  310,  331,  333,  611,  616,  331,  606,
      616,  331,  333,  611,  616,  314,  333,  607,  610,  611,
      616,  312,  333,  608,  611,  616,  317,  333,  609,  611,

      616,  333,  611,  616,  333,  611,  616,  319,  333,  611,
      616,  321,  333,  611,  616,  321,  333,  611,  616,  333,
      611,  616,  320,  333,  611,  616,  611,  616,  133,  611,
      616,  131,  611,  616,  131,  611,  616,  611,  616,  606,
      616,  611,  616,  611,  616,  611,  616,  132,  611,  616,
      452,  463,  611,  616,  452,  463,  611,  616,  451,  606,
      616,  449,  463,  607,  610,  611,  616,  459,  463,  608,
      611,  616,  462,  463,  609,  611,  616,  463,  611,  616,
      463,  611,  616,  463,  611,  616,  444,  463,  611,  616,
      445,  463,  611,  616,  452,  463,  611,  616,  450,  459,

      463,  608,  611,  616,  453,  606,  616,  463,  607,  610,
      611,  616,  463,  611,  616,  463,  611,  616,  448,  611,
      616,  469,  611,  616,  468,  606,  616,  465,  469,  607,
      610,  611,  616,  469,  608,  611,  616,  469,  609,  611,
      616,  469,  611,  616,  469,  611,  616,  469,  611,  616,
      469,  607,  610,  611,  616,  466,  469,  609,  611,  616,
      457,  463,  607,  610,  611,  616,  459,  463,  608,  611,
      616,  463,  611,  616,  458,  463,  611,  616,  443,  463,
      611,  616,  185,  611,  616,  187,  606,  616,  185,  611,
      616,  185,  607,  610,  611,  616,  185,  608,  611,  616,

      185,  609,  611,  616,  185,  611,  616,  185,  611,  616,
      605,  611,  616,  605,  611,  616,  605,  607,  610,  611,
      616,  605,  608,  611,  616,  605,  609,  611,  616,  611,
      616,  605,  611,  616,  611,  616,  604,  606,  616,  607,
      610,  611,  616,  608,  611,  616,  609,  611,  616,  611,
      616,  611,  616,    5,  611,  616,    6,  611,  616,    3,
      611,  616,    4,  611,  616,  301,  611,  616,  300,  301,
      611,  616,  300,  606,  616,  301,  607,  610,  611,  616,
      301,  608,  611,  616,  301,  609,  611,  616,  301,  611,
      616,  299,  301,  611,  616,  298,  301,  611,  616,  529,

      611,  616,  530,  611,  616,  531,  611,  616,  532,  611,
      616,  296,  611,  616,  295,  607,  610,  611,  616,  296,
      608,  611,  616,  296,  609,  611,  616,  296,  611,  616,
      293,  611,  616,  294,  611,  616,  307,  611,  616,  306,
      606,  616,  307,  607,  610,  611,  616,  307,  608,  611,
      616,  307,  609,  611,  616,  307,  611,  616,  611,  616,
      325,  611,  616,  324,  611,  616,  324,  611,  616,  324,
      611,  616,  175,  611,  616,  173,  606,  616,  175,  607,
      610,  611,  616,  175,  608,  611,  616,  175,  609,  611,
      616,  175,  611,  616,  174,  175,  611,  616,  177,  611,

      616,  177,  607,  610,  611,  616,  177,  608,  611,  616,
      177,  609,  611,  616,  177,  611,  616,  177,  611,  616,
      544,  546,  611,  616,  539,  546,  611,  616,  539,  606,
      616,  544,  546,  607,  610,  611,  616,  544,  546,  608,
      611,  616,  544,  546,  609,  611,  616,  546,  611,  616,
      546,  611,  616,  546,  611,  616,  544,  546,  611,  616,
      611,  616,   74,  611,  616,   73,  611,  616,  611,  616,
      611,  616,  560,  611,  616,  561,  606,  616,  560,  607,
      610,  611,  616,  560,  608,  611,  616,  560,  609,  611,
      616,  560,  611,  616,  560,  611,  616,  560,  611,  616,

      560,  611,  616,  560,  611,  616,  553,  560,  611,  616,
      554,  560,  611,  616,  472,  611,  616,  183,  611,  616,
      184,  606,  616,  183,  607,  610,  611,  616,  183,  608,
      611,  616,  183,  609,  611,  616,  183,  611,  616,  611,
      616,  611,  616,  192,  611,  616,  192,  607,  610,  611,
      616,  192,  608,  611,  616,  192,  609,  611,  616,  192,
      611,  616,  191,  192,  611,  616,  427,  611,  616,  427,
      611,  616,  427,  607,  610,  611,  616,  427,  608,  611,
      616,  427,  611,  616,  427,  609,  611,  616,  424,  427,
      611,  616,  427,  611,  616,  424,  427,  611,  616,  425,

      427,  611,  616,  426,  427,  611,  616,  218,  222,  611,
      616,  221,  606,  616,  220,  222,  607,  610,  611,  616,
      218,  222,  608,  611,  616,  218,  222,  609,  611,  616,
      218,  222,  611,  616,  611,  616,   47,  611,  616,   49,
      611,  616,   58,  611,  616,   48,  611,  616,   59,  611,
      616,   50,  611,  616,   50,  606,  616,   50,  607,  610,
      611,  616,   50,  608,  611,  616,   50,  609,  611,  616,
       51,  611,  616,   50,  611,  616,  611,  616,   55,  611,
      616,  611,  616,   52,  611,  616,   53,  611,  616,   56,
      611,  616,   56,  606,  616,   56,  607,  610,  611,  616,

       56,  608,  611,  616,   56,  609,  611,  616,   57,  611,
      616,   56,  611,  616,  473,  611,  616,   70,  611,  616,
      611,  616,  611,  616,  611,  616,  611,  616,  611,  616,
      611,  616,   72,  611,  616,  153,  611,  616,  611,  616,
      150,  611,  616,  154,  611,  616,  154,  611,  616,  154,
      611,  616,  611,  616,  155,  611,  616,  151,  611,  616,
      611,  616,  611,  616,  611,  616,  611,  616,  611,  616,
      161,  611,  616,  611,  616,  162,  611,  616,  224,  611,
      616,  224,  611,  616,  216,  606,  616,  208,  224,  607,
      610,  611,  616,  224,  608,  611,  616,  214,  224,  609,

      611,  616,  205,  212,  224,  611,  616,  213,  224,  611,
      616,  207,  224,  611,  616,  224,  611,  616,  224,  611,
      616,  207,  224,  611,  616,  212,  224,  611,  616,  213,
      224,  611,  616,  224,  611,  616,  224,  611,  616,  212,
      224,  611,  616,  206,  212,  224,  611,  616,  611,  616,
      606,  616,  611,  616,  611,  616,  611,  616,  178,  611,
      616,  611,  616,  606,  616,  611,  616,  611,  616,  327,
      611,  616,  611,  616,  327,  611,  616,  328,  611,  616,
      326,  611,  616,  329,  611,  616,  330,  611,  616,  146,
      611,  616,  146,  607,  610,  611,  616,  146,  608,  611,

      616,  146,  609,  611,  616,  144,  146,  611,  616,  145,
      146,  611,  616,  146,  611,  616,  138,  146,  611,  616,
      140,  146,  611,  616,16526,  337,  611,  616,  337,  611,
      616,  606,  616,  337,  611,  616,  337,  607,  610,  611,
      616,  337,  608,  611,  616,  337,  611,  616,  337,  609,
      611,  616,  337,  611,  616,  337,  611,  616,  336,  337,
      611,  616,  341,  611,  616,  339,  606,  616,  341,  607,
      610,  611,  616,  341,  608,  611,  616,  341,  609,  611,
      616,  340,  341,  611,  616,  341,  611,  616,  345,  611,
      616,  347,  611,  616,  611,  616,  362,  397,  611,  616,

      365,  397,  611,  616,  365,  396,  606,  616,  366,  397,
      607,  610,  611,  616,  397,  608,  611,  616,  395,  397,
      609,  611,  616,  367,  397,  611,  616,  368,  397,  611,
      616,  397,  611,  616,  397,  611,  616,  385,  397,  611,
      616,  386,  397,  611,  616,  172,  611,  616,  171,  606,
      616,  172,  607,  610,  611,  616,  172,  608,  611,  616,
      172,  609,  611,  616,  172,  611,  616,  170,  172,  611,
      616,  611,  616,  124,  611,  616,  611,  616,  126,  611,
      616,  125,  611,  616,  230,  611,  616,  229,  606,  616,
      226,  230,  607,  610,  611,  616,  230,  608,  611,  616,

      230,  609,  611,  616,  230,  611,  616,  230,  611,  616,
      230,  611,  616,  230,  607,  610,  611,  616,  227,  230,
      609,  611,  616,  236,  611,  616,  235,  606,  616,  232,
      236,  607,  610,  611,  616,  236,  608,  611,  616,  236,
      609,  611,  616,  236,  611,  616,  236,  611,  616,  236,
      611,  616,  236,  607,  610,  611,  616,  233,  236,  609,
      611,  616,  243,  244,  611,  616,  240,  606,  616,  237,
      244,  607,  610,  611,  616,  243,  244,  608,  611,  616,
      241,  244,  609,  611,  616,  238,  244,  611,  616,  239,
      244,  611,  616,  243,  244,  611,  616,  258,  261,  611,

      616,  260,  606,  616,  253,  261,  607,  610,  611,  616,
      258,  261,  608,  611,  616,  254,  261,  609,  611,  616,
      259,  261,  611,  616,  255,  261,  611,  616,  256,  261,
      611,  616,  251,  252,  611,  616,  248,  606,  616,  245,
      252,  607,  610,  611,  616,  251,  252,  608,  611,  616,
      249,  252,  609,  611,  616,  246,  252,  611,  616,  247,
      252,  611,  616,  252,  611,  616,  269,  272,  611,  616,
      271,  606,  616,  264,  272,  607,  610,  611,  616,  269,
      272,  608,  611,  616,  265,  272,  609,  611,  616,  270,
      272,  611,  616,  266,  272,  611,  616,  267,  272,  611,

      616,  269,  272,  608,  611,  616,  538,  611,  616,  538,
      611,  616,  537,  606,  616,  538,  607,  610,  611,  616,
      538,  608,  611,  616,  538,  609,  611,  616,  535,  538,
      611,  616,  536,  538,  611,  616,  538,  611,  616,  528,
      611,  616,  521,  528,  611,  616,  521,  606,  616,  528,
      607,  610,  611,  616,  528,  608,  611,  616,  528,  609,
      611,  616,  526,  528,  611,  616,  527,  528,  611,  616,
      528,  611,  616,  519,  528,  611,  616,  520,  528,  611,
      616,  528,  611,  616,  421,  611,  616,  422,  606,  616,
      417,  421,  607,  610,  611,  616,  421,  608,  611,  616,

      421,  611,  616,  418,  421,  609,  611,  616,  421,  611,
      616,  416,  421,  611,  616,  420,  421,  611,  616,  348,
      428,  611,  616,  349,  428,  611,  616,  353,  611,  616,
      353,  607,  610,  611,  616,  353,  608,  611,  616,  353,
      609,  611,  616,  353,  611,  616,  353,  611,  616,  358,
      611,  616,  357,  358,  611,  616,  357,  606,  616,  358,
      607,  610,  611,  616,  358,  608,  611,  616,  358,  609,
      611,  616,  354,  358,  611,  616,  355,  358,  611,  616,
      356,  358,  611,  616,  358,  611,  616,  290,  292,  611,
      616,  363,  397,  611,  616,  396,  606,  616,  392,  397,

      607,  610,  611,  616,  363,  397,  608,  611,  616,  397,
      609,  611,  616,  363,  397,  611,  616,  397,  611,  616,
      397,  607,  610,  611,  616,  393,  397,  609,  611,  616,
      364,  397,  611,  616,  364,  397,  608,  611,  616,  387,
      397,  611,  616,  388,  397,  611,  616,  397,  611,  616,
      389,  397,  611,  616,  390,  397,  611,  616,  374,  383,
      611,  616,  382,  606,  616,  374,  383,  607,  610,  611,
      616,  374,  383,  608,  611,  616,  374,  383,  609,  611,
      616,  383,  611,  616,  374,  383,  611,  616,  383,  611,
      616,  374,  383,  611,  616,  383,  611,  616,16757,  380,

      381,  611,  616,  376,  606,  616,  380,  381,  607,  610,
      611,  616,  380,  381,  608,  611,  616,  380,  381,  609,
      611,  616,  380,  381,  611,  616,  381,  611,  616,  383,
      611,  616,  383,  607,  610,  611,  616,  383,  608,  611,
      616,  383,  609,  611,  616,  383,  611,  616,  383,  611,
      616,  280,  611,  616,  280,  607,  610,  611,  616,  280,
      608,  611,  616,  280,  609,  611,  616,  280,  611,  616,
      277,  280,  611,  616,  280,  611,  616,  288,  611,  616,
      288,  611,  616,  606,  616,  288,  607,  610,  611,  616,
      288,  608,  611,  616,  288,  611,  616,  288,  609,  611,

      616,  288,  611,  616,  287,  288,  611,  616,  284,  288,
      611,  616,  288,  611,  616,  611,  616,  606,  616,  611,
      616,  281,  611,  616,  601,  611,  616,  601,  607,  610,
      611,  616,  601,  608,  611,  616,  601,  609,  611,  616,
      587,  601,  611,  616,  601,  611,  616,  601,  611,  616,
      592,  611,  616,  592,  611,  616,  606,  616,  592,  611,
      616,  592,  607,  610,  611,  616,  592,  608,  611,  616,
      592,  611,  616,  592,  609,  611,  616,  590,  592,  611,
      616,  591,  592,  611,  616,  592,  611,  616,  592,  611,
      616,  589,  592,  611,  616,  600,  611,  616,  600,  611,

      616,  600,  607,  610,  611,  616,  600,  608,  611,  616,
      600,  609,  611,  616,  600,  611,  616,  600,  611,  616,
      600,  611,  616,  600,  611,  616,  600,  611,  616,  593,
      600,  611,  616,  599,  611,  616,  599,  607,  610,  611,
      616,  599,  608,  611,  616,  599,  609,  611,  616,  598,
      599,  611,  616,  599,  611,  616,  602,  611,  616,  602,
      607,  610,  611,  616,  602,  608,  611,  616,  602,  609,
      611,  616,  602,  611,  616,  611,  616,  563,  606,  616,
      607,  610,  611,  616,  608,  611,  616,  609,  611,  616,
      611,  616,  574,  576,  611,  616,  574,  576,  611,  616,

      575,  606,  616,  574,  576,  607,  610,  611,  616,  574,
      576,  608,  611,  616,  574,  576,  609,  611,  616,  576,
      611,  616,  576,  611,  616,  574,  576,  611,  616,  576,
      611,  616,  576,  611,  616,  574,  576,  611,  616,  576,
      611,  616,  576,  611,  616,  582,  585,  611,  616,  584,
      606,  616,  582,  585,  607,  610,  611,  616,  582,  585,
      608,  611,  616,  585,  611,  616,  582,  585,  609,  611,
      616,  585,  611,  616,  585,  611,  616,  585,  611,  616,
      585,  611,  616,  582,  585,  611,  616,  585,  611,  616,
    16965,  613,  615,  189,  188,  189,  613,  615,  193,  506,

      480,16863,  480,  481,16863,  481,  478, 8671,  480,  481,
    16863,  477,  471,  506,  480,  481,16863,  515,  515,  515,
      485,  505,  613,  615,  482,  485,  485,  485,  492,  613,
      615,  492,  494,  494,  494,  497,  497,  137,  139,   38,
       33,   33,  412,  412,  513,  514,  513,  514,  534,  515,
      515,  513,  514,  515,  513,  514,  515,  533,  513,  514,
      534,   60,   60,  179,  164,  164,   19,   20,  198,  335,
       46,  613,  615,  165,  167,   17,   71,   71,   71,   71,
       71,   71,  164,  135,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,

      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,   14,   14,  613,   14,
      615,   13,  164,  164,  164,  136,  179,  302,  613,  615,
      302,  409,  408,  408,  409,  423,  613,  615,  407,  423,
      423,  423,  423,  423,  423,  423,  423,  423,  423,  120,
      310,  310,  331,  331,  312,  312,  315,  613,  311,  615,
      313,  131,  131,  131,  131,  132,  132,  132,  452,  452,
      455,  613,  456,  615,  460,  452,  450,  455,  613,  456,
      615,  454,  467,  467,  613,  467,  615,  464,  456,  615,
      187,  187,  186,  605,  605,  614,  612,  613,  605,  612,

      615,  604,  613,  615,  603,  604,  300,  296,  296,  613,
      296,  615,  307,  307,  613,  307,  615,  324,  324,  324,
      324,  544,  539,  545,  540,  613,  541,  615,  544,  544,
      544,   73,   73,  182,  425,  613,  615,  425,  218,  219,
      218,  613,  218,  615,   48,   49,   48,   50,   50,  613,
       50,  615,   53,   53,   53,   52,   56,   57,   56,  613,
       56,  615,  153,  154,  154,  154,  154,  155,  155,  161,
      161,  162,  162,  209,  613,  615,  210,  211,  223,  217,
      360,  168,  326,  326,  326,16526,  141,  336,  336,  336,
      343,  342,  344,  346,  362,  365,  370,  613,  371,  615,

      169,  124,  124,  125,  125,  228,  228,  613,  228,  615,
      225,  234,  234,  613,  234,  615,  231,  243,  243,  613,
      243,  615,  258,  251,  269,  269,  535,  521,  522,  524,
      420,  420,  350,  351,  352,  357,  356,  356,  363,  363,
      613,  363,  615,  391,  364,  374,  375,  374,  615,  374,
    16757, 8565,  380,  380,  613,  380,  615,  284,  286,  285,
      284,  283,  281,  281,  281,  282,  281,  588,  589,  589,
      589,  596,  563,  613,  615,  574,  574,  574,  564,  568,
      613,  567,  615,  574,  574,  574,  565,  565,  566,  567,
      615,  582,  583,  583,  613,  583,  615,  582,16965, 8773,

      480,16863,  480,16863,  481,  481,  480,  481,16863,  503,
      547,  504,  549,  485,  485,  487,  494,  494,  513,  514,
      513,  514,    8,   60,   60,  164,   19,  335,  547,  549,
      165,   61,   71,   71,   71,   71,   71,   71,   71,   71,
      134,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  547,  549,  547,  549,  407,
      423,  423,  404,  423,  423,  423,  423,  423,  423,  423,

      117,  312,  318,  315,  316,  311,  131,  131,  132,  461,
      454,  186,  324,  324,  544,  544,  544,   73,  127,  128,
      557,  556,  555,  196,  547,  549,   59,  154,  154,  154,
      215,  326, 8334,  143,  336,  338,  394,  369,  242,  257,
      250,  268,  269,  419,  378,  286,  283,  281,  281,  589,
      596,  574,  574,  570,  565,  566,  566,  579,  201,  480,
    16863,  481,  502,  548,  501,  550,  501,  550,  516,  485,
      485,  487,  494,  494,  474,  513,  514,  513,  514,    8,
       60,   60,  334,  548,  548,  548,  202,  550,  550,  550,
      550,  203,   71,   71,   71,   71,   71,   71,   71,   71,

      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  201,  548,  201,  550,  404,  423,  423,
      404,  423,  423,  423,  423,  429,  423,  312,  318,  131,
      131,  461,  324,  324,  544,  544,  544,   73,  128,  196,
       54,   68,  154,  154,  156,  215, 8334,  394,  369,  242,
      257,  250,  268,  269,  523,  419,  379,  562,  574,  574,
      569,  569,  485,  485,  493,  494,  474,  474,  513,  514,

      200,  199,   60,   60,  181,  359,  203,   12,   71,   71,
       71,   71,   71,   71,   71,   71,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,   18,   18,   18,   18,
      135,   18,  164,  115,  114,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,   13,  423,  405,
      423,  423,  423,  423,  423,  423,  116,  181,  312,  332,
      131,  446,  447,  324,  324,  176,  542,  544,  544,  544,
      544,  559,  152,  154,  154,  157,  372,  377,  594,  571,

      574,  574,  572,  485,  485,16868,  474,  513,  514,   60,
       60,  115,  203,   71,   94,   71,   71,   71,   71,   71,
       71,   71,   71,  164,  164,  164,  164,  164,   96,   95,
      164,  164,  164,   31,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,16489,  164,
      164,  164,  113,  112,  129,  164,  164,  164,  405,  423,
      405,  423,  423,  403,  423,  430,  423,  423,  131,  323,
      324,  544,  544,  544,  558,   66,   67,  154,  594,  597,
      573,  574,  577,  485, 8676, 8676,  513,  514,  508,   60,

       60,   96,   31,16489,  113,  180,   71,   71,   71,   71,
       71,   71,   71,   71,  164,  164,  164,  164,  164,  164,
      164,  164,  164,   77,  164,  164,  164,   80,  164,  164,
       22,  164,  164,   87,  164,  164,  164,  164,  164,   27,
      164,  164,  164,  164,   76, 8297,  104,  164,  164,  164,
      164,  164,  164,  403,  423,  423,  431,  403,  432,  423,
      131,  324,  544,  544,  544,  154,  158,  384,  279,  278,
      578,  513,  514,  510,  507,   60,   60,   77,   80,   22,
       87,   27,   76, 8297,   71,   71,   71,   71,   71,   71,
       45,   71,  148,  164,  164,  164,  164,  164,  103,  147,

      164,  164,  164, 8314,  135,16506,  164,  164,  164,  164,
       22,   88,   81,  164,   30,  164,  164,  164,  164,  164,
       27,  164,  164,  164,   23,  164,  164,   78,  401,  423,
      402,  423,  406,  423,  131,  543,  544,  544,  544,   62,
       69,   64,   63,  158,  595,  580,  513,  514,   60,   60,
       45,  103,   88,   81,   30,   23,   78,   71,   71,   71,
       43,   71,   71,   71,  164,  164,   79,  164,  164,   82,
      551, 8314,  134,  164,   75,  164,   28,  164,   30,  164,
      164,  164,   32,   42,  164,  164,  164,  164,   23,   85,
      164,  401,  402,  406,  401,  402,  406,  131,  544,   62,

       65,   63,  262,  263,  525,  595,  513,  514,  509,   60,
       60,   43,   79,   82,   75,   28,   32,   42,   85,   71,
       71,   84,   71,   92,   83,  149,  164,  164,  164,   93,
      551,  551,  164,   89,   89,   28,   86,   86,16507,   86,
       86,  135,   86,  164,  164,  164,  164,   29,  164,  164,
      164,  164,  100,   99,  164,  322,  130,  131,  544,  262,
      262,  263,  263,  586,  513,  514,  533,   60,   60,   84,
       92,   83,   93,   89,   89,   86,   29,   71,   91,   44,
      164,  115,  164,   86,   86,  164,  164,   21,   29,  164,
      164,  164,  164,  109,  108,  164,  544,  533,   60,   60,

       91,   44,   21,   71,  164, 8315,  164,  164,   21,  164,
      164,  164,   24,   98,   97,  160,  159,   60,   60,   24,
       71,  163,  164,   26,  164,  164,   24,  107,  106,  160,
      159,   60,   60,   26,   71,   26,  164,  164,   60,   60,
       71,  164,   25,   60,   60,   25,   90,  102,  101,   25,
       60,   60,   90,  111,  110,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60
    } ;

static yyconst flex_int16_t yy_accept[3603] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    5,    6,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   10,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   12,
       13,   13,   13,   14,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   16,   17,   18,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   22,   24,
       28,   31,   34,   36,   38,   41,   44,   47,   50,   56,
       60,   64,   67,   70,   72,   74,   76,   78,   80,   82,
       84,   87,   92,   95,   97,   99,  101,  103,  105,  107,
      110,  113,  116,  119,  121,  124,  127,  129,  132,  135,
      138,  141,  144,  149,  154,  157,  161,  164,  168,  172,

      176,  179,  183,  187,  191,  193,  196,  199,  202,  207,
      211,  215,  219,  223,  226,  230,  234,  237,  241,  244,
      249,  253,  256,  260,  263,  267,  271,  275,  279,  282,
      287,  291,  295,  298,  302,  305,  308,  313,  317,  320,
      324,  327,  331,  335,  337,  339,  341,  343,  346,  348,
      351,  354,  358,  361,  364,  368,  371,  376,  380,  384,
      387,  390,  393,  398,  402,  405,  408,  411,  414,  417,
      422,  426,  430,  434,  437,  441,  444,  447,  450,  452,
      456,  458,  461,  464,  467,  470,  473,  476,  478,  480,
      483,  486,  489,  492,  494,  496,  499,  502,  505,  508,

      511,  514,  517,  520,  523,  526,  529,  532,  535,  538,
      541,  544,  547,  550,  553,  556,  559,  562,  565,  569,
      572,  578,  583,  588,  592,  595,  597,  599,  601,  603,
      605,  608,  610,  612,  614,  618,  620,  623,  626,  628,
      631,  634,  637,  640,  642,  646,  649,  652,  655,  658,
      661,  665,  668,  673,  678,  682,  686,  690,  694,  697,
      700,  705,  709,  713,  717,  721,  724,  727,  730,  735,
      739,  743,  746,  750,  754,  758,  761,  764,  768,  771,
      775,  779,  783,  787,  791,  795,  799,  803,  807,  811,
      814,  817,  822,  826,  830,  833,  836,  840,  843,  846,

      851,  855,  859,  862,  866,  870,  874,  879,  882,  886,
      892,  897,  902,  905,  908,  912,  916,  920,  923,  927,
      929,  932,  935,  938,  940,  942,  944,  946,  948,  951,
      955,  959,  962,  968,  973,  978,  981,  984,  987,  991,
      995,  999, 1005, 1008, 1013, 1016, 1019, 1022, 1025, 1028,
     1034, 1038, 1042, 1045, 1048, 1051, 1056, 1061, 1067, 1072,
     1075, 1079, 1083, 1086, 1089, 1092, 1097, 1101, 1105, 1108,
     1111, 1114, 1117, 1122, 1126, 1130, 1132, 1135, 1137, 1140,
     1144, 1147, 1150, 1152, 1154, 1157, 1160, 1163, 1166, 1169,
     1173, 1176, 1181, 1185, 1189, 1192, 1196, 1200, 1203, 1206,

     1209, 1212, 1215, 1220, 1224, 1228, 1231, 1234, 1237, 1240,
     1243, 1248, 1252, 1256, 1259, 1261, 1264, 1267, 1270, 1273,
     1276, 1279, 1284, 1288, 1292, 1295, 1299, 1302, 1307, 1311,
     1315, 1318, 1321, 1325, 1329, 1332, 1338, 1343, 1348, 1351,
     1354, 1357, 1361, 1363, 1366, 1369, 1371, 1373, 1376, 1379,
     1384, 1388, 1392, 1395, 1398, 1401, 1404, 1407, 1411, 1415,
     1418, 1421, 1424, 1429, 1433, 1437, 1440, 1442, 1444, 1447,
     1452, 1456, 1460, 1463, 1467, 1470, 1473, 1478, 1482, 1485,
     1489, 1493, 1496, 1500, 1504, 1508, 1512, 1515, 1521, 1526,
     1531, 1535, 1537, 1540, 1543, 1546, 1549, 1552, 1555, 1558,

     1563, 1567, 1571, 1574, 1577, 1579, 1582, 1584, 1587, 1590,
     1593, 1596, 1601, 1605, 1609, 1612, 1615, 1618, 1621, 1623,
     1625, 1627, 1629, 1631, 1633, 1636, 1639, 1641, 1644, 1647,
     1650, 1653, 1655, 1658, 1661, 1663, 1665, 1667, 1669, 1671,
     1674, 1676, 1679, 1682, 1685, 1688, 1694, 1698, 1703, 1708,
     1712, 1716, 1719, 1722, 1726, 1730, 1734, 1737, 1740, 1744,
     1749, 1751, 1753, 1755, 1757, 1759, 1762, 1764, 1766, 1768,
     1770, 1773, 1775, 1778, 1781, 1784, 1787, 1790, 1793, 1798,
     1802, 1806, 1810, 1814, 1817, 1821, 1826, 1829, 1832, 1834,
     1837, 1842, 1846, 1849, 1853, 1856, 1859, 1863, 1866, 1869,

     1874, 1878, 1882, 1886, 1889, 1892, 1895, 1897, 1901, 1905,
     1909, 1915, 1919, 1924, 1928, 1932, 1935, 1938, 1942, 1946,
     1949, 1952, 1957, 1961, 1965, 1968, 1972, 1974, 1977, 1979,
     1982, 1985, 1988, 1991, 1997, 2001, 2005, 2008, 2011, 2014,
     2019, 2024, 2027, 2030, 2036, 2040, 2044, 2047, 2050, 2053,
     2058, 2063, 2067, 2070, 2076, 2081, 2086, 2090, 2094, 2098,
     2102, 2105, 2111, 2116, 2121, 2125, 2129, 2133, 2137, 2140,
     2146, 2151, 2156, 2160, 2164, 2167, 2171, 2174, 2180, 2185,
     2190, 2194, 2198, 2202, 2207, 2210, 2213, 2216, 2221, 2225,
     2229, 2233, 2237, 2240, 2243, 2247, 2250, 2255, 2259, 2263,

     2267, 2271, 2274, 2278, 2282, 2285, 2288, 2291, 2297, 2301,
     2304, 2309, 2312, 2316, 2320, 2324, 2328, 2331, 2336, 2340,
     2344, 2347, 2350, 2353, 2357, 2360, 2365, 2369, 2373, 2377,
     2381, 2385, 2388, 2392, 2396, 2399, 2405, 2410, 2414, 2418,
     2421, 2426, 2431, 2435, 2440, 2444, 2448, 2451, 2455, 2459,
     2463, 2466, 2472, 2477, 2482, 2485, 2489, 2492, 2496, 2500,
     2504, 2507, 2513, 2518, 2523, 2527, 2530, 2533, 2538, 2542,
     2546, 2549, 2552, 2555, 2560, 2564, 2568, 2571, 2575, 2578,
     2581, 2584, 2586, 2591, 2595, 2598, 2602, 2605, 2609, 2613,
     2616, 2618, 2620, 2622, 2625, 2628, 2633, 2637, 2641, 2645,

     2648, 2651, 2654, 2657, 2659, 2662, 2667, 2671, 2674, 2678,
     2682, 2686, 2689, 2692, 2696, 2699, 2702, 2707, 2711, 2715,
     2718, 2721, 2724, 2727, 2730, 2734, 2737, 2742, 2746, 2750,
     2754, 2757, 2760, 2765, 2769, 2773, 2776, 2778, 2781, 2785,
     2788, 2791, 2793, 2797, 2801, 2804, 2810, 2815, 2820, 2823,
     2826, 2830, 2833, 2836, 2840, 2843, 2846, 2850, 2853, 2859,
     2864, 2867, 2872, 2875, 2878, 2881, 2884, 2888, 2892, 2893,
     2894, 2895, 2895, 2896, 2897, 2897, 2897, 2898, 2899, 2900,
     2900, 2900, 2900, 2900, 2900, 2901, 2901, 2901, 2903, 2903,
     2903, 2903, 2906, 2906, 2906, 2907, 2907, 2907, 2907, 2908,

     2909, 2912, 2913, 2914, 2915, 2915, 2915, 2918, 2918, 2918,
     2918, 2919, 2919, 2920, 2921, 2921, 2921, 2921, 2921, 2921,
     2922, 2923, 2924, 2925, 2925, 2925, 2925, 2926, 2927, 2928,
     2929, 2930, 2931, 2932, 2933, 2934, 2934, 2934, 2935, 2935,
     2936, 2937, 2938, 2939, 2939, 2939, 2940, 2941, 2942, 2943,
     2944, 2945, 2945, 2945, 2945, 2947, 2949, 2950, 2950, 2951,
     2952, 2955, 2958, 2958, 2958, 2959, 2959, 2959, 2961, 2961,
     2962, 2962, 2962, 2962, 2962, 2962, 2962, 2962, 2962, 2962,
     2963, 2964, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,
     2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965, 2965,

     2965, 2965, 2965, 2965, 2965, 2966, 2966, 2966, 2966, 2966,
     2966, 2967, 2968, 2969, 2970, 2970, 2970, 2971, 2971, 2972,
     2973, 2974, 2974, 2975, 2976, 2976, 2977, 2977, 2978, 2979,
     2980, 2981, 2982, 2983, 2983, 2984, 2985, 2986, 2986, 2986,
     2987, 2988, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996,
     2997, 2998, 2999, 3000, 3001, 3002, 3003, 3004, 3005, 3006,
     3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016,
     3017, 3018, 3020, 3022, 3023, 3023, 3023, 3023, 3023, 3024,
     3024, 3024, 3025, 3025, 3025, 3026, 3027, 3027, 3028, 3028,
     3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3036, 3036,

     3036, 3036, 3036, 3036, 3036, 3036, 3036, 3037, 3038, 3039,
     3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048,
     3049, 3050, 3050, 3050, 3051, 3052, 3054, 3055, 3055, 3056,
     3057, 3057, 3057, 3059, 3061, 3062, 3062, 3062, 3063, 3064,
     3064, 3065, 3065, 3066, 3066, 3066, 3066, 3066, 3067, 3067,
     3067, 3068, 3068, 3069, 3070, 3071, 3071, 3071, 3071, 3073,
     3075, 3076, 3076, 3076, 3077, 3078, 3080, 3082, 3083, 3083,
     3083, 3083, 3084, 3086, 3088, 3089, 3091, 3092, 3093, 3093,
     3094, 3094, 3095, 3096, 3096, 3097, 3099, 3102, 3102, 3103,
     3103, 3104, 3105, 3107, 3108, 3109, 3111, 3113, 3114, 3116,

     3118, 3119, 3120, 3121, 3122, 3122, 3123, 3124, 3125, 3127,
     3129, 3130, 3131, 3132, 3133, 3133, 3134, 3134, 3134, 3134,
     3134, 3134, 3134, 3134, 3134, 3134, 3134, 3135, 3135, 3135,
     3135, 3136, 3137, 3138, 3139, 3140, 3141, 3143, 3145, 3146,
     3147, 3147, 3148, 3149, 3151, 3153, 3154, 3154, 3154, 3155,
     3156, 3157, 3158, 3159, 3161, 3163, 3163, 3163, 3163, 3163,
     3163, 3163, 3164, 3165, 3166, 3166, 3166, 3167, 3168, 3169,
     3170, 3170, 3170, 3170, 3170, 3171, 3172, 3173, 3174, 3174,
     3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3181, 3181,
     3181, 3181, 3182, 3182, 3182, 3183, 3183, 3183, 3183, 3184,

     3185, 3186, 3186, 3187, 3188, 3188, 3188, 3188, 3188, 3188,
     3189, 3189, 3189, 3190, 3190, 3191, 3191, 3191, 3191, 3192,
     3193, 3194, 3194, 3195, 3196, 3197, 3197, 3197, 3197, 3197,
     3199, 3201, 3202, 3203, 3204, 3205, 3206, 3206, 3207, 3209,
     3211, 3212, 3213, 3215, 3217, 3218, 3219, 3219, 3219, 3221,
     3223, 3224, 3224, 3224, 3225, 3225, 3225, 3226, 3226, 3226,
     3227, 3227, 3228, 3229, 3230, 3231, 3231, 3232, 3232, 3232,
     3233, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3242,
     3244, 3245, 3246, 3247, 3248, 3250, 3250, 3250, 3251, 3252,
     3253, 3254, 3256, 3258, 3258, 3258, 3258, 3258, 3258, 3258,

     3258, 3258, 3258, 3258, 3258, 3258, 3258, 3258, 3258, 3259,
     3259, 3260, 3261, 3262, 3262, 3263, 3263, 3263, 3264, 3265,
     3266, 3267, 3268, 3268, 3268, 3269, 3269, 3269, 3269, 3269,
     3269, 3269, 3270, 3270, 3270, 3271, 3271, 3272, 3272, 3272,
     3272, 3272, 3272, 3273, 3273, 3273, 3273, 3273, 3274, 3274,
     3274, 3275, 3276, 3277, 3278, 3279, 3279, 3280, 3282, 3284,
     3285, 3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286, 3286,
     3286, 3287, 3287, 3287, 3288, 3289, 3292, 3293, 3294, 3296,
     3298, 3298, 3298, 3298, 3299, 3300, 3301, 3301, 3301, 3301,
     3301, 3303, 3305, 3305, 3306, 3306, 3306, 3307, 3307, 3310,

     3310, 3310, 3310, 3312, 3312, 3312, 3314, 3314, 3314, 3314,
     3315, 3316, 3317, 3318, 3318, 3318, 3318, 3319, 3319, 3321,
     3321, 3321, 3322, 3322, 3323, 3323, 3323, 3323, 3323, 3323,
     3323, 3324, 3324, 3324, 3324, 3324, 3324, 3324, 3325, 3326,
     3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326,
     3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326,
     3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326,
     3326, 3326, 3327, 3327, 3327, 3328, 3329, 3329, 3329, 3329,
     3329, 3329, 3329, 3329, 3329, 3330, 3330, 3330, 3330, 3331,
     3331, 3331, 3332, 3332, 3332, 3332, 3333, 3334, 3335, 3336,

     3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3345,
     3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354,
     3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364,
     3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374,
     3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384,
     3385, 3385, 3385, 3386, 3386, 3387, 3387, 3388, 3388, 3388,
     3388, 3388, 3388, 3388, 3388, 3388, 3388, 3388, 3389, 3389,
     3389, 3390, 3390, 3391, 3392, 3393, 3395, 3396, 3397, 3398,
     3399, 3400, 3401, 3401, 3402, 3402, 3403, 3403, 3404, 3404,
     3404, 3405, 3406, 3406, 3407, 3407, 3407, 3407, 3407, 3408,

     3409, 3410, 3410, 3410, 3411, 3411, 3411, 3411, 3411, 3412,
     3412, 3412, 3412, 3413, 3414, 3415, 3415, 3416, 3417, 3418,
     3418, 3419, 3419, 3419, 3420, 3421, 3422, 3423, 3423, 3423,
     3424, 3424, 3425, 3426, 3426, 3427, 3427, 3428, 3428, 3428,
     3428, 3428, 3428, 3428, 3428, 3428, 3428, 3428, 3429, 3430,
     3431, 3431, 3431, 3431, 3431, 3431, 3431, 3432, 3432, 3432,
     3432, 3432, 3432, 3432, 3432, 3432, 3432, 3433, 3433, 3433,
     3434, 3434, 3435, 3436, 3436, 3436, 3437, 3437, 3438, 3438,
     3438, 3438, 3438, 3439, 3439, 3439, 3440, 3440, 3440, 3440,
     3441, 3441, 3441, 3441, 3442, 3442, 3442, 3442, 3443, 3443,

     3443, 3444, 3444, 3444, 3444, 3444, 3445, 3445, 3445, 3445,
     3445, 3445, 3445, 3446, 3446, 3446, 3446, 3446, 3446, 3446,
     3446, 3446, 3446, 3447, 3448, 3449, 3450, 3450, 3450, 3450,
     3451, 3451, 3452, 3452, 3452, 3452, 3452, 3453, 3454, 3454,
     3454, 3454, 3454, 3455, 3455, 3455, 3455, 3455, 3455, 3456,
     3457, 3458, 3458, 3458, 3458, 3459, 3460, 3460, 3462, 3463,
     3463, 3465, 3465, 3467, 3469, 3470, 3471, 3472, 3473, 3473,
     3474, 3475, 3475, 3475, 3475, 3475, 3476, 3478, 3479, 3480,
     3480, 3480, 3480, 3480, 3480, 3480, 3481, 3481, 3481, 3481,
     3482, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483,

     3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483,
     3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483,
     3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483, 3483,
     3483, 3483, 3483, 3483, 3483, 3483, 3483, 3484, 3484, 3484,
     3484, 3484, 3484, 3484, 3484, 3485, 3486, 3487, 3488, 3488,
     3488, 3489, 3490, 3491, 3492, 3493, 3493, 3494, 3495, 3496,
     3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506,
     3507, 3508, 3509, 3510, 3511, 3512, 3513, 3514, 3515, 3516,
     3517, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526,
     3527, 3528, 3529, 3530, 3531, 3532, 3533, 3533, 3534, 3535,

     3536, 3537, 3538, 3539, 3540, 3541, 3542, 3543, 3544, 3544,
     3546, 3548, 3548, 3548, 3549, 3549, 3549, 3549, 3549, 3549,
     3549, 3550, 3551, 3552, 3553, 3554, 3555, 3556, 3557, 3558,
     3558, 3558, 3559, 3559, 3560, 3560, 3560, 3560, 3560, 3561,
     3562, 3562, 3563, 3563, 3563, 3563, 3563, 3564, 3565, 3565,
     3566, 3567, 3568, 3569, 3570, 3570, 3570, 3571, 3572, 3572,
     3573, 3573, 3573, 3573, 3573, 3573, 3573, 3574, 3575, 3575,
     3576, 3576, 3576, 3576, 3576, 3577, 3577, 3578, 3578, 3578,
     3578, 3578, 3579, 3579, 3579, 3580, 3580, 3580, 3581, 3581,
     3581, 3582, 3582, 3582, 3583, 3583, 3583, 3584, 3584, 3585,

     3586, 3586, 3586, 3587, 3587, 3587, 3587, 3587, 3587, 3587,
     3587, 3587, 3587, 3587, 3587, 3588, 3588, 3588, 3588, 3588,
     3588, 3588, 3589, 3590, 3591, 3592, 3592, 3593, 3593, 3593,
     3593, 3593, 3593, 3593, 3593, 3593, 3593, 3593, 3593, 3594,
     3595, 3597, 3597, 3597, 3598, 3598, 3598, 3598, 3599, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3602, 3603, 3604, 3605,
     3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605,
     3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605,
     3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605,
     3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605,

     3605, 3606, 3606, 3606, 3606, 3606, 3606, 3607, 3607, 3607,
     3607, 3607, 3607, 3607, 3607, 3608, 3609, 3610, 3611, 3612,
     3613, 3614, 3615, 3616, 3617, 3618, 3619, 3620, 3621, 3622,
     3623, 3624, 3625, 3626, 3627, 3628, 3629, 3630, 3632, 3634,
     3635, 3636, 3637, 3638, 3639, 3640, 3641, 3642, 3643, 3644,
     3645, 3646, 3647, 3648, 3649, 3650, 3651, 3652, 3653, 3654,
     3655, 3656, 3656, 3656, 3657, 3658, 3659, 3660, 3661, 3662,
     3663, 3664, 3665, 3666, 3667, 3668, 3669, 3669, 3669, 3669,
     3669, 3669, 3669, 3669, 3670, 3672, 3673, 3674, 3675, 3676,
     3677, 3677, 3678, 3680, 3680, 3680, 3680, 3681, 3682, 3682,

     3682, 3683, 3684, 3685, 3686, 3687, 3689, 3690, 3691, 3692,
     3693, 3693, 3693, 3693, 3693, 3693, 3693, 3693, 3693, 3695,
     3696, 3696, 3696, 3696, 3697, 3697, 3697, 3697, 3697, 3697,
     3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698,
     3698, 3698, 3698, 3698, 3698, 3699, 3699, 3699, 3699, 3699,
     3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699,
     3699, 3700, 3700, 3700, 3702, 3703, 3704, 3704, 3704, 3704,
     3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704,
     3704, 3705, 3707, 3708, 3708, 3710, 3710, 3710, 3710, 3710,
     3711, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712,

     3712, 3712, 3712, 3712, 3712, 3712, 3713, 3713, 3713, 3713,
     3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713,
     3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713,
     3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3714, 3716,
     3717, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726,
     3727, 3728, 3729, 3730, 3731, 3732, 3732, 3733, 3734, 3734,
     3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743,
     3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751, 3752, 3753,
     3754, 3755, 3755, 3755, 3756, 3757, 3758, 3760, 3761, 3762,
     3763, 3764, 3765, 3766, 3766, 3767, 3768, 3769, 3769, 3770,

     3770, 3770, 3770, 3770, 3770, 3771, 3772, 3773, 3774, 3776,
     3776, 3777, 3778, 3779, 3779, 3780, 3781, 3782, 3783, 3784,
     3785, 3786, 3787, 3787, 3787, 3787, 3787, 3788, 3788, 3789,
     3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789,
     3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789,
     3789, 3790, 3790, 3791, 3791, 3793, 3793, 3793, 3793, 3793,
     3793, 3793, 3794, 3794, 3794, 3794, 3794, 3794, 3794, 3794,
     3795, 3795, 3796, 3797, 3799, 3799, 3799, 3800, 3800, 3801,
     3802, 3802, 3802, 3802, 3802, 3802, 3802, 3802, 3802, 3802,
     3802, 3802, 3803, 3803, 3803, 3803, 3804, 3804, 3804, 3804,

     3804, 3804, 3804, 3804, 3804, 3804, 3804, 3804, 3804, 3804,
     3804, 3804, 3804, 3804, 3804, 3804, 3805, 3805, 3805, 3806,
     3806, 3806, 3806, 3806, 3807, 3808, 3809, 3810, 3811, 3812,
     3813, 3814, 3815, 3816, 3817, 3818, 3819, 3820, 3821, 3821,
     3821, 3821, 3821, 3822, 3822, 3822, 3823, 3824, 3825, 3825,
     3825, 3826, 3827, 3828, 3829, 3830, 3831, 3831, 3832, 3833,
     3834, 3835, 3836, 3837, 3838, 3839, 3840, 3840, 3841, 3842,
     3843, 3843, 3843, 3844, 3845, 3846, 3847, 3848, 3849, 3850,
     3851, 3851, 3851, 3852, 3853, 3854, 3854, 3854, 3854, 3855,
     3855, 3855, 3856, 3857, 3857, 3858, 3859, 3860, 3861, 3861,

     3862, 3863, 3864, 3865, 3866, 3866, 3866, 3866, 3866, 3866,
     3867, 3867, 3867, 3868, 3868, 3868, 3868, 3869, 3869, 3869,
     3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869, 3870,
     3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3872, 3872,
     3872, 3872, 3872, 3872, 3872, 3872, 3874, 3875, 3875, 3876,
     3877, 3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878,
     3878, 3878, 3878, 3878, 3878, 3878, 3878, 3879, 3879, 3880,
     3880, 3880, 3880, 3881, 3881, 3881, 3882, 3882, 3882, 3882,
     3882, 3882, 3882, 3883, 3883, 3883, 3883, 3884, 3885, 3885,
     3885, 3885, 3885, 3885, 3886, 3887, 3888, 3889, 3890, 3891,

     3892, 3893, 3895, 3896, 3897, 3898, 3899, 3900, 3900, 3900,
     3901, 3902, 3902, 3902, 3903, 3904, 3904, 3904, 3904, 3904,
     3904, 3907, 3908, 3909, 3910, 3911, 3912, 3913, 3913, 3914,
     3915, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 3923,
     3924, 3924, 3924, 3925, 3925, 3926, 3926, 3927, 3927, 3927,
     3928, 3929, 3929, 3929, 3929, 3931, 3933, 3935, 3935, 3936,
     3938, 3939, 3940, 3940, 3941, 3942, 3943, 3943, 3943, 3944,
     3944, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945, 3945,
     3945, 3945, 3945, 3945, 3946, 3946, 3946, 3946, 3947, 3947,
     3947, 3947, 3947, 3947, 3949, 3949, 3950, 3951, 3951, 3951,

     3951, 3951, 3951, 3951, 3952, 3952, 3952, 3952, 3952, 3953,
     3953, 3953, 3953, 3953, 3953, 3953, 3954, 3954, 3955, 3955,
     3955, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956, 3956,
     3957, 3957, 3957, 3957, 3958, 3959, 3960, 3961, 3962, 3963,
     3964, 3965, 3966, 3967, 3968, 3969, 3969, 3969, 3970, 3971,
     3972, 3972, 3972, 3972, 3972, 3974, 3975, 3976, 3977, 3977,
     3978, 3979, 3980, 3981, 3982, 3983, 3985, 3986, 3987, 3988,
     3988, 3988, 3989, 3990, 3990, 3990, 3991, 3991, 3991, 3992,
     3993, 3994, 3995, 3996, 3997, 3998, 3998, 3999, 4000, 4001,
     4002, 4003, 4003, 4003, 4004, 4005, 4006, 4006, 4006, 4006,

     4006, 4006, 4006, 4006, 4006, 4007, 4007, 4007, 4007, 4007,
     4007, 4007, 4009, 4010, 4011, 4012, 4012, 4012, 4012, 4013,
     4013, 4013, 4013, 4013, 4014, 4014, 4014, 4015, 4016, 4016,
     4016, 4017, 4017, 4017, 4017, 4017, 4019, 4019, 4019, 4019,
     4020, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4028, 4029,
     4030, 4030, 4030, 4031, 4032, 4033, 4033, 4033, 4033, 4033,
     4034, 4035, 4036, 4037, 4038, 4040, 4041, 4043, 4045, 4046,
     4047, 4048, 4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055,
     4055, 4056, 4056, 4056, 4056, 4057, 4059, 4060, 4060, 4060,
     4061, 4062, 4063, 4064, 4064, 4064, 4064, 4064, 4064, 4064,

     4065, 4065, 4065, 4065, 4065, 4065, 4068, 4069, 4070, 4070,
     4070, 4071, 4071, 4072, 4073, 4073, 4073, 4074, 4075, 4076,
     4077, 4077, 4077, 4077, 4077, 4078, 4078, 4078, 4078, 4078,
     4079, 4080, 4081, 4082, 4083, 4083, 4083, 4083, 4084, 4084,
     4084, 4085, 4085, 4086, 4087, 4088, 4088, 4089, 4090, 4091,
     4092, 4093, 4094, 4095, 4096, 4097, 4097, 4097, 4098, 4098,
     4098, 4098, 4098, 4098, 4098, 4098, 4098, 4099, 4100, 4101,
     4101, 4102, 4103, 4103, 4103, 4103, 4103, 4104, 4104, 4104,
     4104, 4104, 4105, 4106, 4106, 4106, 4106, 4106, 4106, 4106,
     4107, 4108, 4109, 4110, 4111, 4112, 4113, 4113, 4114, 4115,

     4116, 4116, 4116, 4117, 4117, 4118, 4118, 4118, 4119, 4120,
     4120, 4120, 4120, 4120, 4120, 4120, 4120, 4120, 4121, 4122,
     4123, 4123, 4123, 4124, 4124, 4125, 4126, 4127, 4128, 4129,
     4130, 4131, 4132, 4133, 4134, 4134, 4134, 4134, 4135, 4135,
     4135, 4136, 4136, 4136, 4137, 4138, 4139, 4140, 4141, 4141,
     4141, 4141, 4142, 4142, 4142, 4143, 4143, 4144, 4145, 4146,
     4146, 4146, 4146, 4147, 4148, 4149, 4150, 4150, 4151, 4152,
     4153, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4161, 4162,
     4163, 4164, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172,
     4173, 4174, 4175, 4176, 4177, 4178, 4179, 4180, 4181, 4182,

     4183, 4184, 4185, 4186, 4187, 4188, 4189, 4190, 4191, 4192,
     4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202,
     4203, 4204, 4205, 4206, 4207, 4208, 4209, 4210, 4211, 4212,
     4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222,
     4223, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4232,
     4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4242,
     4243, 4244, 4245, 4246, 4247, 4248, 4249, 4250, 4251, 4252,
     4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262,
     4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272,
     4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282,

     4282, 4282
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   24,   24,   24,   24,   25,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   38,   40,   41,   38,   42,   38,   43,   44,   45,
       46,   47,   48,   49,   38,   38,   50,   38,   51,   38,
       52,   53,   54,   55,   56,    1,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   38,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   38,   81,    1,   82,   83,    1,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84
    } ;

static yyconst flex_int32_t yy_meta[85] =
    {   0,
        1,    2,    3,    4,    5,    6,    7,    8,    9,    1,
       10,   11,   12,   13,   14,    1,   15,    1,   16,   17,
       18,   18,   18,   18,   18,   19,   20,   21,   22,   23,
        1,   24,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   26,   27,   28,    1,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       29,   30,   31,   32
    } ;

static yyconst flex_int16_t yy_base[4108] =
    {   0,
        0,    2,   22,    0,  105,  116,  169,    0,  253,    0,
      337,    0,  421,    0,  505,    0,  119,  587,  617,    0,
      699,  701,  755,    0,  839,    0,  922,  933,  943,  954,
      134,  715, 1035,    0,  717,  970, 1119,    0, 1203,    0,
     1009, 1286, 1292, 1308, 1334, 1354,  590,  972, 1357, 1373,
     1454,    0, 1375, 1398, 1536, 1539, 1550, 1564, 1595, 1606,
     1617, 1648, 1730,    0, 1814,    0, 1897, 1908, 1919, 1950,
     1627, 1929, 1651, 1666, 1956, 1984, 1990, 2013, 2031, 2045,
      145,  731, 1412, 1428, 2016, 2047, 2065, 2067,  988, 1682,
     2099, 2110, 1698, 2113, 1700, 2147, 2085, 2150, 1401, 2161,

     2204,    0, 2286, 2288, 2302, 2304, 2323, 2345, 2398,    0,
     2482,    0, 2564, 2566, 2168, 2171, 2363, 2377, 2648,    0,
     2580, 2582, 2732,    0, 2596, 2598, 2816,    0, 2612, 2898,
     2918,    0, 3000, 3003, 3018, 3021, 3028, 3047, 3044, 3050,
     3121,    0, 3205,    0, 3287, 3297, 3347,    0, 3431,    0,
     3514, 3595, 3677,    0, 3066, 3087, 3307, 3540, 3761,    0,
     3550, 3566, 3625, 3628, 3845,    0, 3517, 3568, 3927, 3930,
     3949, 3963, 3982, 3996, 3598, 3952, 4026,    0, 4110,    0,
     4192, 4194, 4208, 4210, 4224, 4226, 4245, 4247, 3654, 4261,
     4275, 4277, 4296, 4299, 4314, 4317, 4328, 4358, 4398, 4472,

     4547,    0, 4372, 4417, 4432, 4435, 4491, 4510, 4361, 4629,
     4631, 4645, 4647, 4665, 4450, 4525, 3985, 4667, 4696, 4707,
     4718, 4733, 4744, 4755, 4765, 4771, 4842,    0, 4926,    0,
     5008, 5010, 5080,    0, 5163, 5174, 4781, 4791, 4342, 4806,
     4809, 4820, 5024, 5193, 5203, 5256,10182,27542,27542,27542,
    27542,27542,    1,    0,  154,27542, 1575, 1940,27542,27542,
    27542,   96,   14, 2315, 1638, 2609,  745, 4463, 4687,10154,
    27542, 5038,  133, 1023, 1981, 1327, 3079, 1442, 5276,27542,
    27542,  609,27542,  114,10153,27542,10112, 4288, 5270, 4729,
    27542,27542,27542,27542,    0,27542,  125,27542,27542,    0,

        0,  920,  930,27542,    0,27542,    0,27542,27542,27542,
    27542,27542,27542,  135,10141, 5043,27542,  158,27542,27542,
    27542,    0,27542,  576,27542,    0,27542,27542,27542,27542,
    27542,27542,  690,27542,27542,27542,27542,27542,    0,27542,
      697,    0,27542, 5225, 5359, 5442, 5295,27542,10136,27542,
     2010, 5289,  603,27542,27542,27542,27542,27542,27542,  711,
      533,10081,27542,10091,27542, 2577, 3326,27542,27542,27542,
    27542,27542, 4642,  713, 5056, 5522, 5309, 5314, 3109,  963,
     5450,   33,    0, 5318, 1394, 5334,27542,  721,10130,10108,
     5458,10102,27542,10101, 1652, 5462, 5466,10076,27542, 5478,

     5470, 5482, 5510, 5541, 5558, 5599, 5604, 5514, 5609, 5619,
     5636, 5649, 5653, 5664, 5680, 5695, 5700,27542,    0,27542,
        0,    0,    0,  932,10095, 5554, 5707, 4016, 5740,10099,
     5733, 5748, 5714, 5769, 1312,    0,27542, 5773,  939,27542,
    27542,    0,27542,  949,27542,27542,27542,27542, 5777,27542,
     2078, 3587,27542,27542,27542,27542,27542, 2182,  968,27542,
    27542,27542,27542,27542,27542, 1000,27542,27542,27542,27542,
    27542, 1277,27542,27542, 5822,    0,    0,27542, 1281, 5186,
        0,10058,10040,10047,10030,10044,10039,  933,10028,27542,
    27542,27542,27542,27542, 2299, 1287,27542,10066,27542,27542,

    27542,27542, 1288,27542,27542,    0, 2190, 2388, 2639,27542,
      926,10038, 1307,10083,27542, 2911,27542,  969,27542,    0,
    27542, 5781, 5809, 5813, 5817, 5339, 5827,10063, 5842,    0,
     1347,27542,27542, 1017,10030, 1325,10074,27542,27542, 5852,
     1581, 1029,27542,27542, 1355,  140, 5856,27542,27542,27542,
    27542,27542,10060, 1371,    0,27542,27542,27542,27542, 1392,
    27542,27542,27542,10074,  711,27542,27542,27542, 1408, 1320,
        0, 1437,    0,    0,    0,10057, 1414, 1310,27542, 1341,
     1570, 1591, 1903, 1609,27542,27542,27542,27542,27542, 3336,
     3667,27542,27542,27542, 1525,27542,27542,27542,27542,27542,

    27542,    0,27542,    0,    0, 1545,27542,27542,    0,27542,
        0,    0,    0, 1572,    0,27542,    0, 9998, 9992,27542,
    27542,27542,27542,27542, 1586,27542,27542,27542,27542,27542,
     1613, 9997,    0, 4538, 5347,    0,    0,    0,10032,27542,
     1650,  928,    0,27542,10031,    0, 5881,27542,27542,27542,
    27542,27542, 1652, 9988, 9985,  105, 9983,27542,27542,27542,
    27542,27542,10036,27542,27542, 1664,    0, 1685,27542,27542,
    27542,27542, 1701,27542,27542, 5860,27542,27542,    0,27542,
     5885, 1888, 5899,    0,27542,    0,27542,10034,    0,    0,
     1892,    0,27542, 1448, 5353,    0,27542,    0,    0,    0,

        0,    0,27542, 1899,    0,27542, 5904,27542, 5909,    0,
        0,    0,    0,    0, 1559, 1910,27542,27542, 9965, 9955,
     9949, 9938, 9945, 9944,27542, 1722,    0,27542,  718, 1907,
     2016,    0,    0,27542, 9967, 9945, 9945, 9932,    0,    0,
        0,    0,27542, 5913, 5922,27542,27542, 9921,27542,27542,
     5926, 9942, 1954, 5934, 9942, 9939, 9927, 9948,27542,27542,
     5799, 5946, 5954, 5962, 2056,27542, 5967, 5981, 5995, 6009,
     6023, 1960, 6027,27542, 5498,27542,27542,27542,27542,27542,
    27542,27542,27542, 2026, 9915, 6031,27542, 6036, 6046, 6050,
    27542,27542, 6061,27542, 2108, 9916, 6071,27542,27542,27542,

    27542,27542, 6075, 2111,27542, 6079, 9887,    0, 6091, 6096,
    27542,27542, 9886,27542, 6100, 2136,27542,27542,27542,27542,
    27542,27542,27542,27542, 2157, 9907,    0,    0,    0,27542,
     9906,27542,27542,27542,27542,27542, 9910, 2277,    0,27542,
    27542,27542,27542,27542,27542,27542, 9908, 2317,    0,27542,
    27542,    0,27542,27542,    0, 9871,27542,27542, 2324,    0,
    27542,27542,    0, 9866, 2325,27542,27542,    0,27542,27542,
        0, 9865,27542,27542, 2331,    0,27542,27542,    0, 9859,
     2339,27542,27542, 2003,27542, 2620,27542,27542,27542,27542,
    27542,27542, 2353,27542, 6105, 6109,27542,27542,27542,27542,

    27542, 2359, 9882, 9879, 9817,27542,27542,27542,27542,    0,
     9842, 2366,27542,    0,27542,27542,27542,27542,27542,27542,
     6113, 2367,27542, 6119, 6125,27542,27542,27542,27542,27542,
     6130, 2555,27542,    0,27542,27542,    0,27542, 2576,    0,
    27542,27542,    0,    0,27542,27542, 2578,27542,27542,    0,
    27542,    0,    0,    0, 9873, 2616, 1252, 2094, 6143,    0,
    27542,    0,    0,    0, 2887, 6092,27542,27542,27542,27542,
     2888, 1488,27542,27542,27542,27542, 2889,27542, 9819,27542,
     6170, 6178,27542,27542,    0,27542, 2989,27542, 6186, 9837,
     6193, 6202,    0, 6210,27542,27542,27542,27542, 3311, 2998,

     9814,27542, 6214, 6222, 6229,27542,27542, 6240,27542,27542,
    27542, 3007, 9858, 6248,27542, 5248,27542,27542,27542, 3017,
     2161, 9812, 9816, 9798,27542,27542,27542,27542,27542,27542,
     3019,27542,27542,27542,27542, 3045, 9863, 3531, 9859, 9852,
     9850, 3060,    0, 3087,27542,    0,    0,    0, 3073, 3083,
     2019, 6196, 6217, 4389, 3276, 3277,    0,27542,    0,    0,
    27542,    0, 9832, 3278, 9831, 1513, 2130, 6284,27542,27542,
     3559, 3641,27542, 4009, 6288, 3288, 1003,  710,27542, 9846,
     6298, 6307, 6311, 9821, 2024, 6332, 6340, 6348, 6352, 6364,
        0, 6378, 6383, 6405, 6396, 6414, 6423, 6431,27542,27542,

     6450,27542,27542, 2025, 6435, 6470, 6480, 6487, 6496, 9820,
    27542, 6500, 6507, 9819, 6512, 6525, 6533, 6538,    0, 6546,
     6550, 1676, 3614, 6558, 9766, 6572,27542, 6576, 6588, 6592,
        0, 1932, 1928,    0, 3537, 9820, 9814, 3566, 9813, 4395,
        0,    0,27542, 6604, 9785,27542, 2195,    0,    0,    0,
        0, 6608, 6617, 6629, 6640, 6648, 2331, 6716,    0, 6652,
     6666, 6799, 6674, 6803,27542, 6807, 9801, 6811, 9773, 3014,
     3470, 9740, 9722, 9782, 6672, 6818, 3567, 6824, 3644, 6883,
     6837, 4385, 9749, 4273, 9717, 9713, 9710, 9707, 3544, 9696,
     2065, 9689, 9701, 9691, 4421, 9691, 3587, 9686, 1268, 9665,

     9674, 4186, 6697, 6843, 6851, 6871, 9681, 6855, 6866,    0,
     6895,    0,27542,  153, 6899, 6915, 6959, 6963, 6709, 6977,
     5167,    0,    0, 6991, 9651,27542,    0, 6999, 7003, 7016,
     7020, 7032, 7036, 7049, 7053, 9691, 7062, 9647, 6982, 7090,
     7096, 7109, 7123, 7127, 7136, 7141, 7155, 7169, 7173, 7209,
     7213, 7219, 7223, 7251, 7259, 7263, 7267, 7294, 7298, 7302,
     7309, 7313, 7341, 7347, 7351, 7380, 7384, 7390, 7397, 7424,
        0,    0,    0, 9628, 7057, 9666, 7182, 7428, 7436, 7451,
        0, 7464, 7469, 7477, 7481,27542, 7494, 4446, 4476,    0,
     7506, 5989,    0, 7513, 7204, 7255, 7558, 7520, 9630, 9616,

     9617, 9599, 9607, 9600, 1983, 9563,    0, 2284, 4514, 7524,
     7529,    0, 9558, 9560, 9543, 9559, 9554, 9559, 9542, 9528,
     9540, 7544, 7551,27542,    0, 7563, 7570, 3943,    0, 7575,
     9594, 7560, 7586,    0,27542, 7590, 9535, 7599, 7603, 7607,
     7634, 9577, 7638, 7642, 9576, 7646, 7667,    0, 7675,    0,
     7683, 7687, 7695,    0, 4656, 7702, 9496, 7693, 2562, 5048,
    27542, 7726, 3916, 4658, 3944,27542,27542, 9503, 1601, 7730,
     3976,27542,27542,27542,27542, 4505, 9502, 9499, 1613, 9498,
     1962,    0, 4313, 9477,27542,27542,    0, 2057,27542, 3970,
     4205, 4218,27542, 7734,    0,    0,    0,    0,    0,    0,

        0,    0, 9422, 9423, 9404,    0, 7738,27542,27542,27542,
     9408, 9408, 9410, 9451, 9457, 9446, 7749, 7753, 7758, 7772,
     9401, 9385, 9392, 9388, 9380, 9440,27542, 4191, 7776, 4198,
        0, 3102, 5785,    0,    0,27542,    0,    0,    0, 4235,
     7780,    0,    0,    0,    0, 7784, 7792, 9423, 7796, 7800,
    27542,    0, 4350,    0,    0, 9363, 9363, 9358, 9345, 1506,
     9338, 4431, 1364, 2175, 9354, 9346, 3040, 2295,    0,    0,
     9320, 1389, 9320, 9321,    0,    0,    0,    0, 9339, 7785,
    27542, 7810, 6829,27542,27542,27542,27542, 7815, 7825, 7833,
     7841,27542, 7847, 4524,27542, 7855, 7869, 7883, 7897, 7901,

     7905, 9285, 7909, 7914, 9311, 7922, 9304, 7928, 7936,    0,
     7956,    0, 7964, 7968, 7976, 7981, 7994, 8001,27542,27542,
    27542, 9272,27542,    0, 8006, 9308, 7994, 8017, 4204, 3615,
     1961,27542,    0,    0, 9292, 9291, 9290,27542,27542,27542,
    27542,27542,27542,27542,27542,    0, 9275, 8002,    0,    0,
        0, 9273, 8008,    0, 9267, 8012,    0, 9266, 8017, 8040,
     4700,27542, 8044,27542, 4718, 9206,    0, 9258, 8033,    0,
     8064,27542,27542,27542, 8068, 8076, 8084,    0,    0,    0,
    27542,    0,    0,27542,    0, 9196, 9203, 4805, 8090, 8094,
        0,    0,    0, 9196, 9190, 4407, 9179, 9185, 9184, 9173,

     9164, 9157, 4285, 9155, 8098, 8106, 8115, 9161, 8119, 8123,
     8139,27542, 8149, 9159, 8144, 8165, 8173, 8157, 8181, 8185,
    27542, 8197, 5237,    0, 5631, 9185, 9143, 8201, 9166, 8209,
     8217,    0, 8226,    0, 8234, 8238, 8246, 6878, 5265, 9121,
     9118, 5530, 4485, 9117, 9111, 9112, 9164, 4741, 5212, 9145,
     9154, 9153,    0, 4752, 9086, 4312,27542,27542,27542,  960,
     9073, 9132, 9066, 9060, 4626, 9053, 9067, 9066, 9061, 9044,
     6252, 9096, 9080,27542, 4368, 5614,    0,27542,27542,27542,
     5494, 9029, 4647, 5686, 8250, 8254, 4220, 2309, 9068, 8264,
     8271, 8291, 8307, 8311, 8298, 8320,    0, 8329, 8337, 8343,

     8355, 8367,27542,    0, 5790,27542, 9079, 8372, 9032, 8381,
     8387, 9056,27542,    0,    0, 9053, 5006, 8399, 8412, 8417,
     8425, 8437,    0, 9062, 8441, 9002, 8991, 8995, 8986, 9048,
    27542, 9042, 8436, 4290, 2352, 4426, 3312, 8482, 8462, 8469,
     1926, 8979, 4693, 8988, 8998, 8967, 8962, 8977, 1624, 8959,
     8950, 8963, 4763, 4766, 8957, 8958, 8940, 8948, 8931, 8936,
     4606, 8939, 8931, 8928, 2051, 8917, 8913, 8909, 8886, 8891,
     8489, 8494, 8502, 8895,    0, 8498, 8558, 8572, 8516, 8576,
     8589, 8929, 8923, 6266, 6358, 7115, 2108, 7327, 7457, 8594,
     2313,    0, 8616, 8887, 8603,27542, 8625, 8630, 8646, 8650,

     8662, 8666, 8680, 8687,27542, 8692, 8701, 8706, 8275, 8878,
     8719, 8737, 8747, 8751, 8764, 8778, 8782, 8794, 8798, 8811,
     8826, 8830, 8842, 8846, 8857, 8873, 8886, 8891, 8906, 8918,
     8922, 8926, 8934, 8961, 8966, 8970, 8977, 8997, 8981, 9009,
     9017, 9027, 9037, 9054, 9065, 9069, 9073, 9101, 9105, 9112,
     8881, 8608, 9116, 9144, 9130, 9132, 9150, 9161, 8869, 8872,
     8855, 8855, 8850, 8856, 8833, 8824, 8835,27542,    0, 5832,
    27542, 8885, 8528, 8817, 8810, 8710, 8808, 8799, 8804, 8799,
     9085, 8810, 9192,27542, 8835, 9185, 8845,27542, 8843, 9200,
     9169,27542, 9196,    0, 8762, 8781, 9226, 9234, 9214, 9242,

        0, 9246, 8828,27542, 8824, 9241, 4529, 3543, 8823, 4627,
     3645, 8810, 8819, 8745, 8760, 8752, 8747, 8745, 8721,    0,
     8774, 9271, 9279,27542, 9287,27542,27542, 8717, 8719,27542,
     9254, 9293, 8750, 8748, 8746, 2061,27542, 8753, 8705, 8682,
     8685, 8687, 8683, 8678, 8658, 8721, 8689, 8690, 5152, 4325,
     8662, 8665, 8661, 8646, 8629, 8664,27542, 8661, 9287, 8675,
     9299, 8590, 8756, 9300, 8580, 8607, 8608, 9310, 9331, 9339,
     9319,27542,    0, 9353, 9361,27542, 8646,27542, 8645, 9326,
     4800, 4266, 8628, 8636, 8632,27542, 8629, 9348, 8628,27542,
     8625, 9361, 8619,27542, 8612, 9365, 8602,27542, 8589, 9369,

     9373, 5722, 8574, 8536, 8572,27542, 8571, 9387, 8517, 8502,
     8510, 8493,27542, 8498, 8490, 8485, 8473, 8478, 8480,    0,
     8465, 9398, 9402, 9414, 9418, 9422, 8509, 8490, 8442,    0,
     9426, 5033, 8436, 8436, 8424, 4387,  555, 8420,    0, 9509,
     8419, 8378,27542, 8384, 8376, 8380, 8374, 8370, 8421, 5794,
     5938, 3888, 3933, 8375,27542,27542, 9436, 9441,    0, 9446,
    27542, 8418,27542, 4824,27542, 9592, 9596,27542, 8402, 8411,
     5615, 9608, 9471, 9621, 8397, 9479, 9633, 9637, 8391, 9483,
     8352, 8336, 8331, 8312, 8375,27542, 9477, 8354, 8351, 9703,
     9641, 8296, 8288, 8287, 4623, 8303, 8281, 8312, 8273, 8268,

     8254, 8239, 8231, 8216, 8218, 8216, 8210, 8195, 8200, 8171,
     8180, 8173, 8174, 8134, 8133, 8120, 8138, 8132, 8114, 2559,
     8114, 8151, 8086, 8064, 8059, 8073, 8060, 8038, 8037, 8047,
     5065, 8019, 9651, 9666, 9646, 9491,27542, 9680, 9710, 8061,
     9709, 9735, 8030, 9779,27542, 9149, 2962,27542, 8043, 9626,
    27542, 9688, 5018, 3243,    0, 7981, 9723, 9783, 9787, 9799,
     9804, 9811, 9816, 9823, 9828, 9835, 9839, 9868, 9872, 9885,
     9899, 9903, 9912, 9918, 9983, 9945, 9932, 9949,10014,10019,
    10025,10029,10056,10067,10071,10083,10101,10110,10115,10119,
    10146,10150,10155,10161,10188,10192,10197,10203,10232,10236,

    10241,10248,10276,10280,10288,10292,10307,10320, 7973,27542,
    27542, 7938, 7938, 9693, 7928, 7918, 7924, 7918, 9749, 7930,
     7903, 7889, 9855, 7879, 7885, 7881, 7856, 9959, 7845, 7885,
     9963, 5868, 7883,27542,10305, 7822,    0,10335,10339,10365,
     7879,27542,10350, 7853, 7851, 5056, 7802, 7792, 7801, 7794,
     1929, 7796, 7834,10373, 7780, 7754,10377,27542, 7760,27542,
     7761, 7738, 1371, 7727, 7729,    0, 5422, 5687, 7730,27542,
     7716, 7704, 7711, 7735,27542,10375,10398,10402,10406, 7719,
     7732,27542,10400, 7694,27542,    0, 7708,27542,10413, 7698,
    27542,10419, 7671,27542,10426, 7661,27542,10432, 6000,27542,

     7593, 7646,27542,10439, 7573, 7551, 7525,    0, 7503, 7496,
     7470, 7481, 7449,10405,27542, 1883, 6316, 7447, 7413, 7398,
     7390,27542, 7433, 7400,27542,10484,    0, 7387,    0, 7380,
     7385, 7364, 7363, 7339, 3036, 3275,10510, 5178,10577,10581,
     5241,10472,10593,    0,10606,    0,10610,10618,10623, 7332,
     7346, 7332, 7321, 7362, 7358,27542,27542,10692,10635, 7299,
       69,  638,  663,  677,  865,  868,  933,  945, 1277, 1305,
     1359, 1466, 1520,10648, 1561, 1577, 1610, 1627, 1645, 1832,
     1900, 1948, 2009, 2066, 2085, 2107, 2282, 2321, 2327, 2534,
     2552, 3464, 2854, 2852, 2946, 5176, 2976, 3015, 3043, 3227,

    27542, 3237,10643,10652, 3316, 3313,27542,10649,10667,    0,
    10699,10705, 3524, 5182,    0,27542,10662,10730,10737,10413,
    10768,10772,10784,10790,10802,10796,10809,10841,10854,10858,
    10868,10872,10886,10899,27542,10915, 3529, 3529,10926,10930,
    27542,10946,10957,10962,10973,10977,10989,11005,11020,11024,
    11036,11053,11064,11068,11073,11104,11110,11114,11118,11146,
    11150, 3517, 3542,11154,11158,11162,11190,11194,11198,11209,
    11226,11236,11241,11245,11253,27542, 3556, 3569, 3577, 3591,
     3612, 3597, 3899, 3924,10712, 3942, 3943, 4136,10813, 4177,
    10993,27542,    0, 4237, 4254, 4209,27542,11272, 4264, 4276,

    27542,27542,10718,10919,27542,    0, 4253, 4286, 4340,27542,
     4366, 4381, 4381, 4392, 4392, 4398, 4414, 4428, 4654, 5261,
     4466, 5214, 4472,27542, 4628, 4657,11280, 4674, 4682,27542,
     4705, 4712, 4723, 4725, 4736, 4747, 4769, 4770,    0, 4735,
     4784, 4788, 4740, 4729,27542, 4754, 4756, 4768, 4955, 4945,
     4967, 4979, 4988, 5017, 5018, 5106, 5106, 5124, 5128, 5134,
     5329, 5836, 5159,    0, 5207,27542, 5171, 5164, 5178, 5205,
     5197, 5494, 5265, 5231, 5233, 5230, 5267, 5273, 5271, 5277,
    11301,11306,    0,11319,11331, 5285, 5272,11009, 5286,11335,
    11344, 5379, 5376, 5387, 5401, 5450, 5412, 5414, 5446, 5424,

     5436,11349, 5421,11359, 5430,11363,11369, 5430, 5450, 5452,
     5468, 5480, 5504, 5476, 5491, 5512, 5515, 5510, 5514, 5517,
     5521, 5546, 5556, 5550, 5567, 5569, 5587, 5592,11373, 5645,
     5602, 5596, 5602,11377, 5635,11391,11401, 5655,11405,11421,
    11436,11440,11453,11457,11470,11474,11488,11492,11508,11520,
    11536,11547,11552,27542,11563,11567,11579,11583, 5604, 5597,
    11594,11610,11627,11642,11657,11661,11669,11674,11701,11705,
    11709,11714,11719,11746,11750,11754,11765,11781,11785,11793,
    11798, 5621, 5613,11825,11829,11833,11843,11861,11871,11876,
    11880,27542,11888,11915,11923,11927,11935, 5630,11409, 5629,

     5622, 5647,11502, 5665, 5672,11907, 5672,11943,11955,11962,
    27542,11966, 5673, 5687,11974,27542,11978, 5694, 5682, 5683,
    27542,27542, 5734, 5702, 5721, 5729,27542, 5769, 5894, 5773,
     5869, 5807, 5835, 5780, 5939, 5781, 5797, 5802, 5802, 5815,
     5833, 5819, 5830, 5846, 5863, 5861, 5878, 5872, 5877, 5890,
     6014, 6136,27542, 5895,    0, 5899, 5903, 5907, 5900, 5912,
     5950,27542, 5921, 5912, 5920, 5914, 5924, 5928, 5936,11982,
    11994, 5982,27542,12007,12011, 5954,12019,12025,12032,12036,
     5949, 5960, 5954, 5962, 5986, 5987, 5997, 5985, 6027, 6003,
     6010,12044, 5997,12048, 6010,12056, 6021, 6023,12061, 6023,

    12067, 6034, 6062,12075, 6045, 6063,12079, 6078, 6086, 6089,
     6078, 6080,12084, 6083,12088,12092, 6099, 6094,12100, 6111,
     6084, 6099, 6100,27542,12110,12115,12129,12133,12146,12150,
    12162,12174,12178,12186,12196,12206,12213,12226, 6101, 6101,
    12240,12244,12255, 6120, 6105,12259,12267,12271, 6149,12287,
    12298,12363,12304,12315,12331,12383,12394,12398,12402,12429,
    12433,12437,12449,12464,12468,12476,12481,12495,12513,12521,
     6112, 6116, 6137,12526,12540,12554,27542,12558,12568,12572,
     6132, 6126,12587,12599,12603, 6149, 6149,12335,12347,12351,
     6143, 6145, 6160,12509,27542,12607,12618, 6168, 6174,12633,

    12637, 6175, 6179, 6174, 6232, 6188, 6179, 6186, 6253, 6279,
     6231, 6459,    0, 6235, 6327, 6217, 6357, 6215, 6214, 6215,
     6232, 6226, 6261, 6261, 6277, 6269, 6288, 6277,27542,27542,
     6275, 6297, 6297, 6301, 6291, 6307, 6294,27542, 6316,    0,
     6317, 6328, 6323, 6338, 6333,12641,12645, 6352,12651,12666,
    12670, 6352, 6363, 6364, 6361, 6355, 6361,12674, 6380, 6400,
     6369, 6370,12678, 6385, 6377, 6376,12682, 6376,12686, 6401,
     6395,12697,12701,12709,12713,12717,12722, 6406,12726, 6406,
     6409,12730,12738, 6424, 6414,12742,12746,12755,12759, 6426,
     6423,12775, 6434,12779,12783,12803,12807,12819,12823,12836,

    12841,12848,12853,12857,12861,12889,12893, 6423,12904,27542,
    12924, 6444, 6443,12929,12933, 6516, 6453, 6449, 6456,12937,
     6501,12941,12968,12973,12977,12981,12986,13004,13013,13017,
    13021,13033,13048,13053,13058,13066,13085,13094,13098,13103,
     6465, 6485,13112,13130,13139,13146,13150, 6488, 6483,13157,
    13164, 6482, 6497, 6504,13184,13191,13197, 6504,13206,    0,
     6512, 6502, 6562,    0,27542,27542, 6512, 6573,    0, 6541,
        0, 6544, 6658,13210, 6507, 6521, 6531, 6530, 6524, 6535,
     6558, 6547, 6622, 6623, 6543, 6562, 6568,27542, 6567, 6560,
     6571, 6589, 6578,13224,13231,13235,13242, 6579, 6599, 6597,

    13249, 6604, 6605,13253, 6615, 6636, 6622,13257,13261, 6614,
     6619,13267,13271, 6629,13275,13279,13283,13287, 6630,13291,
    13300, 6641, 6636, 6643,13308, 6645, 6659, 6638,13316,13320,
    13324,13328, 6648,13336,13341,13345,13357,13364,13369,13376,
    13389,13405,13409,13415,13419, 6641, 6738,13423,13450,13455,
     6801, 6762, 6751, 6767,27542,13459,13463,13469,13496,13500,
    13536,13504,13555,13567,13571,13582,13602,13610,13621,13511,
     6761,13629,13515, 6795, 6773,13637, 6776, 6775,13656,13527,
    13575,13664,13668,13675,13683,13687,13697, 6789,    0,27542,
        0, 6829, 6835, 6931, 7008,13701, 6794, 6808, 6808, 6822,

     6815, 6838, 7067, 6911, 6936, 6826, 6842, 6842, 6855, 6852,
     6861,13705,13709,13715,13723, 6857, 6884,13730,13734, 6886,
    13738,13742, 6886,13748, 6891,13752,13756,13760,13764,13768,
    13772,13778, 6921, 6901, 6899,13782,13786, 6933, 6901,13793,
    13797,13801,13805,13817,13821,13833,13837,13849,13859,13863,
    13867, 6905,13876,13890,27542, 6974, 6914, 6914, 6928,13895,
    13903,13907,13911,27542,13981, 6973, 6984,13923,13934,14064,
    13939,14068,13953,14072,14076,14080,14084,13970,27542,14113,
    14118, 6946, 6952, 6968,14000,14128, 6963, 7042, 7066, 7084,
    27542, 7131,27542, 6964, 6963, 6962, 6981, 6968, 7188,27542,

     6983, 6994, 6993, 7011, 6998,14133,14146,14158, 7025,14162,
    14166,14170,14176,14183, 7036, 7045,14187,14193,14197,14201,
     7061, 7029,14205,14209,14213, 7053, 7048, 7075, 7047,14217,
    14221,14234,14238,14246, 7049, 7083, 7079,14256, 7083, 7077,
        0,14265,14270,14274,14283,14301,14310,14317,14321,14328,
    14335,14339,14348,27542,14368,14372, 7079, 7088, 7231, 7241,
     7083, 7098, 7111, 7100, 7121, 7126,14376,14383,14387, 7121,
    14401,14405, 7139, 7156, 7129,14412,14416, 7156, 7149, 7171,
    14420,14428,14440,14432, 7154, 7177, 7165,14445,14452,27542,
    14456,14460,14467,14474,14487,14492,14504,14519,14523,27542,

    14531, 7271,    0, 7331,    0, 7162, 7172,14539,14544, 7210,
     7220, 7239,14548, 7248, 7217, 7260,14552,14556,14562,14577,
     7236, 7243,14581,14585,14589,14593,14597,14601,14631,27542,
        0,    0,14636,14640, 7251, 7277,14644,14648, 7283, 7257,
    14652, 7264, 7289,14656,14670,14674,14678,14682, 7288, 7309,
    14686,14690,14702, 7286,14711,14720,14724,14728,14738,14749,
     7316,14753,14758,14763,14767,27542,14782,14786,14790,14794,
    14798,14802,27542,14806,14810,14814,14819,14823,14827,14835,
    14839,14844,14852,14856,14864,14868,14872,14877,14881,14889,
    14897,14901,14906,14910,14914,14922,14926,14931,14939,14943,

    14951,14955,14959,14964,14968,14976,14984,14988,14993,14997,
    15001,15009,15013,15018,15026,15030,15038,15042,15046,15051,
    15055,15063,15071,15075,15080,15084,15088,15096,15100,15105,
    15113,15117,15125,15129,15133,15138,15142,15150,15158,15162,
    15167,15171,15175,15183,15187,15192,15200,15204,15212,15216,
    15220,15225,15229,15237,15245,15249,15254,15258,15262,15270,
    15274,15279,15287,15291,15299,15303,15307,15312,15316,15324,
    15332,15336,15341,15345,15349,15357,15361,15366,15374,15378,
    15386,15390,15394,15399,15403,15411,15419,15423,15428,15432,
    15436,15444,15448,15453,15461,15465,15473,15477,15481,15486,

    27542,15507,15539,15571,15603,15635,15667,15699,15731,15763,
    15795,15827,15859,15891,15923,15955,15987,16019,16051,16083,
    16115,16147,16179,16211,16243,16275,16307,16339,16371,16403,
    16435,16467,16499,16531,16563,16595,16627,16659,16691,16723,
    16755,16787,16819,16851,16883,16915,16947,16979,17011,17043,
    17075,17107,17139,17171,17203,17235,17267,17299,17331,17363,
    17395,17427,17459, 7340,17490,17521,17552,17583,17614,17645,
    17677,17708,17739,17770, 7365, 7426, 7371,17791, 7379, 7469,
     7388, 7488, 7392, 7518,17822,17853,17885,17916,17947,17978,
     7410, 7468,18009,18041,18073,18104,18135,18166, 7411, 7519,

     7510, 7634,18198,18230,18262, 7544,18293,18324,18355,18386,
    18418,18450,18482,18514,18546,18578,18610, 7553, 7649,18642,
     7588, 7687, 7589,18673,18705, 7594,18731, 7598, 7676,18763,
     7629, 7815,18795, 7631,18826,18858, 7650,18873, 7670, 7850,
     7686, 7851, 7734, 7918,18905,18936,18967,18998,19029,19060,
    19091,19122,19154,19186,19218, 7739, 7957, 7789, 8570,19250,
    19282,19314,19346,19378,19410,19442,19474,19506,19538, 7807,
    19570, 8058,19602,19634,19666,19698,19730,19761, 7864,19792,
    19824,19855, 7865,19886,19917,19948,19979,20010,20042,20074,
    20106,20138,20169,20200,20231,20262, 7896,20293,20324,20355,

    20386,20417,20449,20480,20511, 7919,20542, 8139,20563, 8018,
     8050, 8147, 8191, 8265,20594,20625,20656, 8183,20688,20720,
    20752,20783,20814, 7922,20845,20877,20908,20939, 7930, 8319,
     7931,20970,21002,21033,21064, 7968,21095, 8444, 8656,21127,
    21159,21191,21223,21255,21286,21317,21348, 8739, 8081,21379,
    21411,21443,21475,21507,21539,21571,21603, 8917,21635, 9143,
     8386,21666,21697,21729,21755, 9275,21787, 9655,21819,21850,
    21882,21897,21920, 9684, 9685,10031,21945,21977,22008,22039,
    22070,22101,22133,22164,22195,10110, 8106,22226,22258,22290,
    22322,22354,10143,10229,22386,22418,22450,22482,22514,22546,

    22578,22610,22642,22674,22706,22738,10152,22770,22802,22834,
    22866,22898,22930,22961,22992,23024,23055,23086,23117,23148,
     8148,10427,23179,10185, 8192,23210,23242,23274, 8480,23306,
    23338,23369,23400,23431,23462,10201,23493,23524,23555,23586,
    23618,23650,23681,23712, 8200, 8238,10332,23733,23764,23795,
    23826,23857, 8257,10822,23889,23920,23951,23983,24014,24045,
    24076,24107,24132,24164,10241,24195,24226,24257,24288,10245,
    24320,24352,24384,24416,24447,24478,24509,10334,24540,24572,
    10574,24604, 8295,10867,24635,24666, 8614,24689,24697,24729,
    24761,24792,24823,10599,24854,24886, 8854,24918,24950,24982,

    25014,25046,25078,25110,25141,25172,10680,10802,25203,25235,
     8341,25267,25298,11068,25329,25360,11079,25381,25412,25443,
    25474,25505,25536,11262,25567,25599,25630,25661,25692,25716,
    25747,25778,25803,25835,25866,25897,11268,25929,25961,25993,
    26025,26056,26087,26119,11365,26151,11403,26182, 8374,26197,
    26229,26260,26292, 8436,26324,26356,26388,26420,26452,26484,
    26516,26547,26579,26611,26642,26663,26694,11366, 8445,26725,
    26756,26787,26818,26835, 8512,26866,26898,26930,26961,26992,
    11512,27024,27055,27086,27118,27133,27164,27196,27228,27259,
    11585,27290,27321,27352, 8873, 9019,11666,27384,11707,12000,

    27416, 8539,27447,27478,27509,12280,12296
    } ;

static yyconst flex_int16_t yy_def[4108] =
    {   0,
     3602, 3602, 3601,    3, 3603, 3603, 3601,    7, 3601,    9,
     3601,   11, 3601,   13, 3601,   15, 3604, 3604, 3601,   19,
     3605, 3605, 3601,   23, 3601,   25, 3606, 3606, 3602, 3602,
     3607, 3607, 3601,   33, 3608, 3608, 3601,   37, 3601,   39,
     3602, 3602, 3602, 3602, 3609, 3609, 3610, 3610, 3611, 3611,
     3601,   51, 3612, 3612, 3613, 3613, 3614, 3614, 3614, 3614,
     3614, 3614, 3601,   63, 3601,   65, 3615, 3615, 3615, 3615,
     3602, 3602, 3616, 3616, 3616, 3616, 3617, 3617, 3618, 3618,
     3602, 3602, 3619, 3619, 3620, 3620, 3602, 3602, 3602, 3602,
     3621, 3621, 3602, 3602, 3602, 3602, 3622, 3622, 3623, 3623,

     3601,  101, 3624, 3624, 3625, 3625, 3626, 3626, 3601,  109,
     3601,  111, 3627, 3627, 3602, 3602, 3628, 3628, 3601,  119,
     3629, 3629, 3601,  123, 3630, 3630, 3601,  127, 3631, 3631,
     3601,  131, 3632, 3632, 3602, 3602, 3602, 3602, 3602, 3602,
     3601,  141, 3601,  143, 3602, 3602, 3601,  147, 3601,  149,
     3633, 3633, 3601,  153, 3602, 3602, 3602, 3602, 3601,  159,
     3602, 3602, 3634, 3634, 3601,  165, 3635, 3635, 3602, 3602,
     3636, 3636, 3637, 3637, 3638, 3638, 3601,  177, 3601,  179,
     3639, 3639, 3639, 3639, 3640, 3640, 3640, 3640, 3641, 3641,
     3642, 3642, 3643, 3643, 3644, 3644, 3645, 3645, 3646, 3646,

     3601,  201, 3647, 3647, 3648, 3648, 3649, 3649, 3650, 3650,
     3651, 3651, 3651, 3651, 3652, 3652, 3637, 3637, 3653, 3653,
     3654, 3654, 3655, 3655, 3656, 3656, 3601,  227, 3601,  229,
     3657, 3657, 3601,  233, 3658, 3658, 3659, 3659, 3660, 3660,
     3661, 3661, 3662, 3662, 3663, 3663, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3664, 3665, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3666, 3667, 3668, 3601,
     3601, 3669, 3601, 3670, 3601, 3671, 3601, 3672, 3673, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3674, 3674, 3674,
     3601, 3601, 3601, 3601, 3675, 3601, 3601, 3601, 3601, 3676,

     3677, 3678, 3678, 3601, 3679, 3601, 3680, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3681, 3601, 3601, 3601, 3682, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3683, 3601,
     3601, 3684, 3601, 3685, 3601, 3685, 3685, 3601, 3601, 3601,
     3601, 3686, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3687, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3688, 3601,
     3689, 3601, 3601, 3690, 3601, 3601, 3601, 3601, 3691, 3601,
     3601, 3601, 3601, 3601, 3692, 3693, 3693, 3694, 3601, 3693,

     3693, 3693, 3693, 3693, 3693, 3693, 3693, 3693, 3693, 3693,
     3693, 3693, 3693, 3693, 3693, 3693, 3693, 3601, 3695, 3601,
     3695, 3695, 3695, 3695, 3601, 3601, 3601, 3696, 3697, 3601,
     3698, 3601, 3601, 3601, 3601, 3699, 3601, 3601, 3601, 3601,
     3601, 3700, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601,  475, 3701, 3601, 3601, 3601,
     3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702, 3702, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3703, 3703, 3601, 3601, 3601,
     3704, 3705, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3706,
     3601, 3707, 3707, 3601, 3601, 3708, 3709, 3601, 3710, 3711,
     3711, 3601, 3601, 3601, 3712, 3601, 3601, 3601, 3601, 3601,
     3711, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3713, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3714, 3714, 3714, 3714, 3714, 3601, 3714, 3715, 3601, 3715,
     3715, 3715, 3715, 3715, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3716, 3601, 3716, 3716, 3716, 3601, 3601, 3717, 3601,
     3717, 3717, 3717, 3717, 3718, 3601, 3719, 3719, 3719, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3720, 3601, 3601, 3720, 3720, 3720, 3601, 3601,
     3601, 3720, 3721, 3601, 3722, 3723, 3724, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3725, 3601, 3601, 3601, 3726, 3727, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3728, 3601,
     3601, 3601, 3601, 3729, 3601, 3730, 3601, 3601, 3730, 3730,
     3730, 3731, 3601, 3601, 3601, 3732, 3601, 3733, 3733, 3733,

     3733, 3733, 3601, 3733, 3734, 3601, 3601, 3601, 3735, 3736,
     3736, 3736, 3736, 3736, 3601, 3736, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3737, 3601, 3738, 3738,
     3738, 3739, 3740, 3601, 3601, 3601, 3601, 3601, 3741, 3742,
     3743, 3744, 3601, 3601, 3601, 3601, 3601, 3745, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3746, 3746, 3746, 3747, 3601, 3601, 3748, 3748, 3748, 3748,
     3601, 3601, 3601, 3601, 3749, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3750,
     3601, 3601, 3751, 3601, 3601, 3601, 3752, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3753, 3754, 3601, 3601,
     3601, 3601, 3755, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3756, 3757, 3758, 3601,
     3759, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3760, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3761, 3601,
     3601, 3762, 3601, 3601, 3762, 3763, 3601, 3601, 3762, 3764,
     3601, 3601, 3764, 3765, 3601, 3601, 3601, 3766, 3601, 3601,
     3766, 3767, 3601, 3601, 3601, 3768, 3601, 3601, 3768, 3769,
     3601, 3601, 3601, 3768, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3770,
     3771, 3601, 3601, 3772, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3773, 3601, 3601, 3773, 3601, 3773, 3774,
     3601, 3601, 3775, 3775, 3601, 3601, 3601, 3601, 3601, 3776,
     3601, 3776, 3776, 3776, 3601, 3776, 3601, 3776, 3601, 3777,
     3601, 3777, 3777, 3777, 3777, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3778, 3778, 3601, 3601, 3779, 3601, 3601, 3601, 3780, 3781,
     3782, 3782, 3783, 3784, 3601, 3601, 3601, 3601, 3785, 3601,

     3601, 3601, 3601, 3601, 3786, 3601, 3601, 3787, 3601, 3601,
     3601, 3601, 3601, 3788, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3789, 3601, 3789, 3789,
     3789, 3789, 3790, 3790, 3601, 3790, 3790, 3790, 3601, 3601,
     3790, 3601, 3601, 3790, 3791, 3601, 3792, 3601, 3792, 3792,
     3601, 3792, 3601, 3601, 3601, 3601, 3792, 3601, 3601, 3601,
     3793, 3601, 3601, 3793, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3794, 3601, 3601, 3795, 3795, 3796, 3601, 3795,
     3797, 3798, 3794, 3794, 3799, 3800, 3797, 3601, 3601, 3601,

     3798, 3601, 3601, 3601, 3801, 3801, 3802, 3601, 3601, 3601,
     3601, 3803, 3803, 3601, 3804, 3804, 3805, 3804, 3806, 3807,
     3601, 3601, 3601, 3806, 3601, 3601, 3601, 3807, 3807, 3807,
     3808, 3601, 3601, 3808, 3809, 3601, 3810, 3809, 3811, 3809,
     3812, 3812, 3601, 3601, 3601, 3601, 3601, 3813, 3813, 3814,
     3814, 3815, 3815, 3815, 3816, 3816, 3601, 3601, 1158, 3815,
     3816, 3816, 3817, 3601, 3601, 3601, 3818, 3816, 3601, 3601,
     3601, 3601, 3601, 3819, 3820, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3821, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3822, 3822, 3823, 3601, 3601, 3601, 3822, 3824,
     3825, 3826, 3601, 3601, 3827, 3827, 3601, 3828, 3601, 3601,
     3601, 3829, 3830, 3824, 3601, 3601, 3831, 3832, 3832, 3832,
     3832, 3832, 3832, 3601, 3825, 3601, 3825, 3821, 3601, 3825,
     3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825,
     3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825,
     3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825,
     3833, 3833, 3833, 3601, 3601, 3601, 3834, 3834, 3835, 3834,
     3836, 3837, 3836, 3601, 3837, 3601, 3601, 3601, 3601, 3838,
     3601, 3601, 3838, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3839, 3601, 3601, 3601,
     3601, 3839, 3839, 3839, 3839, 3839, 3839, 3839, 3839, 3839,
     3839, 3601, 3601, 3601, 3840, 3840, 3601, 3601, 3841, 3841,
     3842, 3843, 3601, 3844, 3601, 3601, 3601, 3845, 3601, 3846,
     3845, 3601, 3845, 3601, 3601, 3847, 3847, 3848, 3847, 3849,
     3850, 3849, 3850, 3851, 3851, 3601, 3852, 3853, 3601, 3601,
     3601, 3601, 3601, 3851, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3854, 3854, 3601, 3601, 3601, 3854, 3855, 3601, 3855,
     3855, 3855, 3601, 3601, 3856, 3856, 3856, 3857, 3857, 3857,

     3858, 3858, 3858, 3858, 3601, 3859, 3601, 3601, 3601, 3601,
     3859, 3859, 3859, 3860, 3861, 3860, 3862, 3601, 3863, 3862,
     3601, 3601, 3601, 3601, 3601, 3864, 3601, 3865, 3601, 3865,
     3866, 3601, 3601, 3866, 3867, 3601, 3867, 3867, 3868, 3601,
     3601, 3868, 3869, 3869, 3869, 3870, 3601, 3601, 3601, 3870,
     3601, 3871, 3601, 3871, 3871, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3872, 3872, 3601, 3873, 3872, 3872, 3874, 3874,
     3601, 3601, 3601, 3601, 3875, 3875, 3876, 3876, 3877, 3878,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3879, 3879, 3880,
     3601, 3601, 3880, 3601, 3601, 3881, 3881, 3881, 3882, 3601,

     3882, 3883, 3601, 3884, 3601, 3601, 3601, 3885, 3885, 3886,
     3885, 3887, 3888, 3887, 3888, 3601, 3601, 3601, 3601, 3601,
     3601, 3889, 3601, 3890, 3601, 3891, 3892, 3601, 3601, 3601,
     3601, 3601, 3893, 3893, 3894, 3894, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3895, 3896, 3897, 3895, 3895,
     3898, 3899, 3900, 3901, 3902, 3903, 3904, 3905, 3906, 3904,
     3601, 3601, 3601, 3601, 3601, 3601, 3907, 3908, 3909, 3907,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3910, 3910, 3910,
     3601, 3911, 3912, 3601, 3912, 3601, 3601, 3912, 3601, 3601,
     3913, 3913, 3913, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3914, 3914, 3915, 3916, 3917, 3601,
     3601, 3601, 3917, 3916, 3601, 3918, 3918, 3919, 3920, 3601,
     3601, 3920, 3601, 3921, 3601, 3922, 3601, 3601, 3601, 3923,
     3923, 3924, 3923, 3925, 3926, 3925, 3926, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3927, 3601, 3601, 3601,
     3927, 3927, 3928, 3928, 3928, 3601, 3601, 3601, 3601, 3928,
     3928, 3929, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3928, 3930, 3601, 3601, 3930, 3601, 3931, 3601, 3601, 3601,
     3601, 3601, 3601, 3931, 3601, 3601, 3601, 3601, 3601, 3601,
     3932, 3933, 3601, 3934, 3935, 3935, 3936, 3937, 3938, 3601,

     3939, 3940, 3601, 3941, 3601, 3601, 3942, 3943, 3601, 3944,
     3944, 3601, 3601, 3945, 3946, 3947, 3948, 3949, 3950, 3951,
     3951, 3952, 3953, 3954, 3951, 3601, 3601, 3601, 3601, 3955,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3956,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3957, 3601, 3601, 3958, 3601, 3959, 3601, 3601, 3960,
     3961, 3601, 3962, 3601, 3601, 3963, 3601, 3601, 3601, 3964,
     3601, 3965, 3956, 3601, 3601, 3601, 3966, 3966, 3966, 3966,

     3966, 3966, 3966, 3966, 3601, 3967, 3967, 3967, 3601, 3601,
     3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
     3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
     3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
     3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967, 3967,
     3601, 3601, 3968, 3969, 3601, 3963, 3601, 3964, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3963, 3601,
     3601, 3964, 3601, 3970, 3970, 3970, 3970, 3970, 3970, 3970,
     3970, 3970, 3601, 3601, 3971, 3972, 3973, 3601, 3601, 3601,
     3601, 3601, 3601, 3974, 3601, 3601, 3975, 3975, 3976, 3977,

     3978, 3979, 3980, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3981, 3981, 3601, 3982, 3982, 3982, 3983,
     3984, 3985, 3985, 3601, 3986, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3963, 3601, 3964, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3987, 3988, 3601, 3989, 3989,
     3601, 3601, 3601, 3601, 3601, 3990, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3991, 3601, 3992, 3992, 3601,
     3993, 3601, 3994, 3995, 3601, 3601, 3996, 3601, 3601, 3601,
     3601, 3601, 3601, 3997, 3998, 3601, 3601, 3601, 3999, 3601,
     3601, 3601, 4000, 3601, 3601, 3601, 4001, 3601, 3601, 3601,

     4002, 3601, 3601, 3601, 4003, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 4004,
     3601, 4005, 3601, 3601, 3601, 4006, 4007, 3601, 3601, 4008,
     4009, 3601, 3601, 3601, 3601, 3601, 4010, 4010, 4011, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 4012, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 4013, 4014, 4015,
     3601, 3601, 3601, 3601, 3601, 4016, 4016, 3601, 4017, 3601,
     4018, 4019, 4020, 4019, 3601, 4021, 4022, 4023, 4024, 4025,
     3601, 3601, 3601, 3601, 4026, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 4027, 4027, 4028, 3601, 3601, 4029, 4029, 3601,
     4030, 4031, 4032, 3601, 3601, 3601, 3601, 3601, 4033, 3601,
     3601, 3601, 3601, 3601, 4034, 3601, 4035, 4035, 4035, 4035,
     4035, 4035, 4035, 4035, 4036, 4036, 4036, 4036, 4036, 4036,
     4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036,
     4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036,
     4036, 4036, 4036, 4036, 4036, 4036, 3601, 4036, 4036, 4036,

     4036, 4036, 4036, 4036, 4036, 4036, 4036, 4036, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     4037, 4037, 3601, 4037, 4037, 4037, 4037, 3601, 4037, 4038,
     3601, 4039, 4040, 3601, 3601, 3601, 4041, 3601, 4042, 4043,
     4044, 3601, 3601, 3601, 3601, 3601, 4045, 4045, 3601, 4046,
     4046, 4046, 4047, 4048, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 4049, 4050, 4050, 3601, 3601,
     3601, 3601, 3601, 4051, 3601, 3601, 3601, 3601, 4052, 3601,
     4053, 3601, 3601, 3601, 3601, 4054, 4055, 3601, 3601, 4056,
     3601, 3601, 4057, 3601, 3601, 4058, 3601, 3601, 4059, 3601,

     3601, 4060, 3601, 3601, 3601, 3601, 3601, 4061, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 4062, 3601, 3601, 3601,
     3601, 3601, 4063, 4063, 3601, 3601, 2326, 3601, 4064, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 4065, 4065,
     4066, 4067, 4067, 4068, 3601, 4069, 4069, 4070, 4071, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 4072, 3601, 4073, 3601, 4074, 4074, 4075,
     4076, 3601, 4077, 4077, 4078, 3601, 4079, 4079, 4079, 4079,
     4079, 4079, 4079, 4079, 4080, 4080, 4080, 4080, 4080, 4080,
     4080, 4080, 4080, 4080, 3601, 3601, 3601, 3601, 4080, 3601,
     3601, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080,
     4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080,
     4080, 3601, 3601, 4080, 4080, 4080, 4080, 4080, 4080, 4080,
     4080, 4080, 4080, 4080, 4080, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 4081, 4081, 4081, 4081, 4081, 4081, 4081,
     3601, 3601, 4082, 3601, 3601, 3601, 3601, 4083, 3601, 3601,

     3601, 3601, 4084, 4084, 3601, 4085, 4085, 4085, 4085, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 4086, 4086,
     3601, 3601, 3601, 3601, 3601, 3601, 4087, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 4088, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 4089, 4089, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     4090, 4090, 4091, 4092, 4071, 3601, 3601, 3601, 3601, 2358,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 4093, 4073, 3601, 4076, 4077, 4079, 4079,
     4079, 4079, 4079, 4079, 4079, 4079, 4079, 4080, 4080, 4080,
     4080, 4080, 3601, 3601, 4080, 3601, 4080, 4080, 3601, 3601,
     3601, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080,
     4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080, 4080,
     4080, 3601, 3601, 4080, 4080, 4080, 4080, 4080, 4080, 4080,
     3601, 3601, 3601, 3601, 4080, 4080, 4080, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 4081, 3601, 4081, 4081, 4081, 3601,
     3601, 4081, 4081, 3601, 4083, 3601, 4084, 4085, 4085, 4085,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 4086, 3601,
     4094, 3601, 4088, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 4089, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 4090,
     3601, 3601, 3601, 4071, 3601, 3601, 3601, 3601, 2358, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 4079, 4079, 4079, 4079, 4079, 4079,
     4079, 4079, 4080, 4080, 4080, 4080, 4080, 4080, 3601, 3601,
     3601, 3601, 4080, 3601, 3601, 4080, 4080, 3601, 3601, 3601,
     4080, 4080, 4080, 3601, 4080, 4080, 3601, 3601, 4080, 4080,
     3601, 4080, 4080, 4080, 4080, 4080, 3601, 3601, 4080, 4080,
     3601, 3601, 2852, 4080, 3601, 3601, 3601, 4080, 4080, 4080,
     3601, 3601, 4080, 4080, 4080, 3601, 3601, 3601, 3601, 3601,
     3601, 4081, 4081, 3601, 3601, 3601, 3601, 4081, 3601, 4083,

     4084, 4085, 4085, 4085, 4095, 3601, 3601, 3601, 4096, 4086,
     3601, 4094, 4097, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 4098,
     3601, 3601, 3601, 3601, 3601, 4071, 3601, 3601, 3601, 2358,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 4079, 4079, 4079, 4079, 4079, 4079, 3601,

     4079, 4080, 4080, 4080, 4080, 4080, 3601, 3601, 3601, 3601,
     4080, 3601, 3601, 4080, 4080, 3601, 3601, 3601, 3601, 3601,
     3601, 4080, 4080, 4080, 4080, 3601, 3601, 3601, 3601, 4080,
     3601, 3601, 4080, 4080, 4080, 4080, 4080, 3601, 4080, 4080,
     3601, 3601, 4080, 3601, 3601, 3601, 4080, 3601, 3601, 4080,
     3601, 3601, 3601, 3601, 4081, 4081, 4081, 3601, 4083, 4085,
     4085, 4085, 4095, 4099, 3601, 3601, 3601, 4096, 4100, 3601,
     4097, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 4071, 3601, 2358, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 4079, 4079, 4079, 3601, 4079, 4079,
     4079, 4080, 4080, 3601, 4080, 3601, 3601, 4080, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 4080, 3601, 4080, 3601, 3601,
     4080, 3601, 4080, 4080, 4080, 3601, 4080, 4080, 4080, 3601,
     3601, 4080, 3601, 3601, 3601, 3601, 3601, 3601, 4080, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 4083, 4085, 4099, 3601,
     4100, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 4071, 3601, 2358, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 4101, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 4079, 4079, 3601, 4079, 3601, 3601, 4080, 4080, 4080,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 4080,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 4080, 4080, 4080,
     4080, 3601, 3601, 4080, 4080, 4080, 4080, 3601, 3601, 3601,
     4080, 3601, 3601, 3601, 3601, 3601, 4085, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 4071, 2358, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 4101,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 4079,
     3601, 3601, 4080, 3601, 3601, 3601, 3601, 4080, 3601, 3601,
     4102, 4103, 4103, 4080, 4080, 3601, 3601, 3601, 4080, 4080,
     4080, 4080, 3601, 3601, 4080, 3601, 3601, 4085, 4104, 4105,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 2358, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 4079, 4080, 3601, 3601, 3601, 3601, 3601, 4103, 3601,
     4080, 4080, 3601, 4080, 4080, 4080, 3601, 3601, 3601, 3601,

     3601, 4104, 4106, 4105, 4107, 3601, 3601, 2358, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 4079, 3601,
     3601, 3601, 4080, 3601, 3601, 4080, 4080, 3601, 3601, 3601,
     4106, 4107, 2358, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     4079, 3601, 3601, 3601, 4080, 4080, 2358, 3601, 3601, 3601,
     3601, 4079, 3601, 3601, 4080, 3601, 3601, 2358, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 2358, 3601,
     3601, 3601, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,
     3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,
     3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,

     3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,
     3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,
     3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,
     3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,
     3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,
     3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,
     3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,
     3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,
     3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,
     3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358, 3601, 2358,

        0, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601
    } ;

static yyconst flex_int16_t yy_nxt[27627] =
    {   0,
     3601, 3601,  249, 3601,  249, 3601,  250,  251,  250,  251,
     1214,  252, 3601,  252, 1214, 1069, 1079, 1080, 3601,  253,
     1070,  253,  248,  248,  249,  248,  248,  248,  250,  251,
      254,  248,  248,  252,  248,  248,  248,  248,  248,  248,
      248,  253,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  248,  248,  248,  248,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  248,  248,  248,  255,  257,  258,  257,  257,
     1077,  259,  260, 1212, 1213, 1078,  261,  257,  258,  257,
      257,  249,  259,  260,  262,  309,  310,  261, 1122, 2593,
      311,  312,  313, 1123, 1104,  262,  249, 1104,  314, 1132,
      370,  371, 1368, 1369, 1133,  372,  315,  249,  316, 1069,
      373,  250,  251,  374, 1070, 1072,  252,  263, 1072, 1147,
      375, 1423, 1147, 1214,  253, 1424, 1073, 1214,  263,  248,
      264,  265,  266,  264,  267,  250,  251,  268,  248,  248,
      252,  248,  248,  248,  248,  248,  248,  269,  253,  248,
      248,  248,  248,  248,  270,  271,  248,  248,  248,  248,

      248,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      248,  248,  248,  248,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  273,
      248,  274,  272,  248,  275,  276,  277,  275,  278,  250,
      251,  279,  248,  280,  252,  281,  248,  280,  282,  283,
      282,  248,  284,  248,  248,  248,  248,  248,  285,  280,
      286,  280,  248,  248,  287,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,

      288,  288,  288,  288,  281,  248,  248,  248,  288,  289,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  290,  288,  288,  288,
      288,  288,  288,  273,  248,  278,  288,  291,  291,  292,
      291,  291,  291,  293,  294,  295,  291,  291,  296,  291,
      291,  291,  291,  291,  291,  291,  297,  291,  291,  291,
      291,  291,  298,  299,  291,  291,  291,  291,  291,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  291,  291,
      291,  291,  300,  300,  300,  300,  300,  300,  300,  300,

      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  291,  291,  291,
      300,  291,  291,  292,  291,  291,  291,  293,  294,  301,
      291,  291,  296,  291,  291,  291,  291,  291,  291,  291,
      297,  291,  291,  291,  291,  291,  291,  299,  291,  291,
      291,  291,  291,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  291,  291,  291,  291,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  303,  302,

      302,  304,  291,  291,  302,  248,  248,  249,  248,  248,
      248,  250,  251,  305,  248,  248,  252,  248,  306,  248,
      248,  248,  248,  248,  253,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  248,  248,  248,  248,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  248,  248,  248,  307,  249,
     1069, 2323,  249,  309,  310, 1070,  461,  462,  311,  312,

      313,  463,  464,  465, 1170, 1171,  314, 1170, 1172,  466,
     1121, 1121, 1121, 1121,  315, 2323,  316,  317,  318,  319,
      317,  318,  317,  320,  321,  322,  317,  317,  323,  317,
      317,  317,  317,  317,  317,  317,  324,  317,  317,  317,
      317,  317,  317,  325,  317,  317,  317,  317,  317,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  327,  317,
      317,  317,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  328,  317,  317,

      326,  249, 2594,  249, 1069,  330,  331,  330,  331, 1070,
      332, 1069,  332, 1378, 1379, 1689, 1070,  249,  333,  420,
      333,  370,  371,  421,  422, 1069,  372, 1069,  423, 1689,
     1070,  373, 1070,  249,  374, 1220,  424,  250,  251, 2595,
     1221,  375,  252, 1465,  425, 1466, 1086, 1086, 1086, 1086,
      253, 2596,  334, 1087,  334,  335,  335,  336,  335,  335,
      335,  337,  338,  339,  335,  335,  340,  335,  335,  335,
      335,  335,  335,  335,  341,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,

      342,  342,  342,  342,  342,  342,  335,  335,  335,  335,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  342,  342,  343,  335,  335,  342,  248,
      344,  345,  346,  344,  248,  250,  251,  347,  248,  248,
      252,  248,  248,  248,  282,  348,  282,  248,  284,  248,
      248,  248,  248,  248,  349,  271,  350,  248,  351,  248,
      287,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      248,  248,  248,  248,  352,  352,  352,  352,  352,  352,

      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  353,
      248,  248,  352,  355,  356,  355,  355, 1330,  357,  358,
     1330, 2597, 1136,  359,  355,  356,  355,  355, 1137,  357,
      358,  360, 1136, 2598,  359,  249, 1272, 1139, 1137,  363,
      251, 1273,  360, 1291,  364,  365,  249, 1139, 1292,  366,
      363,  251,  253, 1077, 1206,  364,  365, 1206, 1078,  367,
      366, 2599,  420,  253,  249, 1335,  421,  422,  461,  462,
      367,  423, 1069,  463,  464,  465, 1411, 1070, 1412,  424,
      249,  466,  361, 1140,  250,  251, 1319,  425,  362,  252,

      587,  588, 2600,  361, 1413, 1320, 2037,  253, 1689,  362,
      434,  433,  434,  434, 1069,  250,  251, 1689, 1356, 1070,
      252, 1356, 1207,  368, 1105, 1105, 1105, 1105,  444, 1337,
     1356, 1106, 2037, 1356,  368,  248,  376,  377,  378,  376,
      379,  250,  380,  381,  382,  383,  252,  384,  248,  383,
      385,  386,  385,  387,  388,  389,  389,  389,  389,  389,
      390,  391,  392,  393,  248,  394,  395,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      397,  396,  396,  396,  396,  396,  398,  248,  248,  399,
      400,  401,  396,  402,  403,  404,  405,  406,  396,  407,

      408,  409,  410,  411,  396,  412,  396,  413,  414,  415,
      416,  417,  396,  396,  396,  418,  248,  379,  396,  248,
      426,  427,  426,  426,  428,  250,  251,  429,  248,  248,
      252,  248,  248,  248,  248,  248,  248,  248,  253,  248,
      248,  248,  248,  248,  430,  248,  248,  248,  248,  248,
      248,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      248,  248,  248,  248,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  431,
      431,  431,  431,  431,  431,  431,  431,  431,  431,  248,

      248,  428,  431,  248,  432,  433,  434,  432,  248,  250,
      435,  436,  248,  248,  252,  437,  248,  248,  248,  438,
      248,  248,  439,  248,  248,  248,  248,  248,  248,  440,
      248,  441,  248,  248,  248,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  443,  248,  248,  248,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  248,  248,  248,  442,  434,  433,  434,
      434, 1069,  250,  251,  249, 1308, 1070,  252,  250,  445,

     1309, 1308, 1069,  252,  446,  444, 1309, 1070,  447, 1586,
      249,  253, 1389, 1289,  250,  445, 1289,  448,  449,  252,
      446, 1333, 1380, 1381,  447, 1587, 1334,  253, 1112, 1112,
     1113, 1112, 1764,  448,  449,  451,  452,  451,  451, 1359,
      453,  454, 1765, 1389, 1360,  455,  456,  457, 1355, 2601,
      458, 1355, 1114,  459, 1328,  451,  452,  451,  451,  468,
      453,  454, 1390,  469,  470,  455,  456,  457,  471, 1366,
      458, 1207,  447,  459, 1367,  468,  472,  491, 2602,  469,
      470,  492,  493,  473,  471, 1373,  494,  495,  447, 1465,
     1374, 1466,  472, 1390,  496, 1219, 1219, 1219, 1219,  473,

      491,  497,  498,  610,  492,  493, 1359,  611,  612,  494,
      495, 1376,  613,  572,  249, 2603,  572,  496,  573,  574,
      614, 1952, 1069,  575,  497,  498,  576, 1070, 1386,  572,
      249,  577,  572, 1387,  573,  574, 1953,  474, 1383,  575,
     2515, 1383,  576, 1115, 1115, 1115, 1115,  577, 2516, 1440,
     1116, 1384, 1440,  474,  450,  475,  476,  475,  475,  450,
      453,  454,  477,  450,  450,  455,  450,  450,  450,  450,
      478,  450,  450,  479,  450,  450,  450,  450,  450,  478,
      478,  450,  480,  450,  450,  450,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  450,  450,  450,  450,  481,
      482,  481,  483,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  484,  485,  481,  481,  486,  487,  488,  481,
      489,  481,  481,  481,  478,  450,  450,  481,  249, 1069,
     2604,  249,  500,  501, 1070,  500,  501,  502, 1602, 1603,
      502,  507,  508,  509,  507,  503,  510,  511,  503, 1396,
     1453,  512, 1943, 1453, 1397,  507,  508,  509,  507,  513,
      510,  511, 1389, 1682, 1683,  512, 1075, 1075, 1075, 1075,
     1944,  514, 1364,  513, 2605, 1364, 1399,  504, 1365,  505,
      504, 1400,  505, 1389, 1076,  514,  507,  508,  509,  507,

     1069,  510,  511, 1368, 1369, 1070,  512,  507,  508,  509,
      507, 1393,  510,  511,  513, 1378, 1379,  512,  507,  508,
      509,  507, 1390,  510,  511,  513,  514, 1069,  512,  249,
      515,  516, 1070,  250,  251, 2607,  513,  514,  252, 1082,
     1082, 1082, 1082, 1390,  515,  516,  253, 2608,  518,  507,
      508,  509,  507,  549,  510,  511, 1083,  550,  551,  512,
     1227, 1390,  552, 1084, 1409,  553, 1069,  513,  549, 1410,
      554, 1070,  550,  551, 2609,  515,  517,  552, 1069,  518,
      553, 1703, 2102, 1070,  249,  554,  515,  517,  250,  251,
     1704, 1429, 2103,  252,  587,  588, 1429,  515,  519, 2610,

      249,  253,  249,  555,  250,  251,  250,  251,  547,  252,
     1229,  252,  600,  601, 2611, 1069, 1230,  253,  555,  253,
     1070, 1231, 1232, 1462, 1233,  598, 1462,  599,  515,  519,
      248,  248,  249,  248,  248,  248,  250,  251,  520,  248,
      248,  252,  248,  248,  248,  248,  248,  248,  248,  253,
      248,  248,  248,  248,  248,  248,  521,  248,  248,  248,
      248,  248,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  248,  248,  248,  248,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  523,  522,

      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      248,  248,  248,  522,  248,  524,  525,  524,  524,  526,
      250,  251,  527,  248,  248,  252,  248,  248,  248,  248,
      248,  248,  248,  253,  248,  248,  248,  248,  248,  528,
      248,  248,  248,  248,  248,  248,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  248,  248,  248,  248,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  248,  248,  526,  529,  531,  532,

     2612,  531, 1432,  533,  534, 1389, 1437, 1433,  535,  541,
      532, 1438,  541, 1444,  533,  542,  536, 1391, 1445,  535,
      531,  543, 1392,  531, 1454,  544,  534,  536,  537, 1455,
      535,  249, 1465, 1712, 1466,  250,  251, 1712,  545,  537,
      252, 1075, 1075, 1075, 1075, 2558, 1712, 1712,  253,  538,
      537,  531,  543, 2559,  531, 1390,  544,  534,  549, 1076,
      538,  535,  556,  551, 1380, 1381, 1983,  557, 1482,  545,
      553,  546, 2613, 1483, 1308,  554, 1467,  539,  540, 1309,
     1983,  537, 1108, 1109, 1109, 1108,  549, 2507,  539,  540,
      556,  551,  532, 2092, 2093,  557,  558,  559,  553,  538,

      538,  535,  546,  554, 1560, 2508, 1110, 1560,  555,  560,
      547, 1164, 1164, 1164, 1164,  532,  561, 2614,  579,  558,
      559,  537,  580,  581,  535, 1104, 1104,  582, 1104, 1104,
      538,  538,  560,  564,  565,  583,  555,  566,  567,  561,
     1069, 1465,  568, 1466,  537, 1070, 1865,  564,  565,  579,
      569,  566,  567,  580,  581, 1866,  568, 1494,  582, 1389,
     1494, 1085, 1495, 1660,  569, 2615,  583,  249,  584,  249,
      562,  250,  251,  250,  251, 2153,  252, 1661,  252, 1294,
     1294, 1294, 1294,  570,  253, 1468,  253,  249, 2211, 1660,
     1165,  603,  604,  562, 1295, 1588,  605,  570, 1588,  584,

      590,  591,  590,  590,  606,  592,  593, 2124, 1589, 1390,
      594,  590,  591,  590,  590,  249,  592,  593,  595,  250,
      251,  594, 1069, 2125,  252, 1069,  596, 1070,  597,  595,
     1070, 1684,  253, 1751, 1684, 2616,  607,  596,  608,  597,
      598, 1752,  599, 1753, 1685,  585,  586,  585,  586,  249,
     1530, 2617,  249,  250,  251, 1531,  603,  604,  252,  600,
      601,  605, 1642,  610, 2618, 1642,  253,  611,  612,  606,
      249, 1069,  613,  249,  250,  251, 1070,  250,  251,  252,
      614, 1643,  252, 1296, 1296, 1296, 1296,  253, 2148, 2149,
      253, 1326, 1327, 1327, 1326,  660, 1147, 1328,  660, 1147,

     1465,  607, 1466,  608,  248,  248,  249,  248,  248,  248,
      250,  251,  615,  248,  248,  252,  248,  248,  248,  248,
      248,  248,  248,  253,  248,  248,  248,  248,  248,  248,
      616,  248,  248,  248,  248,  248,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  248,  248,  248,  248,  617,
      617,  617,  618,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      619,  617,  617,  617,  248,  248,  248,  617,  621, 1868,
      621, 1539,  622,  623,  622,  623, 1540,  624, 1869,  624,

     1322, 1322, 1322, 1322,  249,  625,  249,  625,  628,  629,
      628,  629, 1323,  630, 1689,  630, 1081, 1082, 1082, 1081,
     1465,  631, 1466,  631,  634,  635,  634,  634, 1689,  636,
      637, 1543, 1170, 1083,  638, 1170, 1544,  639, 1549, 1069,
     1084,  640,  641, 1550, 1070, 1069,  634,  635,  634,  634,
     1070,  636,  637, 1069,  642, 2619,  638, 2088, 1070,  639,
      632, 1950,  632,  640,  641,  662,  626, 1069,  626,  663,
      664, 2088, 1070, 1069,  665,  642,  642, 2620, 1070,  662,
     1069, 1069,  666,  663,  664, 1070, 1070, 2621,  665, 1327,
     1327, 1327, 1327, 2148, 2155, 1085,  666,  642,  248,  248,

      249,  248,  248,  248,  250,  251,  643,  248,  248,  252,
      248,  248,  248,  248,  248,  248,  248,  253,  248,  248,
      248,  248,  248,  248,  644,  248,  248,  248,  248,  248,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  248,
      248,  248,  248,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  248,  248,
      248,  645,  248,  248,  249,  248,  248,  248,  250,  251,
      646,  248,  248,  252,  248,  248,  248,  248,  248,  248,

      248,  253,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  248,  248,  248,  248,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  248,  248,  248,  647,  649, 1868,  649, 1069,
      650,  651,  650,  651, 1070,  652, 1869,  652, 1176, 1176,
     1176, 1176,  249,  653,  249,  653,  670,  671,  670,  671,
     1579,  672, 1069,  672, 2622, 1580, 1177, 1070,  687,  673,

      687,  673,  688,  689,  688,  689,  674,  690,  674,  690,
     1082, 1082, 1082, 1082,  699,  691, 2623,  691,  700,  701,
      654, 1561,  654,  702, 1561,  703,  655, 1083,  655, 2389,
     1069,  704, 1562, 2390, 1084, 1585,  656,  657,  656,  657,
     1327, 1327, 1327, 1327,  658,  659,  658,  659,  248,  248,
      249,  248,  248,  248,  250,  251,  667,  248,  248,  252,
      248,  248,  248,  248,  248,  248,  248,  253,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  248,

      248,  248,  248,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  668,  668,  668,  248,  248,
      248,  668,  675,  676,  433,  676,  676,  675,  677,  678,
      679,  675,  675,  680,  675,  675,  675,  675,  681,  675,
      675,  682,  675,  675,  675,  675,  675,  675,  683,  675,
      675,  675,  675,  675,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  675,  675,  675,  675,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,

      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  685,  675,  675,  684,  248,  248,  249,  248,
      248,  248,  250,  251,  692,  248,  248,  252,  693,  248,
      248,  248,  248,  248,  248,  253,  248,  248,  248,  248,
      248,  694,  695,  248,  248,  248,  248,  248,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  248,  248,  248,
      248,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
      696,  696,  696,  696,  696,  696,  697,  248,  248,  696,

      699, 1592, 1069, 1069,  700,  701, 1593, 1070, 1070,  702,
     2624,  703, 1336, 1336, 1336, 1336, 2625,  704,  248,  248,
      249,  248,  248,  248,  250,  251,  705,  248,  248,  252,
      706,  248,  248,  248,  707,  248,  248,  253,  248,  248,
      248,  248,  248,  708,  695,  248,  248,  248,  248,  248,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  248,
      248,  248,  248,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  697,  248,

      248,  709,  711, 1069, 2626,  711,  712,  713, 1070,  712,
      713,  714, 1069,  715,  714, 1170,  715, 1070, 1170,  716,
      249, 1069,  716,  249,  250,  251, 1070,  250,  251,  252,
      249, 1069,  252, 1069,  250,  251, 1070,  253, 1070,  252,
      253,  718, 2148, 2149, 2629,  717,  249,  253,  717,  249,
      250,  251,  249,  250,  251,  252,  250,  251,  252, 1069,
      718,  252, 1648,  253, 1070, 1465,  253, 1466,  249,  253,
      725, 2572,  250,  251, 1651, 2630,  725,  252,  765, 1652,
     1109, 1109, 1109, 1109,  719,  253,  720, 1656, 1654,  249,
      721, 1654, 1657,  250,  251, 2572,  722, 1658,  252,  765,

      723,  724, 1659,  719, 1110,  720,  253, 1933, 1949,  721,
     1203, 1203, 1203, 1203, 1655,  722, 1934, 1204, 2631,  723,
      724,  248,  726,  249,  248,  726,  248,  250,  251,  727,
      248,  248,  252,  728,  248,  248,  248,  248,  248,  248,
      253,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  248,  248,  248,  248,  729,  729,  729,  730,
      729,  729,  729,  729,  729,  729,  729,  729,  729,  729,
      729,  729,  729,  729,  729,  729,  729,  731,  729,  729,

      729,  248,  248,  248,  729,  248,  248,  249,  248,  248,
      248,  250,  251,  732,  248,  248,  252,  248,  248,  248,
      248,  248,  248,  248,  253,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  248,  248,  248,  248,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  248,  248,  248,  733,  249,
     1675, 1658, 1679,  250,  251, 1657, 1676, 1680,  252,  249,

      734, 2632, 1687,  250,  251, 2633,  253, 1688,  252,  249,
      734, 2573, 1623,  250,  251, 1623,  253, 2089,  252, 1624,
      766, 1625,  735, 2148, 2155, 1625,  253, 1178, 1178, 1178,
     1178, 2089,  735,  736,  737, 2573,  738, 1394, 1394, 1394,
     1394, 2634, 2636,  736,  737, 1179,  738,  248,  248,  249,
      248,  248,  248,  250,  251,  739,  248,  248,  252,  248,
      248,  248,  248,  248,  248,  248,  253,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  248,  248,

      248,  248,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  248,  248,  248,
      740,  248,  248,  249,  248,  248,  248,  250,  251,  741,
      248,  248,  252,  248,  248,  248,  248,  248,  248,  248,
      253,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  248,  248,  248,  248,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  248,  248,  248,  742,  744,  745,  744,  744,  799,
      746,  747, 2462,  800,  801,  748,  749,  750,  802,  803,
      751,  752, 1649,  753, 1726, 1649,  804, 2463, 2414, 1727,
      754,  755,  249,  756,  757,  758,  250,  251, 2244, 1136,
     1650,  252,  249,  766, 1740, 1137,  250,  251, 1805,  253,
     1072,  252, 2244, 1072, 1139,  759,  776,  750,  249,  253,
      799, 1073,  250,  251,  800,  801,  777,  252, 1136,  802,
      803, 1734,  776, 2682, 1137,  253, 1735,  804, 1294, 1294,
     1294, 1294,  777, 1139,  760,  750,  744,  745,  744,  744,

      821,  746,  747, 1295,  822,  823,  748,  749,  750,  824,
     1748,  751,  752, 1749,  753, 1705, 2683,  825, 1705, 1706,
     1983,  754,  755,  826,  756,  757,  758,  249, 2698, 1983,
      249,  779,  780, 1707,  779,  780,  781,  782,  783,  781,
      782,  783, 1072, 2699,  784, 1072,  759,  784,  750, 2700,
     2245, 2701,  785, 1073,  786,  785,  853,  786, 1736, 1761,
      854,  855, 1762, 1737, 2245,  856,  857,  858, 1394, 1394,
     1394, 1394, 2702,  859, 2703,  760,  750,  248,  761,  762,
      761,  761,  248,  250,  251,  763,  248,  248,  252,  248,
      248,  248,  248,  248,  248,  248,  253,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248,  248,  248,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  248,  248,
      248,  248,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  248,  248,  248,
      764,  248,  767,  768,  767,  767,  248,  250,  251,  769,
      248,  770,  252,  248,  248,  770,  248,  771,  248,  248,
      772,  248,  248,  248,  248,  248,  248,  773,  248,  774,
      248,  248,  248,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  248,  248,  248,  248,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  248,  248,  248,  775,  787,  788,  789,  788,  788,
      790,  791,  792,  793,  787,  787,  794,  787,  787,  787,
      787,  787,  787,  787,  795,  787,  787,  787,  787,  787,
      796,  787,  787,  787,  787,  787,  787,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  787,  787,  787,  787,

      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  787,  787,  790,  797,  249,
     1907, 2335,  249,  250,  251, 1908,  250,  251,  252,  805,
      806,  252,  805,  806, 1356, 1356,  253, 1356, 1356,  253,
      809,  810,  809,  809,  821,  811,  812, 2335,  822,  823,
      813,  814,  815,  824,  809,  810,  809,  809,  816,  811,
      812,  825, 1393, 2704,  813,  814,  815,  826,  807, 2336,
     2705,  807,  816,  809,  810,  809,  809,  935,  811,  812,
     1910,  811,  812,  813,  814, 1911,  813,  809,  810,  809,

      809,  816,  811,  812,  947, 2336, 2707,  813,  814,  818,
     1072,  819,  948, 1072,  949,  816, 2708, 1277, 1277, 1277,
     1277, 1073, 1390,  818, 1278,  819,  248,  248,  249,  248,
      248,  248,  250,  251,  827,  248,  248,  252,  248,  248,
      248,  248,  248,  248,  248,  253,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  248,  248,  248,
      248,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  828,  828,  828,

      828,  828,  828,  828,  828,  828,  248,  248,  248,  828,
      248,  248,  249,  248,  248,  248,  250,  251,  829,  248,
      248,  252,  248,  248,  248,  248,  248,  248,  248,  253,
      248,  248,  248,  248,  248,  248,  830,  248,  248,  248,
      248,  248,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  248,  248,  248,  248,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      248,  248,  248,  831,  833, 2709,  833, 1429,  834,  835,

      834,  835, 1429,  836, 1429,  836,  837, 1389,  837, 1429,
      833,  838,  833,  838,  840,  835,  840,  835, 1981,  841,
     1389,  841,  837, 1982,  837, 1689,  843,  838,  843,  838,
      844,  845,  844,  845, 1689,  846, 1440,  846,  847, 1440,
      847, 2713, 1768,  848,  839,  848,  839,  843, 1888,  843,
     1769,  850,  845,  850,  845, 1770,  851, 1390,  851,  847,
      839,  847,  839,  853,  848, 1888,  848,  854,  855, 2714,
     1390, 2284,  856,  857,  858, 1904,  849,  861,  849,  861,
      859,  862,  863,  862,  863, 2284,  864, 1904,  864, 1126,
     1126, 1126, 1126, 2020,  865, 2088,  865,  849,  869,  849,

     1127,  869,  870,  871, 2088,  870,  871,  872,  873,  874,
      872,  873,  874, 1110, 1383,  875,  877, 1383,  875,  877,
      878,  879, 2718,  878,  884,  880, 1656, 1384,  880,  886,
      887, 1657,  886,  881,  888,  889,  881, 1741, 2020,  890,
      891,  892, 1742, 1743,  249, 1744, 2719,  893, 1033, 1034,
     1465, 1453, 1466, 1035, 1453,  866,  867,  866,  867,  886,
      887, 1036,  886,  249,  888,  889, 2020,  500,  501,  890,
      891,  892,  502,  451,  452,  451,  451,  893,  453,  454,
      503, 2268, 1675,  455,  915,  916, 1206, 1657,  458, 1206,
     1671,  459, 2322, 1671,  882,  883, 2720,  882,  883,  895,

      896,  895,  895, 1672,  897,  898, 2322, 1136, 1673,  899,
      900,  901,  504, 1137,  933, 2013, 1655,  902,  451,  452,
      451,  451, 1139,  453,  454,  903, 2721,  904,  455,  915,
      916, 2089, 1462,  458,  249, 1462,  459,  249,  918,  919,
     2089,  918,  919,  920, 1207,  921,  920, 1289,  921, 2722,
     1289,  922,  935, 2723,  922, 1717,  811,  944, 2013, 2724,
     2725,  813,  945,  946, 1089, 1089, 1089, 1089, 1090,  947,
     2726, 1091,  905,  895,  896,  895,  895, 1289,  897,  898,
     1289, 1757, 2727,  899,  900,  901, 2032, 2013, 1084, 2032,
     1758,  902,  924,  925,  924,  924, 1759,  926,  927,  903,

     2728,  904,  928,  929,  930, 1207, 1870,  931, 2730, 1870,
      932,  924,  925,  924,  924, 1870,  926,  927, 1870, 1871,
     2732,  928,  929,  930, 1912, 1494,  931,  935, 1494,  932,
     1495,  811,  944, 1872, 2244, 1207,  813,  945,  946, 1407,
     1407, 1407, 1407, 2244,  947, 1090,  905,  906,  906,  907,
      906,  906,  906,  908,  909,  910,  906,  906,  911,  906,
      906,  906,  906,  906,  906,  906,  912,  906,  906,  906,
      906,  906,  906,  913,  906,  906,  906,  906,  906,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  906,  906,

      906,  906,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  914,  914,  913,  906,  906,
      914,  249, 2245,  935, 2043,  500,  501,  936,  937, 1957,
      502, 2245,  938, 1176, 1176, 1176, 1176,  935,  503,  935,
      939,  936,  937,  941,  937, 2055,  938, 1355,  942, 1364,
     1355, 1177, 1364, 1328,  939, 1365,  939,  935, 1957,  935,
     2119,  941,  937,  811,  812, 2120,  942, 2043,  813, 1465,
      504, 1466,  933,  940,  939, 1978,  947, 2363, 1093, 1093,
     1093, 1093, 2364, 1978,  948, 1094,  949,  940,  951,  940,

     2055, 1561,  952,  953, 1561, 1083, 2043,  954,  958,  951,
      955,  958, 1562,  952,  953,  956, 1986,  940,  954, 2002,
      961,  959, 2002, 1986,  962,  963,  956,  957, 2055,  964,
     1126, 1126, 1126, 1126, 1990,  961, 1990,  965,  957,  962,
      963, 1127, 1649, 2003,  964, 1649,  951, 1994,  957,  966,
      968,  969,  965, 1654, 1110,  970, 1654,  951, 1994,  957,
     1650,  968,  969,  971,  966, 2095,  970,  249, 2096, 1096,
      966,  974,  975,  249,  971,  972,  976,  974,  975, 1655,
     1998, 1998,  976,  249,  977,  966,  972, 1027, 1028, 1130,
      977, 2734, 1029,  249, 1030, 2006,  972, 1027, 1028, 2006,

     1031, 2735, 1029, 2735, 1030, 2284, 1588,  972,  249, 1588,
     1031, 1038, 1033, 1034, 2284, 1039, 1040, 1035,  978, 1589,
     1041, 2107, 1038, 2736,  978, 1036, 1039, 1040, 1042, 1703,
     2110, 1041, 2111, 2108, 2737,  979, 2738, 2109, 1704, 1042,
     2112,  979,  980,  981,  982,  981,  981,  980,  983,  984,
      985,  980,  980,  986,  980,  980,  980,  980,  980,  980,
      980,  987,  980,  980,  980,  980,  980,  980,  988,  980,
      980,  980,  980,  980,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  990,  980,  980,  980,  989,  989,  989,

      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  989,  989,  989,  989,  989,  989,  989,  989,
      989,  989,  980,  980,  980,  989,  248,  991,  992,  991,
      991,  248,  250,  251,  993,  248,  248,  252,  248,  248,
      248,  248,  248,  248,  248,  253,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  248,  248,  248,
      248,  994,  994,  994,  994,  994,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  994,  994,  994,  994,

      994,  994,  994,  994,  994,  994,  248,  248,  248,  994,
      249, 2739,  249, 2740,  996,  997,  996,  997, 1136,  998,
      999,  998,  999, 1868, 1137, 1044, 1045, 1000, 1044, 1000,
     1046, 1047, 1869, 1139, 2032, 1048, 2741, 2032, 1049, 1098,
     1098, 1098, 1098, 1050, 1144, 1144, 1144, 1144, 2742, 1870,
     1099, 1051, 1870, 1871, 1100, 1052, 1083, 1178, 1178, 1178,
     1178, 1868, 2743, 1084, 1102, 1103, 2131, 1872, 1145, 2131,
     1869, 2401, 1146, 2744, 2745, 1179, 1053, 1001, 2071, 1001,
     1002, 1003, 1004, 1003, 1003, 1005, 1006, 1007, 1008, 1002,
     1002, 1009, 1010, 1011, 1002, 1002, 1002, 1002, 1002, 1012,

     1002, 1002, 1002, 1002, 1002, 1013, 1002, 1002, 1002, 1002,
     1002, 1002, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1002, 1002, 1002, 1002, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1002, 1002, 1005, 1014, 1016,  249, 2746, 1016, 1788, 1017,
     1018, 1788, 1789, 2747, 1019, 1016,  249, 1465, 1016, 1466,
     1017, 1018, 1020, 1703, 2748, 1019, 1790, 1310, 1310, 1310,
     1310, 1021, 1704, 1020, 1054, 1045, 2414, 1054, 1791, 1046,

     1047, 2638, 1021, 2749, 1048, 1058, 1311, 1055, 2750, 1059,
     1060, 1061, 1056, 1649, 1062, 2731, 1649, 1063, 2731, 1791,
     1051, 1022, 1064, 2754, 1052, 2267, 1152, 1153, 1153, 1152,
     1065, 1650, 1022, 1154, 1066, 2627, 2755, 1023, 1623, 1024,
     2756, 1623, 2757, 1025, 2628, 1053, 2758, 1625, 1023, 1638,
     1024, 1625, 1638, 1136, 1025, 1066, 1061, 1067, 1058, 1137,
     1067, 2759, 1059, 1060, 1061, 2760, 1642, 1062, 1139, 1642,
     1068, 1126, 1126, 1126, 1126, 1064, 1639, 1109, 1109, 1109,
     1109, 1118, 1127, 1065, 1119, 1643, 1465, 1066, 1466, 1156,
     1166, 1166, 1166, 1166, 2762, 1110, 3601, 3601, 3601, 3601,

     2763, 1110, 2764, 3601, 2765, 1157, 1640, 1167, 1066, 1061,
     1181, 1181, 1181, 1181, 1169, 1181, 1181, 1181, 1181, 1215,
     1215, 1215, 1215, 2766, 1641, 2729, 1216, 1129, 1217, 2767,
     2751, 2768, 1217, 2751, 1183, 1176, 1176, 1176, 1176, 1183,
     1346, 1346, 1346, 1346, 2769, 2775, 2776, 1347, 1407, 1407,
     1407, 1407, 2778, 1177, 1441, 1441, 1441, 1441, 1118, 1111,
     1158, 1158, 1159, 1158, 1111, 1111, 1111, 1160, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 3601, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,

     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1111, 1111, 1111, 1111, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1162, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 2781,
     1111, 1111, 1161, 1153, 1153, 1153, 1153, 1465, 2782, 1466,
     1154, 1208, 1208, 1208, 1208, 1209, 2783, 2784, 1210, 1178,
     1178, 1178, 1178, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1183, 2787, 1179, 2788, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1183, 2789, 1236,
     2790, 1183, 2791, 1236, 2793, 1183, 2519, 1236, 2795, 1500,

     1500, 1500, 1500, 1183, 2797, 1236, 1156, 1183, 2798, 1236,
     2785, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 2786,
     2799, 1237, 3601, 1180, 1181, 1181, 1180, 1241, 2052, 1182,
     2761, 1642, 1209, 1240, 1642, 1183, 2800, 1236, 2053, 1183,
     2801, 1236, 1234, 1234, 1234, 1234, 2804, 1183, 1242, 1502,
     1643, 1243, 2052, 1184, 2761, 1275, 1275, 1275, 1275, 1234,
     1234, 1234, 1234, 2805, 2053, 2802, 1183, 1185, 1236, 1253,
     1244, 2806, 2803, 1186, 1245, 2807, 2808, 1187, 1188, 1276,
     1189, 1190, 1191, 1183, 2809, 1236, 1192, 1193, 1194, 1195,
     1196, 2810, 1197, 2811, 1198, 1199, 1200, 1201, 1202, 1246,

     1234, 1234, 1234, 1234, 2812, 1234, 1234, 1234, 1234, 1247,
     1234, 1234, 1234, 1234, 2813, 2051, 2814, 1248, 2051, 1249,
     1234, 1234, 1234, 1234, 1183, 2815, 1236, 1136, 1672, 1183,
     1250, 1236, 1623, 1137, 1183, 1623, 1236, 1234, 1234, 1234,
     1234, 1625, 1139, 2816, 1183, 1625, 1236, 2817, 2818, 2820,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 2822, 1251,
     2823, 1183, 2824, 1236, 2636, 1234, 1234, 1234, 1234, 2414,
     2844, 2845, 1252, 1254, 1183, 2341, 1236, 2871, 1183, 1255,
     1236, 1234, 1234, 1234, 1234, 2872, 2886, 1684, 1256, 1183,
     1684, 1236, 1258, 2887, 1257, 2888, 1234, 1234, 1234, 1234,

     1685, 1234, 1234, 1234, 1234, 1183, 2889, 1236, 1275, 1275,
     1275, 1275, 1465, 1261, 1466, 1075, 1075, 1075, 1075, 2821,
     1183, 1259, 1236, 2002, 1260, 1183, 2002, 1236, 1262, 2891,
     2892, 2893, 1276, 1076, 1284, 1284, 1284, 1284, 1263, 2898,
     1264, 1275, 1275, 1275, 1275, 1280, 2899, 2003, 1281, 1287,
     1075, 1075, 1287, 2902, 2903, 1288, 1268, 2904, 1276, 1265,
     1286, 2520, 2905, 1266, 1269, 1276, 2906, 1076, 1267, 1270,
     1075, 1075, 1075, 1075, 1176, 1176, 1176, 1176, 1178, 1178,
     1178, 1178, 1339, 1339, 1339, 1339, 1870, 2907, 1076, 1870,
     1935, 1705, 1177, 2908, 1705, 2051, 1179, 2909, 2051, 1340,

     1488, 1488, 1488, 1488, 1936, 2911, 1342, 1489, 1672, 2062,
     1339, 1339, 1339, 1339, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1280, 1297, 1297, 1297, 1297, 1340, 1344, 1344,
     1344, 1344, 1349, 1870, 1342, 1350, 1870, 2752, 1345, 2914,
     2752, 2915, 1345, 1344, 1344, 1344, 1344, 2916, 2753, 2918,
     1298, 1912, 1345, 1362, 1362, 1362, 1362, 1370, 1370, 1370,
     1370, 1075, 1075, 1075, 1075, 1343, 2919, 1345, 2920, 2232,
     2731, 1363, 2232, 2731, 2493, 1371, 2921, 2912, 1299, 1076,
     1300, 2922, 1418, 1418, 1418, 1418, 1176, 1176, 1176, 1176,
     1301, 1302, 2923, 2020, 1303, 1304, 1305, 2924, 1306, 1419,

     1178, 1178, 1178, 1178, 1177, 1447, 1447, 1447, 1447, 1349,
     1449, 1449, 1449, 1449, 1075, 1075, 1075, 1075, 1179, 1465,
     2925, 1466, 1448, 1075, 1075, 1075, 1075, 1176, 1176, 1176,
     1176, 2926, 1076, 2927, 1451, 1178, 1178, 1178, 1178, 2051,
     2917, 1076, 2051, 2917, 2928, 1177, 2929, 1488, 1488, 1488,
     1488, 2930, 1672, 1179, 1489, 3601, 3601, 3601, 3601, 2931,
     2910, 2932, 3601, 1491, 1491, 1491, 1491, 2933, 1496, 1496,
     1496, 1496, 2934, 2935, 2936, 1497, 1492, 1498, 2937, 2938,
     2939, 1498, 1496, 1496, 1496, 1496, 2940, 2941, 2942, 1497,
     1788, 1498, 2943, 1788, 1857, 1498, 3601, 3601, 3601, 3601,

     2944, 2299, 2945, 3601, 2299, 3601, 2539, 1124, 1858, 3601,
     1496, 1496, 1496, 1496, 2948, 2751, 2952, 1497, 2751, 1498,
     1791, 2953, 2954, 1498, 1176, 1176, 1176, 1176, 1178, 1178,
     1178, 1178, 1503, 1503, 1503, 1503, 2955, 1506, 1506, 1506,
     1506, 1791, 1177, 1504, 2956, 2957, 1179, 1506, 1506, 1506,
     1506, 1508, 1508, 1508, 1508, 2958, 1505, 2959, 1509, 2960,
     1146, 1507, 1506, 1506, 1506, 1506, 1511, 2961, 2962, 1512,
     2963, 1507, 1506, 1506, 1506, 1506, 1516, 1516, 1516, 1516,
     1518, 1518, 1518, 1518, 2964, 2965, 1507, 2966, 1517, 2968,
     2970, 1519, 1525, 1525, 1525, 1525, 1507, 1525, 1525, 1525,

     1525, 1528, 1528, 1528, 1528, 1520, 1563, 1563, 1563, 1563,
     1563, 1563, 1563, 1563, 1571, 1571, 1571, 1571, 2971, 1529,
     1575, 1575, 1575, 1575, 2974, 1572, 1575, 1575, 1575, 1575,
     1521, 1577, 1577, 1577, 1577, 1576, 2975, 2752, 2977, 1573,
     2752, 1576, 2978, 1511, 1590, 1590, 1590, 1590, 2753, 2979,
     1594, 1595, 2980, 1596, 2981, 1597, 2986, 1589, 1598, 1599,
     2989, 2990, 1584, 2991, 1574, 2992, 2993, 1748, 1600, 2881,
     1601, 1605, 1605, 1605, 1605, 3008, 3012, 3013, 1606, 1605,
     1605, 1605, 1605, 3016, 2882, 3041, 1606, 1610, 1610, 1610,
     1610, 3042, 3043, 1573, 1616, 1616, 1616, 1616, 3048, 1611,

     3049, 1617, 1612, 1616, 1616, 1616, 1616, 3052, 3053, 3054,
     1617, 1620, 1620, 1620, 1620, 1628, 1628, 1628, 1628, 3055,
     3056, 1608, 1621, 1628, 1628, 1628, 1628, 1662, 3057, 1608,
     1630, 1630, 1630, 1630, 3058, 3060, 3061, 1631, 3062, 1629,
     3063, 1628, 1628, 1628, 1628, 1633, 3065, 1629, 1634, 1628,
     1628, 1628, 1628, 1671, 1663, 1664, 1671, 1665, 3066, 1666,
     3067, 3068, 1667, 1668, 3070, 1629, 1672, 1784, 3072, 1662,
     1784, 1673, 1669, 1629, 1670, 1663, 1664, 3074, 1665, 1655,
     1666, 3075, 3076, 1667, 1668, 1686, 1686, 1686, 1686, 1075,
     1075, 1075, 1075, 1669, 2308, 1670, 3077, 1787, 1685, 1081,

     1082, 1082, 1081, 1678, 1465, 2308, 1466, 1076, 1082, 1082,
     1082, 1082, 1093, 1093, 1093, 1093, 1083, 1623, 1787, 1094,
     1623, 2020, 1633, 1084, 1624, 1083, 1625, 3078, 3073, 1083,
     1625, 3073, 1084, 1086, 1086, 1086, 1086, 3079, 3080, 2519,
     1087, 3601, 3601, 3601, 3601, 3081, 3082, 3083, 3601, 1690,
     1690, 1690, 1690, 1089, 1089, 1089, 1089, 3084, 2917, 1784,
     1099, 2917, 1784, 3085, 1100, 1086, 1086, 1086, 1086, 3086,
     2329, 3087, 1087, 2329, 1102, 1103, 2940, 1084, 1085, 1098,
     1098, 1098, 1098, 3089, 1093, 1093, 1093, 1093, 3090, 1787,
     1099, 1094, 3091, 1096, 1100, 3092, 1083, 1693, 1693, 1693,

     1693, 1083, 3093, 1084, 1102, 1103, 3601, 3601, 3601, 3601,
     1787, 3095, 3098, 3601, 1083, 1695, 1695, 1695, 1695, 3099,
     3100, 3101, 1696, 3601, 1698, 1698, 1698, 1698, 1090, 3102,
     3103, 1091, 1098, 1098, 1098, 1098, 1105, 1105, 1105, 1105,
     3105, 3106, 3107, 1106, 3108, 3110, 3111, 1100, 1084, 1083,
     3112, 1098, 1098, 1098, 1098, 3113, 1084, 1102, 1103, 3114,
     3601, 3115, 1099, 3601, 3119, 1096, 1100, 3601, 1083, 3126,
     3124, 3601, 3601, 3601, 3601, 1084, 1102, 1103, 3601, 3127,
     3128, 1690, 1690, 1690, 1690, 3125, 3132, 3601, 1108, 1109,
     1109, 1108, 1099, 3133, 2604, 2125, 1100, 1109, 1109, 1109,

     1109, 1112, 1112, 1113, 1112, 1090, 1102, 1103, 1112, 1112,
     1113, 1112, 1110, 1115, 1115, 1115, 1115, 3146, 3147, 3152,
     1116, 1110, 3150, 3153, 3154, 1114, 3601, 3601, 3601, 3601,
     3155, 3151, 1114, 3601, 1700, 1700, 1700, 1700, 3170, 1115,
     1115, 1115, 1115, 3171, 3177, 1127, 1116, 1126, 1126, 1126,
     1126, 1121, 1121, 1121, 1121, 3178, 3180, 3181, 1127, 1708,
     1708, 1708, 1708, 1118, 3182, 3186, 1119, 1085, 3188, 2506,
     3601, 1110, 3190, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 3601, 3192, 1110, 1127, 3193, 2308, 3197, 1127, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1110, 2308, 3198,

     1127, 1110, 3199, 3200, 1127, 1144, 1144, 1144, 1144, 1152,
     1153, 1153, 1152, 1110, 3201, 3202, 1154, 1110, 1153, 1153,
     1153, 1153, 2329, 3203, 3205, 1154, 3203, 3205, 3206, 1145,
     3601, 3601, 3601, 3601, 3204, 2329, 3207, 3601, 3208, 3209,
     1118, 1166, 1166, 1166, 1166, 3210, 3211, 3216, 1711, 1166,
     1166, 1166, 1166, 3601, 3601, 3601, 3601, 3217, 1167, 3073,
     3601, 1710, 3073, 3218, 3220, 1169, 1167, 1166, 1166, 1166,
     1166, 3221, 1156, 1169, 3222, 1720, 1720, 1720, 1720, 3194,
     3195, 1156, 1721, 2986, 1167, 3223, 3225, 3226, 1157, 3229,
     3232, 1169, 1733, 1733, 1733, 1733, 3233, 3601, 1203, 1203,

     1203, 1203, 3234, 3235, 3237, 1204, 3238, 3239, 3241, 3601,
     1219, 1219, 1219, 1219, 3251, 1719, 1111, 1158, 1158, 1159,
     1158, 1111, 1111, 1111, 1160, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 3601, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1111, 1111, 1111,
     1111, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1162, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 3252, 1111, 1111, 1161,

     1166, 1166, 1166, 1166, 1164, 1164, 1164, 1164, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 3256, 1167, 3257, 1176,
     1176, 1176, 1176, 3258, 1169, 1178, 1178, 1178, 1178, 1167,
     1963, 3259, 1169, 1963, 1964, 3280, 1169, 1177, 1739, 1739,
     1739, 1739, 1770, 1179, 3601, 3601, 3601, 3601, 1964, 3283,
     3284, 3601, 1771, 1771, 1771, 1771, 1208, 1208, 1208, 1208,
     1965, 1748, 1183, 3287, 3282, 3288, 1719, 1203, 1203, 1203,
     1203, 3289, 1206, 2308, 1204, 1206, 3294, 3295, 1236, 1638,
     1183, 1965, 1638, 1165, 1738, 1739, 1739, 1738, 3296, 3297,
     1182, 1773, 1773, 1773, 1773, 1773, 1234, 1234, 1234, 1234,

     1215, 1215, 1215, 1215, 3298, 2329, 1639, 1216, 1183, 1217,
     3301, 3302, 3299, 1217, 1184, 3299, 3601, 3601, 3601, 3601,
     1183, 3303, 1236, 3601, 3300, 3601, 3304, 3305, 1185, 3601,
     1207, 3309, 3290, 3291, 1186, 3290, 1640, 3205, 1187, 1188,
     3205, 1189, 1190, 1191, 3310, 3312, 3315, 1192, 1193, 1194,
     1195, 1196, 3316, 1197, 1641, 1198, 1199, 1200, 1201, 1202,
     1776, 1776, 1776, 1776, 1778, 1778, 1778, 1778, 3321, 1217,
     3322, 1777, 3323, 1217, 3328, 3329, 1779, 1780, 1784, 3251,
     3150, 1784, 1785, 1809, 1809, 1809, 1809, 3335, 1782, 3336,
     1783, 1786, 1793, 1793, 1793, 1793, 1209, 3337, 1740, 1210,

     1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1787, 3292,
     3293, 1796, 3292, 1805, 2103, 1796, 1183, 1795, 1795, 1795,
     1795, 1795, 1795, 1795, 1795, 3356, 3357, 3358, 1796, 1787,
     3361, 3362, 1796, 1795, 1795, 1795, 1795, 1795, 1795, 1795,
     1795, 2020, 1810, 3359, 1796, 3363, 3359, 2020, 1796, 3364,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1275, 1275,
     1275, 1275, 3365, 1234, 1234, 1234, 1234, 3360, 3203, 1798,
     3360, 3203, 2940, 1209, 1183, 3366, 1236, 2940, 1183, 3204,
     1236, 3370, 1276, 1799, 1800, 3290, 3291, 1183, 3290, 1236,
     1801, 1234, 1234, 1234, 1234, 2975, 1804, 1234, 1234, 1234,

     1234, 3373, 3374, 3375, 1802, 1806, 1807, 1803, 3378, 1808,
     1234, 1234, 1234, 1234, 3379, 1183, 2146, 1236, 3380, 2146,
     3381, 1183, 3384, 1236, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 3292, 3293, 1183, 3292, 1236, 1234, 1234, 1234,
     1234, 3385, 1234, 1234, 1234, 1234, 2147, 3384, 1183, 3386,
     1236, 3387, 1183, 3401, 1236, 3060, 1234, 1234, 1234, 1234,
     1811, 1183, 2020, 1236, 3406, 1813, 1183, 2147, 1236, 1812,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 2020, 2940,
     1183, 1814, 1236, 1277, 1277, 1277, 1277, 3407, 1816, 3299,
     1278, 1815, 3299, 2940, 1183, 3410, 1236, 3411, 1183, 3412,

     1236, 3300, 3413, 3414, 1818, 1296, 1296, 1296, 1296, 1817,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 3415, 3416,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 3384, 1820,
     1819, 1821, 3359, 3421, 1183, 3359, 1236, 3422, 1183, 3402,
     1236, 2020, 3360, 1822, 1183, 3360, 1236, 1823, 1183, 3404,
     1236, 2940, 1234, 1234, 1234, 1234, 1296, 1296, 1296, 1296,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 3601, 1824, 3435, 3601, 1183, 1826, 1236, 3601,
     3241, 1825, 1830, 1827, 1183, 1828, 1236, 3436, 1183, 3439,
     1236, 3440, 1183, 1829, 1236, 1234, 1234, 1234, 1234, 1234,

     1234, 1234, 1234, 1234, 1234, 1234, 1234, 3381, 1831, 3442,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 3443, 1183,
     3449, 1236, 1833, 1183, 3413, 1236, 3450, 1183, 1788, 1236,
     3451, 1788, 3601, 1832, 1183, 3601, 1236, 3453, 1183, 3601,
     1236, 1834, 1234, 1234, 1234, 1234, 1912, 3454, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 3460, 3461, 1791, 1838,
     3467, 1835, 1836, 3451, 1071, 2592, 1183, 1837, 1236, 1731,
     1839, 1071, 1183, 1731, 1236, 1841, 1183, 2589, 1236, 1791,
     1840, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1131,
     2588, 1234, 1234, 1234, 1234, 1135, 1131, 1842, 1234, 1234,

     1234, 1234, 1135, 1141, 2587, 1183, 2586, 1236, 2571, 1183,
     1141, 1236, 1148, 1843, 1844, 1183, 1150, 1236, 1223, 1148,
     2570, 1845, 1183, 1150, 1236, 1234, 1234, 1234, 1234, 3601,
     3601, 3601, 3601, 2569, 1223, 1290, 3601, 1852, 1852, 1852,
     1852, 1223, 1290, 1134, 1846, 2568, 2567, 2329, 1847, 1183,
     1134, 1236, 1277, 1277, 1277, 1277, 1848, 1134, 2150, 1278,
     2565, 2150, 2564, 1286, 2563, 1284, 1284, 1284, 1284, 1849,
     1854, 1854, 1854, 1854, 1280, 2562, 1228, 1281, 1284, 1284,
     1284, 1284, 1284, 1284, 1284, 1284, 1142, 2561, 1791, 1276,
     1850, 1286, 1228, 1142, 1276, 1287, 1075, 1075, 1287, 1228,

     1142, 1288, 1276, 2560, 1286, 1149, 1276, 1784, 1286, 1791,
     1784, 1855, 1149, 1076, 1294, 1294, 1294, 1294, 2550, 1149,
     1856, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1295,
     1873, 1873, 1873, 1873, 1307, 1151, 1293, 1787, 2549, 2548,
     1311, 1307, 1151, 1293, 1311, 1322, 1322, 1322, 1322, 1151,
     1293, 1280, 1883, 1883, 1883, 1883, 2547, 1323, 1787, 1297,
     1297, 1297, 1297, 1884, 1326, 1327, 1327, 1326, 1338, 2546,
     1328, 1327, 1327, 1327, 1327, 1338, 1330, 1401, 1885, 1330,
     1890, 1890, 1890, 1890, 1401, 2308, 1298, 1891, 1892, 1893,
     1891, 1336, 1336, 1336, 1336, 1886, 1886, 1886, 1886, 1886,

     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1897, 1897,
     1897, 1897, 1414, 1417, 1299, 1898, 1300, 1340, 1428, 1414,
     1417, 1340, 1431, 2544, 1342, 1428, 1301, 1302, 1342, 1431,
     1303, 1304, 1305, 2543, 1306, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1344, 1344, 1344, 1344, 1346, 1346, 1346,
     1346, 1312, 1340, 1439, 1347, 1446, 1340, 2006, 1312, 1342,
     1439, 2540, 1446, 1342, 1895, 1312, 1402, 1345, 3601, 3601,
     3601, 3601, 1998, 1402, 1463, 3601, 1346, 1346, 1346, 1346,
     1402, 1463, 1994, 1347, 1344, 1344, 1344, 1344, 1902, 1902,
     1902, 1902, 1349, 1434, 1469, 1350, 1344, 1344, 1344, 1344,

     1434, 1469, 1416, 1356, 1416, 1900, 1356, 1434, 1345, 1990,
     1475, 1416, 1345, 1906, 1906, 1906, 1906, 1475, 1416, 1986,
     1345, 2530, 1773, 1773, 1773, 1773, 1773, 1362, 1362, 1362,
     1362, 1370, 1370, 1370, 1370, 1394, 1394, 1394, 1394, 1407,
     1407, 1407, 1407, 1978, 2527, 1363, 1957, 2524, 2523, 1371,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1477, 1922,
     1922, 1922, 1922, 1533, 2522, 1477, 1923, 1419, 2521, 1349,
     1533, 1419, 1924, 1418, 1418, 1418, 1418, 1931, 1931, 1931,
     1931, 1441, 1441, 1441, 1441, 1449, 1449, 1449, 1449, 2518,
     1419, 2517, 1932, 1447, 1447, 1447, 1447, 1449, 1449, 1449,

     1449, 1449, 1449, 1449, 1449, 1959, 1959, 1959, 1959, 1451,
     1448, 1960, 2514, 1535, 1960, 1961, 1488, 1488, 1488, 1488,
     1535, 2513, 2512, 1489, 1961, 1451, 3601, 3601, 3601, 3601,
     2511, 1567, 1442, 3601, 1491, 1491, 1491, 1491, 1567, 1442,
     2510, 1962, 1491, 1491, 1491, 1491, 1442, 1492, 1491, 1491,
     1491, 1491, 1415, 2509, 2506, 1492, 1496, 1496, 1496, 1496,
     1937, 1492, 1962, 1497, 2505, 1498, 2504, 1470, 1476, 1498,
     3601, 3601, 3601, 3601, 1470, 1476, 2503, 3601, 2502, 3601,
     2501, 1470, 1476, 3601, 1496, 1496, 1496, 1496, 1609, 1619,
     1904, 1497, 2496, 1498, 1888, 1609, 1619, 1498, 1500, 1500,

     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1503, 1503, 1503, 1503, 2231, 1968, 1968, 1968, 1968, 2490,
     1692, 1504, 1969, 1506, 1506, 1506, 1506, 1692, 1970, 1508,
     1508, 1508, 1508, 2489, 1505, 1478, 1509, 3601, 3601, 3601,
     3601, 2488, 1478, 1702, 3601, 2487, 1211, 1507, 1502, 1478,
     1702, 2486, 1502, 1211, 1223, 1228, 1502, 1508, 1508, 1508,
     1508, 1223, 1228, 2485, 1509, 1506, 1506, 1506, 1506, 1974,
     1974, 1974, 1974, 1511, 1534, 2484, 1512, 1506, 1506, 1506,
     1506, 1534, 1516, 1516, 1516, 1516, 2483, 2482, 1534, 1507,
     2481, 2480, 1282, 1507, 1517, 1975, 1975, 1975, 1975, 1282,

     2479, 1507, 1518, 1518, 1518, 1518, 1976, 1525, 1525, 1525,
     1525, 2478, 2477, 1519, 1980, 1980, 1980, 1980, 1528, 1528,
     1528, 1528, 1988, 1988, 1988, 1988, 1135, 1520, 1992, 1992,
     1992, 1992, 1996, 1996, 1996, 1996, 1529, 2000, 2000, 2000,
     2000, 1560, 1135, 2476, 1560, 1563, 1563, 1563, 1563, 1135,
     1511, 2416, 1521, 2008, 2008, 2008, 2008, 2414, 1716, 2144,
     2001, 2001, 2001, 2001, 2001, 1571, 1571, 1571, 1571, 1575,
     1575, 1575, 1575, 2407, 1716, 1570, 1572, 1577, 1577, 1577,
     1577, 1716, 1570, 2402, 1576, 1577, 1577, 1577, 1577, 1570,
     1573, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1605,

     1605, 1605, 1605, 2400, 1589, 1351, 1606, 3601, 3601, 3601,
     3601, 2399, 1351, 2398, 3601, 1574, 1610, 1610, 1610, 1610,
     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1611, 2397,
     1513, 1612, 1611, 2396, 2395, 1612, 1611, 1513, 2394, 1612,
     2023, 2023, 2023, 2023, 1573, 2024, 2024, 2024, 2024, 1608,
     1610, 1610, 1610, 1610, 2393, 2392, 1134, 3601, 2025, 2025,
     2025, 2025, 1611, 1134, 1142, 1612, 1616, 1616, 1616, 1616,
     1134, 1142, 1626, 1617, 3601, 3601, 3601, 3601, 1142, 1626,
     2391, 3601, 1620, 1620, 1620, 1620, 1620, 1620, 1620, 1620,
     2388, 1724, 2387, 1621, 2386, 2385, 2384, 1621, 1620, 1620,

     1620, 1620, 1628, 1628, 1628, 1628, 2383, 1724, 1149, 1621,
     1630, 1630, 1630, 1630, 1724, 1149, 1635, 1631, 3601, 3601,
     3601, 3601, 1149, 1635, 1135, 3601, 1629, 1630, 1630, 1630,
     1630, 1135, 2382, 2381, 1631, 1628, 1628, 1628, 1628, 2031,
     2031, 2031, 2031, 1633, 2380, 2379, 1634, 1628, 1628, 1628,
     1628, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1629,
     2378, 2377, 1716, 1629, 1685, 1690, 1690, 1690, 1690, 1716,
     2376, 1629, 1690, 1690, 1690, 1690, 1809, 1809, 1809, 1809,
     1100, 1724, 1151, 1099, 2375, 2374, 2373, 1100, 1724, 1151,
     1102, 1103, 2057, 2057, 2057, 2057, 1151, 1102, 1103, 1695,

     1695, 1695, 1695, 1099, 2372, 2371, 1696, 1100, 1693, 1693,
     1693, 1693, 1693, 1693, 1693, 1693, 1084, 1102, 1103, 1921,
     1633, 3601, 3601, 3601, 3601, 1083, 1921, 2370, 3601, 1083,
     1698, 1698, 1698, 1698, 1090, 1810, 1792, 1091, 1690, 1690,
     1690, 1690, 2369, 1792, 1700, 1700, 1700, 1700, 2368, 1099,
     1792, 2367, 2366, 1100, 1084, 1127, 1700, 1700, 1700, 1700,
     2365, 2362, 2361, 1102, 1103, 2040, 2360, 1127, 1126, 1126,
     1126, 1126, 2040, 1708, 1708, 1708, 1708, 1118, 2357, 1127,
     1119, 2356, 1126, 1126, 1126, 1126, 1731, 2353, 1126, 1126,
     1126, 1126, 1110, 1127, 1921, 2352, 2351, 1110, 1463, 1127,

     2072, 2072, 2072, 2072, 2073, 1463, 1110, 2074, 2350, 1167,
     1921, 1090, 1110, 1166, 1166, 1166, 1166, 1921, 1720, 1720,
     1720, 1720, 2347, 1136, 2075, 1721, 3601, 3601, 3601, 3601,
     1167, 2070, 2338, 3601, 2337, 2049, 2334, 1169, 1166, 1166,
     1166, 1166, 2080, 2080, 2080, 2080, 2333, 2086, 2332, 1721,
     2331, 2330, 2329, 2067, 1118, 2066, 2087, 2087, 2087, 2087,
     1535, 1293, 1169, 2091, 2091, 2091, 2091, 1535, 1293, 2076,
     1793, 1793, 1793, 1793, 1209, 1293, 2076, 1210, 2328, 2324,
     2321, 2073, 2077, 2090, 2091, 2091, 2090, 1183, 2040, 1182,
     1771, 1771, 1771, 1771, 1183, 1771, 1771, 1771, 1771, 1776,

     1776, 1776, 1776, 2131, 2040, 2320, 2131, 1183, 1217, 2319,
     1777, 2040, 1217, 1184, 2318, 2317, 1236, 2136, 2136, 2136,
     2136, 1236, 1773, 1773, 1773, 1773, 1773, 1185, 2137, 1873,
     1873, 1873, 1873, 1186, 2028, 2316, 2411, 1187, 1188, 2314,
     1189, 1190, 1191, 2411, 2313, 2312, 1192, 1193, 1194, 1195,
     1196, 1209, 1197, 2311, 1198, 1199, 1200, 1201, 1202, 2133,
     2133, 2133, 2133, 3342, 2310, 2309, 2134, 2308, 1217, 2307,
     3342, 2306, 1217, 1778, 1778, 1778, 1778, 2138, 2138, 2138,
     2138, 2305, 2006, 2006, 2139, 1779, 1780, 1536, 1536, 2140,
     1778, 1778, 1778, 1778, 1536, 2152, 2301, 1782, 2152, 2300,

     1998, 1536, 1779, 1780, 1795, 1795, 1795, 1795, 2153, 1852,
     1852, 1852, 1852, 1998, 1782, 1796, 1783, 1793, 1793, 1793,
     1793, 1209, 1463, 1994, 1210, 2154, 1795, 1795, 1795, 1795,
     1994, 1795, 1795, 1795, 1795, 1286, 1990, 1796, 1463, 1990,
     1986, 1183, 1796, 1986, 2286, 1463, 2154, 1795, 1795, 1795,
     1795, 1795, 1795, 1795, 1795, 2285, 1978, 1978, 1796, 1502,
     1967, 2155, 1796, 1795, 1795, 1795, 1795, 1795, 1795, 1795,
     1795, 2149, 1957, 1312, 1796, 1957, 1960, 2273, 1796, 1960,
     1312, 1795, 1795, 1795, 1795, 2272, 2157, 1312, 1795, 1795,
     1795, 1795, 1796, 1234, 1234, 1234, 1234, 2271, 1209, 1796,

     2270, 2269, 1234, 1234, 1234, 1234, 1962, 1234, 1234, 1234,
     1234, 2223, 2223, 2223, 2223, 1465, 2158, 1183, 1948, 1236,
     1234, 1234, 1234, 1234, 2159, 2165, 1183, 1962, 1236, 2266,
     2161, 1183, 2265, 1236, 2264, 2162, 2160, 2163, 1234, 1234,
     1234, 1234, 2263, 2262, 1183, 2167, 1236, 2166, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1901, 1963, 2164, 2261,
     1963, 2260, 1183, 1901, 1236, 1234, 1234, 1234, 1234, 2259,
     1901, 2258, 1183, 2056, 1236, 2210, 1183, 2056, 1236, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1965, 2256, 1183,
     2255, 1236, 1415, 2252, 2168, 1234, 1234, 1234, 1234, 1234,

     1234, 1234, 1234, 1183, 2251, 1236, 2250, 1183, 1965, 1236,
     2249, 2169, 1234, 1234, 1234, 1234, 2248, 2171, 2247, 1183,
     2170, 1236, 1913, 1183, 2246, 1236, 1909, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1904, 1183, 2172, 1236, 1904,
     2237, 2236, 2173, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1183, 2174, 1236, 1888, 1183, 1888, 1236, 1234, 1234,
     1234, 1234, 1535, 2175, 2231, 2176, 2229, 1183, 2227, 1236,
     2226, 1183, 2225, 1236, 1234, 1234, 1234, 1234, 1535, 2177,
     2224, 3064, 1183, 2222, 1236, 1535, 2178, 1234, 1234, 1234,
     1234, 2221, 1234, 1234, 1234, 1234, 2179, 3064, 1183, 2153,

     1236, 2220, 2180, 2219, 3064, 2218, 2181, 1234, 1234, 1234,
     1234, 1183, 2217, 1236, 2216, 2215, 1183, 2182, 1236, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1183, 2214, 1236, 1402, 1234, 1234, 1234, 1234, 2183,
     2213, 1402, 2212, 1183, 2209, 1236, 1751, 1183, 1402, 1236,
     2156, 1183, 2144, 1236, 2142, 2185, 2132, 2130, 2129, 1183,
     2184, 1236, 1234, 1234, 1234, 1234, 2186, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 2128, 2187, 2127, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 2197, 1183, 2126, 1236, 2189,
     2123, 1183, 2122, 1236, 2188, 1183, 2121, 1236, 1234, 1234,

     1234, 1234, 1183, 2118, 1236, 2117, 1183, 2116, 1236, 2190,
     1234, 1234, 1234, 1234, 2115, 2114, 2113, 2191, 1234, 1234,
     1234, 1234, 1183, 2106, 1236, 2105, 2192, 3069, 1234, 1234,
     1234, 1234, 2104, 2101, 1183, 2100, 1236, 2099, 1234, 1234,
     1234, 1234, 1183, 3069, 1236, 2098, 2193, 2194, 2097, 2094,
     3069, 2195, 1183, 1731, 1236, 1234, 1234, 1234, 1234, 1731,
     2084, 2083, 1183, 2196, 1236, 2082, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 2081, 1183,
     1167, 1236, 2070, 2068, 2198, 2199, 2228, 2228, 2228, 2228,
     1183, 2065, 1236, 2064, 1183, 2056, 1236, 2054, 1183, 2050,

     1236, 2200, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     2049, 2048, 2201, 1234, 1234, 1234, 1234, 1852, 1852, 1852,
     1852, 2047, 2046, 2045, 2202, 2203, 1183, 2044, 1236, 2042,
     1183, 1784, 1236, 2146, 1784, 2041, 2146, 1183, 2204, 1236,
     2039, 2205, 2038, 1286, 1661, 1854, 1854, 1854, 1854, 1280,
     1784, 2150, 1281, 1784, 2150, 1648, 1648, 2056, 1416, 2210,
     1416, 1787, 2152, 2147, 2036, 2152, 1648, 1416, 2208, 1276,
     1891, 1892, 1893, 1891, 1416, 2153, 2206, 2056, 2035, 2207,
     1787, 1791, 1787, 2034, 2147, 2033, 2232, 1646, 2211, 2232,
     1644, 1636, 2154, 1883, 1883, 1883, 1883, 1893, 1892, 1893,

     1893, 1787, 1791, 2029, 1884, 1886, 1886, 1886, 1886, 1886,
     2028, 2234, 1615, 2154, 1615, 2238, 2238, 2238, 2238, 1885,
     2235, 2235, 2235, 2235, 2021, 2019, 1280, 1897, 1897, 1897,
     1897, 2018, 1340, 2017, 1898, 3601, 3601, 3601, 3601, 1342,
     2016, 2015, 3601, 1339, 1339, 1339, 1339, 1902, 1902, 1902,
     1902, 1349, 2242, 2014, 1350, 1931, 1931, 1931, 1931, 2012,
     1340, 2243, 2243, 2243, 2243, 2011, 2010, 1342, 2009, 2006,
     1932, 1345, 1922, 1922, 1922, 1922, 2004, 1998, 1994, 1923,
     3601, 3601, 3601, 3601, 1990, 1924, 1986, 3601, 1418, 1418,
     1418, 1418, 1434, 3601, 2257, 2257, 2257, 2257, 2275, 1434,

     1960, 1963, 2240, 1960, 1963, 1419, 1434, 2276, 2276, 2276,
     2276, 1968, 1968, 1968, 1968, 1984, 1537, 1537, 1969, 1978,
     2278, 2278, 2278, 2278, 1970, 1523, 2056, 2056, 1349, 1514,
     1962, 1965, 3601, 3601, 3601, 3601, 1972, 2282, 1967, 3601,
     2277, 2277, 2277, 2277, 2280, 3601, 2283, 2283, 2283, 2283,
     1957, 1962, 1965, 1970, 1974, 1974, 1974, 1974, 1511, 2288,
     1955, 1512, 1975, 1975, 1975, 1975, 1954, 1951, 2289, 2289,
     2289, 2289, 2291, 1976, 2299, 1948, 2294, 2299, 1507, 1946,
     2297, 2292, 2292, 2292, 2292, 2295, 2295, 2295, 2295, 2298,
     2298, 2298, 2298, 2001, 2001, 2001, 2001, 2001, 2303, 1610,

     1610, 1610, 1610, 2023, 2023, 2023, 2023, 2304, 2304, 2304,
     2304, 1611, 1945, 1942, 1612, 2024, 2024, 2024, 2024, 2025,
     2025, 2025, 2025, 2025, 2025, 2025, 2025, 2031, 2031, 2031,
     2031, 1633, 1941, 1940, 1634, 1511, 1939, 2057, 2057, 2057,
     2057, 1938, 2057, 2057, 2057, 2057, 1427, 1126, 1126, 1126,
     1126, 1629, 1100, 1099, 1930, 1929, 1928, 1100, 1127, 1927,
     1926, 1084, 1102, 1103, 1415, 1920, 1084, 1102, 1103, 1415,
     1919, 1110, 2342, 2342, 2342, 2342, 1918, 1917, 1916, 2343,
     2345, 2345, 2345, 2345, 2080, 2080, 2080, 2080, 1731, 1915,
     1914, 1721, 2136, 2136, 2136, 2136, 1385, 2355, 2355, 2355,

     2355, 1913, 1377, 2137, 2075, 1377, 1909, 1904, 1633, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2326,
     2326, 2326, 2326, 2326, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2325, 2325, 2325, 2325, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2325,
     2325, 2325, 2327, 1126, 1126, 1126, 1126, 1126, 1126, 1126,

     1126, 1352, 1340, 1896, 1127, 1888, 1882, 1881, 1127, 2072,
     2072, 2072, 2072, 2073, 1880, 1879, 2074, 1110, 1878, 1877,
     1876, 1110, 2345, 2345, 2345, 2345, 2073, 2150, 1875, 2346,
     2150, 1874, 1867, 2075, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 2359, 2359, 2359, 2359, 2075, 2403, 2403, 2403,
     2403, 1167, 2133, 2133, 2133, 2133, 2340, 1791, 1169, 2134,
     1864, 1217, 1169, 1863, 2339, 1217, 1183, 3601, 3601, 3601,
     3601, 2405, 1442, 2406, 3601, 1862, 3601, 1861, 1791, 1442,
     3601, 2138, 2138, 2138, 2138, 1860, 1442, 1859, 2139, 2150,
     2073, 1283, 2150, 2140, 2223, 2223, 2223, 2223, 1851, 2349,

     1239, 1470, 1476, 2073, 2358, 2359, 2359, 2358, 1470, 1476,
     1182, 3601, 3601, 3601, 3601, 1470, 1476, 2139, 3601, 1791,
     1805, 1794, 2140, 3601, 1795, 1795, 1795, 1795, 1183, 2408,
     2408, 2408, 2408, 2408, 1184, 1796, 2133, 2133, 2133, 2133,
     1791, 1774, 1767, 2410, 1766, 1217, 1763, 1760, 1185, 1217,
     2228, 2228, 2228, 2228, 1186, 1756, 1755, 1754, 1187, 1188,
     1750, 1189, 1190, 1191, 1747, 1746, 1239, 1192, 1193, 1194,
     1195, 1196, 1745, 1197, 1740, 1198, 1199, 1200, 1201, 1202,
     2412, 2412, 2412, 2412, 1795, 1795, 1795, 1795, 1795, 1795,
     1795, 1795, 1779, 1731, 1729, 1796, 2417, 1728, 1725, 1796,

     1795, 1795, 1795, 1795, 1782, 1795, 1795, 1795, 1795, 1723,
     1718, 1796, 1795, 1795, 1795, 1795, 1796, 1795, 1795, 1795,
     1795, 1715, 1714, 1796, 1795, 1795, 1795, 1795, 1796, 1234,
     1234, 1234, 1234, 1713, 1709, 1796, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1124, 1124, 1097, 2419, 1079, 2418,
     1681, 1678, 1648, 1183, 1648, 1236, 2223, 2223, 2223, 2223,
     1183, 1648, 1236, 2420, 1183, 1648, 1236, 1646, 2425, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 2427, 2426, 1645,
     2421, 1644, 2423, 1636, 1627, 2422, 1234, 1234, 1234, 1234,
     1615, 1604, 1584, 1183, 1569, 1236, 1566, 1183, 2424, 1236,

     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1565, 1564,
     1183, 1559, 1236, 1234, 1234, 1234, 1234, 1556, 1553, 1234,
     1234, 1234, 1234, 1548, 1183, 2428, 1236, 1542, 1183, 1538,
     1236, 1537, 1532, 1234, 1234, 1234, 1234, 1183, 1527, 1236,
     1523, 1514, 1143, 1183, 2429, 1236, 2440, 2440, 2440, 2440,
     1234, 1234, 1234, 1234, 1487, 2431, 1486, 1183, 2430, 1236,
     2228, 2228, 2228, 2228, 2491, 2491, 2491, 2491, 1485, 1484,
     1183, 1481, 1236, 1480, 1183, 2492, 1236, 2432, 1474, 1473,
     2433, 1472, 2434, 2435, 2436, 2436, 2436, 2436, 2435, 2435,
     2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,

     2435, 2435, 2435, 1471, 1461, 1460, 2442, 1459, 2437, 1458,
     2438, 2435, 2435, 2435, 2435, 1234, 1234, 1234, 1234, 2443,
     1234, 1234, 1234, 1234, 1457, 2441, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 2435, 2435, 2435, 2435, 1456, 1183,
     1436, 1236, 1427, 1425, 1183, 1422, 1236, 1421, 1478, 1415,
     1183, 1408, 1236, 1405, 1183, 1478, 1236, 1234, 1234, 1234,
     1234, 1404, 1478, 2435, 2435, 2435, 2439, 1403, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1385, 1377, 2444, 1372,
     1361, 1183, 1358, 1236, 1234, 1234, 1234, 1234, 1352, 1335,
     1332, 2445, 1183, 2446, 1236, 1324, 1183, 1321, 1236, 1318,

     1317, 2447, 1234, 1234, 1234, 1234, 1316, 1315, 1183, 1314,
     1236, 1234, 1234, 1234, 1234, 1313, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1283, 1274, 1183, 1973, 1236, 1239,
     1226, 2448, 1225, 1224, 1973, 1183, 2449, 1236, 1222, 2450,
     1183, 1973, 1236, 1175, 1183, 1173, 1236, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 2451, 1234, 1234, 1234, 1234,
     1534, 1163, 1234, 1234, 1234, 1234, 2453, 1534, 1143, 1570,
     2452, 1183, 1125, 1236, 1534, 1183, 1570, 1236, 1124, 1097,
     1183, 3601, 1236, 1570, 2454, 2455, 1183, 3601, 1236, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 3601, 1234, 1234,

     1234, 1234, 2030, 2456, 1234, 1234, 1234, 1234, 3601, 2030,
     3601, 2458, 3601, 1183, 3601, 1236, 2030, 1183, 2059, 1236,
     3601, 2459, 1183, 2457, 1236, 2059, 3601, 3601, 1183, 3601,
     1236, 3601, 2059, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 3601, 1234, 1234, 1234, 1234, 1536, 1536, 2460, 1234,
     1234, 1234, 1234, 1536, 3601, 2462, 2461, 1183, 1792, 1236,
     1536, 1183, 1312, 1236, 3601, 1792, 1183, 2464, 1236, 1312,
     2463, 3601, 1792, 1183, 3601, 1236, 1312, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 3601, 3601, 3601, 2465, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 3601, 3601, 2467,

     2466, 1183, 3601, 1236, 3601, 1183, 3601, 1236, 1234, 1234,
     1234, 1234, 3601, 1183, 2468, 1236, 1888, 1183, 3601, 1236,
     3601, 1234, 1234, 1234, 1234, 2495, 2495, 2495, 2495, 3601,
     3601, 3601, 1183, 3601, 1236, 2469, 2238, 2238, 2238, 2238,
     2238, 2238, 2238, 2238, 2470, 1183, 3601, 1236, 2471, 2069,
     2472, 1901, 2473, 1340, 2069, 3601, 2069, 1340, 1901, 3601,
     1342, 1904, 3601, 2069, 1342, 1901, 1339, 1339, 1339, 1339,
     2500, 2500, 2500, 2500, 1418, 1418, 1418, 1418, 2257, 2257,
     2257, 2257, 2474, 1340, 3601, 3601, 1957, 3601, 3601, 3601,
     1342, 1419, 3601, 3601, 2475, 2526, 2526, 2526, 2526, 2277,

     2277, 2277, 2277, 2278, 2278, 2278, 2278, 2278, 2278, 2278,
     2278, 1978, 1970, 3601, 1795, 1795, 1795, 1795, 3601, 3601,
     2529, 2529, 2529, 2529, 1986, 1796, 3601, 2280, 3601, 3601,
     1990, 2280, 3601, 2532, 2532, 2532, 2532, 1994, 2498, 2534,
     2534, 2534, 2534, 1998, 2027, 2027, 2536, 2536, 2536, 2536,
     2006, 2027, 2538, 2538, 2538, 2538, 3601, 3601, 2027, 2542,
     2542, 2542, 2542, 2551, 2552, 3601, 3601, 3601, 2553, 3601,
     3601, 2554, 2555, 2342, 2342, 2342, 2342, 3601, 3601, 3601,
     2343, 2556, 2642, 2557, 2325, 2325, 2325, 2325, 2325, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325, 2325,

     2325, 2325, 2325, 2325, 2326, 2326, 2326, 2326, 2326, 2325,
     2325, 2325, 2325, 2325, 2325, 2325, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2325, 2325, 2325, 2325, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2325, 2325, 2325, 2327, 2574, 2575,
     3601, 3601, 3601, 2576, 3601, 3601, 2577, 2578, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 2579, 3601, 2580, 1127,
     3601, 1402, 3601, 1127, 3601, 3601, 3601, 3601, 1402, 3601,

     3601, 3601, 1110, 3601, 3601, 1402, 1110, 2345, 2345, 2345,
     2345, 2584, 2584, 2584, 2584, 2073, 1973, 3601, 2346, 2345,
     2345, 2345, 2345, 1973, 1166, 1166, 1166, 1166, 3601, 3601,
     1973, 2075, 3601, 2581, 3601, 2075, 2591, 2591, 2591, 2591,
     2582, 1167, 3601, 2075, 2403, 2403, 2403, 2403, 1169, 2606,
     2606, 2606, 2606, 2403, 2403, 2403, 2403, 2139, 3601, 3601,
     1183, 3601, 2140, 1795, 1795, 1795, 1795, 3601, 2405, 2408,
     2408, 2408, 2408, 2408, 1796, 2139, 3601, 2405, 3601, 2406,
     2140, 3601, 3601, 2585, 3601, 3601, 3601, 2408, 2408, 2408,
     2408, 2408, 2073, 2590, 2591, 2591, 2590, 2027, 2027, 1182,

     2412, 2412, 2412, 2412, 2027, 3601, 2412, 2412, 2412, 2412,
     3601, 2027, 1779, 2706, 2706, 2706, 2706, 1183, 1779, 2716,
     2716, 2716, 2716, 1184, 1782, 3601, 1783, 3601, 2441, 3601,
     1782, 1795, 1795, 1795, 1795, 2639, 3601, 1185, 1795, 1795,
     1795, 1795, 1796, 1186, 3601, 3601, 3601, 1187, 1188, 1796,
     1189, 1190, 1191, 3601, 3601, 3601, 1192, 1193, 1194, 1195,
     1196, 3601, 1197, 3601, 1198, 1199, 1200, 1201, 1202, 1795,
     1795, 1795, 1795, 1795, 1795, 1795, 1795, 3601, 3601, 3601,
     1796, 3601, 3601, 3601, 1796, 1795, 1795, 1795, 1795, 3601,
     2640, 1795, 1795, 1795, 1795, 3601, 1796, 1234, 1234, 1234,

     1234, 3601, 1796, 1234, 1234, 1234, 1234, 3601, 3601, 2641,
     1234, 1234, 1234, 1234, 2710, 2710, 2710, 2710, 3601, 2030,
     3601, 1183, 3601, 1236, 2643, 2711, 2030, 1183, 3601, 1236,
     3601, 3601, 2644, 2030, 1183, 3601, 1236, 2079, 2648, 2079,
     2649, 2645, 1234, 1234, 1234, 1234, 2079, 3601, 2646, 3601,
     3601, 2650, 3601, 2079, 2647, 1234, 1234, 1234, 1234, 2653,
     2653, 2653, 2653, 3601, 3601, 3601, 1183, 3601, 1236, 1234,
     1234, 1234, 1234, 2656, 2656, 2656, 2656, 3601, 3601, 1183,
     3601, 1236, 2253, 1183, 2253, 1236, 2712, 1234, 1234, 1234,
     1234, 2253, 3601, 1183, 3601, 1236, 3601, 1183, 2253, 1236,

     1234, 1234, 1234, 1234, 3601, 3601, 3601, 2651, 3601, 3601,
     2652, 1183, 3601, 1236, 3601, 3601, 1234, 1234, 1234, 1234,
     3601, 3601, 3601, 3601, 1183, 3601, 1236, 1234, 1234, 1234,
     1234, 2440, 2440, 2440, 2440, 3601, 3601, 3601, 2654, 3601,
     1183, 2655, 1236, 3601, 3601, 3601, 2657, 2661, 2661, 2661,
     2661, 1183, 3601, 1236, 3601, 1183, 3601, 1236, 1234, 1234,
     1234, 1234, 3601, 1234, 1234, 1234, 1234, 2658, 3601, 3601,
     3601, 1183, 3601, 1236, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1183, 2717, 1236, 3601, 3601, 1183, 2659, 1236,
     1234, 1234, 1234, 1234, 2491, 2491, 2491, 2491, 1183, 3601,

     1236, 3601, 1183, 2660, 1236, 2492, 1234, 1234, 1234, 1234,
     2777, 2777, 2777, 2777, 1183, 3601, 1236, 3601, 3601, 3601,
     2663, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 3601,
     1183, 2662, 1236, 3601, 3601, 3601, 2665, 1234, 1234, 1234,
     1234, 2664, 3601, 3601, 3601, 1183, 3601, 1236, 3601, 1183,
     3601, 1236, 3601, 2666, 1234, 1234, 1234, 1234, 3601, 3601,
     3601, 1183, 3601, 1236, 2667, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 3601, 1234, 1234, 1234, 1234, 1183, 3601,
     1236, 3601, 3601, 3601, 2669, 2059, 3601, 3601, 2668, 1183,
     3601, 1236, 2059, 1183, 3601, 1236, 2069, 2670, 1183, 2059,

     1236, 2069, 3601, 2069, 2671, 1234, 1234, 1234, 1234, 3601,
     2069, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 2672, 3601, 3601, 3601, 2674, 3601, 1183,
     3601, 1236, 3601, 2675, 3601, 1183, 2673, 1236, 3601, 1183,
     3601, 1236, 3601, 1183, 3601, 1236, 3601, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 3601, 3601, 3601,
     2676, 1183, 3601, 1236, 3601, 1183, 3601, 1236, 3601, 1183,
     2677, 1236, 3601, 1183, 3601, 1236, 3601, 1183, 2678, 1236,
     2679, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,

     1234, 1234, 1234, 3601, 2680, 3601, 3601, 3601, 2681, 3601,
     1234, 1234, 1234, 1234, 3601, 1183, 3601, 1236, 3601, 1183,
     2686, 1236, 3601, 1183, 2685, 1236, 2684, 2691, 2691, 2691,
     2691, 3601, 3601, 3601, 1183, 3601, 1236, 2693, 2693, 2693,
     2693, 3601, 1234, 1234, 1234, 2694, 1234, 1234, 1234, 1234,
     2688, 1183, 3601, 1236, 1234, 1234, 1234, 1234, 2689, 3601,
     3601, 1183, 3601, 1236, 2687, 2690, 1183, 3601, 1236, 3601,
     1183, 3601, 1236, 1339, 1339, 1339, 1339, 2079, 1183, 2079,
     1236, 1968, 1968, 1968, 1968, 1312, 2079, 3601, 1969, 3601,
     1340, 3601, 1312, 2079, 1970, 3601, 3601, 1342, 3601, 1312,

     3601, 2696, 1126, 1126, 1126, 1126, 2692, 2771, 2771, 2771,
     2771, 3601, 3601, 1127, 3601, 2695, 3601, 2697, 1127, 3601,
     2584, 2584, 2584, 2584, 2073, 3601, 1110, 2346, 3601, 3601,
     3601, 2772, 1166, 1166, 1166, 1166, 2779, 2780, 2780, 2779,
     3601, 3601, 2715, 3601, 2075, 2780, 2780, 2780, 2780, 1167,
     2792, 2792, 2792, 2792, 3601, 3601, 1169, 3601, 3601, 2770,
     2794, 2794, 2794, 2794, 2606, 2606, 2606, 2606, 3601, 1183,
     2796, 2796, 2796, 2796, 2819, 2819, 2819, 2819, 2133, 2133,
     2133, 2133, 1402, 2583, 3601, 2134, 2773, 1217, 3601, 1402,
     2583, 1217, 2403, 2403, 2403, 2403, 1402, 2583, 2774, 3601,

     3601, 2073, 2412, 2412, 2412, 2412, 1795, 1795, 1795, 1795,
     2706, 2706, 2706, 2706, 1779, 3601, 2405, 1796, 2253, 3601,
     2253, 2659, 1795, 1795, 1795, 1795, 1782, 2253, 1783, 2654,
     3601, 3601, 3601, 1796, 2253, 3601, 2660, 1795, 1795, 1795,
     1795, 1795, 1795, 1795, 1795, 3601, 3601, 3601, 1796, 3601,
     3601, 3601, 1796, 2692, 1795, 1795, 1795, 1795, 1795, 1795,
     1795, 1795, 3601, 3601, 3601, 1796, 3601, 3601, 3601, 1796,
     3601, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 3601,
     3601, 3601, 1796, 3601, 3601, 3601, 1796, 3601, 2825, 1795,
     1795, 1795, 1795, 1234, 1234, 1234, 1234, 2826, 3601, 3601,

     1796, 3601, 3601, 2710, 2710, 2710, 2710, 3601, 2827, 1234,
     1234, 1234, 1234, 3601, 2711, 2829, 3601, 1183, 3601, 1236,
     3601, 1234, 1234, 1234, 1234, 3601, 2833, 2828, 2830, 1312,
     3601, 3601, 2831, 1183, 3601, 1236, 1312, 1234, 1234, 1234,
     1234, 3601, 3601, 1312, 2834, 1183, 3601, 1236, 1234, 1234,
     1234, 1234, 2835, 2653, 2653, 2653, 2653, 3601, 3601, 3601,
     2832, 1183, 3601, 1236, 1234, 1234, 1234, 1234, 2656, 2656,
     2656, 2656, 1183, 3601, 1236, 2890, 3601, 1183, 3601, 1236,
     2841, 2841, 2841, 2841, 1234, 1234, 1234, 1234, 1183, 3601,
     1236, 2842, 1183, 3601, 1236, 2661, 2661, 2661, 2661, 3601,

     2836, 3601, 2583, 3601, 1183, 2837, 1236, 3601, 1183, 2583,
     1236, 1234, 1234, 1234, 1234, 3601, 2583, 3601, 1186, 1183,
     3601, 1236, 3601, 3601, 3601, 2839, 3601, 1810, 1234, 1234,
     1234, 1234, 3601, 3601, 3601, 1183, 2838, 1236, 3601, 3601,
     2840, 3601, 1201, 2848, 2848, 2848, 2848, 3601, 2849, 3601,
     3601, 3601, 1183, 3601, 1236, 3601, 3601, 2843, 2850, 2850,
     2850, 2850, 1234, 1234, 1234, 1234, 3601, 1183, 3601, 1236,
     1234, 1234, 1234, 1234, 2846, 1234, 1234, 1234, 1234, 3601,
     3601, 3601, 1183, 3071, 1236, 3601, 1183, 3601, 1236, 3601,
     3071, 2847, 3601, 3601, 1183, 3601, 1236, 3071, 3601, 1183,

     3601, 1236, 2854, 2854, 2854, 2854, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 3601, 2857, 2857, 2857, 2857, 2851,
     1234, 1234, 1234, 1234, 3189, 3601, 1183, 3601, 1236, 2852,
     1183, 3189, 1236, 3601, 1183, 3601, 1236, 3601, 3189, 2858,
     2853, 1236, 3601, 3601, 1183, 3601, 1236, 1234, 1234, 1234,
     1234, 2861, 2861, 2861, 2861, 1234, 1234, 1234, 1234, 3601,
     3601, 2855, 3601, 3601, 3601, 2856, 1234, 1234, 1234, 1234,
     3601, 1183, 3601, 1236, 3601, 1183, 3601, 1236, 3601, 1183,
     3601, 1236, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1183, 3601, 1236, 3601, 1234, 1234, 1234, 1234, 2859, 2867,

     2867, 2867, 2867, 3601, 3601, 3601, 1183, 3601, 1236, 3601,
     1183, 3601, 1236, 3601, 2862, 3601, 3601, 3601, 1183, 2860,
     1236, 2863, 3601, 2868, 3601, 1236, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 2875, 2875, 2875, 2875, 3601, 3601,
     3601, 2864, 3601, 2869, 2876, 2876, 2876, 2876, 3601, 3601,
     1183, 3601, 1236, 3601, 1183, 3601, 1236, 3601, 1183, 2865,
     1236, 3601, 1234, 1234, 1234, 1234, 3601, 2866, 1183, 3601,
     1236, 2870, 1234, 1234, 1234, 1234, 3601, 1234, 1234, 1234,
     1234, 2691, 2691, 2691, 2691, 2873, 1183, 3601, 1236, 2693,
     2693, 2693, 2693, 3601, 3601, 3601, 1183, 3601, 1236, 3601,

     3601, 1183, 2874, 1236, 3601, 1183, 3601, 1236, 2706, 2706,
     2706, 2706, 3601, 1183, 3601, 1236, 1234, 1234, 1234, 1234,
     3601, 3601, 3601, 2877, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 2879, 3601, 3601, 2878, 1234, 1234, 1234, 1234,
     1183, 3601, 1236, 2880, 2894, 2894, 2894, 2894, 1183, 3601,
     1236, 3601, 1183, 3601, 1236, 2895, 2896, 2896, 2896, 2896,
     1183, 3601, 1236, 2710, 2710, 2710, 2710, 2897, 2897, 2897,
     2897, 3601, 3601, 2881, 2711, 1339, 1339, 1339, 1339, 3601,
     3601, 3601, 3601, 1126, 1126, 1126, 1126, 3601, 2882, 3601,
     3601, 3601, 1340, 2884, 1127, 2771, 2771, 2771, 2771, 1342,

     3601, 2885, 2883, 3601, 3601, 3601, 1127, 1110, 1166, 1166,
     1166, 1166, 2947, 2947, 2947, 2947, 3601, 3191, 3601, 2772,
     2777, 2777, 2777, 2777, 3191, 1167, 2949, 2949, 2949, 2949,
     2900, 3191, 1169, 2950, 2951, 2951, 2950, 2951, 2951, 2951,
     2951, 3601, 3601, 3601, 2901, 2792, 2792, 2792, 2792, 2794,
     2794, 2794, 2794, 3601, 3601, 3601, 2582, 2796, 2796, 2796,
     2796, 1183, 2967, 2967, 2967, 2967, 3601, 2946, 2969, 2969,
     2969, 2969, 3601, 3601, 2773, 3601, 2972, 2972, 2972, 2972,
     2976, 2976, 2976, 2976, 3601, 2982, 2982, 2982, 2982, 2987,
     2987, 2987, 2987, 2988, 2988, 2988, 2988, 3601, 3601, 1186,

     2973, 2819, 2819, 2819, 2819, 3601, 2839, 3601, 1810, 2983,
     3601, 1795, 1795, 1795, 1795, 3601, 1795, 1795, 1795, 1795,
     3601, 2840, 1796, 1201, 3601, 3601, 3601, 1796, 3601, 2984,
     1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 3601, 3601,
     3601, 1796, 3601, 3601, 3601, 1796, 3601, 1795, 1795, 1795,
     1795, 1795, 1795, 1795, 1795, 3601, 3601, 2985, 1796, 3601,
     3601, 3601, 1796, 3000, 3000, 3000, 3000, 3601, 3601, 3601,
     2994, 2995, 2877, 3601, 1796, 1795, 1795, 1795, 1795, 1234,
     1234, 1234, 1234, 3601, 3601, 2996, 1796, 1234, 1234, 1234,
     1234, 3601, 3601, 2997, 3601, 3601, 3601, 1234, 1234, 1234,

     1234, 3601, 3601, 1183, 3601, 1236, 3601, 1234, 1234, 1234,
     1234, 1183, 3601, 1236, 1234, 1234, 1234, 1234, 3601, 2999,
     2998, 1183, 3601, 1236, 3601, 3601, 3002, 3007, 3007, 3007,
     3007, 1183, 3003, 1236, 3001, 3601, 3601, 3004, 1183, 3601,
     1236, 2841, 2841, 2841, 2841, 3009, 3009, 3009, 3009, 3601,
     3010, 1183, 2842, 1236, 3601, 3010, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 3601, 1183, 3601, 1236, 1234, 1234,
     1234, 1234, 2848, 2848, 2848, 2848, 3601, 2849, 3601, 3005,
     1183, 3601, 1236, 3601, 1183, 3601, 1236, 3006, 2850, 2850,
     2850, 2850, 1183, 3601, 1236, 3601, 1183, 3431, 1236, 3020,

     3020, 3020, 3020, 3601, 3431, 1234, 1234, 1234, 1234, 3601,
     3601, 3431, 1183, 3432, 1236, 3011, 2854, 2854, 2854, 2854,
     3432, 3601, 3601, 1183, 3601, 3021, 3601, 3432, 3014, 1183,
     3601, 1236, 1234, 1234, 1234, 1234, 2894, 2894, 2894, 2894,
     1183, 3015, 1236, 3601, 3601, 3017, 3601, 2895, 2896, 2896,
     2896, 2896, 2897, 2897, 2897, 2897, 1183, 3601, 1236, 3601,
     3018, 3601, 3019, 2435, 2436, 2436, 2436, 2436, 2435, 2435,
     2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435, 2435,
     2435, 2435, 2435, 3023, 1234, 1234, 1234, 1234, 2437, 3024,
     2438, 2435, 2435, 2435, 2435, 2857, 2857, 2857, 2857, 3026,

     3026, 3026, 3026, 3027, 3027, 3027, 3027, 3601, 1183, 3601,
     1236, 3601, 3601, 3601, 2435, 2435, 2435, 2435, 3022, 2858,
     3601, 1236, 3601, 1740, 3601, 3601, 3601, 1183, 3601, 1236,
     3028, 3028, 3028, 3028, 2861, 2861, 2861, 2861, 3029, 3029,
     3029, 3029, 3601, 2435, 2435, 2435, 2439, 3601, 3601, 3025,
     1234, 1234, 1234, 1234, 2868, 3601, 1236, 3601, 1183, 3601,
     1236, 3601, 1183, 3601, 1236, 3031, 3031, 3031, 3031, 1234,
     1234, 1234, 1234, 3601, 1183, 3601, 1236, 1234, 1234, 1234,
     1234, 3601, 2867, 2867, 2867, 2867, 3601, 3601, 3601, 3032,
     3601, 1236, 3601, 1183, 3601, 1236, 3038, 3038, 3038, 3038,

     3601, 1183, 3601, 1236, 3601, 3601, 2868, 3030, 1236, 3033,
     2894, 2894, 2894, 2894, 1234, 1234, 1234, 1234, 3601, 3601,
     1740, 2895, 1234, 1234, 1234, 1234, 2984, 3044, 3044, 3044,
     3044, 3601, 3035, 3601, 3601, 3601, 3037, 3034, 1183, 3601,
     1236, 2875, 2875, 2875, 2875, 3601, 1183, 3036, 1236, 3601,
     3601, 3045, 3601, 1236, 2985, 2876, 2876, 2876, 2876, 1234,
     1234, 1234, 1234, 3601, 3601, 1183, 3601, 1236, 3039, 3046,
     3046, 3046, 3046, 1234, 1234, 1234, 1234, 3601, 3601, 1183,
     3601, 1236, 3601, 1183, 3601, 1236, 3601, 3040, 1234, 1234,
     1234, 1234, 3601, 1183, 3601, 1236, 3601, 1183, 3601, 1236,

     3051, 3051, 3051, 3051, 1234, 1234, 1234, 1234, 2896, 2896,
     2896, 2896, 1183, 3601, 1236, 3601, 3601, 3601, 2851, 2897,
     2897, 2897, 2897, 3601, 1183, 3601, 1236, 3601, 1183, 3601,
     1236, 3601, 3047, 3601, 1339, 1339, 1339, 1339, 3601, 3601,
     3601, 3601, 1166, 1166, 1166, 1166, 2947, 2947, 2947, 2947,
     3601, 1340, 2949, 2949, 2949, 2949, 3601, 3050, 1342, 1167,
     3601, 3601, 3601, 2432, 3601, 3601, 1169, 3096, 3097, 3097,
     3096, 3097, 3097, 3097, 3097, 3104, 3104, 3104, 3104, 3109,
     3109, 3109, 3109, 2967, 2967, 2967, 2967, 2969, 2969, 2969,
     2969, 3059, 3601, 3601, 3601, 1183, 3601, 2503, 2972, 2972,

     2972, 2972, 3026, 3026, 3026, 3026, 3601, 3601, 3601, 3094,
     3116, 3116, 3116, 3116, 3117, 3117, 3117, 3117, 2976, 2976,
     2976, 2976, 2973, 3118, 3118, 3118, 3118, 3120, 3120, 3120,
     3120, 2982, 2982, 2982, 2982, 3601, 3601, 3601, 2983, 3038,
     3038, 3038, 3038, 3129, 3129, 3129, 3129, 2987, 2987, 2987,
     2987, 3121, 3601, 3601, 3601, 2983, 2988, 2988, 2988, 2988,
     3131, 3131, 3131, 3131, 3601, 3601, 3601, 3130, 3601, 3601,
     3601, 3122, 3601, 3601, 3601, 2984, 3134, 3134, 3134, 3134,
     1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 3601, 3601,
     3601, 1796, 3601, 3601, 3601, 1796, 3601, 3601, 3601, 3123,

     3601, 3601, 3601, 2985, 1795, 1795, 1795, 1795, 3138, 3138,
     3138, 3138, 3601, 3601, 3601, 1796, 3601, 3601, 3601, 1796,
     1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 3601, 3601,
     3601, 1796, 3601, 3601, 3601, 1796, 3601, 3000, 3000, 3000,
     3000, 3136, 1795, 1795, 1795, 1795, 3601, 3135, 1796, 1234,
     1234, 1234, 1234, 1796, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 3601, 3601, 3601, 3137,
     3601, 3601, 3601, 1183, 3601, 1236, 3601, 3601, 1183, 3139,
     1236, 3601, 1183, 3601, 1236, 3601, 1183, 3601, 1236, 3140,
     3144, 3144, 3144, 3144, 3007, 3007, 3007, 3007, 3601, 3601,

     3141, 3142, 3601, 3601, 2874, 3009, 3009, 3009, 3009, 3601,
     3010, 3601, 3601, 3601, 1183, 3010, 1236, 3601, 1183, 3601,
     1236, 3601, 3601, 3601, 3143, 1234, 1234, 1234, 1234, 3601,
     1234, 1234, 1234, 1234, 3149, 3149, 3149, 3149, 3020, 3020,
     3020, 3020, 1234, 1234, 1234, 1234, 3601, 3601, 3601, 1183,
     3601, 1236, 3601, 3601, 1183, 3601, 1236, 3601, 1183, 3601,
     1236, 3601, 1183, 3601, 3021, 3601, 1183, 3601, 1236, 3157,
     3157, 3157, 3157, 3601, 1234, 1234, 1234, 1234, 3159, 3159,
     3159, 3159, 3026, 3026, 3026, 3026, 3601, 3027, 3027, 3027,
     3027, 3601, 3601, 1183, 3601, 1236, 3145, 3148, 1183, 3601,

     1236, 3601, 3160, 3601, 1236, 3028, 3028, 3028, 3028, 3601,
     3156, 1183, 3601, 1236, 3029, 3029, 3029, 3029, 1234, 1234,
     1234, 1234, 3031, 3031, 3031, 3031, 3601, 3601, 3601, 2868,
     3601, 1236, 3601, 3158, 3162, 3162, 3162, 3162, 1183, 3601,
     1236, 3601, 1183, 3601, 1236, 3601, 3032, 3601, 1236, 1234,
     1234, 1234, 1234, 3601, 1234, 1234, 1234, 1234, 1740, 1234,
     1234, 1234, 1234, 3601, 3601, 3601, 3122, 3166, 3166, 3166,
     3166, 3601, 3601, 1183, 3601, 1236, 3601, 3161, 1183, 3601,
     1236, 3601, 3601, 1183, 3601, 1236, 1234, 1234, 1234, 1234,
     3601, 1183, 3601, 1236, 3123, 3038, 3038, 3038, 3038, 1234,

     1234, 1234, 1234, 3163, 1234, 1234, 1234, 1234, 3601, 3601,
     1183, 3601, 1236, 1234, 1234, 1234, 1234, 3601, 3165, 3164,
     3601, 3601, 3601, 1183, 3601, 1236, 3601, 3601, 1183, 3601,
     1236, 3044, 3044, 3044, 3044, 3601, 3601, 1183, 3601, 1236,
     3173, 3173, 3173, 3173, 3167, 3168, 3601, 3046, 3046, 3046,
     3046, 3176, 3176, 3176, 3176, 3045, 3601, 1236, 1234, 1234,
     1234, 1234, 3601, 3601, 1740, 3051, 3051, 3051, 3051, 3601,
     3601, 1183, 3169, 1236, 3601, 1183, 3601, 1236, 3601, 3601,
     3601, 3172, 1183, 3601, 1236, 3183, 3183, 3183, 3183, 1183,
     3601, 1236, 3184, 3184, 3184, 3184, 3601, 1186, 3185, 3185,

     3185, 3185, 3601, 3601, 3174, 3601, 1810, 1339, 1339, 1339,
     1339, 3196, 3196, 3196, 3196, 3601, 3601, 3179, 3601, 2840,
     3601, 1201, 3175, 3601, 1340, 1166, 1166, 1166, 1166, 3601,
     3601, 1342, 3213, 3213, 3213, 3213, 3214, 3215, 3215, 3214,
     3601, 3601, 1167, 3215, 3215, 3215, 3215, 3601, 3601, 1169,
     3219, 3219, 3219, 3219, 3104, 3104, 3104, 3104, 3224, 3224,
     3224, 3224, 3109, 3109, 3109, 3109, 3187, 1183, 3227, 3227,
     3227, 3227, 3228, 3228, 3228, 3228, 3230, 3230, 3230, 3230,
     3116, 3116, 3116, 3116, 3117, 3117, 3117, 3117, 3118, 3118,
     3118, 3118, 3120, 3120, 3120, 3120, 3601, 3601, 3212, 3601,

     3231, 3162, 3162, 3162, 3162, 3601, 3601, 3601, 2983, 3236,
     3236, 3236, 3236, 3601, 3601, 3601, 3121, 3129, 3129, 3129,
     3129, 3173, 3173, 3173, 3173, 3131, 3131, 3131, 3131, 3240,
     3240, 3240, 3240, 3601, 3601, 3601, 3122, 3134, 3134, 3134,
     3134, 3130, 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795,
     3601, 3601, 3601, 1796, 3601, 3601, 3601, 1796, 3244, 3244,
     3244, 3244, 3601, 3601, 3123, 3138, 3138, 3138, 3138, 1796,
     1795, 1795, 1795, 1795, 3601, 1186, 1796, 3246, 3246, 3246,
     3246, 1796, 3174, 3601, 1810, 3601, 3601, 3601, 1796, 3601,
     3247, 3247, 3247, 3247, 3601, 3601, 3601, 2840, 3601, 1201,

     3175, 1796, 3601, 3601, 3601, 3243, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 3601, 3242, 3144, 3144, 3144, 3144,
     1234, 1234, 1234, 1234, 3253, 3253, 3253, 3253, 3245, 3601,
     1183, 3601, 1236, 3601, 1183, 3601, 1236, 3601, 3601, 3601,
     1183, 3601, 1236, 3601, 1183, 3601, 1236, 3601, 1183, 3601,
     1236, 3149, 3149, 3149, 3149, 3248, 3254, 3254, 3254, 3254,
     1234, 1234, 1234, 1234, 3157, 3157, 3157, 3157, 3601, 3249,
     3261, 3261, 3261, 3262, 3601, 1183, 3601, 1236, 3601, 3601,
     3250, 3601, 3601, 3601, 1183, 3601, 1236, 3601, 1183, 3601,
     1236, 3601, 3601, 3601, 1183, 3601, 1236, 3159, 3159, 3159,

     3159, 3263, 3263, 3263, 3263, 3162, 3162, 3162, 3162, 3601,
     3601, 3601, 3278, 3278, 3278, 3278, 3173, 3173, 3173, 3173,
     3601, 3160, 3601, 1236, 3601, 1740, 3601, 3260, 3183, 3183,
     3183, 3183, 3601, 3601, 3601, 3255, 3264, 3265, 3265, 3265,
     3265, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264,
     3264, 3264, 3264, 3264, 3264, 3264, 1234, 1234, 1234, 1234,
     3601, 3266, 3264, 3267, 3264, 3264, 3264, 3264, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 3184, 3184, 3184, 3184,
     1183, 3601, 1236, 3166, 3166, 3166, 3166, 3264, 3264, 3264,
     3264, 3279, 1183, 3601, 1236, 3601, 1183, 3601, 1236, 3601,

     3601, 3601, 3269, 3272, 3272, 3272, 3272, 1183, 3601, 1236,
     3601, 1234, 1234, 1234, 1234, 3601, 3264, 3264, 3264, 3268,
     3601, 3601, 1234, 1234, 1234, 1234, 3601, 3273, 3601, 1236,
     1234, 1234, 1234, 1234, 3601, 1183, 3270, 1236, 3176, 3176,
     3176, 3176, 3601, 3601, 3271, 3601, 1183, 3274, 1236, 3601,
     3601, 3276, 3601, 3601, 1183, 3601, 1236, 3261, 3261, 3261,
     3261, 3601, 1183, 3601, 1236, 3185, 3185, 3185, 3185, 3183,
     3183, 3183, 3183, 3601, 3601, 3275, 3184, 3184, 3184, 3184,
     3601, 1183, 3601, 1236, 3185, 3185, 3185, 3185, 3285, 3285,
     3285, 3285, 3601, 3601, 3601, 3277, 3601, 3281, 3286, 3286,

     3286, 3286, 3196, 3196, 3196, 3196, 1166, 1166, 1166, 1166,
     3213, 3213, 3213, 3213, 3601, 1340, 3307, 3308, 3308, 3307,
     3601, 3601, 1342, 1167, 3308, 3308, 3308, 3308, 3601, 3601,
     1169, 3311, 3311, 3311, 3311, 3219, 3219, 3219, 3219, 3313,
     3313, 3313, 3313, 3314, 3314, 3314, 3314, 3601, 1183, 3224,
     3224, 3224, 3224, 3317, 3317, 3317, 3317, 3227, 3227, 3227,
     3227, 3228, 3228, 3228, 3228, 3318, 3318, 3318, 3319, 3230,
     3230, 3230, 3230, 3263, 3263, 3263, 3263, 3601, 3306, 3320,
     3320, 3320, 3320, 3236, 3236, 3236, 3236, 3324, 3324, 3324,
     3324, 3601, 3601, 3231, 3240, 3240, 3240, 3240, 3318, 3318,

     3318, 3318, 1795, 1795, 1795, 1795, 3331, 3331, 3331, 3331,
     3601, 3325, 3601, 1796, 3601, 3601, 3601, 1796, 3244, 3244,
     3244, 3244, 3332, 3332, 3332, 3332, 3601, 3601, 3601, 1796,
     3601, 3326, 3601, 1796, 3246, 3246, 3246, 3246, 3247, 3247,
     3247, 3247, 3601, 3601, 3601, 1796, 3601, 3601, 3601, 1796,
     1234, 1234, 1234, 1234, 3601, 3601, 3601, 3330, 3601, 3327,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 3334, 3334,
     3334, 3334, 3601, 3601, 1183, 3601, 1236, 3253, 3253, 3253,
     3253, 3601, 3601, 3601, 1183, 3601, 1236, 3601, 1183, 3601,
     1236, 3254, 3254, 3254, 3254, 3601, 1234, 1234, 1234, 1234,

     3601, 1183, 3601, 1236, 3261, 3261, 3261, 3261, 3261, 3261,
     3261, 3261, 3263, 3263, 3263, 3263, 3601, 3601, 2860, 3333,
     1183, 3601, 1236, 3601, 1234, 1234, 1234, 1234, 1183, 3601,
     1236, 3601, 1183, 3601, 1236, 1234, 1234, 1234, 1234, 3601,
     3346, 3346, 3346, 3346, 3601, 3601, 3601, 2441, 1183, 3601,
     1236, 3601, 3601, 3338, 3348, 3348, 3348, 3348, 3601, 1183,
     3601, 1236, 3601, 3601, 3347, 3339, 1236, 3601, 3601, 3601,
     3255, 3278, 3278, 3278, 3278, 3344, 3601, 3601, 1740, 3601,
     3340, 3264, 3265, 3265, 3265, 3265, 3264, 3264, 3264, 3341,
     3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264,

     3264, 3285, 3285, 3285, 3285, 3601, 3266, 3264, 3267, 3264,
     3264, 3264, 3264, 3342, 3342, 3342, 3342, 3342, 3342, 3342,
     3342, 3342, 3342, 3342, 3342, 3342, 3342, 3342, 3342, 3342,
     3342, 3342, 3264, 3264, 3264, 3264, 3342, 3342, 3342, 3342,
     3342, 3342, 3342, 3342, 3342, 3342, 3342, 3342, 3342, 3342,
     3342, 3342, 3342, 3342, 3342, 3342, 3342, 3342, 3342, 3342,
     3342, 3264, 3264, 3264, 3343, 1234, 1234, 1234, 1234, 3272,
     3272, 3272, 3272, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1183,
     3601, 1236, 3601, 3273, 3601, 1236, 3601, 1183, 3601, 1236,

     3601, 1183, 3601, 1236, 3601, 1183, 3601, 1236, 3601, 1183,
     3601, 1236, 3601, 3326, 3353, 3353, 3353, 3353, 3601, 1234,
     1234, 1234, 1234, 3351, 3601, 3601, 3601, 3349, 3601, 3286,
     3286, 3286, 3286, 3601, 3367, 3367, 3367, 3367, 3345, 3601,
     3601, 3327, 3350, 1183, 3601, 1236, 1340, 3368, 3369, 3369,
     3368, 1167, 3601, 1342, 3601, 3601, 3601, 3352, 1169, 3369,
     3369, 3369, 3369, 3371, 3371, 3371, 3371, 3311, 3311, 3311,
     3311, 3372, 3372, 3372, 3372, 3601, 3355, 3313, 3313, 3313,
     3313, 3601, 3601, 1183, 3314, 3314, 3314, 3314, 3317, 3317,
     3317, 3317, 3601, 3354, 3318, 3318, 3318, 3318, 3318, 3318,

     3318, 3318, 3320, 3320, 3320, 3320, 3376, 3376, 3376, 3376,
     3324, 3324, 3324, 3324, 3348, 3348, 3348, 3348, 1795, 1795,
     1795, 1795, 3331, 3331, 3331, 3331, 3601, 3601, 3601, 1796,
     3377, 3601, 3601, 1796, 3325, 3332, 3332, 3332, 3332, 1234,
     1234, 1234, 1234, 3601, 3601, 3601, 1796, 3334, 3334, 3334,
     3334, 3601, 3601, 3601, 3326, 3339, 3601, 1234, 1234, 1234,
     1234, 3601, 3601, 1183, 3601, 1236, 3388, 3388, 3388, 3388,
     3340, 3388, 3388, 3388, 3388, 1234, 1234, 1234, 1234, 3601,
     3601, 1183, 3327, 1236, 1234, 1234, 1234, 1234, 3601, 3601,
     3601, 3382, 3601, 3390, 3601, 3601, 3383, 3601, 3390, 1183,

     3601, 1236, 3346, 3346, 3346, 3346, 3601, 3601, 1183, 3601,
     1236, 3393, 3393, 3393, 3393, 3601, 2175, 3391, 3348, 3348,
     3348, 3348, 1234, 1234, 1234, 1234, 3347, 3601, 1236, 1234,
     1234, 1234, 1234, 3601, 3601, 1740, 1234, 1234, 1234, 1234,
     3397, 3397, 3397, 3397, 3601, 3601, 1183, 3601, 1236, 3353,
     3353, 3353, 3353, 1183, 3601, 1236, 3392, 3601, 3601, 3601,
     1183, 3601, 1236, 3601, 3398, 3601, 1236, 3601, 3394, 1234,
     1234, 1234, 1234, 3399, 3399, 3399, 3399, 3367, 3367, 3367,
     3367, 3601, 3601, 3396, 3408, 3409, 3409, 3408, 3409, 3409,
     3409, 3409, 3601, 1183, 3601, 1236, 3601, 3395, 3601, 3601,

     3601, 1169, 3371, 3371, 3371, 3371, 3372, 3372, 3372, 3372,
     3601, 3601, 1183, 3376, 3376, 3376, 3376, 3393, 3393, 3393,
     3393, 3417, 3417, 3417, 3417, 3601, 3601, 3601, 2175, 1795,
     1795, 1795, 1795, 3420, 3420, 3420, 3420, 3377, 3601, 3601,
     1796, 1234, 1234, 1234, 1234, 3418, 3388, 3388, 3388, 3388,
     3601, 3601, 3400, 3388, 3388, 3388, 3388, 1234, 1234, 1234,
     1234, 3424, 3424, 3424, 3424, 1183, 3601, 1236, 3393, 3393,
     3393, 3393, 3601, 3390, 3601, 1234, 1234, 1234, 1234, 3601,
     3390, 1183, 3601, 1236, 3601, 3425, 3601, 1236, 1234, 1234,
     1234, 1234, 3419, 1234, 1234, 1234, 1234, 3601, 3601, 1183,

     3179, 1236, 3601, 3601, 3423, 3397, 3397, 3397, 3397, 3601,
     3601, 3601, 1183, 3601, 1236, 3426, 3601, 1183, 3601, 1236,
     3428, 3428, 3428, 3428, 3399, 3399, 3399, 3399, 3601, 3398,
     3601, 1236, 3429, 3429, 3429, 3429, 3601, 3601, 3601, 3352,
     3433, 3434, 3434, 3433, 1740, 3434, 3434, 3434, 3434, 3437,
     3437, 3437, 3437, 3417, 3417, 3417, 3417, 3428, 3428, 3428,
     3428, 3427, 3601, 1795, 1795, 1795, 1795, 3601, 3601, 1183,
     3601, 3601, 3601, 3438, 1796, 3601, 3601, 3418, 3420, 3420,
     3420, 3420, 1234, 1234, 1234, 1234, 3424, 3424, 3424, 3424,
     3444, 3444, 3444, 3444, 1234, 1234, 1234, 1234, 1234, 1234,

     1234, 1234, 3428, 3428, 3428, 3428, 1183, 3601, 1236, 3601,
     3425, 3430, 1236, 3601, 1740, 3601, 3601, 3601, 1183, 3601,
     1236, 3601, 1183, 3601, 1236, 3601, 3601, 3601, 3392, 3601,
     3601, 3441, 3429, 3429, 3429, 3429, 3445, 3447, 3448, 3448,
     3447, 3448, 3448, 3448, 3448, 3437, 3437, 3437, 3437, 3444,
     3444, 3444, 3444, 1795, 1795, 1795, 1795, 3444, 3444, 3444,
     3444, 3601, 3601, 3601, 1796, 1183, 3601, 3601, 3601, 3438,
     3446, 1234, 1234, 1234, 1234, 3456, 3456, 3456, 3456, 3458,
     3459, 3459, 3458, 3459, 3459, 3459, 3459, 3462, 3462, 3462,
     3462, 3464, 3464, 3464, 3464, 1183, 3601, 1236, 3601, 3457,

     3601, 1236, 1796, 3465, 3465, 3465, 3465, 1183, 3601, 3601,
     3601, 3463, 1234, 1234, 1234, 1234, 3601, 3601, 3455, 3601,
     3452, 3456, 3456, 3456, 3456, 3468, 3468, 3468, 3468, 3469,
     3470, 3470, 3469, 3601, 3601, 3601, 1183, 3601, 1236, 3470,
     3470, 3470, 3470, 3601, 3601, 3457, 3601, 1236, 3601, 1740,
     3471, 3471, 3471, 3471, 3462, 3462, 3462, 3462, 3446, 3468,
     3468, 3468, 3468, 1183, 3464, 3464, 3464, 3464, 3465, 3465,
     3465, 3465, 3601, 3601, 3601, 1796, 3601, 3601, 3463, 3601,
     3601, 3601, 3466, 3472, 3472, 3472, 3472, 3468, 3468, 3468,
     3468, 3474, 3475, 3475, 3474, 3475, 3475, 3475, 3475, 3471,

     3471, 3471, 3471, 3472, 3472, 3472, 3472, 3476, 3477, 3477,
     3476, 3477, 3477, 3477, 3477, 3478, 3479, 3479, 3478, 1183,
     3479, 3479, 3479, 3479, 3480, 3481, 3481, 3480, 3481, 3481,
     3481, 3481, 3601, 3601, 3601, 1183, 3482, 3483, 3483, 3482,
     3483, 3483, 3483, 3483, 1183, 3484, 3485, 3485, 3484, 3601,
     3601, 3601, 1183, 3485, 3485, 3485, 3485, 3486, 3487, 3487,
     3486, 3601, 3473, 3601, 1183, 3487, 3487, 3487, 3487, 3488,
     3489, 3489, 3488, 3489, 3489, 3489, 3489, 1183, 3490, 3491,
     3491, 3490, 3491, 3491, 3491, 3491, 3601, 3601, 3601, 1183,
     3492, 3493, 3493, 3492, 3601, 3601, 3601, 1183, 3493, 3493,

     3493, 3493, 3494, 3495, 3495, 3494, 1183, 3495, 3495, 3495,
     3495, 3496, 3497, 3497, 3496, 3497, 3497, 3497, 3497, 3601,
     3601, 3601, 1183, 3498, 3499, 3499, 3498, 3499, 3499, 3499,
     3499, 1183, 3500, 3501, 3501, 3500, 3601, 3601, 3601, 1183,
     3501, 3501, 3501, 3501, 3502, 3503, 3503, 3502, 3601, 3601,
     3601, 1183, 3503, 3503, 3503, 3503, 3504, 3505, 3505, 3504,
     3505, 3505, 3505, 3505, 1183, 3506, 3507, 3507, 3506, 3507,
     3507, 3507, 3507, 3601, 3601, 3601, 1183, 3508, 3509, 3509,
     3508, 3601, 3601, 3601, 1183, 3509, 3509, 3509, 3509, 3510,
     3511, 3511, 3510, 1183, 3511, 3511, 3511, 3511, 3512, 3513,

     3513, 3512, 3513, 3513, 3513, 3513, 3601, 3601, 3601, 1183,
     3514, 3515, 3515, 3514, 3515, 3515, 3515, 3515, 1183, 3516,
     3517, 3517, 3516, 3601, 3601, 3601, 1183, 3517, 3517, 3517,
     3517, 3518, 3519, 3519, 3518, 3601, 3601, 3601, 1183, 3519,
     3519, 3519, 3519, 3520, 3521, 3521, 3520, 3521, 3521, 3521,
     3521, 1183, 3522, 3523, 3523, 3522, 3523, 3523, 3523, 3523,
     3601, 3601, 3601, 1183, 3524, 3525, 3525, 3524, 3601, 3601,
     3601, 1183, 3525, 3525, 3525, 3525, 3526, 3527, 3527, 3526,
     1183, 3527, 3527, 3527, 3527, 3528, 3529, 3529, 3528, 3529,
     3529, 3529, 3529, 3601, 3601, 3601, 1183, 3530, 3531, 3531,

     3530, 3531, 3531, 3531, 3531, 1183, 3532, 3533, 3533, 3532,
     3601, 3601, 3601, 1183, 3533, 3533, 3533, 3533, 3534, 3535,
     3535, 3534, 3601, 3601, 3601, 1183, 3535, 3535, 3535, 3535,
     3536, 3537, 3537, 3536, 3537, 3537, 3537, 3537, 1183, 3538,
     3539, 3539, 3538, 3539, 3539, 3539, 3539, 3601, 3601, 3601,
     1183, 3540, 3541, 3541, 3540, 3601, 3601, 3601, 1183, 3541,
     3541, 3541, 3541, 3542, 3543, 3543, 3542, 1183, 3543, 3543,
     3543, 3543, 3544, 3545, 3545, 3544, 3545, 3545, 3545, 3545,
     3601, 3601, 3601, 1183, 3546, 3547, 3547, 3546, 3547, 3547,
     3547, 3547, 1183, 3548, 3549, 3549, 3548, 3601, 3601, 3601,

     1183, 3549, 3549, 3549, 3549, 3550, 3551, 3551, 3550, 3601,
     3601, 3601, 1183, 3551, 3551, 3551, 3551, 3552, 3553, 3553,
     3552, 3553, 3553, 3553, 3553, 1183, 3554, 3555, 3555, 3554,
     3555, 3555, 3555, 3555, 3601, 3601, 3601, 1183, 3556, 3557,
     3557, 3556, 3601, 3601, 3601, 1183, 3557, 3557, 3557, 3557,
     3558, 3559, 3559, 3558, 1183, 3559, 3559, 3559, 3559, 3560,
     3561, 3561, 3560, 3561, 3561, 3561, 3561, 3601, 3601, 3601,
     1183, 3562, 3563, 3563, 3562, 3563, 3563, 3563, 3563, 1183,
     3564, 3565, 3565, 3564, 3601, 3601, 3601, 1183, 3565, 3565,
     3565, 3565, 3566, 3567, 3567, 3566, 3601, 3601, 3601, 1183,

     3567, 3567, 3567, 3567, 3568, 3569, 3569, 3568, 3569, 3569,
     3569, 3569, 1183, 3570, 3571, 3571, 3570, 3571, 3571, 3571,
     3571, 3601, 3601, 3601, 1183, 3572, 3573, 3573, 3572, 3601,
     3601, 3601, 1183, 3573, 3573, 3573, 3573, 3574, 3575, 3575,
     3574, 1183, 3575, 3575, 3575, 3575, 3576, 3577, 3577, 3576,
     3577, 3577, 3577, 3577, 3601, 3601, 3601, 1183, 3578, 3579,
     3579, 3578, 3579, 3579, 3579, 3579, 1183, 3580, 3581, 3581,
     3580, 3601, 3601, 3601, 1183, 3581, 3581, 3581, 3581, 3582,
     3583, 3583, 3582, 3601, 3601, 3601, 1183, 3583, 3583, 3583,
     3583, 3584, 3585, 3585, 3584, 3585, 3585, 3585, 3585, 1183,

     3586, 3587, 3587, 3586, 3587, 3587, 3587, 3587, 3601, 3601,
     3601, 1183, 3588, 3589, 3589, 3588, 3601, 3601, 3601, 1183,
     3589, 3589, 3589, 3589, 3590, 3591, 3591, 3590, 1183, 3591,
     3591, 3591, 3591, 3592, 3593, 3593, 3592, 3593, 3593, 3593,
     3593, 3601, 3601, 3601, 1183, 3594, 3595, 3595, 3594, 3595,
     3595, 3595, 3595, 1183, 3596, 3597, 3597, 3596, 3601, 3601,
     3601, 1183, 3597, 3597, 3597, 3597, 3598, 3599, 3599, 3598,
     3601, 3601, 3601, 1183, 3599, 3599, 3599, 3599, 3600, 1208,
     1208, 3600, 1208, 1208, 1208, 1208, 1183, 3600, 1208, 1208,
     3600, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1183, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 1183,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,

      308,  308,  308,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  354,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  419,

      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
      419,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  467,  467,  467,  467,  467,

      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  467,  467,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  506,  506,  506,  506,  506,  506,  506,  506,  506,

      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,

      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
      538,  538,  538,  538,  538,  538,  538,  538,  538,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,

      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  589,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,

      609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
      609,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,

      633,  633,  633,  633,  633,  633,  633,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  648,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  661,  661,  661,  661,  661,  661,  661,  661,  661,
      661,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,
      669,  669,  669,  669,  669,  669,  669,  669,  669,  669,

      669,  669,  669,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,  798,  798,  808,  808,  808,  808,  808,

      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  808,  808,  808,  808,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  820,  820,
      820,  832,  832,  832,  832,  832,  832,  832,  832,  832,

      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  852,  852,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,

      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  876,  876,  876,  876,  876,
      876,  876,  876,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,

      885,  885,  885,  885,  885,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  894,  894,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,

      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      917,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  499,  499,  499,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  943,  943,  943,  943,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,

      960,  960,  960,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  967,  967,  967,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  973,  973,  973,  973,  973,  973,  995,  995,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  995,  995,  995,  995, 1015,

     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1037, 1037, 1037, 1037, 1037,

     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1074, 3601, 3601, 1074, 3601, 3601, 3601, 3601, 3601,

     3601, 1074, 3601, 3601, 3601, 3601, 3601, 1074, 3601, 3601,
     3601, 3601, 3601, 3601, 1074, 3601, 3601, 3601, 3601, 3601,
     3601, 1074, 1088, 1088, 1088, 1088, 3601, 3601, 3601, 1088,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 1088, 3601, 3601, 3601, 3601,
     3601, 3601, 1088, 1092, 1092, 1092, 1092, 1092, 3601, 3601,
     1092, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     1092, 3601, 3601, 3601, 3601, 3601, 1092, 3601, 3601, 3601,
     3601, 3601, 1092, 1092, 1095, 1095, 1095, 1095, 3601, 3601,
     3601, 1095, 3601, 3601, 3601, 3601, 3601, 3601, 1095, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 1095, 3601, 3601,
     3601, 3601, 3601, 1095, 1095, 1101, 1101, 1101, 1101, 3601,
     3601, 3601, 3601, 3601, 3601, 1101, 3601, 3601, 1101, 1101,
     3601, 1101, 1101, 1101, 1101, 3601, 3601, 3601, 1101, 3601,
     3601, 3601, 3601, 3601, 3601, 1101, 1107, 1107, 1107, 1107,
     3601, 3601, 3601, 1107, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1107,
     3601, 3601, 3601, 3601, 3601, 3601, 1107, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 3601, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,

     1111, 1111, 1111, 1111, 1111, 3601, 1111, 1111, 1111, 1117,
     1117, 1117, 1117, 3601, 3601, 3601, 1117, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 1117, 3601, 3601, 3601, 3601, 3601, 3601, 1117,
     1120, 1120, 1120, 1120, 1120, 3601, 3601, 1120, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 1120, 3601, 3601,
     3601, 3601, 3601, 1120, 3601, 3601, 3601, 3601, 3601, 1120,
     1120, 1128, 1128, 1128, 1128, 3601, 3601, 3601, 3601, 3601,
     3601, 1128, 3601, 3601, 3601, 3601, 3601, 1128, 1128, 3601,
     3601, 3601, 3601, 3601, 1128, 3601, 3601, 3601, 3601, 3601,

     3601, 1128, 1138, 3601, 3601, 3601, 1138, 3601, 1138, 3601,
     3601, 1138, 3601, 3601, 3601, 1138, 3601, 3601, 3601, 3601,
     3601, 3601, 1138, 1155, 1155, 1155, 1155, 3601, 3601, 3601,
     1155, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 1155, 3601, 3601, 3601,
     1155, 3601, 3601, 1155, 1168, 1168, 1168, 1168, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1168, 3601,
     1168, 1168, 3601, 3601, 3601, 3601, 3601, 1168, 3601, 3601,
     3601, 3601, 3601, 3601, 1168, 1174, 1174, 3601, 1174, 3601,
     1174, 1174, 1174, 1174, 1174, 3601, 1174, 1174, 1174, 1174,

     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1205, 1205, 1205,
     1205, 3601, 3601, 3601, 1205, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     1205, 3601, 3601, 3601, 3601, 3601, 3601, 1205, 1211, 1211,
     1211, 1211, 1211, 3601, 3601, 1211, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 1211, 3601, 3601, 3601, 3601,
     3601, 1211, 3601, 3601, 3601, 3601, 3601, 1211, 1211, 1218,
     1218, 1218, 1218, 3601, 3601, 3601, 1218, 1218, 3601, 3601,
     3601, 1218, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 1218, 3601, 3601, 3601, 3601, 3601, 3601, 1218,
     1235, 1235, 1235, 1235, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 1235, 1235, 3601, 1235,
     3601, 3601, 3601, 1235, 3601, 3601, 3601, 3601, 3601, 3601,
     1235, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1271, 1271, 3601, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 3601, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1271, 1271, 1271, 1271, 1279, 1279, 1279, 1279, 3601,
     3601, 3601, 1279, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1279, 3601,
     3601, 3601, 3601, 3601, 3601, 1279, 1282, 1282, 1282, 1282,
     1282, 3601, 3601, 1282, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 1282, 3601, 3601, 3601, 3601, 3601, 1282,
     3601, 3601, 3601, 3601, 3601, 1282, 1282, 1285, 1285, 1285,
     1285, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 1285, 1285, 3601, 1285, 3601, 3601, 3601,
     1285, 3601, 3601, 3601, 3601, 3601, 3601, 1285, 1325, 1325,

     3601, 3601, 1325, 1325, 3601, 3601, 1325, 1325, 3601, 1325,
     1325, 1325, 1325, 1325, 3601, 1325, 1325, 1325, 1325, 1325,
     1325, 3601, 1325, 1325, 1325, 1325, 3601, 3601, 1325, 1325,
     1329, 1329, 3601, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1331, 1331, 3601, 1331, 3601, 1331, 1331, 1331,
     1331, 1331, 3601, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1331, 1341, 1341, 1341, 1341, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1341, 3601,
     1341, 1341, 3601, 3601, 3601, 3601, 3601, 1341, 3601, 3601,
     3601, 3601, 3601, 3601, 1341, 1348, 1348, 1348, 1348, 3601,
     3601, 3601, 1348, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1348, 3601,
     3601, 3601, 3601, 3601, 3601, 1348, 1351, 1351, 1351, 1351,
     1351, 3601, 3601, 1351, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 1351, 3601, 3601, 3601, 3601, 3601, 1351,
     3601, 3601, 3601, 3601, 3601, 1351, 1351, 1353, 1353, 1353,
     1353, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 1353, 1353, 3601, 3601, 3601, 3601, 3601,
     1353, 3601, 3601, 3601, 3601, 3601, 3601, 1353, 1354, 1354,
     3601, 1354, 1354, 1354, 3601, 3601, 1354, 1354, 3601, 1354,
     1354, 1354, 1354, 1354, 3601, 1354, 1354, 1354, 1354, 1354,
     1354, 3601, 1354, 1354, 3601, 1354, 3601, 3601, 1354, 1354,
     1357, 1357, 3601, 1357, 3601, 1357, 1357, 1357, 1357, 1357,
     3601, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1375, 1375, 3601, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,

     1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375, 1375,
     1375, 1375, 1375, 1375, 1382, 1382, 3601, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 3601, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1395, 1395,
     3601, 1395, 1395, 1395, 3601, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,

     1395, 1395, 1395, 3601, 1395, 3601, 1395, 1395, 1395, 1395,
     1398, 1398, 3601, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1406, 3601, 3601, 3601, 3601, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 3601, 1406, 3601, 3601, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1420, 1420, 1420, 1420, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1420, 3601,
     1420, 3601, 3601, 3601, 3601, 3601, 3601, 1420, 3601, 3601,

     3601, 3601, 3601, 3601, 1420, 1426, 1426, 3601, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1430, 3601, 3601,
     3601, 1430, 3601, 3601, 3601, 3601, 3601, 3601, 1430, 3601,
     3601, 3601, 3601, 3601, 3601, 1430, 3601, 3601, 3601, 3601,
     3601, 3601, 1430, 1435, 1435, 3601, 1435, 1435, 1435, 3601,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1443, 1443, 1443, 1443, 1443,

     1443, 1443, 1443, 1443, 1443, 1443, 1443, 3601, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1450, 1450, 1450,
     1450, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 1450, 1450, 3601, 3601, 3601, 3601, 3601,
     1450, 3601, 3601, 3601, 3601, 3601, 3601, 1450, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     3601, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1464, 1464, 3601, 1464, 3601, 3601, 3601, 1464, 3601, 3601,

     3601, 3601, 3601, 3601, 1464, 1479, 1479, 3601, 1479, 3601,
     1479, 1479, 1479, 1479, 1479, 3601, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1479, 1490, 1490, 1490,
     1490, 3601, 3601, 3601, 1490, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     1490, 3601, 3601, 3601, 3601, 3601, 3601, 1490, 1493, 1493,
     1493, 1493, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     1493, 3601, 3601, 3601, 1493, 3601, 3601, 3601, 3601, 3601,
     3601, 1493, 3601, 3601, 3601, 3601, 3601, 3601, 1493, 1499,

     1499, 1499, 1499, 3601, 3601, 3601, 1499, 1499, 3601, 3601,
     3601, 1499, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 1499, 3601, 3601, 3601, 3601, 3601, 3601, 1499,
     1501, 1501, 1501, 1501, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 1501, 3601, 3601, 3601,
     3601, 3601, 3601, 1501, 1501, 3601, 3601, 3601, 3601, 3601,
     1501, 1510, 1510, 1510, 1510, 3601, 3601, 3601, 1510, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 1510, 3601, 3601, 3601, 3601, 3601,
     3601, 1510, 1513, 1513, 1513, 1513, 1513, 3601, 3601, 1513,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1513,
     3601, 3601, 3601, 3601, 3601, 1513, 3601, 3601, 3601, 3601,
     3601, 1513, 1513, 1515, 1515, 1515, 1515, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1515,
     1515, 3601, 3601, 3601, 3601, 3601, 1515, 3601, 3601, 3601,
     3601, 3601, 3601, 1515, 1522, 1522, 3601, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1524, 3601, 3601, 3601,
     3601, 1524, 3601, 3601, 1524, 1524, 3601, 3601, 3601, 1524,

     1524, 1524, 3601, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1526, 1526,
     3601, 1526, 3601, 1526, 1526, 1526, 1526, 1526, 3601, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526,
     1541, 1541, 3601, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541,
     1541, 1541, 1545, 1545, 3601, 1545, 1545, 1545, 1545, 1545,
     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545,

     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545,
     1545, 1545, 1545, 1545, 1546, 1546, 3601, 1546, 1546, 1546,
     3601, 1546, 1546, 1546, 3601, 3601, 3601, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1547, 1547, 3601, 1547,
     3601, 1547, 1547, 1547, 1547, 1547, 3601, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1551, 1551,
     3601, 1551, 1551, 1551, 3601, 1551, 1551, 1551, 3601, 1551,
     1551, 1551, 1551, 1551, 3601, 1551, 1551, 1551, 1551, 1551,

     1551, 1551, 1551, 1551, 1551, 1551, 3601, 3601, 1551, 1551,
     1552, 1552, 3601, 1552, 3601, 1552, 1552, 1552, 1552, 1552,
     3601, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
     1552, 1552, 1554, 1554, 3601, 1554, 1554, 1554, 3601, 1554,
     1554, 1554, 3601, 3601, 3601, 1554, 1554, 1554, 3601, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1555, 1555, 3601, 1555, 3601, 1555,
     1555, 1555, 1555, 1555, 3601, 1555, 1555, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555,

     1555, 1555, 1555, 1555, 1555, 1555, 1557, 1557, 3601, 1557,
     1557, 1557, 3601, 1557, 1557, 1557, 3601, 1557, 1557, 1557,
     1557, 1557, 3601, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1557, 1557, 1557, 3601, 3601, 1557, 1557, 1558, 1558,
     3601, 1558, 3601, 1558, 1558, 1558, 1558, 1558, 3601, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1568, 1568, 3601, 1568, 3601, 1568, 1568, 1568, 1568, 1568,
     3601, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,

     1568, 1568, 1578, 1578, 3601, 1578, 1578, 1578, 3601, 1578,
     1578, 1578, 3601, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 3601, 1578,
     1578, 1578, 1578, 1578, 1581, 1581, 3601, 1581, 1581, 1581,
     1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1581, 1581, 1581, 1581, 1582, 1582, 3601, 1582,
     1582, 1582, 3601, 1582, 1582, 1582, 3601, 3601, 3601, 1582,
     1582, 1582, 3601, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1583, 1583,

     3601, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 3601, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 3601, 1583, 1583, 3601, 1583, 1583, 1583, 1583, 1583,
     1591, 1591, 3601, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 3601, 1591, 1591, 3601, 1591, 1591, 1591,
     1591, 1591, 1607, 1607, 1607, 1607, 3601, 3601, 3601, 1607,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 1607, 1607, 3601, 3601, 3601,
     3601, 3601, 1607, 1613, 1613, 1613, 1613, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 1613, 3601, 1613, 3601, 3601, 1613,
     3601, 3601, 3601, 3601, 3601, 3601, 1613, 3601, 3601, 3601,
     3601, 3601, 3601, 1613, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1618, 1618, 1618, 1618,
     3601, 3601, 3601, 1618, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1618,
     3601, 3601, 3601, 3601, 3601, 3601, 1618, 1622, 1622, 1622,
     1622, 3601, 3601, 3601, 3601, 3601, 3601, 1622, 3601, 3601,

     3601, 3601, 3601, 1622, 3601, 3601, 3601, 3601, 3601, 3601,
     1622, 3601, 3601, 3601, 3601, 3601, 3601, 1622, 1626, 3601,
     3601, 1626, 3601, 3601, 3601, 1626, 1626, 3601, 3601, 3601,
     1626, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1626, 3601, 3601, 3601, 3601, 3601, 3601, 1626, 1632,
     1632, 1632, 1632, 3601, 3601, 3601, 1632, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 1632, 3601, 3601, 3601, 3601, 3601, 3601, 1632,
     1635, 1635, 1635, 1635, 1635, 3601, 3601, 1635, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 1635, 3601, 3601,

     3601, 3601, 3601, 1635, 3601, 3601, 3601, 3601, 3601, 1635,
     1635, 1637, 1637, 1637, 1637, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 1637, 1637, 3601,
     3601, 3601, 3601, 3601, 1637, 3601, 3601, 3601, 3601, 3601,
     3601, 1637, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1653, 1653, 3601, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 3601, 1653, 1653,
     3601, 1653, 1653, 1653, 1653, 1653, 1653, 3601, 1653, 1653,

     3601, 1653, 1653, 1653, 1653, 1653, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1677, 1677,
     3601, 1677, 1677, 1677, 1677, 1677, 3601, 1677, 1677, 1677,
     1677, 3601, 1677, 1677, 3601, 1677, 1677, 1677, 3601, 1677,
     1677, 3601, 1677, 1677, 3601, 3601, 1677, 1677, 1677, 1677,
     1074, 3601, 3601, 1074, 3601, 3601, 3601, 3601, 3601, 3601,
     1074, 3601, 3601, 3601, 3601, 3601, 1074, 3601, 3601, 3601,
     3601, 3601, 3601, 1074, 3601, 3601, 3601, 3601, 3601, 3601,

     1074, 1095, 1095, 1095, 1095, 3601, 3601, 3601, 1095, 3601,
     3601, 3601, 3601, 3601, 3601, 1095, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 1095, 3601, 3601, 3601, 3601, 3601,
     1095, 1095, 1088, 1088, 1088, 1088, 3601, 3601, 3601, 1088,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 1088, 3601, 3601, 3601, 3601,
     3601, 3601, 1088, 1691, 1691, 1691, 1691, 3601, 3601, 3601,
     3601, 3601, 3601, 1691, 3601, 3601, 1691, 3601, 3601, 1691,
     3601, 1691, 1691, 3601, 3601, 3601, 1691, 3601, 3601, 3601,
     3601, 3601, 3601, 1691, 1101, 1101, 1101, 1101, 3601, 3601,

     3601, 3601, 3601, 3601, 1101, 3601, 3601, 1101, 1101, 3601,
     1101, 1101, 1101, 1101, 3601, 3601, 3601, 1101, 3601, 3601,
     3601, 3601, 3601, 3601, 1101, 1694, 1694, 1694, 1694, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1694,
     3601, 1694, 3601, 3601, 3601, 3601, 3601, 3601, 1694, 3601,
     3601, 3601, 3601, 3601, 3601, 1694, 1697, 1697, 1697, 1697,
     3601, 3601, 3601, 1697, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1697,
     3601, 3601, 3601, 3601, 3601, 3601, 1697, 1107, 1107, 1107,
     1107, 3601, 3601, 3601, 1107, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     1107, 3601, 3601, 3601, 3601, 3601, 3601, 1107, 1699, 1699,
     1699, 1699, 3601, 3601, 3601, 3601, 3601, 3601, 1699, 3601,
     3601, 1699, 3601, 3601, 1699, 3601, 1699, 1699, 3601, 3601,
     3601, 1699, 3601, 3601, 3601, 3601, 3601, 3601, 1699, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 3601, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 3601, 1111, 1111,
     1111, 1117, 1117, 1117, 1117, 3601, 3601, 3601, 1117, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 1117, 3601, 3601, 3601, 3601, 3601,
     3601, 1117, 1701, 1701, 1701, 1701, 3601, 3601, 3601, 3601,
     3601, 3601, 1701, 3601, 3601, 3601, 3601, 3601, 1701, 3601,
     3601, 3601, 3601, 3601, 3601, 1701, 3601, 3601, 3601, 3601,
     3601, 3601, 1701, 1128, 1128, 1128, 1128, 3601, 3601, 3601,
     3601, 3601, 3601, 1128, 3601, 3601, 3601, 3601, 3601, 1128,
     1128, 3601, 3601, 3601, 3601, 3601, 1128, 3601, 3601, 3601,
     3601, 3601, 3601, 1128, 1138, 3601, 3601, 3601, 1138, 3601,
     1138, 3601, 3601, 1138, 3601, 3601, 3601, 1138, 3601, 3601,
     3601, 3601, 3601, 3601, 1138, 1155, 1155, 1155, 1155, 3601,

     3601, 3601, 1155, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1155, 3601,
     3601, 3601, 1155, 3601, 3601, 1155, 1168, 1168, 1168, 1168,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     1168, 3601, 1168, 1168, 3601, 3601, 3601, 3601, 3601, 1168,
     3601, 3601, 3601, 3601, 3601, 3601, 1168, 1722, 1722, 1722,
     1722, 3601, 3601, 3601, 1722, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     1722, 3601, 3601, 3601, 3601, 3601, 3601, 1722, 1730, 1730,
     3601, 1730, 3601, 1730, 1730, 1730, 1730, 1730, 1730, 1730,

     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730,
     1730, 1730, 1730, 1730, 3601, 1730, 1730, 1730, 1730, 1730,
     1732, 1732, 3601, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
     1732, 1732, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1205, 1205, 1205, 1205, 3601, 3601,
     3601, 1205, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 1205, 3601, 3601,
     3601, 3601, 3601, 3601, 1205, 1772, 1772, 1772, 1772, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1772, 3601, 3601, 1772, 3601, 3601, 3601, 1772, 3601,
     3601, 3601, 3601, 3601, 3601, 1772, 1235, 1235, 1235, 1235,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 1235, 1235, 3601, 1235, 3601, 3601, 3601, 1235,
     3601, 3601, 3601, 3601, 3601, 3601, 1235, 1775, 1775, 3601,
     1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775,
     1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775,

     1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1218,
     1218, 1218, 1218, 3601, 3601, 3601, 1218, 1218, 3601, 3601,
     3601, 1218, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 1218, 3601, 3601, 3601, 3601, 3601, 3601, 1218,
     1781, 1781, 1781, 1781, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1781, 1781, 3601, 3601, 3601, 1781, 1781, 3601, 1781,
     3601, 3601, 3601, 1781, 3601, 3601, 3601, 3601, 3601, 3601,
     1781, 1797, 1797, 1797, 1797, 3601, 3601, 3601, 3601, 3601,
     3601, 1797, 3601, 3601, 3601, 3601, 3601, 1797, 3601, 3601,
     3601, 3601, 3601, 3601, 1797, 3601, 3601, 3601, 3601, 3601,

     3601, 1797, 1271, 1271, 3601, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 3601, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1271, 1279, 1279, 1279, 1279, 3601, 3601,
     3601, 1279, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 1279, 3601, 3601,
     3601, 3601, 3601, 3601, 1279, 1853, 1853, 1853, 1853, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1853, 3601, 3601, 1853, 3601, 3601, 3601, 1853, 3601,
     3601, 3601, 3601, 3601, 3601, 1853, 1285, 1285, 1285, 1285,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 1285, 1285, 3601, 1285, 3601, 3601, 3601, 1285,
     3601, 3601, 3601, 3601, 3601, 3601, 1285, 1325, 1325, 3601,
     3601, 1325, 1325, 3601, 3601, 1325, 1325, 3601, 1325, 1325,
     1325, 1325, 1325, 3601, 1325, 1325, 1325, 1325, 1325, 1325,
     3601, 1325, 1325, 1325, 1325, 3601, 3601, 1325, 1325, 1329,
     1329, 3601, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1887, 1887, 3601, 1887, 3601, 1887, 1887, 1887, 1887,

     1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887,
     1887, 1887, 1887, 1887, 1887, 1887, 1887, 3601, 1887, 1887,
     1887, 1887, 1887, 1889, 1889, 3601, 1889, 1889, 1889, 1889,
     1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889,
     1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889,
     1889, 1889, 1889, 1889, 1889, 1894, 1894, 3601, 1894, 1894,
     1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894,
     1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894,
     1894, 1894, 1894, 1894, 1894, 1894, 1894, 1341, 1341, 1341,
     1341, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 1341, 3601, 1341, 1341, 3601, 3601, 3601, 3601, 3601,
     1341, 3601, 3601, 3601, 3601, 3601, 3601, 1341, 1899, 1899,
     1899, 1899, 3601, 3601, 3601, 1899, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1899, 3601, 3601, 3601, 3601, 3601, 3601, 1899, 1348,
     1348, 1348, 1348, 3601, 3601, 3601, 1348, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 1348, 3601, 3601, 3601, 3601, 3601, 3601, 1348,
     1353, 1353, 1353, 1353, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 1353, 1353, 3601, 3601,

     3601, 3601, 3601, 1353, 3601, 3601, 3601, 3601, 3601, 3601,
     1353, 1354, 1354, 3601, 1354, 1354, 1354, 3601, 3601, 1354,
     1354, 3601, 1354, 1354, 1354, 1354, 1354, 3601, 1354, 1354,
     1354, 1354, 1354, 1354, 3601, 1354, 1354, 3601, 1354, 3601,
     3601, 1354, 1354, 1903, 1903, 3601, 1903, 3601, 1903, 1903,
     1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903,
     1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 1903, 3601,
     1903, 1903, 1903, 1903, 1903, 1905, 1905, 3601, 1905, 1905,
     1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905,
     1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905, 1905,

     1905, 1905, 1905, 1905, 1905, 1905, 1905, 1382, 1382, 3601,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     3601, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1395, 1395, 3601, 1395, 1395, 1395, 3601, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1395, 1395, 1395, 3601, 1395, 3601, 1395,

     1395, 1395, 1395, 1398, 1398, 3601, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1406, 3601, 3601, 3601, 3601,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 3601, 1406,
     3601, 3601, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1420, 1420, 1420,
     1420, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1420, 3601, 1420, 3601, 3601, 3601, 3601, 3601, 3601,
     1420, 3601, 3601, 3601, 3601, 3601, 3601, 1420, 1925, 1925,

     1925, 1925, 3601, 3601, 3601, 1925, 3601, 3601, 3601, 3601,
     1925, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1925, 3601, 3601, 3601, 3601, 3601, 3601, 1925, 1426,
     1426, 3601, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1430, 3601, 3601, 3601, 1430, 3601, 3601, 3601, 3601,
     3601, 3601, 1430, 3601, 3601, 3601, 3601, 3601, 3601, 1430,
     3601, 3601, 3601, 3601, 3601, 3601, 1430, 1435, 1435, 3601,
     1435, 1435, 1435, 3601, 1435, 1435, 1435, 1435, 1435, 1435,

     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435,
     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1435, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 3601, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
     1443, 1450, 1450, 1450, 1450, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 1450, 1450, 3601,
     3601, 3601, 3601, 3601, 1450, 3601, 3601, 3601, 3601, 3601,
     3601, 1450, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 3601, 1452, 1452, 1452, 1452, 1452,

     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1452, 1452, 1464, 1464, 3601, 1464, 3601, 3601,
     3601, 1464, 3601, 3601, 3601, 3601, 3601, 3601, 1464, 1947,
     3601, 3601, 3601, 1947, 1947, 3601, 3601, 1947, 3601, 3601,
     3601, 3601, 1947, 3601, 1947, 1956, 1956, 3601, 1956, 3601,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 3601, 1956, 1956, 1956, 1956, 1956, 1958, 1958, 3601,
     1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958,

     1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1958, 1490,
     1490, 1490, 1490, 3601, 3601, 3601, 1490, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 1490, 3601, 3601, 3601, 3601, 3601, 3601, 1490,
     1493, 1493, 1493, 1493, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 1493, 3601, 3601, 3601, 1493, 3601, 3601, 3601,
     3601, 3601, 3601, 1493, 3601, 3601, 3601, 3601, 3601, 3601,
     1493, 1499, 1499, 1499, 1499, 3601, 3601, 3601, 1499, 1499,
     3601, 3601, 3601, 1499, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 1499, 3601, 3601, 3601, 3601, 3601,

     3601, 1499, 1501, 1501, 1501, 1501, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1501, 3601,
     3601, 3601, 3601, 3601, 3601, 1501, 1501, 3601, 3601, 3601,
     3601, 3601, 1501, 1966, 1966, 3601, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1966, 1966, 1971, 1971, 1971, 1971, 3601,
     3601, 3601, 1971, 3601, 3601, 3601, 3601, 1971, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1971, 3601,
     3601, 3601, 3601, 3601, 3601, 1971, 1510, 1510, 1510, 1510,

     3601, 3601, 3601, 1510, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1510,
     3601, 3601, 3601, 3601, 3601, 3601, 1510, 1515, 1515, 1515,
     1515, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 1515, 1515, 3601, 3601, 3601, 3601, 3601,
     1515, 3601, 3601, 3601, 3601, 3601, 3601, 1515, 1522, 1522,
     3601, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
     1524, 3601, 3601, 3601, 3601, 1524, 3601, 3601, 1524, 1524,

     3601, 3601, 3601, 1524, 1524, 1524, 3601, 1524, 1524, 1524,
     1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
     1524, 1524, 1977, 1977, 3601, 1977, 3601, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977,
     1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 3601, 1977,
     1977, 1977, 1977, 1977, 1979, 1979, 3601, 1979, 1979, 1979,
     1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979,
     1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979, 1979,
     1979, 1979, 1979, 1979, 1979, 1979, 1546, 1546, 3601, 1546,
     1546, 1546, 3601, 1546, 1546, 1546, 3601, 3601, 3601, 1546,

     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546,
     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1985, 1985,
     3601, 1985, 3601, 1985, 1985, 1985, 1985, 1985, 1985, 1985,
     1985, 1985, 1985, 1985, 1985, 1985, 1985, 1985, 1985, 1985,
     1985, 1985, 1985, 1985, 3601, 1985, 1985, 1985, 1985, 1985,
     1987, 1987, 3601, 1987, 1987, 1987, 1987, 1987, 1987, 1987,
     1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987,
     1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987, 1987,
     1987, 1987, 1551, 1551, 3601, 1551, 1551, 1551, 3601, 1551,
     1551, 1551, 3601, 1551, 1551, 1551, 1551, 1551, 3601, 1551,

     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     3601, 3601, 1551, 1551, 1989, 1989, 3601, 1989, 3601, 1989,
     1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989,
     1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989, 1989,
     3601, 1989, 1989, 1989, 1989, 1989, 1991, 1991, 3601, 1991,
     1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991,
     1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991,
     1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991, 1554, 1554,
     3601, 1554, 1554, 1554, 3601, 1554, 1554, 1554, 3601, 3601,
     3601, 1554, 1554, 1554, 3601, 1554, 1554, 1554, 1554, 1554,

     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1993, 1993, 3601, 1993, 3601, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993, 1993,
     1993, 1993, 1993, 1993, 1993, 1993, 3601, 1993, 1993, 1993,
     1993, 1993, 1995, 1995, 3601, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995, 1995,
     1995, 1995, 1995, 1995, 1557, 1557, 3601, 1557, 1557, 1557,
     3601, 1557, 1557, 1557, 3601, 1557, 1557, 1557, 1557, 1557,
     3601, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,

     1557, 1557, 3601, 3601, 1557, 1557, 1997, 1997, 3601, 1997,
     3601, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997, 1997,
     1997, 1997, 3601, 1997, 1997, 1997, 1997, 1997, 1999, 1999,
     3601, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999,
     1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999,
     1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999,
     2005, 2005, 3601, 2005, 3601, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005,
     2005, 2005, 2005, 2005, 2005, 2005, 3601, 2005, 2005, 2005,

     2005, 2005, 2007, 2007, 3601, 2007, 2007, 2007, 2007, 2007,
     2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007,
     2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007,
     2007, 2007, 2007, 2007, 1578, 1578, 3601, 1578, 1578, 1578,
     3601, 1578, 1578, 1578, 3601, 1578, 1578, 1578, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     3601, 1578, 1578, 1578, 1578, 1578, 1582, 1582, 3601, 1582,
     1582, 1582, 3601, 1582, 1582, 1582, 3601, 3601, 3601, 1582,
     1582, 1582, 3601, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1583, 1583,

     3601, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 3601, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
     1583, 3601, 1583, 1583, 3601, 1583, 1583, 1583, 1583, 1583,
     1591, 1591, 3601, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
     1591, 1591, 1591, 3601, 1591, 1591, 3601, 1591, 1591, 1591,
     1591, 1591, 1607, 1607, 1607, 1607, 3601, 3601, 3601, 1607,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 1607, 1607, 3601, 3601, 3601,
     3601, 3601, 1607, 2022, 2022, 2022, 2022, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 2022, 3601, 2022, 3601, 3601, 2022,
     3601, 3601, 3601, 3601, 3601, 3601, 2022, 3601, 3601, 3601,
     3601, 3601, 3601, 2022, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
     1614, 1614, 1614, 1614, 1614, 1614, 1613, 1613, 1613, 1613,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 1613, 3601, 1613,
     3601, 3601, 1613, 3601, 3601, 3601, 3601, 3601, 3601, 1613,
     3601, 3601, 3601, 3601, 3601, 3601, 1613, 1618, 1618, 1618,
     1618, 3601, 3601, 3601, 1618, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     1618, 3601, 3601, 3601, 3601, 3601, 3601, 1618, 2026, 2026,
     2026, 2026, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 2026, 3601, 3601, 3601, 3601, 3601,
     3601, 2026, 3601, 3601, 3601, 3601, 3601, 3601, 2026, 1622,
     1622, 1622, 1622, 3601, 3601, 3601, 3601, 3601, 3601, 1622,
     3601, 3601, 3601, 3601, 3601, 1622, 3601, 3601, 3601, 3601,
     3601, 3601, 1622, 3601, 3601, 3601, 3601, 3601, 3601, 1622,
     1632, 1632, 1632, 1632, 3601, 3601, 3601, 1632, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 1632, 3601, 3601, 3601, 3601, 3601, 3601,
     1632, 1637, 1637, 1637, 1637, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 1637, 1637, 3601,
     3601, 3601, 3601, 3601, 1637, 3601, 3601, 3601, 3601, 3601,
     3601, 1637, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
     1647, 1647, 1647, 1647, 1653, 1653, 3601, 1653, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 3601, 1653, 1653,
     3601, 1653, 1653, 1653, 1653, 1653, 1653, 3601, 1653, 1653,

     3601, 1653, 1653, 1653, 1653, 1653, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 3601, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1677, 1677,
     3601, 1677, 1677, 1677, 1677, 1677, 3601, 1677, 1677, 1677,
     1677, 3601, 1677, 1677, 3601, 1677, 1677, 1677, 3601, 1677,
     1677, 3601, 1677, 1677, 3601, 3601, 1677, 1677, 1677, 1677,
     1691, 1691, 1691, 1691, 3601, 3601, 3601, 3601, 3601, 3601,
     1691, 3601, 3601, 1691, 3601, 3601, 1691, 3601, 1691, 1691,
     3601, 3601, 3601, 1691, 3601, 3601, 3601, 3601, 3601, 3601,

     1691, 2058, 2058, 2058, 2058, 3601, 3601, 3601, 3601, 3601,
     3601, 2058, 3601, 3601, 2058, 3601, 3601, 2058, 2058, 2058,
     2058, 3601, 3601, 3601, 2058, 3601, 3601, 3601, 3601, 3601,
     3601, 2058, 1694, 1694, 1694, 1694, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 1694, 3601, 1694, 3601,
     3601, 3601, 3601, 3601, 3601, 1694, 3601, 3601, 3601, 3601,
     3601, 3601, 1694, 1697, 1697, 1697, 1697, 3601, 3601, 3601,
     1697, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 1697, 3601, 3601, 3601,
     3601, 3601, 3601, 1697, 1692, 1692, 1692, 1692, 1692, 3601,

     3601, 1692, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1692, 3601, 3601, 3601, 3601, 3601, 1692, 3601, 3601,
     3601, 3601, 3601, 1692, 1692, 1699, 1699, 1699, 1699, 3601,
     3601, 3601, 3601, 3601, 3601, 1699, 3601, 3601, 1699, 3601,
     3601, 1699, 3601, 1699, 1699, 3601, 3601, 3601, 1699, 3601,
     3601, 3601, 3601, 3601, 3601, 1699, 1701, 1701, 1701, 1701,
     3601, 3601, 3601, 3601, 3601, 3601, 1701, 3601, 3601, 3601,
     3601, 3601, 1701, 3601, 3601, 3601, 3601, 3601, 3601, 1701,
     3601, 3601, 3601, 3601, 3601, 3601, 1701, 2060, 2060, 2060,
     2060, 3601, 3601, 3601, 3601, 3601, 3601, 2060, 3601, 3601,

     3601, 3601, 3601, 2060, 2060, 3601, 3601, 3601, 3601, 3601,
     2060, 3601, 3601, 3601, 3601, 3601, 3601, 2060, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2061, 3601, 2061, 2061, 3601, 2061, 2061, 2061, 2061, 2061,
     2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
     2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063,
     2063, 2063, 2063, 2063, 2063, 2063, 3601, 2063, 2063, 2063,
     2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063, 2063,
     2063, 2063, 1702, 1702, 1702, 1702, 1702, 3601, 3601, 1702,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1702,

     3601, 3601, 3601, 3601, 3601, 1702, 3601, 3601, 3601, 3601,
     3601, 1702, 1702, 1128, 1128, 1128, 1128, 3601, 3601, 3601,
     3601, 3601, 3601, 1128, 3601, 3601, 3601, 3601, 3601, 1128,
     1128, 3601, 3601, 3601, 3601, 3601, 1128, 3601, 3601, 3601,
     3601, 3601, 3601, 1128, 1138, 3601, 3601, 3601, 1138, 3601,
     1138, 3601, 3601, 1138, 3601, 3601, 3601, 1138, 3601, 3601,
     3601, 3601, 3601, 3601, 1138, 2076, 2076, 2076, 2076, 2076,
     3601, 3601, 2076, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 2076, 3601, 3601, 3601, 3601, 3601, 2076, 3601,
     3601, 3601, 3601, 3601, 2076, 2076, 1168, 1168, 1168, 1168,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     1168, 3601, 1168, 1168, 3601, 3601, 3601, 3601, 3601, 1168,
     3601, 3601, 3601, 3601, 3601, 3601, 1168, 1722, 1722, 1722,
     1722, 3601, 3601, 3601, 1722, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     1722, 3601, 3601, 3601, 3601, 3601, 3601, 1722, 2078, 2078,
     2078, 2078, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 2078, 2078, 3601, 3601, 3601, 3601,
     3601, 2078, 3601, 3601, 3601, 3601, 3601, 3601, 2078, 2085,
     2085, 3601, 2085, 3601, 2085, 2085, 2085, 2085, 2085, 2085,

     2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085,
     2085, 2085, 2085, 2085, 2085, 3601, 2085, 2085, 2085, 2085,
     2085, 1211, 1211, 1211, 1211, 1211, 3601, 3601, 1211, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1211, 3601,
     3601, 3601, 3601, 3601, 1211, 3601, 3601, 3601, 3601, 3601,
     1211, 1211, 1772, 1772, 1772, 1772, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1772, 3601,
     3601, 1772, 3601, 3601, 3601, 1772, 3601, 3601, 3601, 3601,
     3601, 3601, 1772, 1775, 1775, 3601, 1775, 1775, 1775, 1775,
     1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775,

     1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775, 1775,
     1775, 1775, 1775, 1775, 1775, 2135, 2135, 2135, 2135, 3601,
     3601, 3601, 2135, 2135, 3601, 3601, 3601, 2135, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 2135, 3601,
     3601, 3601, 3601, 3601, 3601, 2135, 2141, 2141, 2141, 2141,
     3601, 3601, 3601, 2141, 3601, 3601, 3601, 2141, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 2141,
     3601, 3601, 3601, 3601, 3601, 3601, 2141, 1781, 1781, 1781,
     1781, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1781, 1781,
     3601, 3601, 3601, 1781, 1781, 3601, 1781, 3601, 3601, 3601,

     1781, 3601, 3601, 3601, 3601, 3601, 3601, 1781, 2143, 3601,
     3601, 2143, 3601, 3601, 3601, 3601, 2143, 3601, 3601, 3601,
     2143, 2143, 3601, 3601, 2143, 3601, 3601, 3601, 3601, 2143,
     3601, 2143, 2145, 2145, 2145, 2145, 2145, 2145, 2145, 2145,
     2145, 2145, 2145, 2145, 2145, 3601, 2145, 2145, 3601, 2145,
     2145, 2145, 2145, 2145, 2145, 2145, 2145, 2145, 2145, 2145,
     2145, 2145, 2145, 2145, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     3601, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151, 2151,
     2151, 2151, 2151, 2151, 2151, 2151, 1797, 1797, 1797, 1797,

     3601, 3601, 3601, 3601, 3601, 3601, 1797, 3601, 3601, 3601,
     3601, 3601, 1797, 3601, 3601, 3601, 3601, 3601, 3601, 1797,
     3601, 3601, 3601, 3601, 3601, 3601, 1797, 1235, 1235, 1235,
     1235, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 1235, 1235, 3601, 1235, 3601, 3601, 3601,
     1235, 3601, 3601, 3601, 3601, 3601, 3601, 1235, 1853, 1853,
     1853, 1853, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 1853, 3601, 3601, 1853, 3601, 3601,
     3601, 1853, 3601, 3601, 3601, 3601, 3601, 3601, 1853, 1282,
     1282, 1282, 1282, 1282, 3601, 3601, 1282, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 1282, 3601, 3601, 3601,
     3601, 3601, 1282, 3601, 3601, 3601, 3601, 3601, 1282, 1282,
     2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230,
     2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230,
     2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230,
     2230, 2230, 1329, 1329, 3601, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 2233, 2233, 3601, 2233, 3601, 2233,
     2233, 2233, 2233, 2233, 2233, 2233, 2233, 2233, 2233, 2233,

     2233, 2233, 2233, 2233, 2233, 2233, 2233, 2233, 2233, 2233,
     3601, 2233, 2233, 2233, 2233, 2233, 1894, 1894, 3601, 1894,
     1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894,
     1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894,
     1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1899, 1899,
     1899, 1899, 3601, 3601, 3601, 1899, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1899, 3601, 3601, 3601, 3601, 3601, 3601, 1899, 2239,
     2239, 2239, 2239, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 2239, 3601, 2239, 2239, 3601, 3601, 3601,

     3601, 3601, 2239, 3601, 3601, 3601, 3601, 3601, 3601, 2239,
     1341, 1341, 1341, 1341, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 1341, 3601, 1341, 1341, 3601, 3601,
     3601, 3601, 3601, 1341, 3601, 3601, 3601, 3601, 3601, 3601,
     1341, 1351, 1351, 1351, 1351, 1351, 3601, 3601, 1351, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1351, 3601,
     3601, 3601, 3601, 3601, 1351, 3601, 3601, 3601, 3601, 3601,
     1351, 1351, 2241, 2241, 3601, 2241, 3601, 2241, 2241, 2241,
     2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241,
     2241, 2241, 2241, 2241, 2241, 2241, 2241, 2241, 3601, 2241,

     2241, 2241, 2241, 2241, 1406, 3601, 3601, 3601, 3601, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 3601, 1406, 3601,
     3601, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1925, 1925, 1925, 1925,
     3601, 3601, 3601, 1925, 3601, 3601, 3601, 3601, 1925, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1925,
     3601, 3601, 3601, 3601, 3601, 3601, 1925, 2254, 2254, 2254,
     2254, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 2254, 3601, 2254, 3601, 3601, 3601, 3601, 3601, 3601,
     2254, 3601, 3601, 3601, 3601, 3601, 3601, 2254, 1947, 3601,

     3601, 3601, 1947, 1947, 3601, 3601, 1947, 3601, 3601, 3601,
     3601, 1947, 3601, 1947, 1464, 1464, 3601, 1464, 3601, 3601,
     3601, 1464, 3601, 3601, 3601, 3601, 3601, 3601, 1464, 2274,
     2274, 3601, 2274, 3601, 2274, 2274, 2274, 2274, 2274, 2274,
     2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274, 2274,
     2274, 2274, 2274, 2274, 2274, 3601, 2274, 2274, 2274, 2274,
     2274, 1966, 1966, 3601, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1971, 1971, 1971, 1971, 3601, 3601, 3601,

     1971, 3601, 3601, 3601, 3601, 1971, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 1971, 3601, 3601, 3601,
     3601, 3601, 3601, 1971, 2279, 2279, 2279, 2279, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     2279, 2279, 3601, 3601, 3601, 3601, 3601, 2279, 3601, 3601,
     3601, 3601, 3601, 3601, 2279, 1513, 1513, 1513, 1513, 1513,
     3601, 3601, 1513, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 1513, 3601, 3601, 3601, 3601, 3601, 1513, 3601,
     3601, 3601, 3601, 3601, 1513, 1513, 2281, 2281, 3601, 2281,
     3601, 2281, 2281, 2281, 2281, 2281, 2281, 2281, 2281, 2281,

     2281, 2281, 2281, 2281, 2281, 2281, 2281, 2281, 2281, 2281,
     2281, 2281, 3601, 2281, 2281, 2281, 2281, 2281, 2287, 2287,
     3601, 2287, 3601, 2287, 2287, 2287, 2287, 2287, 2287, 2287,
     2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287, 2287,
     2287, 2287, 2287, 2287, 3601, 2287, 2287, 2287, 2287, 2287,
     2290, 2290, 3601, 2290, 3601, 2290, 2290, 2290, 2290, 2290,
     2290, 2290, 2290, 2290, 2290, 2290, 2290, 2290, 2290, 2290,
     2290, 2290, 2290, 2290, 2290, 2290, 3601, 2290, 2290, 2290,
     2290, 2290, 2293, 2293, 3601, 2293, 3601, 2293, 2293, 2293,
     2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293,

     2293, 2293, 2293, 2293, 2293, 2293, 2293, 2293, 3601, 2293,
     2293, 2293, 2293, 2293, 2296, 2296, 3601, 2296, 3601, 2296,
     2296, 2296, 2296, 2296, 2296, 2296, 2296, 2296, 2296, 2296,
     2296, 2296, 2296, 2296, 2296, 2296, 2296, 2296, 2296, 2296,
     3601, 2296, 2296, 2296, 2296, 2296, 1557, 1557, 3601, 1557,
     1557, 1557, 3601, 1557, 1557, 1557, 3601, 1557, 1557, 1557,
     1557, 1557, 3601, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     1557, 1557, 1557, 1557, 3601, 3601, 1557, 1557, 2302, 2302,
     3601, 2302, 3601, 2302, 2302, 2302, 2302, 2302, 2302, 2302,
     2302, 2302, 2302, 2302, 2302, 2302, 2302, 2302, 2302, 2302,

     2302, 2302, 2302, 2302, 3601, 2302, 2302, 2302, 2302, 2302,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2315, 2315, 2315, 2315, 2315, 3601, 2315, 2315,
     2315, 2315, 2315, 2315, 3601, 2315, 2315, 2315, 2315, 2315,
     2315, 2315, 2022, 2022, 2022, 2022, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 2022, 3601, 2022, 3601, 3601, 2022, 3601,
     3601, 3601, 3601, 3601, 3601, 2022, 3601, 3601, 3601, 3601,
     3601, 3601, 2022, 2026, 2026, 2026, 2026, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 2026,
     3601, 3601, 3601, 3601, 3601, 3601, 2026, 3601, 3601, 3601,

     3601, 3601, 3601, 2026, 1635, 1635, 1635, 1635, 1635, 3601,
     3601, 1635, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1635, 3601, 3601, 3601, 3601, 3601, 1635, 3601, 3601,
     3601, 3601, 3601, 1635, 1635, 1653, 1653, 3601, 1653, 1653,
     1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 3601, 1653,
     1653, 3601, 1653, 1653, 1653, 1653, 1653, 1653, 3601, 1653,
     1653, 3601, 1653, 1653, 1653, 1653, 1653, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 3601, 1674, 1674, 1674, 1674, 1674, 1674,
     1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674, 2058,

     2058, 2058, 2058, 3601, 3601, 3601, 3601, 3601, 3601, 2058,
     3601, 3601, 2058, 3601, 3601, 2058, 2058, 2058, 2058, 3601,
     3601, 3601, 2058, 3601, 3601, 3601, 3601, 3601, 3601, 2058,
     2060, 2060, 2060, 2060, 3601, 3601, 3601, 3601, 3601, 3601,
     2060, 3601, 3601, 3601, 3601, 3601, 2060, 2060, 3601, 3601,
     3601, 3601, 3601, 2060, 3601, 3601, 3601, 3601, 3601, 3601,
     2060, 1128, 1128, 1128, 1128, 3601, 3601, 3601, 3601, 3601,
     3601, 1128, 3601, 3601, 3601, 3601, 3601, 1128, 1128, 3601,
     3601, 3601, 3601, 3601, 1128, 3601, 3601, 3601, 3601, 3601,
     3601, 1128, 1138, 3601, 3601, 3601, 1138, 3601, 1138, 3601,

     3601, 1138, 3601, 3601, 3601, 1138, 3601, 3601, 3601, 3601,
     3601, 3601, 1138, 2076, 2076, 2076, 2076, 2076, 3601, 3601,
     2076, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     2076, 3601, 3601, 3601, 3601, 3601, 2076, 3601, 3601, 3601,
     3601, 3601, 2076, 2076, 2344, 2344, 2344, 2344, 3601, 3601,
     3601, 2344, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 2344, 3601, 3601,
     3601, 3601, 3601, 3601, 2344, 2348, 2348, 2348, 2348, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 2348, 2348, 3601, 3601, 3601, 3601, 3601, 2348, 3601,

     3601, 3601, 3601, 3601, 3601, 2348, 1168, 1168, 1168, 1168,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     1168, 3601, 1168, 1168, 3601, 3601, 3601, 3601, 3601, 1168,
     3601, 3601, 3601, 3601, 3601, 3601, 1168, 2078, 2078, 2078,
     2078, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 2078, 2078, 3601, 3601, 3601, 3601, 3601,
     2078, 3601, 3601, 3601, 3601, 3601, 3601, 2078, 1722, 1722,
     1722, 1722, 3601, 3601, 3601, 1722, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1722, 3601, 3601, 3601, 3601, 3601, 3601, 1722, 2354,

     2354, 3601, 2354, 3601, 2354, 2354, 2354, 2354, 2354, 2354,
     2354, 2354, 2354, 2354, 2354, 2354, 2354, 2354, 2354, 2354,
     2354, 2354, 2354, 2354, 2354, 3601, 2354, 2354, 2354, 2354,
     2354, 2135, 2135, 2135, 2135, 3601, 3601, 3601, 2135, 2135,
     3601, 3601, 3601, 2135, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 2135, 3601, 3601, 3601, 3601, 3601,
     3601, 2135, 2404, 2404, 2404, 2404, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 2404, 2404,
     3601, 2404, 3601, 3601, 3601, 2404, 3601, 3601, 3601, 3601,
     3601, 3601, 2404, 2141, 2141, 2141, 2141, 3601, 3601, 3601,

     2141, 3601, 3601, 3601, 2141, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 2141, 3601, 3601, 3601,
     3601, 3601, 3601, 2141, 2409, 3601, 3601, 3601, 2409, 3601,
     3601, 3601, 3601, 2409, 3601, 3601, 3601, 3601, 3601, 3601,
     2409, 3601, 3601, 3601, 3601, 3601, 3601, 2409, 2411, 2411,
     2411, 2411, 3601, 3601, 3601, 2411, 2411, 3601, 3601, 3601,
     2411, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 2411, 3601, 3601, 3601, 3601, 3601, 3601, 2411, 2143,
     3601, 3601, 2143, 3601, 3601, 3601, 3601, 2143, 3601, 3601,
     3601, 2143, 2143, 3601, 3601, 2143, 3601, 3601, 3601, 3601,

     2143, 3601, 2143, 2413, 2413, 3601, 2413, 2413, 2413, 2413,
     2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
     2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
     2413, 2413, 2413, 2413, 2413, 2415, 2415, 3601, 2415, 2415,
     2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
     2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
     2415, 2415, 2415, 2415, 2415, 2415, 2415, 1797, 1797, 1797,
     1797, 3601, 3601, 3601, 3601, 3601, 3601, 1797, 3601, 3601,
     3601, 3601, 3601, 1797, 3601, 3601, 3601, 3601, 3601, 3601,
     1797, 3601, 3601, 3601, 3601, 3601, 3601, 1797, 1235, 1235,

     1235, 1235, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 1235, 1235, 3601, 1235, 3601, 3601,
     3601, 1235, 3601, 3601, 3601, 3601, 3601, 3601, 1235, 2230,
     2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230,
     2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230,
     2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230, 2230,
     2230, 1329, 1329, 3601, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 2494, 2494, 3601, 2494, 3601, 2494, 2494,

     2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494,
     2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494, 2494, 3601,
     2494, 2494, 2494, 2494, 2494, 2497, 2497, 2497, 2497, 2497,
     2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497, 2497,
     2497, 2497, 3601, 2497, 2497, 2497, 2497, 2497, 2497, 3601,
     2497, 2497, 2497, 2497, 2497, 2497, 2497, 2239, 2239, 2239,
     2239, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 2239, 3601, 2239, 2239, 3601, 3601, 3601, 3601, 3601,
     2239, 3601, 3601, 3601, 3601, 3601, 3601, 2239, 1341, 1341,
     1341, 1341, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 1341, 3601, 1341, 1341, 3601, 3601, 3601, 3601,
     3601, 1341, 3601, 3601, 3601, 3601, 3601, 3601, 1341, 2499,
     2499, 3601, 2499, 3601, 2499, 2499, 2499, 2499, 2499, 2499,
     2499, 2499, 2499, 2499, 2499, 2499, 2499, 2499, 2499, 2499,
     2499, 2499, 2499, 2499, 2499, 3601, 2499, 2499, 2499, 2499,
     2499, 1406, 3601, 3601, 3601, 3601, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 3601, 1406, 3601, 3601, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 2254, 2254, 2254, 2254, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 2254, 3601, 2254,

     3601, 3601, 3601, 3601, 3601, 3601, 2254, 3601, 3601, 3601,
     3601, 3601, 3601, 2254, 1464, 1464, 3601, 1464, 3601, 3601,
     3601, 1464, 3601, 3601, 3601, 3601, 3601, 3601, 1464, 2525,
     2525, 3601, 2525, 3601, 2525, 2525, 2525, 2525, 2525, 2525,
     2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525, 2525,
     2525, 2525, 2525, 2525, 2525, 3601, 2525, 2525, 2525, 2525,
     2525, 2279, 2279, 2279, 2279, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 2279, 2279, 3601,
     3601, 3601, 3601, 3601, 2279, 3601, 3601, 3601, 3601, 3601,
     3601, 2279, 2528, 2528, 3601, 2528, 3601, 2528, 2528, 2528,

     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528,
     2528, 2528, 2528, 2528, 2528, 2528, 2528, 2528, 3601, 2528,
     2528, 2528, 2528, 2528, 2531, 2531, 3601, 2531, 3601, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531, 2531,
     3601, 2531, 2531, 2531, 2531, 2531, 2533, 2533, 3601, 2533,
     3601, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533,
     2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533, 2533,
     2533, 2533, 3601, 2533, 2533, 2533, 2533, 2533, 2535, 2535,
     3601, 2535, 3601, 2535, 2535, 2535, 2535, 2535, 2535, 2535,

     2535, 2535, 2535, 2535, 2535, 2535, 2535, 2535, 2535, 2535,
     2535, 2535, 2535, 2535, 3601, 2535, 2535, 2535, 2535, 2535,
     2537, 2537, 3601, 2537, 3601, 2537, 2537, 2537, 2537, 2537,
     2537, 2537, 2537, 2537, 2537, 2537, 2537, 2537, 2537, 2537,
     2537, 2537, 2537, 2537, 2537, 2537, 3601, 2537, 2537, 2537,
     2537, 2537, 1557, 1557, 3601, 1557, 1557, 1557, 1557, 1557,
     1557, 1557, 3601, 1557, 1557, 1557, 1557, 1557, 3601, 1557,
     1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
     3601, 3601, 1557, 1557, 2541, 2541, 3601, 2541, 3601, 2541,
     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,

     2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541, 2541,
     3601, 2541, 2541, 2541, 2541, 2541, 2545, 2545, 2545, 2545,
     2545, 2545, 2545, 2545, 2545, 2545, 2545, 2545, 2545, 2545,
     2545, 2545, 2545, 3601, 2545, 2545, 2545, 2545, 2545, 2545,
     3601, 2545, 2545, 2545, 2545, 2545, 2545, 2545, 1626, 3601,
     3601, 1626, 3601, 3601, 3601, 1626, 1626, 3601, 3601, 3601,
     1626, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1626, 3601, 3601, 3601, 3601, 3601, 3601, 1626, 1653,
     1653, 3601, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 1653, 3601, 1653, 1653, 3601, 1653, 1653, 1653, 1653,

     1653, 1653, 3601, 1653, 1653, 3601, 1653, 1653, 1653, 1653,
     1653, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 2566, 2566, 2566, 2566, 2566, 3601, 2566,
     2566, 2566, 2566, 2566, 2566, 3601, 2566, 2566, 2566, 2566,
     2566, 2566, 2566, 1128, 1128, 1128, 1128, 3601, 3601, 3601,
     3601, 3601, 3601, 1128, 3601, 3601, 3601, 3601, 3601, 1128,
     1128, 3601, 3601, 3601, 3601, 3601, 1128, 3601, 3601, 3601,
     3601, 3601, 3601, 1128, 1138, 3601, 3601, 3601, 1138, 3601,
     1138, 3601, 3601, 1138, 3601, 3601, 3601, 1138, 3601, 3601,
     3601, 3601, 3601, 3601, 1138, 2344, 2344, 2344, 2344, 3601,

     3601, 3601, 2344, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 2344, 3601,
     3601, 3601, 3601, 3601, 3601, 2344, 2348, 2348, 2348, 2348,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 2348, 2348, 3601, 3601, 3601, 3601, 3601, 2348,
     3601, 3601, 3601, 3601, 3601, 3601, 2348, 1168, 1168, 1168,
     1168, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 1168, 3601, 1168, 1168, 3601, 3601, 3601, 3601, 3601,
     1168, 3601, 3601, 3601, 3601, 3601, 3601, 1168, 2404, 2404,
     2404, 2404, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 2404, 2404, 3601, 2404, 3601, 3601,
     3601, 2404, 3601, 3601, 3601, 3601, 3601, 3601, 2404, 2635,
     3601, 3601, 2635, 3601, 3601, 3601, 3601, 2635, 3601, 3601,
     3601, 2635, 2635, 3601, 3601, 2635, 3601, 3601, 3601, 3601,
     2635, 3601, 2635, 2409, 3601, 3601, 3601, 2409, 3601, 3601,
     3601, 3601, 2409, 3601, 3601, 3601, 3601, 3601, 3601, 2409,
     3601, 3601, 3601, 3601, 3601, 3601, 2409, 2637, 2637, 2637,
     2637, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 2637, 3601,
     3601, 3601, 3601, 2637, 2637, 3601, 2637, 3601, 3601, 3601,
     2637, 3601, 3601, 3601, 3601, 3601, 3601, 2637, 2413, 2413,

     3601, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
     2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
     2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413, 2413,
     2415, 2415, 3601, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
     2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
     2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415, 2415,
     2415, 2415, 1797, 1797, 1797, 1797, 3601, 3601, 3601, 3601,
     3601, 3601, 1797, 3601, 3601, 3601, 3601, 3601, 1797, 3601,
     3601, 3601, 3601, 3601, 3601, 1797, 3601, 3601, 3601, 3601,
     3601, 3601, 1797, 1235, 1235, 1235, 1235, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1235,
     1235, 3601, 1235, 3601, 3601, 3601, 1235, 3601, 3601, 3601,
     3601, 3601, 3601, 1235, 1329, 1329, 3601, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1329, 1341, 1341, 1341, 1341,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     1341, 3601, 1341, 1341, 3601, 3601, 3601, 3601, 3601, 1341,
     3601, 3601, 3601, 3601, 3601, 3601, 1341, 1402, 1402, 1402,
     1402, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 1402, 3601, 3601, 3601, 3601, 3601, 3601,
     1402, 3601, 3601, 3601, 3601, 3601, 3601, 1402, 1406, 3601,
     3601, 3601, 3601, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 3601, 1406, 3601, 3601, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1464, 1464, 3601, 1464, 3601, 3601, 3601, 1464, 3601, 3601,
     3601, 3601, 3601, 3601, 1464, 1971, 1971, 1971, 1971, 3601,
     3601, 3601, 1971, 3601, 3601, 3601, 3601, 1971, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 1971, 3601,
     3601, 3601, 3601, 3601, 3601, 1971, 2733, 2733, 3601, 2733,

     2733, 2733, 3601, 2733, 2733, 2733, 2733, 2733, 2733, 2733,
     2733, 2733, 2733, 2733, 2733, 2733, 2733, 2733, 2733, 2733,
     2733, 2733, 2733, 2733, 2733, 2733, 2733, 2733, 1653, 1653,
     3601, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
     1653, 3601, 1653, 1653, 3601, 1653, 1653, 1653, 1653, 1653,
     1653, 3601, 1653, 1653, 3601, 1653, 1653, 1653, 1653, 1653,
     1128, 1128, 1128, 1128, 3601, 3601, 3601, 3601, 3601, 3601,
     1128, 3601, 3601, 3601, 3601, 3601, 1128, 1128, 3601, 3601,
     3601, 3601, 3601, 1128, 3601, 3601, 3601, 3601, 3601, 3601,
     1128, 2076, 2076, 2076, 2076, 2076, 3601, 3601, 2076, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 2076, 3601,
     3601, 3601, 3601, 3601, 2076, 3601, 3601, 3601, 3601, 3601,
     2076, 2076, 2135, 2135, 2135, 2135, 3601, 3601, 3601, 2135,
     2135, 3601, 3601, 3601, 2135, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 2135, 3601, 3601, 3601, 3601,
     3601, 3601, 2135, 2913, 3601, 3601, 2913, 3601, 3601, 3601,
     2913, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 2913, 3601, 3601, 3601,
     3601, 3601, 3601, 2913, 3088, 3088, 3088, 3088, 3088, 3088,
     3088, 3088, 3088, 3088, 3088, 3088, 3088, 3088, 3088, 3088,

     3088, 3601, 3088, 3088, 3088, 3088, 3088, 3088, 3601, 3088,
     3088, 3088, 3088, 3088, 3088, 3088, 3264, 3264, 3264, 3264,
     3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3264,
     3264, 3264, 3264, 3601, 3264, 3264, 3264, 3264, 3264, 3264,
     3601, 3264, 3264, 3264, 3264, 3264, 3264, 3264, 3389, 3389,
     3389, 3389, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3389, 3601, 3601, 3601, 3389, 3601,
     3601, 3389, 3601, 3601, 3601, 3601, 3601, 3601, 3389, 3403,
     3601, 3601, 3403, 3601, 3601, 3601, 3403, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3403, 3601, 3601, 3601, 3601, 3601, 3601, 3403,
     3405, 3601, 3601, 3405, 3601, 3601, 3601, 3405, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3405, 3601, 3601, 3601, 3601, 3601, 3601,
     3405,  247, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601
    } ;

static yyconst flex_int16_t yy_chk[27627] =
    {   0,
        0,    0,    1,    0,    2,    0,    1,    1,    2,    2,
      383,    1,    0,    2,  383,  253,  263,  263,    0,    1,
      253,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
      262,    5,    5,  382,  382,  262,    5,    6,    6,    6,
        6,   17,    6,    6,    5,   17,   17,    6,  284, 2361,
       17,   17,   17,  284,  273,    6,   31,  273,   17,  297,
       31,   31,  546,  546,  297,   31,   17,   81,   17,  314,
       31,   81,   81,   31,  314,  255,   81,    5,  255,  318,
       31,  656,  318, 1214,   81,  656,  255, 1214,    6,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   18,
      324, 2037,   47,   18,   18,  324,   47,   47,   18,   18,

       18,   47,   47,   47,  353,  361,   18,  353,  361,   47,
      282,  282,  282,  282,   18, 2037,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   21, 2362,   22,  333,   21,   21,   22,   22,  333,
       21,  341,   22,  565,  565, 1078,  341,   32,   21,   35,
       22,   32,   32,   35,   35,  360,   32,  374,   35, 1078,
      360,   32,  374,   82,   32,  388,   35,   82,   82, 2363,
      388,   32,   82,  729,   35,  729,  267,  267,  267,  267,
       82, 2364,   21,  267,   22,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   27,   27,   27,   27,  511,   27,   27,
      511, 2365,  302,   27,   28,   28,   28,   28,  302,   28,
       28,   27,  303, 2366,   28,   29,  424,  302,  303,   29,
       29,  424,   28,  439,   29,   29,   30,  303,  439,   29,
       30,   30,   29,  444,  380,   30,   30,  380,  444,   29,
       30, 2367,   36,   30,   48,  518,   36,   36,   48,   48,
       30,   36,  459,   48,   48,   48,  642,  459,  642,   36,
       89,   48,   27,  303,   89,   89,  488,   36,   27,   89,

       89,   89, 2368,   28,  642,  488, 1660,   89, 1077,   28,
       41,   41,   41,   41,  466,   41,   41, 1077,  534,  466,
       41,  534,  380,   29,  274,  274,  274,  274,   41,  518,
      542,  274, 1660,  542,   30,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   42,   42,   42,
       42,  472,   42,   42,   43,  479,  472,   42,   43,   43,

      479,  496,  503,   43,   43,   42,  496,  503,   43,  957,
       44,   43,  578,  435,   44,   44,  435,   43,   43,   44,
       44,  513,  570,  570,   44,  957,  513,   44,  276,  276,
      276,  276, 1199,   44,   44,   45,   45,   45,   45,  536,
       45,   45, 1199,  580,  536,   45,   45,   45,  531, 2369,
       45,  531,  276,   45,  531,   46,   46,   46,   46,   49,
       46,   46,  578,   49,   49,   46,   46,   46,   49,  545,
       46,  435,   43,   46,  545,   50,   49,   53, 2370,   50,
       50,   53,   53,   49,   50,  554,   53,   53,   44, 1463,
      554, 1463,   50,  580,   53,  385,  385,  385,  385,   50,

       54,   53,   53,   99,   54,   54,  560,   99,   99,   54,
       54,  560,   99,   83,   83, 2371,   83,   54,   83,   83,
       99, 1472,  569,   83,   54,   54,   83,  569,  577,   84,
       84,   83,   84,  577,   84,   84, 1472,   49,  572,   84,
     2263,  572,   84,  278,  278,  278,  278,   84, 2263,  694,
      278,  572,  694,   50,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   55,  595,
     2372,   56,   55,   55,  595,   56,   56,   55,  972,  972,
       56,   57,   57,   57,   57,   55,   57,   57,   56,  606,
      715,   57, 1460,  715,  606,   58,   58,   58,   58,   57,
       58,   58,  581, 1066, 1066,   58,  257,  257,  257,  257,
     1460,   57,  541,   58, 2373,  541,  614,   55,  541,   55,
       56,  614,   56,  582,  257,   58,   59,   59,   59,   59,

      625,   59,   59, 1369, 1369,  625,   59,   60,   60,   60,
       60,  584,   60,   60,   59, 1379, 1379,   60,   61,   61,
       61,   61,  581,   61,   61,   60,   59,  631,   61,   71,
       57,   57,  631,   71,   71, 2375,   61,   60,   71,  265,
      265,  265,  265,  582,   58,   58,   71, 2376,   61,   62,
       62,   62,   62,   73,   62,   62,  265,   73,   73,   62,
      395,  584,   73,  265,  641,   73,  653,   62,   74,  641,
       73,  653,   74,   74, 2377,   59,   59,   74,  666,   62,
       74, 1122, 1749,  666,   90,   74,   60,   60,   90,   90,
     1122,  668, 1749,   90,   90,   90,  668,   61,   61, 2378,

       93,   90,   95,   73,   93,   93,   95,   95,   71,   93,
      395,   95,   95,   95, 2379,  673,  395,   93,   74,   95,
      673,  395,  395,  726,  395,   93,  726,   93,   62,   62,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   67,   67,

     2380,   67,  682,   67,   67,  583,  691,  682,   67,   68,
       68,  691,   68,  704,   68,   68,   67,  583,  704,   68,
       69,   69,  583,   69,  716,   69,   69,   68,   67,  716,
       69,   72,  730, 1133,  730,   72,   72, 1132,   69,   68,
       72,  258,  258,  258,  258, 2316, 1132, 1133,   72,   67,
       69,   70,   70, 2316,   70,  583,   70,   70,   75,  258,
       68,   70,   75,   75, 1381, 1381, 1531,   75,  753,   70,
       75,   69, 2381,  753,  772,   75,  730,   67,   67,  772,
     1531,   70,  275,  275,  275,  275,   76, 2251,   68,   68,
       76,   76,   77, 1741, 1741,   76,   77,   77,   76,   69,

       69,   77,   70,   76,  884, 2251,  275,  884,   75,   77,
       72,  351,  351,  351,  351,   78,   77, 2382,   85,   78,
       78,   77,   85,   85,   78, 1085, 1104,   85, 1085, 1104,
       70,   70,   78,   79,   79,   85,   76,   79,   79,   78,
      784,  731,   79,  731,   78,  784, 1305,   80,   80,   86,
       79,   80,   80,   86,   86, 1305,   80,  765,   86, 1388,
      765,  275,  765, 1051,   80, 2383,   86,   87,   85,   88,
       77,   87,   87,   88,   88, 1936,   87, 1051,   88,  451,
      451,  451,  451,   79,   87,  731,   88,   97, 1936, 1051,
      351,   97,   97,   78,  451,  958,   97,   80,  958,   86,

       91,   91,   91,   91,   97,   91,   91, 1765,  958, 1388,
       91,   92,   92,   92,   92,   94,   92,   92,   91,   94,
       94,   92,  795, 1765,   94,  804,   91,  795,   91,   92,
      804, 1067,   94, 1191, 1067, 2384,   97,   92,   97,   92,
       94, 1191,   94, 1191, 1067,   87,   87,   88,   88,   96,
      816, 2385,   98,   96,   96,  816,   98,   98,   96,   96,
       96,   98, 1021,  100, 2386, 1021,   96,  100,  100,   98,
      115,  825,  100,  116,  115,  115,  825,  116,  116,  115,
      100, 1021,  116,  458,  458,  458,  458,  115, 1787, 1787,
      116,  507,  507,  507,  507,  115, 1147,  507,  116, 1147,

     1464,   98, 1464,   98,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  103, 1308,
      104,  838,  103,  103,  104,  104,  838,  103, 1308,  104,

      495,  495,  495,  495,  105,  103,  106,  104,  105,  105,
      106,  106,  495,  105, 1688,  106,  264,  264,  264,  264,
     1468,  105, 1468,  106,  107,  107,  107,  107, 1688,  107,
      107,  848, 1157,  264,  107, 1157,  848,  107,  859,  865,
      264,  107,  107,  859,  865,  875,  108,  108,  108,  108,
      875,  108,  108,  881,  107, 2387,  108, 1735,  881,  108,
      105, 1468,  106,  108,  108,  117,  103,  893,  104,  117,
      117, 1735,  893,  902,  117,  107,  108, 2388,  902,  118,
      912,  922,  117,  118,  118,  912,  922, 2389,  118,  508,
      508,  508,  508, 1791, 1791,  264,  118,  108,  109,  109,

      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  113, 1359,  114,  932,
      113,  113,  114,  114,  932,  113, 1359,  114,  366,  366,
      366,  366,  121,  113,  122,  114,  121,  121,  122,  122,
      939,  121,  947,  122, 2390,  939,  366,  947,  125,  121,

      126,  122,  125,  125,  126,  126,  121,  125,  122,  126,
      266,  266,  266,  266,  129,  125, 2391,  126,  129,  129,
      113,  886,  114,  129,  886,  129,  113,  266,  114, 2120,
      956,  129,  886, 2120,  266,  956,  113,  113,  114,  114,
      509,  509,  509,  509,  113,  113,  114,  114,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      130,  965,  971,  977,  130,  130,  965,  971,  977,  130,
     2393,  130,  516,  516,  516,  516, 2394,  130,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  133,  987, 2395,  134,  133,  133,  987,  134,
      134,  133, 1000,  133,  134, 1170,  134, 1000, 1170,  133,
      135, 1012,  134,  136,  135,  135, 1012,  136,  136,  135,
      137, 1020,  136, 1031,  137,  137, 1020,  135, 1031,  137,
      136,  137, 2147, 2147, 2397,  135,  139,  137,  136,  138,
      139,  139,  140,  138,  138,  139,  140,  140,  138, 1036,
      138,  140, 1042,  139, 1036, 1467,  138, 1467,  155,  140,
      139, 2335,  155,  155, 1042, 2398,  140,  155,  155, 1042,
      277,  277,  277,  277,  137,  155,  137, 1049, 1044,  156,
      137, 1044, 1049,  156,  156, 2335,  137, 1050,  156,  156,

      137,  137, 1050,  138,  277,  138,  156, 1432, 1467,  138,
      379,  379,  379,  379, 1044,  138, 1432,  379, 2399,  138,
      138,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  145,
     1055, 1056, 1064,  145,  145, 1055, 1056, 1064,  145,  146,

      145, 2400, 1076,  146,  146, 2402,  145, 1076,  146,  157,
      146, 2336,  999,  157,  157,  999,  146, 1737,  157,  999,
      157,  999,  145, 2154, 2154,  999,  157,  367,  367,  367,
      367, 1737,  146,  145,  145, 2336,  145,  590,  590,  590,
      590, 2405, 2406,  146,  146,  367,  146,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  151,  151,  151,  151,  167,
      151,  151, 2392,  167,  167,  151,  151,  151,  167,  167,
      151,  151, 1038,  151, 1171, 1038,  167, 2392, 2413, 1171,
      151,  151,  158,  151,  151,  151,  158,  158, 1908, 1135,
     1038,  158,  161,  158, 2437, 1135,  161,  161, 2438,  158,
     1071,  161, 1908, 1071, 1135,  151,  161,  151,  162,  161,
      168, 1071,  162,  162,  168,  168,  161,  162, 1138,  168,
      168, 1177,  162, 2462, 1138,  162, 1177,  168,  452,  452,
      452,  452,  162, 1138,  151,  151,  152,  152,  152,  152,

      175,  152,  152,  452,  175,  175,  152,  152,  152,  175,
     1189,  152,  152, 1189,  152, 1123, 2463,  175, 1123, 1123,
     1530,  152,  152,  175,  152,  152,  152,  163, 2477, 1530,
      164,  163,  163, 1123,  164,  164,  163,  163,  163,  164,
      164,  164, 1072, 2478,  163, 1072,  152,  164,  152, 2479,
     1911, 2480,  163, 1072,  163,  164,  189,  164, 1179, 1197,
      189,  189, 1197, 1179, 1911,  189,  189,  189,  591,  591,
      591,  591, 2481,  189, 2482,  152,  152,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,

      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  169,
     1363, 2052,  170,  169,  169, 1363,  170,  170,  169,  169,
      169,  170,  170,  170, 1328, 1365,  169, 1328, 1365,  170,
      171,  171,  171,  171,  176,  171,  171, 2052,  176,  176,
      171,  171,  171,  176,  172,  172,  172,  172,  171,  172,
      172,  176, 1390, 2483,  172,  172,  172,  176,  169, 2053,
     2484,  170,  172,  173,  173,  173,  173,  217,  173,  173,
     1371,  217,  217,  173,  173, 1371,  217,  174,  174,  174,

      174,  173,  174,  174,  217, 2053, 2486,  174,  174,  173,
     1074,  173,  217, 1074,  217,  174, 2487,  428,  428,  428,
      428, 1074, 1390,  174,  428,  174,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  181, 2488,  182, 1428,  181,  181,

      182,  182, 1428,  181, 1430,  182,  181, 1391,  182, 1430,
      183,  181,  184,  182,  183,  183,  184,  184, 1529,  183,
     1392,  184,  183, 1529,  184, 1687,  185,  183,  186,  184,
      185,  185,  186,  186, 1687,  185, 1440,  186,  185, 1440,
      186, 2490, 1202,  185,  181,  186,  182,  187, 2494,  188,
     1202,  187,  187,  188,  188, 1202,  187, 1391,  188,  187,
      183,  188,  184,  190,  187, 2495,  188,  190,  190, 2496,
     1392, 1982,  190,  190,  190, 2499,  185,  191,  186,  192,
      190,  191,  191,  192,  192, 1982,  191, 2500,  192,  288,
      288,  288,  288, 1603,  191, 1734,  192,  187,  193,  188,

      288,  194,  193,  193, 1734,  194,  194,  193,  193,  193,
      194,  194,  194,  288, 1383,  193,  195, 1383,  194,  196,
      195,  195, 2507,  196,  196,  195, 1656, 1383,  196,  197,
      197, 1656,  197,  195,  197,  197,  196, 1184, 1603,  197,
      197,  197, 1184, 1184,  239, 1184, 2508,  197,  239,  239,
     1950, 1453, 1950,  239, 1453,  191,  191,  192,  192,  198,
      198,  239,  198,  209,  198,  198, 1603,  209,  209,  198,
      198,  198,  209,  203,  203,  203,  203,  198,  203,  203,
      209, 1950, 1675,  203,  203,  203, 1182, 1675,  203, 1182,
     1054,  203, 2036, 1054,  195,  195, 2509,  196,  196,  199,

      199,  199,  199, 1054,  199,  199, 2036, 1140, 1054,  199,
      199,  199,  209, 1140,  209, 1596, 1054,  199,  204,  204,
      204,  204, 1140,  204,  204,  199, 2511,  199,  204,  204,
      204, 1736, 1462,  204,  205, 1462,  204,  206,  205,  205,
     1736,  206,  206,  205, 1182,  205,  206, 1288,  206, 2512,
     1288,  205,  215, 2513,  206, 1140,  215,  215, 1596, 2514,
     2515,  215,  215,  215,  268,  268,  268,  268,  268,  215,
     2516,  268,  199,  200,  200,  200,  200, 1289,  200,  200,
     1289, 1195, 2517,  200,  200,  200, 1643, 1596,  268, 1643,
     1195,  200,  207,  207,  207,  207, 1195,  207,  207,  200,

     2518,  200,  207,  207,  207, 1288, 1376,  207, 2521, 1376,
      207,  208,  208,  208,  208, 1309,  208,  208, 1309, 1309,
     2523,  208,  208,  208, 1376, 1494,  208,  216, 1494,  208,
     1494,  216,  216, 1309, 1907, 1289,  216,  216,  216,  634,
      634,  634,  634, 1907,  216,  268,  200,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  210, 1910,  211, 1665,  210,  210,  211,  211, 2525,
      210, 1910,  211,  373,  373,  373,  373,  212,  210,  213,
      211,  212,  212,  213,  213, 1683,  212, 1355,  213, 1364,
     1355,  373, 1364, 1355,  212, 1364,  213,  214, 2526,  218,
     1761,  214,  214,  218,  218, 1761,  214, 1665,  218, 2519,
      210, 2519,  210,  211,  214, 2528,  218, 2095,  269,  269,
      269,  269, 2095, 2529,  218,  269,  218,  212,  219,  213,

     1683, 1561,  219,  219, 1561,  269, 1665,  219,  220,  220,
      219,  220, 1561,  220,  220,  219, 2531,  214,  220, 1565,
      221,  220, 1565, 2532,  221,  221,  220,  219, 1683,  221,
      290,  290,  290,  290, 2533,  222, 2534,  221,  220,  222,
      222,  290, 1648, 1565,  222, 1648,  223, 2535,  219,  221,
      223,  223,  222, 1654,  290,  223, 1654,  224, 2536,  220,
     1648,  224,  224,  223,  222, 1743,  224,  225, 1743,  269,
      221,  225,  225,  226,  224,  223,  225,  226,  226, 1654,
     2537, 2538,  226,  237,  225,  222,  224,  237,  237,  290,
      226, 2540,  237,  238,  237, 2541,  223,  238,  238, 2542,

      237, 2543,  238, 2544,  238, 1981, 1588,  224,  240, 1588,
      238,  241,  240,  240, 1981,  241,  241,  240,  225, 1588,
      241, 1753,  242, 2546,  226,  240,  242,  242,  241, 2064,
     1754,  242, 1754, 1753, 2547,  225, 2548, 1753, 2064,  242,
     1754,  226,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,

      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      231, 2549,  232, 2550,  231,  231,  232,  232, 1717,  231,
      231,  232,  232, 2153, 1717,  243,  243,  231,  243,  232,
      243,  243, 2153, 1717, 2032,  243, 2551, 2032,  243,  272,
      272,  272,  272,  243,  316,  316,  316,  316, 2552, 1360,
      272,  243, 1360, 1360,  272,  243,  272,  375,  375,  375,
      375, 2246, 2553,  272,  272,  272, 2131, 1360,  316, 2131,
     2246, 2131,  316, 2554, 2555,  375,  243,  231, 1717,  232,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,

      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  235,  235, 2556,  235, 1221,  235,
      235, 1221, 1221, 2557,  235,  236,  236, 1949,  236, 1949,
      236,  236,  235, 2338, 2558,  236, 1221,  480,  480,  480,
      480,  235, 2338,  236,  244,  244, 2414,  244, 1221,  244,

      244, 2414,  236, 2559,  244,  245,  480,  244, 2560,  245,
      245,  245,  244, 1649,  245, 2522, 1649,  245, 2522, 1221,
      244,  235,  245, 2563,  244, 1949,  344,  344,  344,  344,
      245, 1649,  236,  344,  245, 2396, 2565,  235, 1623,  235,
     2567, 1623, 2568,  235, 2396,  244, 2569, 1623,  236, 1016,
      236, 1623, 1016, 2341,  236,  245,  245,  246,  246, 2341,
      246, 2570,  246,  246,  246, 2571, 1639,  246, 2341, 1639,
      246,  289,  289,  289,  289,  246, 1016,  279,  279,  279,
      279,  279,  289,  246,  279, 1639, 2520,  246, 2520,  344,
      352,  352,  352,  352, 2573,  289,  347,  347,  347,  347,

     2574,  279, 2575,  347, 2576,  344, 1016,  352,  246,  246,
      377,  377,  377,  377,  352,  378,  378,  378,  378,  384,
      384,  384,  384, 2577, 1016, 2520,  384,  289,  384, 2578,
     2561, 2579,  384, 2561,  377,  386,  386,  386,  386,  378,
      526,  526,  526,  526, 2580, 2586, 2587,  526,  635,  635,
      635,  635, 2589,  386,  695,  695,  695,  695,  279,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  347,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345, 2592,
      345,  345,  345,  346,  346,  346,  346, 2267, 2593, 2267,
      346,  381,  381,  381,  381,  381, 2594, 2595,  381,  391,
      391,  391,  391,  396,  396,  396,  396,  397,  397,  397,
      397,  401,  401,  401,  401,  381, 2597,  391, 2598,  400,
      400,  400,  400,  402,  402,  402,  402,  396, 2599,  396,
     2600,  397, 2601,  397, 2603,  401, 2267,  401, 2605,  775,

      775,  775,  775,  400, 2608,  400,  346,  402, 2609,  402,
     2596,  403,  403,  403,  403,  408,  408,  408,  408, 2596,
     2610,  397,  346,  376,  376,  376,  376,  401, 1681,  376,
     2572, 1642,  381,  400, 1642,  403, 2611,  403, 1681,  408,
     2612,  408,  404,  404,  404,  404, 2614,  376,  402,  775,
     1642,  402, 1681,  376, 2572,  426,  426,  426,  426,  405,
      405,  405,  405, 2615, 1681, 2613,  404,  376,  404,  408,
      403, 2616, 2613,  376,  403, 2617, 2618,  376,  376,  426,
      376,  376,  376,  405, 2619,  405,  376,  376,  376,  376,
      376, 2620,  376, 2621,  376,  376,  376,  376,  376,  404,

      406,  406,  406,  406, 2622,  407,  407,  407,  407,  404,
      409,  409,  409,  409, 2623, 1676, 2624,  404, 1676,  404,
      410,  410,  410,  410,  406, 2625,  406, 2071, 1676,  407,
      405,  407, 1625, 2071,  409, 1625,  409,  411,  411,  411,
      411, 1625, 2071, 2626,  410, 1625,  410, 2627, 2628, 2630,
      412,  412,  412,  412,  413,  413,  413,  413, 2631,  406,
     2632,  411, 2633,  411, 2635,  414,  414,  414,  414, 2638,
     2659, 2660,  407,  409,  412, 2071,  412, 2682,  413,  410,
      413,  415,  415,  415,  415, 2683, 2698, 1684,  410,  414,
     1684,  414,  411, 2700,  410, 2701,  416,  416,  416,  416,

     1684,  417,  417,  417,  417,  415, 2702,  415,  427,  427,
      427,  427, 2268,  413, 2268,  433,  433,  433,  433, 2630,
      416,  412,  416, 2002,  412,  417, 2002,  417,  414, 2704,
     2705, 2707,  427,  433,  431,  431,  431,  431,  414, 2713,
      415,  429,  429,  429,  429,  429, 2714, 2002,  429,  432,
      432,  432,  432, 2718, 2719,  432,  417, 2720,  431,  415,
      431, 2268, 2723,  416,  417,  429, 2724,  432,  416,  417,
      434,  434,  434,  434,  438,  438,  438,  438,  449,  449,
      449,  449,  522,  522,  522,  522, 1433, 2725,  434, 1433,
     1433, 1705,  438, 2726, 1705, 2050,  449, 2728, 2050,  522,

      761,  761,  761,  761, 1433, 2730,  522,  761, 2050, 1705,
      523,  523,  523,  523,  524,  524,  524,  524,  525,  525,
      525,  525,  429,  475,  475,  475,  475,  523,  527,  527,
      527,  527,  527, 1870,  523,  527, 1870, 2562,  524, 2732,
     2562, 2733,  525,  529,  529,  529,  529, 2734, 2562, 2736,
      475, 1870,  527,  540,  540,  540,  540,  547,  547,  547,
      547,  676,  676,  676,  676,  523, 2737,  529, 2738, 2232,
     2731,  540, 2232, 2731, 2232,  547, 2739, 2731,  475,  676,
      475, 2740,  647,  647,  647,  647,  681,  681,  681,  681,
      475,  475, 2741, 2742,  475,  475,  475, 2743,  475,  647,

      683,  683,  683,  683,  681,  707,  707,  707,  707,  527,
      709,  709,  709,  709,  744,  744,  744,  744,  683, 2729,
     2744, 2729,  707,  745,  745,  745,  745,  751,  751,  751,
      751, 2745,  744, 2746,  709,  754,  754,  754,  754, 2051,
     2735,  745, 2051, 2735, 2747,  751, 2748,  762,  762,  762,
      762, 2749, 2051,  754,  762,  763,  763,  763,  763, 2750,
     2729, 2754,  763,  764,  764,  764,  764, 2756,  767,  767,
      767,  767, 2757, 2758, 2759,  767,  764,  767, 2760, 2761,
     2763,  767,  768,  768,  768,  768, 2764, 2765, 2766,  768,
     1292,  768, 2767, 1292, 1292,  768,  769,  769,  769,  769,

     2768, 2299, 2769,  769, 2299,  769, 2299, 2772, 1292,  769,
      770,  770,  770,  770, 2776, 2751, 2781,  770, 2751,  770,
     1292, 2782, 2783,  770,  771,  771,  771,  771,  773,  773,
      773,  773,  786,  786,  786,  786, 2784,  788,  788,  788,
      788, 1292,  771,  786, 2785, 2786,  773,  789,  789,  789,
      789,  790,  790,  790,  790, 2787,  786, 2788,  790, 2789,
      786,  788,  793,  793,  793,  793,  793, 2790, 2791,  793,
     2793,  789,  797,  797,  797,  797,  803,  803,  803,  803,
      806,  806,  806,  806, 2795, 2797,  793, 2798,  803, 2800,
     2802,  806,  809,  809,  809,  809,  797,  810,  810,  810,

      810,  815,  815,  815,  815,  806,  895,  895,  895,  895,
      896,  896,  896,  896,  921,  921,  921,  921, 2803,  815,
      924,  924,  924,  924, 2805,  921,  925,  925,  925,  925,
      806,  931,  931,  931,  931,  924, 2806, 2752, 2808,  921,
     2752,  925, 2809,  793,  959,  959,  959,  959, 2752, 2810,
      966,  966, 2811,  966, 2812,  966, 2814,  959,  966,  966,
     2817, 2818,  959, 2821,  921, 2822, 2823, 2839,  966, 2820,
      966,  981,  981,  981,  981, 2840, 2844, 2845,  981,  982,
      982,  982,  982, 2849, 2820, 2871,  982,  989,  989,  989,
      989, 2872, 2873,  921,  991,  991,  991,  991, 2881,  989,

     2882,  991,  989,  992,  992,  992,  992, 2886, 2887, 2891,
      992,  994,  994,  994,  994, 1003, 1003, 1003, 1003, 2892,
     2893,  981,  994, 1004, 1004, 1004, 1004, 1052, 2898,  982,
     1005, 1005, 1005, 1005, 2899, 2902, 2903, 1005, 2904, 1003,
     2905, 1008, 1008, 1008, 1008, 1008, 2906, 1004, 1008, 1014,
     1014, 1014, 1014, 1671, 1052, 1052, 1671, 1052, 2907, 1052,
     2908, 2909, 1052, 1052, 2911, 1008, 1671, 1784, 2914, 1053,
     1784, 1671, 1052, 1014, 1052, 1053, 1053, 2916, 1053, 1671,
     1053, 2918, 2919, 1053, 1053, 1068, 1068, 1068, 1068, 1075,
     1075, 1075, 1075, 1053, 2920, 1053, 2921, 1784, 1068, 1081,

     1081, 1081, 1081, 1068, 2910, 2922, 2910, 1075, 1082, 1082,
     1082, 1082, 1083, 1083, 1083, 1083, 1081, 2317, 1784, 1083,
     2317, 2923, 1008, 1081, 2317, 1082, 2317, 2924, 2915, 1083,
     2317, 2915, 1082, 1086, 1086, 1086, 1086, 2925, 2926, 2910,
     1086, 1087, 1087, 1087, 1087, 2927, 2928, 2931, 1087, 1088,
     1088, 1088, 1088, 1089, 1089, 1089, 1089, 2932, 2917, 1785,
     1088, 2917, 1785, 2933, 1088, 1090, 1090, 1090, 1090, 2934,
     2935, 2936, 1090, 2937, 1088, 1088, 2939, 1089, 1081, 1092,
     1092, 1092, 1092, 2941, 1093, 1093, 1093, 1093, 2942, 1785,
     1092, 1093, 2943, 1083, 1092, 2944, 1092, 1095, 1095, 1095,

     1095, 1093, 2945, 1092, 1092, 1092, 1094, 1094, 1094, 1094,
     1785, 2948, 2952, 1094, 1095, 1096, 1096, 1096, 1096, 2953,
     2954, 2955, 1096, 1094, 1097, 1097, 1097, 1097, 1097, 2956,
     2957, 1097, 1098, 1098, 1098, 1098, 1105, 1105, 1105, 1105,
     2959, 2960, 2961, 1105, 2962, 2964, 2965, 1098, 1097, 1098,
     2966, 1101, 1101, 1101, 1101, 2968, 1098, 1098, 1098, 2970,
     2912, 2971, 1101, 2912, 2978, 1093, 1101, 2912, 1101, 2981,
     2980, 1106, 1106, 1106, 1106, 1101, 1101, 1101, 1106, 2984,
     2985, 1107, 1107, 1107, 1107, 2980, 2990, 1094, 1108, 1108,
     1108, 1108, 1107, 2991, 2993, 3008, 1107, 1109, 1109, 1109,

     1109, 1112, 1112, 1112, 1112, 1097, 1107, 1107, 1113, 1113,
     1113, 1113, 1108, 1115, 1115, 1115, 1115, 3012, 3013, 3017,
     1115, 1109, 3016, 3018, 3019, 1112, 1116, 1116, 1116, 1116,
     3021, 3016, 1113, 1116, 1117, 1117, 1117, 1117, 3041, 1118,
     1118, 1118, 1118, 3042, 3048, 1117, 1118, 1120, 1120, 1120,
     1120, 1121, 1121, 1121, 1121, 3049, 3052, 3053, 1120, 1124,
     1124, 1124, 1124, 1124, 3054, 3058, 1124, 1108, 3061, 3062,
     3063, 1120, 3067, 1126, 1126, 1126, 1126, 1128, 1128, 1128,
     1128, 3068, 3070, 1124, 1126, 3072, 3075, 3076, 1128, 1129,
     1129, 1129, 1129, 1130, 1130, 1130, 1130, 1126, 3077, 3078,

     1129, 1128, 3079, 3080, 1130, 1144, 1144, 1144, 1144, 1152,
     1152, 1152, 1152, 1129, 3081, 3082, 1152, 1130, 1153, 1153,
     1153, 1153, 3085, 3083, 3084, 1153, 3083, 3084, 3086, 1144,
     1154, 1154, 1154, 1154, 3083, 3087, 3089, 1154, 3090, 3091,
     1124, 1155, 1155, 1155, 1155, 3092, 3093, 3098, 1130, 1156,
     1156, 1156, 1156, 1160, 1160, 1160, 1160, 3099, 1155, 3073,
     1160, 1129, 3073, 3100, 3102, 1155, 1156, 1161, 1161, 1161,
     1161, 3103, 1152, 1156, 3105, 1163, 1163, 1163, 1163, 3073,
     3073, 1153, 1163, 3106, 1161, 3107, 3110, 3111, 1152, 3114,
     3119, 1161, 1175, 1175, 1175, 1175, 3122, 1153, 1203, 1203,

     1203, 1203, 3123, 3124, 3126, 1203, 3127, 3128, 3133, 1154,
     1219, 1219, 1219, 1219, 3146, 1156, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1160, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 3147, 1158, 1158, 1158,

     1162, 1162, 1162, 1162, 1164, 1164, 1164, 1164, 1166, 1166,
     1166, 1166, 1168, 1168, 1168, 1168, 3151, 1162, 3152, 1176,
     1176, 1176, 1176, 3153, 1162, 1178, 1178, 1178, 1178, 1168,
     1483, 3154, 1166, 1483, 1483, 3171, 1168, 1176, 1181, 1181,
     1181, 1181, 3175, 1178, 1204, 1204, 1204, 1204, 1483, 3177,
     3178, 1204, 1205, 1205, 1205, 1205, 1208, 1208, 1208, 1208,
     1483, 3174, 1181, 3188, 3174, 3192, 1162, 1209, 1209, 1209,
     1209, 3193, 1206, 3197, 1209, 1206, 3198, 3199, 1205, 1638,
     1208, 1483, 1638, 1164, 1180, 1180, 1180, 1180, 3200, 3201,
     1180, 1206, 1206, 1206, 1206, 1206, 1211, 1211, 1211, 1211,

     1215, 1215, 1215, 1215, 3202, 3206, 1638, 1215, 1180, 1215,
     3207, 3208, 3204, 1215, 1180, 3204, 1216, 1216, 1216, 1216,
     1211, 3209, 1211, 1216, 3204, 1216, 3210, 3211, 1180, 1216,
     1206, 3216, 3194, 3194, 1180, 3194, 1638, 3205, 1180, 1180,
     3205, 1180, 1180, 1180, 3217, 3220, 3223, 1180, 1180, 1180,
     1180, 1180, 3225, 1180, 1638, 1180, 1180, 1180, 1180, 1180,
     1217, 1217, 1217, 1217, 1218, 1218, 1218, 1218, 3233, 1217,
     3234, 1217, 3235, 1217, 3238, 3239, 1218, 1218, 1220, 3252,
     3256, 1220, 1220, 1239, 1239, 1239, 1239, 3257, 1218, 3258,
     1218, 1220, 1224, 1224, 1224, 1224, 1224, 3259, 3266, 1224,

     1228, 1228, 1228, 1228, 1229, 1229, 1229, 1229, 1220, 3195,
     3195, 1228, 3195, 3267, 3282, 1229, 1224, 1230, 1230, 1230,
     1230, 1231, 1231, 1231, 1231, 3283, 3284, 3287, 1230, 1220,
     3294, 3295, 1231, 1232, 1232, 1232, 1232, 1233, 1233, 1233,
     1233, 3296, 1239, 3288, 1232, 3297, 3288, 3298, 1233, 3301,
     1234, 1234, 1234, 1234, 1235, 1235, 1235, 1235, 1275, 1275,
     1275, 1275, 3302, 1237, 1237, 1237, 1237, 3289, 3203, 1229,
     3289, 3203, 3303, 1224, 1234, 3304, 1234, 3305, 1235, 3203,
     1235, 3309, 1275, 1230, 1230, 3290, 3290, 1237, 3290, 1237,
     1231, 1240, 1240, 1240, 1240, 3315, 1233, 1241, 1241, 1241,

     1241, 3316, 3321, 3322, 1232, 1237, 1237, 1232, 3326, 1237,
     1242, 1242, 1242, 1242, 3327, 1240, 1786, 1240, 3328, 1786,
     3329, 1241, 3335, 1241, 1243, 1243, 1243, 1243, 1244, 1244,
     1244, 1244, 3292, 3292, 1242, 3292, 1242, 1245, 1245, 1245,
     1245, 3336, 1246, 1246, 1246, 1246, 1786, 3337, 1243, 3339,
     1243, 3340, 1244, 3357, 1244, 3358, 1247, 1247, 1247, 1247,
     1240, 1245, 3361, 1245, 3362, 1242, 1246, 1786, 1246, 1241,
     1248, 1248, 1248, 1248, 1249, 1249, 1249, 1249, 3363, 3364,
     1247, 1243, 1247, 1277, 1277, 1277, 1277, 3365, 1244, 3299,
     1277, 1243, 3299, 3366, 1248, 3370, 1248, 3373, 1249, 3374,

     1249, 3299, 3375, 3378, 1246, 1295, 1295, 1295, 1295, 1245,
     1250, 1250, 1250, 1250, 1251, 1251, 1251, 1251, 3379, 3380,
     1252, 1252, 1252, 1252, 1253, 1253, 1253, 1253, 3385, 1248,
     1247, 1249, 3359, 3386, 1250, 3359, 1250, 3387, 1251, 3359,
     1251, 3406, 3360, 1249, 1252, 3360, 1252, 1249, 1253, 3360,
     1253, 3407, 1254, 1254, 1254, 1254, 1296, 1296, 1296, 1296,
     1255, 1255, 1255, 1255, 1256, 1256, 1256, 1256, 1257, 1257,
     1257, 1257, 3402, 1250, 3410, 3402, 1254, 1252, 1254, 3402,
     3411, 1251, 1253, 1252, 1255, 1252, 1255, 3412, 1256, 3414,
     1256, 3415, 1257, 1252, 1257, 1258, 1258, 1258, 1258, 1259,

     1259, 1259, 1259, 1260, 1260, 1260, 1260, 3416, 1254, 3421,
     1261, 1261, 1261, 1261, 1262, 1262, 1262, 1262, 3422, 1258,
     3435, 1258, 1256, 1259, 3436, 1259, 3439, 1260, 1788, 1260,
     3440, 1788, 3404, 1255, 1261, 3404, 1261, 3442, 1262, 3404,
     1262, 1257, 1263, 1263, 1263, 1263, 1788, 3443, 1264, 1264,
     1264, 1264, 1265, 1265, 1265, 1265, 3449, 3450, 1788, 1260,
     3454, 1258, 1259, 3461, 3664, 2360, 1263, 1259, 1263, 2355,
     1261, 3664, 1264, 2354, 1264, 1262, 1265, 2353, 1265, 1788,
     1261, 1266, 1266, 1266, 1266, 1267, 1267, 1267, 1267, 3675,
     2352, 1268, 1268, 1268, 1268, 3677, 3675, 1263, 1269, 1269,

     1269, 1269, 3677, 3679, 2351, 1266, 2350, 1266, 2334, 1267,
     3679, 1267, 3681, 1263, 1264, 1268, 3683, 1268, 3691, 3681,
     2333, 1265, 1269, 3683, 1269, 1270, 1270, 1270, 1270, 1278,
     1278, 1278, 1278, 2332, 3691, 3699, 1278, 1279, 1279, 1279,
     1279, 3691, 3699, 3676, 1266, 2331, 2330, 2328, 1267, 1270,
     3676, 1270, 1280, 1280, 1280, 1280, 1268, 3676, 1789, 1280,
     2324, 1789, 2323, 1279, 2321, 1282, 1282, 1282, 1282, 1269,
     1283, 1283, 1283, 1283, 1283, 2320, 3692, 1283, 1284, 1284,
     1284, 1284, 1285, 1285, 1285, 1285, 3680, 2319, 1789, 1282,
     1270, 1282, 3692, 3680, 1283, 1287, 1287, 1287, 1287, 3692,

     3680, 1287, 1284, 2318, 1284, 3682, 1285, 1291, 1285, 1789,
     1291, 1291, 3682, 1287, 1294, 1294, 1294, 1294, 2313, 3682,
     1291, 1298, 1298, 1298, 1298, 1310, 1310, 1310, 1310, 1294,
     1311, 1311, 1311, 1311, 3701, 3684, 3700, 1291, 2312, 2311,
     1298, 3701, 3684, 3700, 1310, 1322, 1322, 1322, 1322, 3684,
     3700, 1283, 1323, 1323, 1323, 1323, 2310, 1322, 1291, 1297,
     1297, 1297, 1297, 1323, 1326, 1326, 1326, 1326, 3706, 2309,
     1326, 1327, 1327, 1327, 1327, 3706, 1330, 3718, 1323, 1330,
     1332, 1332, 1332, 1332, 3718, 2307, 1297, 1333, 1333, 1333,
     1333, 1336, 1336, 1336, 1336, 1330, 1330, 1330, 1330, 1330,

     1338, 1338, 1338, 1338, 1339, 1339, 1339, 1339, 1340, 1340,
     1340, 1340, 3721, 3723, 1297, 1340, 1297, 1338, 3726, 3721,
     3723, 1339, 3728, 2306, 1338, 3726, 1297, 1297, 1339, 3728,
     1297, 1297, 1297, 2305, 1297, 1341, 1341, 1341, 1341, 1343,
     1343, 1343, 1343, 1344, 1344, 1344, 1344, 1346, 1346, 1346,
     1346, 3702, 1341, 3731, 1346, 3734, 1343, 2302, 3702, 1341,
     3731, 2301, 3734, 1343, 1336, 3702, 3719, 1344, 1347, 1347,
     1347, 1347, 2296, 3719, 3737, 1347, 1349, 1349, 1349, 1349,
     3719, 3737, 2293, 1349, 1351, 1351, 1351, 1351, 1352, 1352,
     1352, 1352, 1352, 3729, 3739, 1352, 1353, 1353, 1353, 1353,

     3729, 3739, 3722, 1356, 3722, 1343, 1356, 3729, 1351, 2290,
     3741, 3722, 1352, 1358, 1358, 1358, 1358, 3741, 3722, 2287,
     1353, 2284, 1356, 1356, 1356, 1356, 1356, 1362, 1362, 1362,
     1362, 1370, 1370, 1370, 1370, 1394, 1394, 1394, 1394, 1407,
     1407, 1407, 1407, 2281, 2280, 1362, 2274, 2273, 2272, 1370,
     1417, 1417, 1417, 1417, 1418, 1418, 1418, 1418, 3743, 1419,
     1419, 1419, 1419, 3756, 2271, 3743, 1419, 1417, 2269, 1352,
     3756, 1418, 1419, 1420, 1420, 1420, 1420, 1429, 1429, 1429,
     1429, 1441, 1441, 1441, 1441, 1446, 1446, 1446, 1446, 2265,
     1420, 2264, 1429, 1447, 1447, 1447, 1447, 1449, 1449, 1449,

     1449, 1450, 1450, 1450, 1450, 1480, 1480, 1480, 1480, 1446,
     1447, 1482, 2262, 3758, 1482, 1482, 1488, 1488, 1488, 1488,
     3758, 2261, 2259, 1488, 1482, 1450, 1489, 1489, 1489, 1489,
     2256, 3770, 3732, 1489, 1490, 1490, 1490, 1490, 3770, 3732,
     2255, 1482, 1491, 1491, 1491, 1491, 3732, 1490, 1493, 1493,
     1493, 1493, 2253, 2252, 2250, 1491, 1496, 1496, 1496, 1496,
     1441, 1493, 1482, 1496, 2249, 1496, 2248, 3740, 3742, 1496,
     1497, 1497, 1497, 1497, 3740, 3742, 2247, 1497, 2245, 1497,
     2244, 3740, 3742, 1497, 1498, 1498, 1498, 1498, 3779, 3783,
     2241, 1498, 2236, 1498, 2233, 3779, 3783, 1498, 1499, 1499,

     1499, 1499, 1500, 1500, 1500, 1500, 1501, 1501, 1501, 1501,
     1503, 1503, 1503, 1503, 2230, 1504, 1504, 1504, 1504, 2229,
     3797, 1503, 1504, 1506, 1506, 1506, 1506, 3797, 1504, 1508,
     1508, 1508, 1508, 2227, 1503, 3744, 1508, 1509, 1509, 1509,
     1509, 2226, 3744, 3806, 1509, 2225, 3824, 1506, 1499, 3744,
     3806, 2224, 1500, 3824, 3829, 3831, 1501, 1511, 1511, 1511,
     1511, 3829, 3831, 2222, 1511, 1513, 1513, 1513, 1513, 1514,
     1514, 1514, 1514, 1514, 3757, 2221, 1514, 1515, 1515, 1515,
     1515, 3757, 1516, 1516, 1516, 1516, 2220, 2218, 3757, 1513,
     2217, 2216, 3836, 1514, 1516, 1517, 1517, 1517, 1517, 3836,

     2215, 1515, 1518, 1518, 1518, 1518, 1517, 1525, 1525, 1525,
     1525, 2213, 2212, 1518, 1527, 1527, 1527, 1527, 1528, 1528,
     1528, 1528, 1548, 1548, 1548, 1548, 3810, 1518, 1553, 1553,
     1553, 1553, 1556, 1556, 1556, 1556, 1528, 1559, 1559, 1559,
     1559, 1560, 3810, 2209, 1560, 1563, 1563, 1563, 1563, 3810,
     1514, 2156, 1518, 1569, 1569, 1569, 1569, 2149, 3811, 2143,
     1560, 1560, 1560, 1560, 1560, 1571, 1571, 1571, 1571, 1575,
     1575, 1575, 1575, 2140, 3811, 3772, 1571, 1576, 1576, 1576,
     1576, 3811, 3772, 2132, 1575, 1577, 1577, 1577, 1577, 3772,
     1571, 1589, 1589, 1589, 1589, 1590, 1590, 1590, 1590, 1605,

     1605, 1605, 1605, 2130, 1589, 3849, 1605, 1606, 1606, 1606,
     1606, 2129, 3849, 2128, 1606, 1571, 1607, 1607, 1607, 1607,
     1609, 1609, 1609, 1609, 1610, 1610, 1610, 1610, 1607, 2127,
     3887, 1607, 1609, 2126, 2125, 1609, 1610, 3887, 2124, 1610,
     1611, 1611, 1611, 1611, 1571, 1615, 1615, 1615, 1615, 1605,
     1613, 1613, 1613, 1613, 2123, 2122, 3808, 1606, 1618, 1618,
     1618, 1618, 1613, 3808, 3812, 1613, 1616, 1616, 1616, 1616,
     3808, 3812, 3921, 1616, 1617, 1617, 1617, 1617, 3812, 3921,
     2121, 1617, 1619, 1619, 1619, 1619, 1620, 1620, 1620, 1620,
     2119, 3818, 2118, 1619, 2117, 2116, 2115, 1620, 1622, 1622,

     1622, 1622, 1628, 1628, 1628, 1628, 2114, 3818, 3813, 1622,
     1630, 1630, 1630, 1630, 3818, 3813, 3925, 1630, 1631, 1631,
     1631, 1631, 3813, 3925, 3945, 1631, 1628, 1633, 1633, 1633,
     1633, 3945, 2113, 2112, 1633, 1635, 1635, 1635, 1635, 1636,
     1636, 1636, 1636, 1636, 2111, 2110, 1636, 1637, 1637, 1637,
     1637, 1685, 1685, 1685, 1685, 1686, 1686, 1686, 1686, 1635,
     2109, 2108, 3946, 1636, 1685, 1690, 1690, 1690, 1690, 3946,
     2107, 1637, 1691, 1691, 1691, 1691, 1809, 1809, 1809, 1809,
     1690, 3953, 3814, 1691, 2106, 2105, 2104, 1691, 3953, 3814,
     1690, 1690, 1692, 1692, 1692, 1692, 3814, 1691, 1691, 1695,

     1695, 1695, 1695, 1692, 2103, 2102, 1695, 1692, 1693, 1693,
     1693, 1693, 1694, 1694, 1694, 1694, 1692, 1692, 1692, 3983,
     1636, 1696, 1696, 1696, 1696, 1693, 3983, 2101, 1696, 1694,
     1698, 1698, 1698, 1698, 1698, 1809, 3830, 1698, 1699, 1699,
     1699, 1699, 2100, 3830, 1700, 1700, 1700, 1700, 2099, 1699,
     3830, 2098, 2097, 1699, 1698, 1700, 1701, 1701, 1701, 1701,
     2096, 2094, 2093, 1699, 1699, 4011, 2092, 1701, 1702, 1702,
     1702, 1702, 4011, 1708, 1708, 1708, 1708, 1708, 2089, 1702,
     1708, 2088, 1710, 1710, 1710, 1710, 2085, 2084, 1711, 1711,
     1711, 1711, 1702, 1710, 3861, 2083, 2082, 1708, 4049, 1711,

     1718, 1718, 1718, 1718, 1718, 4049, 1710, 1718, 2081, 2079,
     3861, 1698, 1711, 1719, 1719, 1719, 1719, 3861, 1720, 1720,
     1720, 1720, 2075, 2070, 1718, 1720, 1721, 1721, 1721, 1721,
     1719, 2069, 2062, 1721, 2054, 2049, 2048, 1719, 1722, 1722,
     1722, 1722, 1725, 1725, 1725, 1725, 2047, 1733, 2046, 1725,
     2045, 2044, 2042, 1711, 1708, 1710, 1733, 1733, 1733, 1733,
     4054, 3838, 1722, 1739, 1739, 1739, 1739, 4054, 3838, 4069,
     1740, 1740, 1740, 1740, 1740, 3838, 4069, 1740, 2041, 2038,
     2035, 1718, 1719, 1738, 1738, 1738, 1738, 1739, 3929, 1738,
     1771, 1771, 1771, 1771, 1740, 1772, 1772, 1772, 1772, 1776,

     1776, 1776, 1776, 1773, 3929, 2034, 1773, 1738, 1776, 2033,
     1776, 3929, 1776, 1738, 2029, 2028, 1771, 1779, 1779, 1779,
     1779, 1772, 1773, 1773, 1773, 1773, 1773, 1738, 1779, 1873,
     1873, 1873, 1873, 1738, 2027, 2021, 4075, 1738, 1738, 2019,
     1738, 1738, 1738, 4075, 2018, 2017, 1738, 1738, 1738, 1738,
     1738, 1740, 1738, 2016, 1738, 1738, 1738, 1738, 1738, 1777,
     1777, 1777, 1777, 4102, 2015, 2014, 1777, 2012, 1777, 2011,
     4102, 2010, 1777, 1778, 1778, 1778, 1778, 1780, 1780, 1780,
     1780, 2009, 2007, 2005, 1780, 1778, 1778, 3759, 3759, 1780,
     1781, 1781, 1781, 1781, 3759, 1790, 2004, 1778, 1790, 2003,

     1999, 3759, 1781, 1781, 1795, 1795, 1795, 1795, 1790, 1852,
     1852, 1852, 1852, 1997, 1781, 1795, 1781, 1793, 1793, 1793,
     1793, 1793, 3987, 1995, 1793, 1790, 1797, 1797, 1797, 1797,
     1993, 1798, 1798, 1798, 1798, 1852, 1991, 1797, 3987, 1989,
     1987, 1793, 1798, 1985, 1984, 3987, 1790, 1799, 1799, 1799,
     1799, 1800, 1800, 1800, 1800, 1983, 1979, 1977, 1799, 1967,
     1966, 1965, 1800, 1801, 1801, 1801, 1801, 1802, 1802, 1802,
     1802, 1962, 1958, 3839, 1801, 1956, 1960, 1955, 1802, 1960,
     3839, 1803, 1803, 1803, 1803, 1954, 1798, 3839, 1804, 1804,
     1804, 1804, 1803, 1806, 1806, 1806, 1806, 1953, 1793, 1804,

     1952, 1951, 1807, 1807, 1807, 1807, 1960, 1808, 1808, 1808,
     1808, 1876, 1876, 1876, 1876, 1948, 1799, 1806, 1947, 1806,
     1811, 1811, 1811, 1811, 1800, 1806, 1807, 1960, 1807, 1946,
     1802, 1808, 1945, 1808, 1944, 1802, 1801, 1803, 1812, 1812,
     1812, 1812, 1943, 1942, 1811, 1808, 1811, 1807, 1813, 1813,
     1813, 1813, 1814, 1814, 1814, 1814, 3848, 1963, 1804, 1941,
     1963, 1940, 1812, 3848, 1812, 1815, 1815, 1815, 1815, 1939,
     3848, 1938, 1813, 1935, 1813, 1934, 1814, 1933, 1814, 1816,
     1816, 1816, 1816, 1817, 1817, 1817, 1817, 1963, 1929, 1815,
     1928, 1815, 1921, 1919, 1811, 1818, 1818, 1818, 1818, 1819,

     1819, 1819, 1819, 1816, 1918, 1816, 1917, 1817, 1963, 1817,
     1916, 1812, 1820, 1820, 1820, 1820, 1915, 1814, 1914, 1818,
     1813, 1818, 1913, 1819, 1912, 1819, 1909, 1821, 1821, 1821,
     1821, 1822, 1822, 1822, 1822, 1905, 1820, 1815, 1820, 1903,
     1896, 1895, 1816, 1823, 1823, 1823, 1823, 1824, 1824, 1824,
     1824, 1821, 1817, 1821, 1889, 1822, 1887, 1822, 1825, 1825,
     1825, 1825, 3997, 1818, 1885, 1819, 1882, 1823, 1880, 1823,
     1879, 1824, 1878, 1824, 1826, 1826, 1826, 1826, 3997, 1820,
     1877, 4095, 1825, 1875, 1825, 3997, 1821, 1827, 1827, 1827,
     1827, 1874, 1828, 1828, 1828, 1828, 1822, 4095, 1826, 1872,

     1826, 1867, 1823, 1866, 4095, 1865, 1824, 1829, 1829, 1829,
     1829, 1827, 1864, 1827, 1863, 1862, 1828, 1825, 1828, 1830,
     1830, 1830, 1830, 1831, 1831, 1831, 1831, 1832, 1832, 1832,
     1832, 1829, 1861, 1829, 3858, 1833, 1833, 1833, 1833, 1826,
     1860, 3858, 1859, 1830, 1851, 1830, 1810, 1831, 3858, 1831,
     1794, 1832, 1783, 1832, 1782, 1828, 1774, 1770, 1769, 1833,
     1827, 1833, 1834, 1834, 1834, 1834, 1829, 1835, 1835, 1835,
     1835, 1836, 1836, 1836, 1836, 1768, 1830, 1767, 1837, 1837,
     1837, 1837, 1839, 1839, 1839, 1839, 1834, 1766, 1834, 1832,
     1764, 1835, 1763, 1835, 1831, 1836, 1762, 1836, 1838, 1838,

     1838, 1838, 1837, 1760, 1837, 1759, 1839, 1758, 1839, 1833,
     1840, 1840, 1840, 1840, 1757, 1756, 1755, 1834, 1841, 1841,
     1841, 1841, 1838, 1752, 1838, 1751, 1835, 4096, 1842, 1842,
     1842, 1842, 1750, 1748, 1840, 1747, 1840, 1746, 1843, 1843,
     1843, 1843, 1841, 4096, 1841, 1745, 1836, 1837, 1744, 1742,
     4096, 1837, 1842, 1732, 1842, 1844, 1844, 1844, 1844, 1730,
     1729, 1728, 1843, 1838, 1843, 1727, 1845, 1845, 1845, 1845,
     1846, 1846, 1846, 1846, 1847, 1847, 1847, 1847, 1726, 1844,
     1724, 1844, 1716, 1712, 1840, 1841, 1881, 1881, 1881, 1881,
     1845, 1709, 1845, 1707, 1846, 1689, 1846, 1682, 1847, 1673,

     1847, 1842, 1848, 1848, 1848, 1848, 1849, 1849, 1849, 1849,
     1672, 1670, 1843, 1850, 1850, 1850, 1850, 1853, 1853, 1853,
     1853, 1669, 1668, 1667, 1844, 1845, 1848, 1666, 1848, 1664,
     1849, 1855, 1849, 1856, 1855, 1663, 1856, 1850, 1846, 1850,
     1662, 1847, 1661, 1853, 1655, 1854, 1854, 1854, 1854, 1854,
     2146, 1857, 1854, 2146, 1857, 1652, 1651, 1855, 3860, 1856,
     3860, 1855, 1858, 1856, 1650, 1858, 1647, 3860, 1850, 1854,
     1891, 1891, 1891, 1891, 3860, 1858, 1848, 1857, 1646, 1849,
     2146, 1857, 1855, 1645, 1856, 1644, 1886, 1641, 1858, 1886,
     1640, 1629, 1858, 1883, 1883, 1883, 1883, 1893, 1893, 1893,

     1893, 2146, 1857, 1627, 1883, 1886, 1886, 1886, 1886, 1886,
     1626, 1890, 1614, 1858, 1608, 1899, 1899, 1899, 1899, 1883,
     1890, 1890, 1890, 1890, 1604, 1602, 1854, 1897, 1897, 1897,
     1897, 1601, 1899, 1600, 1897, 1898, 1898, 1898, 1898, 1899,
     1599, 1598, 1898, 1900, 1900, 1900, 1900, 1902, 1902, 1902,
     1902, 1902, 1906, 1597, 1902, 1931, 1931, 1931, 1931, 1595,
     1900, 1906, 1906, 1906, 1906, 1594, 1587, 1900, 1586, 1568,
     1931, 1902, 1922, 1922, 1922, 1922, 1566, 1558, 1555, 1922,
     1923, 1923, 1923, 1923, 1552, 1922, 1547, 1923, 1925, 1925,
     1925, 1925, 3866, 1923, 1932, 1932, 1932, 1932, 1959, 3866,

     1961, 1964, 1900, 1961, 1964, 1925, 3866, 1959, 1959, 1959,
     1959, 1968, 1968, 1968, 1968, 1537, 1536, 1535, 1968, 1526,
     1971, 1971, 1971, 1971, 1968, 1522, 1961, 1964, 1902, 1507,
     1961, 1964, 1969, 1969, 1969, 1969, 1505, 1980, 1502, 1969,
     1970, 1970, 1970, 1970, 1971, 1969, 1980, 1980, 1980, 1980,
     1479, 1961, 1964, 1970, 1974, 1974, 1974, 1974, 1974, 1988,
     1474, 1974, 1975, 1975, 1975, 1975, 1473, 1471, 1988, 1988,
     1988, 1988, 1992, 1975, 2001, 1466, 1996, 2001, 1974, 1465,
     2000, 1992, 1992, 1992, 1992, 1996, 1996, 1996, 1996, 2000,
     2000, 2000, 2000, 2001, 2001, 2001, 2001, 2001, 2008, 2022,

     2022, 2022, 2022, 2023, 2023, 2023, 2023, 2008, 2008, 2008,
     2008, 2022, 1461, 1459, 2022, 2024, 2024, 2024, 2024, 2025,
     2025, 2025, 2025, 2026, 2026, 2026, 2026, 2031, 2031, 2031,
     2031, 2031, 1458, 1457, 2031, 1974, 1456, 2057, 2057, 2057,
     2057, 1448, 2058, 2058, 2058, 2058, 1426, 2060, 2060, 2060,
     2060, 2031, 2057, 2058, 1425, 1424, 1423, 2058, 2060, 1422,
     1421, 2057, 2057, 2057, 1416, 1415, 2058, 2058, 2058, 1414,
     1413, 2060, 2073, 2073, 2073, 2073, 1412, 1411, 1405, 2073,
     2076, 2076, 2076, 2076, 2080, 2080, 2080, 2080, 2087, 1404,
     1403, 2080, 2136, 2136, 2136, 2136, 1384, 2087, 2087, 2087,

     2087, 1380, 1378, 2136, 2076, 1377, 1368, 1357, 2031, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040, 2040,
     2040, 2040, 2040, 2066, 2066, 2066, 2066, 2067, 2067, 2067,

     2067, 1345, 1342, 1337, 2066, 1331, 1321, 1320, 2067, 2072,
     2072, 2072, 2072, 2072, 1319, 1318, 2072, 2066, 1317, 1316,
     1315, 2067, 2074, 2074, 2074, 2074, 2074, 2150, 1314, 2074,
     2150, 1313, 1306, 2072, 2077, 2077, 2077, 2077, 2078, 2078,
     2078, 2078, 2091, 2091, 2091, 2091, 2074, 2135, 2135, 2135,
     2135, 2077, 2133, 2133, 2133, 2133, 2067, 2150, 2077, 2133,
     1304, 2133, 2078, 1303, 2066, 2133, 2091, 2134, 2134, 2134,
     2134, 2135, 3868, 2135, 2134, 1302, 2134, 1301, 2150, 3868,
     2134, 2138, 2138, 2138, 2138, 1300, 3868, 1299, 2138, 2152,
     2072, 1276, 2152, 2138, 2214, 2214, 2214, 2214, 1274, 2077,

     1238, 3874, 3875, 2074, 2090, 2090, 2090, 2090, 3874, 3875,
     2090, 2139, 2139, 2139, 2139, 3874, 3875, 2141, 2139, 2152,
     1236, 1225, 2141, 2139, 2157, 2157, 2157, 2157, 2090, 2141,
     2141, 2141, 2141, 2141, 2090, 2157, 2142, 2142, 2142, 2142,
     2152, 1207, 1201, 2142, 1200, 2142, 1198, 1196, 2090, 2142,
     2219, 2219, 2219, 2219, 2090, 1194, 1193, 1192, 2090, 2090,
     1190, 2090, 2090, 2090, 1188, 1187, 1186, 2090, 2090, 2090,
     2090, 2090, 1185, 2090, 1183, 2090, 2090, 2090, 2090, 2090,
     2144, 2144, 2144, 2144, 2158, 2158, 2158, 2158, 2159, 2159,
     2159, 2159, 2144, 1174, 1173, 2158, 2157, 1172, 1169, 2159,

     2160, 2160, 2160, 2160, 2144, 2161, 2161, 2161, 2161, 1167,
     1145, 2160, 2162, 2162, 2162, 2162, 2161, 2163, 2163, 2163,
     2163, 1139, 1137, 2162, 2164, 2164, 2164, 2164, 2163, 2165,
     2165, 2165, 2165, 1136, 1125, 2164, 2166, 2166, 2166, 2166,
     2167, 2167, 2167, 2167, 1114, 1110, 1084, 2159, 1080, 2158,
     1065, 1063, 1041, 2165, 1040, 2165, 2223, 2223, 2223, 2223,
     2166, 1039, 2166, 2160, 2167, 1037, 2167, 1024, 2165, 2168,
     2168, 2168, 2168, 2169, 2169, 2169, 2169, 2167, 2166, 1023,
     2161, 1022, 2163, 1013, 1001, 2162, 2170, 2170, 2170, 2170,
      990,  979,  955, 2168,  911, 2168,  905, 2169, 2164, 2169,

     2171, 2171, 2171, 2171, 2172, 2172, 2172, 2172,  904,  903,
     2170,  880, 2170, 2173, 2173, 2173, 2173,  872,  864, 2174,
     2174, 2174, 2174,  856, 2171, 2168, 2171,  847, 2172,  837,
     2172,  831,  826, 2177, 2177, 2177, 2177, 2173,  813, 2173,
      807,  796,  785, 2174, 2169, 2174, 2176, 2176, 2176, 2176,
     2178, 2178, 2178, 2178,  758, 2171,  757, 2177, 2170, 2177,
     2228, 2228, 2228, 2228, 2231, 2231, 2231, 2231,  756,  755,
     2176,  752, 2176,  748, 2178, 2231, 2178, 2172,  738,  737,
     2173,  736, 2174, 2175, 2175, 2175, 2175, 2175, 2175, 2175,
     2175, 2175, 2175, 2175, 2175, 2175, 2175, 2175, 2175, 2175,

     2175, 2175, 2175,  735,  724,  723, 2177,  722, 2175,  721,
     2175, 2175, 2175, 2175, 2175, 2179, 2179, 2179, 2179, 2178,
     2180, 2180, 2180, 2180,  720, 2176, 2181, 2181, 2181, 2181,
     2182, 2182, 2182, 2182, 2175, 2175, 2175, 2175,  719, 2179,
      688, 2179,  663,  657, 2180,  655, 2180,  654, 3876,  645,
     2181,  639, 2181,  632, 2182, 3876, 2182, 2183, 2183, 2183,
     2183,  619, 3876, 2175, 2175, 2175, 2175,  618, 2184, 2184,
     2184, 2184, 2185, 2185, 2185, 2185,  576,  564, 2179,  553,
      537, 2183,  535, 2183, 2186, 2186, 2186, 2186,  528,  514,
      512, 2180, 2184, 2181, 2184,  498, 2185,  489, 2185,  487,

      486, 2182, 2187, 2187, 2187, 2187,  485,  484, 2186,  483,
     2186, 2188, 2188, 2188, 2188,  482, 2189, 2189, 2189, 2189,
     2190, 2190, 2190, 2190,  430,  425, 2187, 3886, 2187,  398,
      394, 2183,  392,  390, 3886, 2188, 2184, 2188,  389, 2185,
     2189, 3886, 2189,  364, 2190,  362, 2190, 2191, 2191, 2191,
     2191, 2192, 2192, 2192, 2192, 2186, 2193, 2193, 2193, 2193,
     3893,  349, 2194, 2194, 2194, 2194, 2188, 3893,  315, 3907,
     2187, 2191,  287, 2191, 3893, 2192, 3907, 2192,  285,  270,
     2193,  247, 2193, 3907, 2189, 2190, 2194,    0, 2194, 2195,
     2195, 2195, 2195, 2196, 2196, 2196, 2196,    0, 2197, 2197,

     2197, 2197, 3924, 2191, 2198, 2198, 2198, 2198,    0, 3924,
        0, 2193,    0, 2195,    0, 2195, 3924, 2196, 3936, 2196,
        0, 2194, 2197, 2192, 2197, 3936,    0,    0, 2198,    0,
     2198,    0, 3936, 2199, 2199, 2199, 2199, 2200, 2200, 2200,
     2200,    0, 2201, 2201, 2201, 2201, 3894, 3894, 2195, 2202,
     2202, 2202, 2202, 3894,    0, 2197, 2196, 2199, 3965, 2199,
     3894, 2200, 3970, 2200,    0, 3965, 2201, 2198, 2201, 3970,
     2197,    0, 3965, 2202,    0, 2202, 3970, 2203, 2203, 2203,
     2203, 2204, 2204, 2204, 2204,    0,    0,    0, 2199, 2205,
     2205, 2205, 2205, 2206, 2206, 2206, 2206,    0,    0, 2201,

     2200, 2203,    0, 2203,    0, 2204,    0, 2204, 2207, 2207,
     2207, 2207,    0, 2205, 2202, 2205, 2235, 2206,    0, 2206,
        0, 2208, 2208, 2208, 2208, 2235, 2235, 2235, 2235,    0,
        0,    0, 2207,    0, 2207, 2203, 2238, 2238, 2238, 2238,
     2239, 2239, 2239, 2239, 2203, 2208,    0, 2208, 2204, 3947,
     2205, 3978, 2206, 2238, 3947,    0, 3947, 2239, 3978,    0,
     2238, 2243,    0, 3947, 2239, 3978, 2240, 2240, 2240, 2240,
     2243, 2243, 2243, 2243, 2254, 2254, 2254, 2254, 2257, 2257,
     2257, 2257, 2207, 2240,    0,    0, 2276,    0,    0,    0,
     2240, 2254,    0,    0, 2208, 2276, 2276, 2276, 2276, 2277,

     2277, 2277, 2277, 2278, 2278, 2278, 2278, 2279, 2279, 2279,
     2279, 2283, 2277,    0, 2420, 2420, 2420, 2420,    0,    0,
     2283, 2283, 2283, 2283, 2289, 2420,    0, 2278,    0,    0,
     2292, 2279,    0, 2289, 2289, 2289, 2289, 2295, 2240, 2292,
     2292, 2292, 2292, 2298, 3922, 3922, 2295, 2295, 2295, 2295,
     2304, 3922, 2298, 2298, 2298, 2298,    0,    0, 3922, 2304,
     2304, 2304, 2304, 2314, 2314,    0,    0,    0, 2314,    0,
        0, 2314, 2314, 2342, 2342, 2342, 2342,    0,    0,    0,
     2342, 2314, 2420, 2314, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,

     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326,
     2326, 2326, 2326, 2326, 2326, 2326, 2326, 2326, 2337, 2337,
        0,    0,    0, 2337,    0,    0, 2337, 2337, 2339, 2339,
     2339, 2339, 2340, 2340, 2340, 2340, 2337,    0, 2337, 2339,
        0, 3981,    0, 2340, 2343, 2343, 2343, 2343, 3981,    0,

        0, 2343, 2339,    0,    0, 3981, 2340, 2345, 2345, 2345,
     2345, 2347, 2347, 2347, 2347, 2347, 3994,    0, 2347, 2348,
     2348, 2348, 2348, 3994, 2349, 2349, 2349, 2349,    0,    0,
     3994, 2345,    0, 2339,    0, 2347, 2359, 2359, 2359, 2359,
     2340, 2349,    0, 2348, 2403, 2403, 2403, 2403, 2349, 2374,
     2374, 2374, 2374, 2404, 2404, 2404, 2404, 2408,    0,    0,
     2359,    0, 2408, 2417, 2417, 2417, 2417,    0, 2403, 2408,
     2408, 2408, 2408, 2408, 2417, 2409,    0, 2404,    0, 2404,
     2409,    0,    0, 2349,    0,    0,    0, 2409, 2409, 2409,
     2409, 2409, 2347, 2358, 2358, 2358, 2358, 4007, 4007, 2358,

     2411, 2411, 2411, 2411, 4007,    0, 2412, 2412, 2412, 2412,
        0, 4007, 2411, 2485, 2485, 2485, 2485, 2358, 2412, 2503,
     2503, 2503, 2503, 2358, 2411,    0, 2411,    0, 2374,    0,
     2412, 2418, 2418, 2418, 2418, 2417,    0, 2358, 2419, 2419,
     2419, 2419, 2418, 2358,    0,    0,    0, 2358, 2358, 2419,
     2358, 2358, 2358,    0,    0,    0, 2358, 2358, 2358, 2358,
     2358,    0, 2358,    0, 2358, 2358, 2358, 2358, 2358, 2421,
     2421, 2421, 2421, 2422, 2422, 2422, 2422,    0,    0,    0,
     2421,    0,    0,    0, 2422, 2423, 2423, 2423, 2423,    0,
     2418, 2424, 2424, 2424, 2424,    0, 2423, 2426, 2426, 2426,

     2426,    0, 2424, 2425, 2425, 2425, 2425,    0,    0, 2419,
     2427, 2427, 2427, 2427, 2489, 2489, 2489, 2489,    0, 4008,
        0, 2426,    0, 2426, 2421, 2489, 4008, 2425,    0, 2425,
        0,    0, 2422, 4008, 2427,    0, 2427, 3954, 2425, 3954,
     2426, 2422, 2428, 2428, 2428, 2428, 3954,    0, 2423,    0,
        0, 2427,    0, 3954, 2424, 2429, 2429, 2429, 2429, 2430,
     2430, 2430, 2430,    0,    0,    0, 2428,    0, 2428, 2431,
     2431, 2431, 2431, 2432, 2432, 2432, 2432,    0,    0, 2429,
        0, 2429, 3984, 2430, 3984, 2430, 2489, 2433, 2433, 2433,
     2433, 3984,    0, 2431,    0, 2431,    0, 2432, 3984, 2432,

     2434, 2434, 2434, 2434,    0,    0,    0, 2428,    0,    0,
     2429, 2433,    0, 2433,    0,    0, 2436, 2436, 2436, 2436,
     2504, 2504, 2504, 2504, 2434,    0, 2434, 2439, 2439, 2439,
     2439, 2440, 2440, 2440, 2440,    0,    0,    0, 2430,    0,
     2436, 2431, 2436,    0,    0,    0, 2433, 2442, 2442, 2442,
     2442, 2439,    0, 2439,    0, 2440,    0, 2440, 2443, 2443,
     2443, 2443,    0, 2444, 2444, 2444, 2444, 2434,    0,    0,
        0, 2442,    0, 2442, 2445, 2445, 2445, 2445, 2446, 2446,
     2446, 2446, 2443, 2504, 2443,    0,    0, 2444, 2440, 2444,
     2447, 2447, 2447, 2447, 2491, 2491, 2491, 2491, 2445,    0,

     2445,    0, 2446, 2440, 2446, 2491, 2448, 2448, 2448, 2448,
     2588, 2588, 2588, 2588, 2447,    0, 2447,    0,    0,    0,
     2444, 2449, 2449, 2449, 2449, 2450, 2450, 2450, 2450,    0,
     2448, 2443, 2448,    0,    0,    0, 2446, 2451, 2451, 2451,
     2451, 2445,    0,    0,    0, 2449,    0, 2449,    0, 2450,
        0, 2450,    0, 2447, 2452, 2452, 2452, 2452,    0,    0,
        0, 2451,    0, 2451, 2448, 2453, 2453, 2453, 2453, 2454,
     2454, 2454, 2454,    0, 2455, 2455, 2455, 2455, 2452,    0,
     2452,    0,    0,    0, 2450, 4014,    0,    0, 2449, 2453,
        0, 2453, 4014, 2454,    0, 2454, 4017, 2451, 2455, 4014,

     2455, 4017,    0, 4017, 2451, 2456, 2456, 2456, 2456,    0,
     4017, 2457, 2457, 2457, 2457, 2458, 2458, 2458, 2458, 2459,
     2459, 2459, 2459, 2452,    0,    0,    0, 2454,    0, 2456,
        0, 2456,    0, 2455,    0, 2457, 2453, 2457,    0, 2458,
        0, 2458,    0, 2459,    0, 2459,    0, 2460, 2460, 2460,
     2460, 2461, 2461, 2461, 2461, 2464, 2464, 2464, 2464, 2465,
     2465, 2465, 2465, 2466, 2466, 2466, 2466,    0,    0,    0,
     2456, 2460,    0, 2460,    0, 2461,    0, 2461,    0, 2464,
     2457, 2464,    0, 2465,    0, 2465,    0, 2466, 2458, 2466,
     2459, 2467, 2467, 2467, 2467, 2468, 2468, 2468, 2468, 2469,

     2469, 2469, 2469,    0, 2460,    0,    0,    0, 2461,    0,
     2470, 2470, 2470, 2470,    0, 2467,    0, 2467,    0, 2468,
     2466, 2468,    0, 2469, 2465, 2469, 2464, 2471, 2471, 2471,
     2471,    0,    0,    0, 2470,    0, 2470, 2472, 2472, 2472,
     2472,    0, 2473, 2473, 2473, 2473, 2474, 2474, 2474, 2474,
     2468, 2471,    0, 2471, 2475, 2475, 2475, 2475, 2469,    0,
        0, 2472,    0, 2472, 2467, 2470, 2473,    0, 2473,    0,
     2474,    0, 2474, 2498, 2498, 2498, 2498, 4024, 2475, 4024,
     2475, 2527, 2527, 2527, 2527, 4037, 4024,    0, 2527,    0,
     2498,    0, 4037, 4024, 2527,    0,    0, 2498,    0, 4037,

        0, 2474, 2581, 2581, 2581, 2581, 2471, 2582, 2582, 2582,
     2582,    0,    0, 2581,    0, 2473,    0, 2475, 2582,    0,
     2584, 2584, 2584, 2584, 2584,    0, 2581, 2584,    0,    0,
        0, 2582, 2585, 2585, 2585, 2585, 2590, 2590, 2590, 2590,
        0,    0, 2498,    0, 2584, 2591, 2591, 2591, 2591, 2585,
     2602, 2602, 2602, 2602,    0,    0, 2585,    0,    0, 2581,
     2604, 2604, 2604, 2604, 2606, 2606, 2606, 2606,    0, 2591,
     2607, 2607, 2607, 2607, 2629, 2629, 2629, 2629, 2634, 2634,
     2634, 2634, 4045, 4068,    0, 2634, 2582, 2634,    0, 4045,
     4068, 2634, 2636, 2636, 2636, 2636, 4045, 4068, 2585,    0,

        0, 2584, 2637, 2637, 2637, 2637, 2639, 2639, 2639, 2639,
     2699, 2699, 2699, 2699, 2637,    0, 2636, 2639, 4047,    0,
     4047, 2606, 2640, 2640, 2640, 2640, 2637, 4047, 2637, 2602,
        0,    0,    0, 2640, 4047,    0, 2606, 2641, 2641, 2641,
     2641, 2642, 2642, 2642, 2642,    0,    0,    0, 2641,    0,
        0,    0, 2642, 2629, 2643, 2643, 2643, 2643, 2644, 2644,
     2644, 2644,    0,    0,    0, 2643,    0,    0,    0, 2644,
        0, 2645, 2645, 2645, 2645, 2646, 2646, 2646, 2646,    0,
        0,    0, 2645,    0,    0,    0, 2646,    0, 2640, 2647,
     2647, 2647, 2647, 2648, 2648, 2648, 2648, 2641,    0,    0,

     2647,    0,    0, 2703, 2703, 2703, 2703,    0, 2642, 2649,
     2649, 2649, 2649,    0, 2703, 2644,    0, 2648,    0, 2648,
        0, 2650, 2650, 2650, 2650,    0, 2648, 2643, 2645, 4081,
        0,    0, 2646, 2649,    0, 2649, 4081, 2651, 2651, 2651,
     2651,    0,    0, 4081, 2649, 2650,    0, 2650, 2652, 2652,
     2652, 2652, 2650, 2653, 2653, 2653, 2653,    0,    0,    0,
     2647, 2651,    0, 2651, 2655, 2655, 2655, 2655, 2656, 2656,
     2656, 2656, 2652,    0, 2652, 2703,    0, 2653,    0, 2653,
     2657, 2657, 2657, 2657, 2658, 2658, 2658, 2658, 2655,    0,
     2655, 2657, 2656,    0, 2656, 2661, 2661, 2661, 2661,    0,

     2651,    0, 4091,    0, 2657, 2652, 2657,    0, 2658, 4091,
     2658, 2662, 2662, 2662, 2662,    0, 4091,    0, 2656, 2661,
        0, 2661,    0,    0,    0, 2656,    0, 2656, 2663, 2663,
     2663, 2663,    0,    0,    0, 2662, 2655, 2662,    0,    0,
     2656,    0, 2656, 2664, 2664, 2664, 2664,    0, 2664,    0,
        0,    0, 2663,    0, 2663,    0,    0, 2658, 2665, 2665,
     2665, 2665, 2666, 2666, 2666, 2666,    0, 2664,    0, 2664,
     2667, 2667, 2667, 2667, 2662, 2668, 2668, 2668, 2668,    0,
        0,    0, 2665, 4097, 2665,    0, 2666,    0, 2666,    0,
     4097, 2663,    0,    0, 2667,    0, 2667, 4097,    0, 2668,

        0, 2668, 2669, 2669, 2669, 2669, 2670, 2670, 2670, 2670,
     2671, 2671, 2671, 2671,    0, 2672, 2672, 2672, 2672, 2666,
     2673, 2673, 2673, 2673, 4099,    0, 2669,    0, 2669, 2667,
     2670, 4099, 2670,    0, 2671,    0, 2671,    0, 4099, 2672,
     2668, 2672,    0,    0, 2673,    0, 2673, 2674, 2674, 2674,
     2674, 2675, 2675, 2675, 2675, 2676, 2676, 2676, 2676,    0,
        0, 2670,    0,    0,    0, 2671, 2677, 2677, 2677, 2677,
        0, 2674,    0, 2674,    0, 2675,    0, 2675,    0, 2676,
        0, 2676, 2678, 2678, 2678, 2678, 2679, 2679, 2679, 2679,
     2677,    0, 2677,    0, 2680, 2680, 2680, 2680, 2673, 2681,

     2681, 2681, 2681,    0,    0,    0, 2678,    0, 2678,    0,
     2679,    0, 2679,    0, 2676,    0,    0,    0, 2680, 2674,
     2680, 2677,    0, 2681,    0, 2681, 2684, 2684, 2684, 2684,
     2685, 2685, 2685, 2685, 2686, 2686, 2686, 2686,    0,    0,
        0, 2678,    0, 2681, 2687, 2687, 2687, 2687,    0,    0,
     2684,    0, 2684,    0, 2685,    0, 2685,    0, 2686, 2679,
     2686,    0, 2688, 2688, 2688, 2688,    0, 2680, 2687,    0,
     2687, 2681, 2689, 2689, 2689, 2689,    0, 2690, 2690, 2690,
     2690, 2691, 2691, 2691, 2691, 2684, 2688,    0, 2688, 2693,
     2693, 2693, 2693,    0,    0,    0, 2689,    0, 2689,    0,

        0, 2690, 2685, 2690,    0, 2691,    0, 2691, 2706, 2706,
     2706, 2706,    0, 2693,    0, 2693, 2694, 2694, 2694, 2694,
        0,    0,    0, 2687, 2695, 2695, 2695, 2695, 2696, 2696,
     2696, 2696, 2689,    0,    0, 2688, 2697, 2697, 2697, 2697,
     2694,    0, 2694, 2690, 2708, 2708, 2708, 2708, 2695,    0,
     2695,    0, 2696,    0, 2696, 2708, 2709, 2709, 2709, 2709,
     2697,    0, 2697, 2710, 2710, 2710, 2710, 2712, 2712, 2712,
     2712,    0,    0, 2694, 2710, 2715, 2715, 2715, 2715, 2717,
     2717, 2717, 2717, 2770, 2770, 2770, 2770,    0, 2694,    0,
        0,    0, 2715, 2696, 2770, 2771, 2771, 2771, 2771, 2715,

        0, 2697, 2695,    0,    0,    0, 2771, 2770, 2774, 2774,
     2774, 2774, 2775, 2775, 2775, 2775,    0, 4100,    0, 2771,
     2777, 2777, 2777, 2777, 4100, 2774, 2778, 2778, 2778, 2778,
     2715, 4100, 2774, 2779, 2779, 2779, 2779, 2780, 2780, 2780,
     2780,    0,    0,    0, 2717, 2792, 2792, 2792, 2792, 2794,
     2794, 2794, 2794,    0,    0,    0, 2770, 2796, 2796, 2796,
     2796, 2780, 2799, 2799, 2799, 2799,    0, 2774, 2801, 2801,
     2801, 2801,    0,    0, 2771,    0, 2804, 2804, 2804, 2804,
     2807, 2807, 2807, 2807,    0, 2813, 2813, 2813, 2813, 2815,
     2815, 2815, 2815, 2816, 2816, 2816, 2816,    0,    0, 2794,

     2804, 2819, 2819, 2819, 2819,    0, 2794,    0, 2794, 2813,
        0, 2825, 2825, 2825, 2825,    0, 2826, 2826, 2826, 2826,
        0, 2794, 2825, 2794,    0,    0,    0, 2826,    0, 2813,
     2827, 2827, 2827, 2827, 2828, 2828, 2828, 2828,    0,    0,
        0, 2827,    0,    0,    0, 2828,    0, 2829, 2829, 2829,
     2829, 2830, 2830, 2830, 2830,    0,    0, 2813, 2829,    0,
        0,    0, 2830, 2831, 2831, 2831, 2831,    0,    0,    0,
     2825, 2826, 2816,    0, 2831, 2832, 2832, 2832, 2832, 2833,
     2833, 2833, 2833,    0,    0, 2827, 2832, 2834, 2834, 2834,
     2834,    0,    0, 2828,    0,    0,    0, 2835, 2835, 2835,

     2835,    0,    0, 2833,    0, 2833,    0, 2836, 2836, 2836,
     2836, 2834,    0, 2834, 2837, 2837, 2837, 2837,    0, 2830,
     2829, 2835,    0, 2835,    0,    0, 2833, 2838, 2838, 2838,
     2838, 2836, 2834, 2836, 2832,    0,    0, 2835, 2837,    0,
     2837, 2841, 2841, 2841, 2841, 2842, 2842, 2842, 2842,    0,
     2842, 2838, 2841, 2838,    0, 2842, 2843, 2843, 2843, 2843,
     2846, 2846, 2846, 2846,    0, 2841,    0, 2841, 2847, 2847,
     2847, 2847, 2848, 2848, 2848, 2848,    0, 2848,    0, 2836,
     2843,    0, 2843,    0, 2846,    0, 2846, 2837, 2850, 2850,
     2850, 2850, 2847,    0, 2847,    0, 2848, 4106, 2848, 2851,

     2851, 2851, 2851,    0, 4106, 2853, 2853, 2853, 2853,    0,
        0, 4106, 2850, 4107, 2850, 2843, 2854, 2854, 2854, 2854,
     4107,    0,    0, 2851,    0, 2851,    0, 4107, 2846, 2853,
        0, 2853, 2855, 2855, 2855, 2855, 2888, 2888, 2888, 2888,
     2854, 2847, 2854,    0,    0, 2850,    0, 2888, 2889, 2889,
     2889, 2889, 2890, 2890, 2890, 2890, 2855,    0, 2855,    0,
     2850,    0, 2850, 2852, 2852, 2852, 2852, 2852, 2852, 2852,
     2852, 2852, 2852, 2852, 2852, 2852, 2852, 2852, 2852, 2852,
     2852, 2852, 2852, 2853, 2856, 2856, 2856, 2856, 2852, 2855,
     2852, 2852, 2852, 2852, 2852, 2857, 2857, 2857, 2857, 2858,

     2858, 2858, 2858, 2859, 2859, 2859, 2859,    0, 2856,    0,
     2856,    0,    0,    0, 2852, 2852, 2852, 2852, 2852, 2857,
        0, 2857,    0, 2858,    0,    0,    0, 2859,    0, 2859,
     2860, 2860, 2860, 2860, 2861, 2861, 2861, 2861, 2862, 2862,
     2862, 2862,    0, 2852, 2852, 2852, 2852,    0,    0, 2856,
     2863, 2863, 2863, 2863, 2860,    0, 2860,    0, 2861,    0,
     2861,    0, 2862,    0, 2862, 2864, 2864, 2864, 2864, 2865,
     2865, 2865, 2865,    0, 2863,    0, 2863, 2866, 2866, 2866,
     2866,    0, 2867, 2867, 2867, 2867,    0,    0,    0, 2864,
        0, 2864,    0, 2865,    0, 2865, 2868, 2868, 2868, 2868,

        0, 2866,    0, 2866,    0,    0, 2867, 2863, 2867, 2864,
     2894, 2894, 2894, 2894, 2869, 2869, 2869, 2869,    0,    0,
     2868, 2894, 2870, 2870, 2870, 2870, 2867, 2874, 2874, 2874,
     2874,    0, 2865,    0,    0,    0, 2866, 2864, 2869,    0,
     2869, 2875, 2875, 2875, 2875,    0, 2870, 2865, 2870,    0,
        0, 2874,    0, 2874, 2867, 2876, 2876, 2876, 2876, 2878,
     2878, 2878, 2878,    0,    0, 2875,    0, 2875, 2869, 2879,
     2879, 2879, 2879, 2880, 2880, 2880, 2880,    0,    0, 2876,
        0, 2876,    0, 2878,    0, 2878,    0, 2870, 2883, 2883,
     2883, 2883,    0, 2879,    0, 2879,    0, 2880,    0, 2880,

     2884, 2884, 2884, 2884, 2885, 2885, 2885, 2885, 2896, 2896,
     2896, 2896, 2883,    0, 2883,    0,    0,    0, 2878, 2897,
     2897, 2897, 2897,    0, 2884,    0, 2884,    0, 2885,    0,
     2885,    0, 2880,    0, 2900, 2900, 2900, 2900, 2901, 2901,
     2901, 2901, 2946, 2946, 2946, 2946, 2947, 2947, 2947, 2947,
        0, 2900, 2949, 2949, 2949, 2949,    0, 2883, 2900, 2946,
        0,    0,    0, 2885,    0,    0, 2946, 2950, 2950, 2950,
     2950, 2951, 2951, 2951, 2951, 2958, 2958, 2958, 2958, 2963,
     2963, 2963, 2963, 2967, 2967, 2967, 2967, 2969, 2969, 2969,
     2969, 2900,    0,    0,    0, 2951,    0, 2901, 2972, 2972,

     2972, 2972, 2973, 2973, 2973, 2973,    0,    0,    0, 2946,
     2974, 2974, 2974, 2974, 2975, 2975, 2975, 2975, 2976, 2976,
     2976, 2976, 2972, 2977, 2977, 2977, 2977, 2979, 2979, 2979,
     2979, 2982, 2982, 2982, 2982,    0,    0,    0, 2975, 2983,
     2983, 2983, 2983, 2986, 2986, 2986, 2986, 2987, 2987, 2987,
     2987, 2979,    0,    0,    0, 2982, 2988, 2988, 2988, 2988,
     2989, 2989, 2989, 2989,    0,    0,    0, 2986,    0,    0,
        0, 2979,    0,    0,    0, 2982, 2992, 2992, 2992, 2992,
     2994, 2994, 2994, 2994, 2995, 2995, 2995, 2995,    0,    0,
        0, 2994,    0,    0,    0, 2995,    0,    0,    0, 2979,

        0,    0,    0, 2982, 2996, 2996, 2996, 2996, 2997, 2997,
     2997, 2997,    0,    0,    0, 2996,    0,    0,    0, 2997,
     2998, 2998, 2998, 2998, 2999, 2999, 2999, 2999,    0,    0,
        0, 2998,    0,    0,    0, 2999,    0, 3000, 3000, 3000,
     3000, 2995, 3001, 3001, 3001, 3001,    0, 2994, 3000, 3002,
     3002, 3002, 3002, 3001, 3003, 3003, 3003, 3003, 3004, 3004,
     3004, 3004, 3005, 3005, 3005, 3005,    0,    0,    0, 2996,
        0,    0,    0, 3002,    0, 3002,    0,    0, 3003, 2998,
     3003,    0, 3004,    0, 3004,    0, 3005,    0, 3005, 2999,
     3006, 3006, 3006, 3006, 3007, 3007, 3007, 3007,    0,    0,

     3001, 3003,    0,    0, 3004, 3009, 3009, 3009, 3009,    0,
     3009,    0,    0,    0, 3006, 3009, 3006,    0, 3007,    0,
     3007,    0,    0,    0, 3005, 3011, 3011, 3011, 3011,    0,
     3014, 3014, 3014, 3014, 3015, 3015, 3015, 3015, 3020, 3020,
     3020, 3020, 3022, 3022, 3022, 3022,    0,    0,    0, 3011,
        0, 3011,    0,    0, 3014,    0, 3014,    0, 3015,    0,
     3015,    0, 3020,    0, 3020,    0, 3022,    0, 3022, 3023,
     3023, 3023, 3023,    0, 3024, 3024, 3024, 3024, 3025, 3025,
     3025, 3025, 3026, 3026, 3026, 3026,    0, 3027, 3027, 3027,
     3027,    0,    0, 3023,    0, 3023, 3011, 3014, 3024,    0,

     3024,    0, 3025,    0, 3025, 3028, 3028, 3028, 3028,    0,
     3022, 3027,    0, 3027, 3029, 3029, 3029, 3029, 3030, 3030,
     3030, 3030, 3031, 3031, 3031, 3031,    0,    0,    0, 3028,
        0, 3028,    0, 3024, 3032, 3032, 3032, 3032, 3029,    0,
     3029,    0, 3030,    0, 3030,    0, 3031,    0, 3031, 3033,
     3033, 3033, 3033,    0, 3034, 3034, 3034, 3034, 3032, 3035,
     3035, 3035, 3035,    0,    0,    0, 3031, 3036, 3036, 3036,
     3036,    0,    0, 3033,    0, 3033,    0, 3030, 3034,    0,
     3034,    0,    0, 3035,    0, 3035, 3037, 3037, 3037, 3037,
        0, 3036,    0, 3036, 3031, 3038, 3038, 3038, 3038, 3039,

     3039, 3039, 3039, 3033, 3040, 3040, 3040, 3040,    0,    0,
     3037,    0, 3037, 3043, 3043, 3043, 3043,    0, 3035, 3034,
        0,    0,    0, 3039,    0, 3039,    0,    0, 3040,    0,
     3040, 3044, 3044, 3044, 3044,    0,    0, 3043,    0, 3043,
     3045, 3045, 3045, 3045, 3037, 3039,    0, 3046, 3046, 3046,
     3046, 3047, 3047, 3047, 3047, 3044,    0, 3044, 3050, 3050,
     3050, 3050,    0,    0, 3045, 3051, 3051, 3051, 3051,    0,
        0, 3046, 3040, 3046,    0, 3047,    0, 3047,    0,    0,
        0, 3043, 3050,    0, 3050, 3055, 3055, 3055, 3055, 3051,
        0, 3051, 3056, 3056, 3056, 3056,    0, 3046, 3057, 3057,

     3057, 3057,    0,    0, 3046,    0, 3046, 3059, 3059, 3059,
     3059, 3074, 3074, 3074, 3074,    0,    0, 3050,    0, 3046,
        0, 3046, 3046,    0, 3059, 3094, 3094, 3094, 3094,    0,
        0, 3059, 3095, 3095, 3095, 3095, 3096, 3096, 3096, 3096,
        0,    0, 3094, 3097, 3097, 3097, 3097,    0,    0, 3094,
     3101, 3101, 3101, 3101, 3104, 3104, 3104, 3104, 3108, 3108,
     3108, 3108, 3109, 3109, 3109, 3109, 3059, 3097, 3112, 3112,
     3112, 3112, 3113, 3113, 3113, 3113, 3115, 3115, 3115, 3115,
     3116, 3116, 3116, 3116, 3117, 3117, 3117, 3117, 3118, 3118,
     3118, 3118, 3120, 3120, 3120, 3120,    0,    0, 3094,    0,

     3115, 3121, 3121, 3121, 3121,    0,    0,    0, 3117, 3125,
     3125, 3125, 3125,    0,    0,    0, 3120, 3129, 3129, 3129,
     3129, 3130, 3130, 3130, 3130, 3131, 3131, 3131, 3131, 3132,
     3132, 3132, 3132,    0,    0,    0, 3120, 3134, 3134, 3134,
     3134, 3129, 3135, 3135, 3135, 3135, 3136, 3136, 3136, 3136,
        0,    0,    0, 3135,    0,    0,    0, 3136, 3137, 3137,
     3137, 3137,    0,    0, 3120, 3138, 3138, 3138, 3138, 3137,
     3139, 3139, 3139, 3139,    0, 3131, 3138, 3140, 3140, 3140,
     3140, 3139, 3131,    0, 3131,    0,    0,    0, 3140,    0,
     3141, 3141, 3141, 3141,    0,    0,    0, 3131,    0, 3131,

     3131, 3141,    0,    0,    0, 3136, 3142, 3142, 3142, 3142,
     3143, 3143, 3143, 3143,    0, 3135, 3144, 3144, 3144, 3144,
     3145, 3145, 3145, 3145, 3148, 3148, 3148, 3148, 3139,    0,
     3142,    0, 3142,    0, 3143,    0, 3143,    0,    0,    0,
     3144,    0, 3144,    0, 3145,    0, 3145,    0, 3148,    0,
     3148, 3149, 3149, 3149, 3149, 3142, 3150, 3150, 3150, 3150,
     3156, 3156, 3156, 3156, 3157, 3157, 3157, 3157,    0, 3143,
     3158, 3158, 3158, 3158,    0, 3149,    0, 3149,    0,    0,
     3145,    0,    0,    0, 3156,    0, 3156,    0, 3157,    0,
     3157,    0,    0,    0, 3158,    0, 3158, 3159, 3159, 3159,

     3159, 3160, 3160, 3160, 3160, 3162, 3162, 3162, 3162,    0,
        0,    0, 3170, 3170, 3170, 3170, 3173, 3173, 3173, 3173,
        0, 3159,    0, 3159,    0, 3160,    0, 3156, 3180, 3180,
     3180, 3180,    0,    0,    0, 3150, 3161, 3161, 3161, 3161,
     3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3161,
     3161, 3161, 3161, 3161, 3161, 3161, 3163, 3163, 3163, 3163,
        0, 3161, 3161, 3161, 3161, 3161, 3161, 3161, 3164, 3164,
     3164, 3164, 3165, 3165, 3165, 3165, 3181, 3181, 3181, 3181,
     3163,    0, 3163, 3166, 3166, 3166, 3166, 3161, 3161, 3161,
     3161, 3170, 3164,    0, 3164,    0, 3165,    0, 3165,    0,

        0,    0, 3163, 3167, 3167, 3167, 3167, 3166,    0, 3166,
        0, 3168, 3168, 3168, 3168,    0, 3161, 3161, 3161, 3161,
        0,    0, 3169, 3169, 3169, 3169,    0, 3167,    0, 3167,
     3172, 3172, 3172, 3172,    0, 3168, 3164, 3168, 3176, 3176,
     3176, 3176,    0,    0, 3165,    0, 3169, 3167, 3169,    0,
        0, 3168,    0,    0, 3172,    0, 3172, 3179, 3179, 3179,
     3179,    0, 3176,    0, 3176, 3182, 3182, 3182, 3182, 3183,
     3183, 3183, 3183,    0,    0, 3167, 3184, 3184, 3184, 3184,
        0, 3179,    0, 3179, 3185, 3185, 3185, 3185, 3186, 3186,
     3186, 3186,    0,    0,    0, 3169,    0, 3172, 3187, 3187,

     3187, 3187, 3196, 3196, 3196, 3196, 3212, 3212, 3212, 3212,
     3213, 3213, 3213, 3213,    0, 3187, 3214, 3214, 3214, 3214,
        0,    0, 3187, 3212, 3215, 3215, 3215, 3215,    0,    0,
     3212, 3218, 3218, 3218, 3218, 3219, 3219, 3219, 3219, 3221,
     3221, 3221, 3221, 3222, 3222, 3222, 3222,    0, 3215, 3224,
     3224, 3224, 3224, 3226, 3226, 3226, 3226, 3227, 3227, 3227,
     3227, 3228, 3228, 3228, 3228, 3229, 3229, 3229, 3229, 3230,
     3230, 3230, 3230, 3231, 3231, 3231, 3231,    0, 3212, 3232,
     3232, 3232, 3232, 3236, 3236, 3236, 3236, 3237, 3237, 3237,
     3237,    0,    0, 3230, 3240, 3240, 3240, 3240, 3241, 3241,

     3241, 3241, 3242, 3242, 3242, 3242, 3243, 3243, 3243, 3243,
        0, 3237,    0, 3242,    0,    0,    0, 3243, 3244, 3244,
     3244, 3244, 3245, 3245, 3245, 3245,    0,    0,    0, 3244,
        0, 3237,    0, 3245, 3246, 3246, 3246, 3246, 3247, 3247,
     3247, 3247,    0,    0,    0, 3246,    0,    0,    0, 3247,
     3248, 3248, 3248, 3248,    0,    0,    0, 3242,    0, 3237,
     3249, 3249, 3249, 3249, 3250, 3250, 3250, 3250, 3251, 3251,
     3251, 3251,    0,    0, 3248,    0, 3248, 3253, 3253, 3253,
     3253,    0,    0,    0, 3249,    0, 3249,    0, 3250,    0,
     3250, 3254, 3254, 3254, 3254,    0, 3260, 3260, 3260, 3260,

        0, 3253,    0, 3253, 3261, 3261, 3261, 3261, 3262, 3262,
     3262, 3262, 3263, 3263, 3263, 3263,    0,    0, 3249, 3250,
     3260,    0, 3260,    0, 3268, 3268, 3268, 3268, 3261,    0,
     3261,    0, 3262,    0, 3262, 3269, 3269, 3269, 3269,    0,
     3271, 3271, 3271, 3271,    0,    0,    0, 3251, 3268,    0,
     3268,    0,    0, 3260, 3273, 3273, 3273, 3273,    0, 3269,
        0, 3269,    0,    0, 3271, 3262, 3271,    0,    0,    0,
     3254, 3278, 3278, 3278, 3278, 3269,    0,    0, 3273,    0,
     3262, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265,
     3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265,

     3265, 3285, 3285, 3285, 3285,    0, 3265, 3265, 3265, 3265,
     3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265,
     3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265,
     3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265,
     3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265,
     3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265, 3265,
     3265, 3265, 3265, 3265, 3265, 3270, 3270, 3270, 3270, 3272,
     3272, 3272, 3272, 3274, 3274, 3274, 3274, 3275, 3275, 3275,
     3275, 3276, 3276, 3276, 3276, 3277, 3277, 3277, 3277, 3270,
        0, 3270,    0, 3272,    0, 3272,    0, 3274,    0, 3274,

        0, 3275,    0, 3275,    0, 3276,    0, 3276,    0, 3277,
        0, 3277,    0, 3272, 3280, 3280, 3280, 3280,    0, 3281,
     3281, 3281, 3281, 3276,    0,    0,    0, 3274,    0, 3286,
     3286, 3286, 3286,    0, 3306, 3306, 3306, 3306, 3270,    0,
        0, 3272, 3275, 3281,    0, 3281, 3286, 3307, 3307, 3307,
     3307, 3306,    0, 3286,    0,    0,    0, 3277, 3306, 3308,
     3308, 3308, 3308, 3310, 3310, 3310, 3310, 3311, 3311, 3311,
     3311, 3312, 3312, 3312, 3312,    0, 3281, 3313, 3313, 3313,
     3313,    0,    0, 3308, 3314, 3314, 3314, 3314, 3317, 3317,
     3317, 3317,    0, 3280, 3318, 3318, 3318, 3318, 3319, 3319,

     3319, 3319, 3320, 3320, 3320, 3320, 3323, 3323, 3323, 3323,
     3324, 3324, 3324, 3324, 3325, 3325, 3325, 3325, 3330, 3330,
     3330, 3330, 3331, 3331, 3331, 3331,    0,    0,    0, 3330,
     3323,    0,    0, 3331, 3324, 3332, 3332, 3332, 3332, 3333,
     3333, 3333, 3333,    0,    0,    0, 3332, 3334, 3334, 3334,
     3334,    0,    0,    0, 3324, 3319,    0, 3338, 3338, 3338,
     3338,    0,    0, 3333,    0, 3333, 3342, 3342, 3342, 3342,
     3319, 3343, 3343, 3343, 3343, 3344, 3344, 3344, 3344,    0,
        0, 3338, 3324, 3338, 3345, 3345, 3345, 3345,    0,    0,
        0, 3330,    0, 3342,    0,    0, 3333,    0, 3343, 3344,

        0, 3344, 3346, 3346, 3346, 3346,    0,    0, 3345,    0,
     3345, 3347, 3347, 3347, 3347,    0, 3338, 3344, 3348, 3348,
     3348, 3348, 3349, 3349, 3349, 3349, 3346,    0, 3346, 3350,
     3350, 3350, 3350,    0,    0, 3347, 3351, 3351, 3351, 3351,
     3352, 3352, 3352, 3352,    0,    0, 3349,    0, 3349, 3353,
     3353, 3353, 3353, 3350,    0, 3350, 3345,    0,    0,    0,
     3351,    0, 3351,    0, 3352,    0, 3352,    0, 3349, 3355,
     3355, 3355, 3355, 3356, 3356, 3356, 3356, 3367, 3367, 3367,
     3367,    0,    0, 3351, 3368, 3368, 3368, 3368, 3369, 3369,
     3369, 3369,    0, 3355,    0, 3355,    0, 3350,    0,    0,

        0, 3367, 3371, 3371, 3371, 3371, 3372, 3372, 3372, 3372,
        0,    0, 3369, 3376, 3376, 3376, 3376, 3377, 3377, 3377,
     3377, 3381, 3381, 3381, 3381,    0,    0,    0, 3355, 3382,
     3382, 3382, 3382, 3384, 3384, 3384, 3384, 3376,    0,    0,
     3382, 3383, 3383, 3383, 3383, 3381, 3388, 3388, 3388, 3388,
        0,    0, 3356, 3389, 3389, 3389, 3389, 3391, 3391, 3391,
     3391, 3392, 3392, 3392, 3392, 3383,    0, 3383, 3393, 3393,
     3393, 3393,    0, 3388,    0, 3394, 3394, 3394, 3394,    0,
     3389, 3391,    0, 3391,    0, 3392,    0, 3392, 3395, 3395,
     3395, 3395, 3382, 3396, 3396, 3396, 3396,    0,    0, 3394,

     3383, 3394,    0,    0, 3391, 3397, 3397, 3397, 3397,    0,
        0,    0, 3395,    0, 3395, 3394,    0, 3396,    0, 3396,
     3398, 3398, 3398, 3398, 3399, 3399, 3399, 3399,    0, 3397,
        0, 3397, 3401, 3401, 3401, 3401,    0,    0,    0, 3396,
     3408, 3408, 3408, 3408, 3398, 3409, 3409, 3409, 3409, 3413,
     3413, 3413, 3413, 3417, 3417, 3417, 3417, 3418, 3418, 3418,
     3418, 3395,    0, 3419, 3419, 3419, 3419,    0,    0, 3409,
        0,    0,    0, 3413, 3419,    0,    0, 3417, 3420, 3420,
     3420, 3420, 3423, 3423, 3423, 3423, 3424, 3424, 3424, 3424,
     3425, 3425, 3425, 3425, 3426, 3426, 3426, 3426, 3427, 3427,

     3427, 3427, 3428, 3428, 3428, 3428, 3423,    0, 3423,    0,
     3424, 3401, 3424,    0, 3425,    0,    0,    0, 3426,    0,
     3426,    0, 3427,    0, 3427,    0,    0,    0, 3423,    0,
        0, 3419, 3429, 3429, 3429, 3429, 3426, 3433, 3433, 3433,
     3433, 3434, 3434, 3434, 3434, 3437, 3437, 3437, 3437, 3438,
     3438, 3438, 3438, 3441, 3441, 3441, 3441, 3444, 3444, 3444,
     3444,    0,    0,    0, 3441, 3434,    0,    0,    0, 3437,
     3427, 3445, 3445, 3445, 3445, 3446, 3446, 3446, 3446, 3447,
     3447, 3447, 3447, 3448, 3448, 3448, 3448, 3451, 3451, 3451,
     3451, 3452, 3452, 3452, 3452, 3445,    0, 3445,    0, 3446,

        0, 3446, 3452, 3453, 3453, 3453, 3453, 3448,    0,    0,
        0, 3451, 3455, 3455, 3455, 3455,    0,    0, 3445,    0,
     3441, 3456, 3456, 3456, 3456, 3457, 3457, 3457, 3457, 3458,
     3458, 3458, 3458,    0,    0,    0, 3455,    0, 3455, 3459,
     3459, 3459, 3459,    0,    0, 3456,    0, 3456,    0, 3457,
     3460, 3460, 3460, 3460, 3462, 3462, 3462, 3462, 3455, 3463,
     3463, 3463, 3463, 3459, 3464, 3464, 3464, 3464, 3465, 3465,
     3465, 3465,    0,    0,    0, 3464,    0,    0, 3462,    0,
        0,    0, 3453, 3467, 3467, 3467, 3467, 3468, 3468, 3468,
     3468, 3469, 3469, 3469, 3469, 3470, 3470, 3470, 3470, 3471,

     3471, 3471, 3471, 3472, 3472, 3472, 3472, 3474, 3474, 3474,
     3474, 3475, 3475, 3475, 3475, 3476, 3476, 3476, 3476, 3470,
     3477, 3477, 3477, 3477, 3478, 3478, 3478, 3478, 3479, 3479,
     3479, 3479,    0,    0,    0, 3475, 3480, 3480, 3480, 3480,
     3481, 3481, 3481, 3481, 3477, 3482, 3482, 3482, 3482,    0,
        0,    0, 3479, 3483, 3483, 3483, 3483, 3484, 3484, 3484,
     3484,    0, 3467,    0, 3481, 3485, 3485, 3485, 3485, 3486,
     3486, 3486, 3486, 3487, 3487, 3487, 3487, 3483, 3488, 3488,
     3488, 3488, 3489, 3489, 3489, 3489,    0,    0,    0, 3485,
     3490, 3490, 3490, 3490,    0,    0,    0, 3487, 3491, 3491,

     3491, 3491, 3492, 3492, 3492, 3492, 3489, 3493, 3493, 3493,
     3493, 3494, 3494, 3494, 3494, 3495, 3495, 3495, 3495,    0,
        0,    0, 3491, 3496, 3496, 3496, 3496, 3497, 3497, 3497,
     3497, 3493, 3498, 3498, 3498, 3498,    0,    0,    0, 3495,
     3499, 3499, 3499, 3499, 3500, 3500, 3500, 3500,    0,    0,
        0, 3497, 3501, 3501, 3501, 3501, 3502, 3502, 3502, 3502,
     3503, 3503, 3503, 3503, 3499, 3504, 3504, 3504, 3504, 3505,
     3505, 3505, 3505,    0,    0,    0, 3501, 3506, 3506, 3506,
     3506,    0,    0,    0, 3503, 3507, 3507, 3507, 3507, 3508,
     3508, 3508, 3508, 3505, 3509, 3509, 3509, 3509, 3510, 3510,

     3510, 3510, 3511, 3511, 3511, 3511,    0,    0,    0, 3507,
     3512, 3512, 3512, 3512, 3513, 3513, 3513, 3513, 3509, 3514,
     3514, 3514, 3514,    0,    0,    0, 3511, 3515, 3515, 3515,
     3515, 3516, 3516, 3516, 3516,    0,    0,    0, 3513, 3517,
     3517, 3517, 3517, 3518, 3518, 3518, 3518, 3519, 3519, 3519,
     3519, 3515, 3520, 3520, 3520, 3520, 3521, 3521, 3521, 3521,
        0,    0,    0, 3517, 3522, 3522, 3522, 3522,    0,    0,
        0, 3519, 3523, 3523, 3523, 3523, 3524, 3524, 3524, 3524,
     3521, 3525, 3525, 3525, 3525, 3526, 3526, 3526, 3526, 3527,
     3527, 3527, 3527,    0,    0,    0, 3523, 3528, 3528, 3528,

     3528, 3529, 3529, 3529, 3529, 3525, 3530, 3530, 3530, 3530,
        0,    0,    0, 3527, 3531, 3531, 3531, 3531, 3532, 3532,
     3532, 3532,    0,    0,    0, 3529, 3533, 3533, 3533, 3533,
     3534, 3534, 3534, 3534, 3535, 3535, 3535, 3535, 3531, 3536,
     3536, 3536, 3536, 3537, 3537, 3537, 3537,    0,    0,    0,
     3533, 3538, 3538, 3538, 3538,    0,    0,    0, 3535, 3539,
     3539, 3539, 3539, 3540, 3540, 3540, 3540, 3537, 3541, 3541,
     3541, 3541, 3542, 3542, 3542, 3542, 3543, 3543, 3543, 3543,
        0,    0,    0, 3539, 3544, 3544, 3544, 3544, 3545, 3545,
     3545, 3545, 3541, 3546, 3546, 3546, 3546,    0,    0,    0,

     3543, 3547, 3547, 3547, 3547, 3548, 3548, 3548, 3548,    0,
        0,    0, 3545, 3549, 3549, 3549, 3549, 3550, 3550, 3550,
     3550, 3551, 3551, 3551, 3551, 3547, 3552, 3552, 3552, 3552,
     3553, 3553, 3553, 3553,    0,    0,    0, 3549, 3554, 3554,
     3554, 3554,    0,    0,    0, 3551, 3555, 3555, 3555, 3555,
     3556, 3556, 3556, 3556, 3553, 3557, 3557, 3557, 3557, 3558,
     3558, 3558, 3558, 3559, 3559, 3559, 3559,    0,    0,    0,
     3555, 3560, 3560, 3560, 3560, 3561, 3561, 3561, 3561, 3557,
     3562, 3562, 3562, 3562,    0,    0,    0, 3559, 3563, 3563,
     3563, 3563, 3564, 3564, 3564, 3564,    0,    0,    0, 3561,

     3565, 3565, 3565, 3565, 3566, 3566, 3566, 3566, 3567, 3567,
     3567, 3567, 3563, 3568, 3568, 3568, 3568, 3569, 3569, 3569,
     3569,    0,    0,    0, 3565, 3570, 3570, 3570, 3570,    0,
        0,    0, 3567, 3571, 3571, 3571, 3571, 3572, 3572, 3572,
     3572, 3569, 3573, 3573, 3573, 3573, 3574, 3574, 3574, 3574,
     3575, 3575, 3575, 3575,    0,    0,    0, 3571, 3576, 3576,
     3576, 3576, 3577, 3577, 3577, 3577, 3573, 3578, 3578, 3578,
     3578,    0,    0,    0, 3575, 3579, 3579, 3579, 3579, 3580,
     3580, 3580, 3580,    0,    0,    0, 3577, 3581, 3581, 3581,
     3581, 3582, 3582, 3582, 3582, 3583, 3583, 3583, 3583, 3579,

     3584, 3584, 3584, 3584, 3585, 3585, 3585, 3585,    0,    0,
        0, 3581, 3586, 3586, 3586, 3586,    0,    0,    0, 3583,
     3587, 3587, 3587, 3587, 3588, 3588, 3588, 3588, 3585, 3589,
     3589, 3589, 3589, 3590, 3590, 3590, 3590, 3591, 3591, 3591,
     3591,    0,    0,    0, 3587, 3592, 3592, 3592, 3592, 3593,
     3593, 3593, 3593, 3589, 3594, 3594, 3594, 3594,    0,    0,
        0, 3591, 3595, 3595, 3595, 3595, 3596, 3596, 3596, 3596,
        0,    0,    0, 3593, 3597, 3597, 3597, 3597, 3598, 3598,
     3598, 3598, 3599, 3599, 3599, 3599, 3595, 3600, 3600, 3600,
     3600,    0,    0,    0,    0,    0,    0,    0, 3597,    0,

        0,    0,    0,    0,    0,    0, 3599, 3602, 3602, 3602,
     3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602,
     3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602,
     3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602, 3602, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603,
     3603, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,
     3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3604,

     3604, 3604, 3604, 3605, 3605, 3605, 3605, 3605, 3605, 3605,
     3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605,
     3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3605,
     3605, 3605, 3605, 3605, 3605, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606,
     3606, 3606, 3606, 3606, 3606, 3606, 3606, 3607, 3607, 3607,
     3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607,
     3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607,
     3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607, 3608,

     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608,
     3608, 3609, 3609, 3609, 3609, 3609, 3609, 3609, 3609, 3609,
     3609, 3609, 3609, 3609, 3609, 3609, 3609, 3609, 3609, 3609,
     3609, 3609, 3609, 3609, 3609, 3609, 3609, 3609, 3609, 3609,
     3609, 3609, 3609, 3610, 3610, 3610, 3610, 3610, 3610, 3610,
     3610, 3610, 3610, 3610, 3610, 3610, 3610, 3610, 3610, 3610,
     3610, 3610, 3610, 3610, 3610, 3610, 3610, 3610, 3610, 3610,
     3610, 3610, 3610, 3610, 3610, 3611, 3611, 3611, 3611, 3611,

     3611, 3611, 3611, 3611, 3611, 3611, 3611, 3611, 3611, 3611,
     3611, 3611, 3611, 3611, 3611, 3611, 3611, 3611, 3611, 3611,
     3611, 3611, 3611, 3611, 3611, 3611, 3611, 3612, 3612, 3612,
     3612, 3612, 3612, 3612, 3612, 3612, 3612, 3612, 3612, 3612,
     3612, 3612, 3612, 3612, 3612, 3612, 3612, 3612, 3612, 3612,
     3612, 3612, 3612, 3612, 3612, 3612, 3612, 3612, 3612, 3613,
     3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613,
     3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613,
     3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613,
     3613, 3614, 3614, 3614, 3614, 3614, 3614, 3614, 3614, 3614,

     3614, 3614, 3614, 3614, 3614, 3614, 3614, 3614, 3614, 3614,
     3614, 3614, 3614, 3614, 3614, 3614, 3614, 3614, 3614, 3614,
     3614, 3614, 3614, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615, 3615,
     3615, 3615, 3615, 3615, 3615, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616,
     3616, 3616, 3616, 3616, 3616, 3616, 3616, 3617, 3617, 3617,
     3617, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3617,

     3617, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3617,
     3617, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618,
     3618, 3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619,
     3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619,
     3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619, 3619,
     3619, 3619, 3619, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,

     3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620,
     3620, 3620, 3620, 3620, 3620, 3621, 3621, 3621, 3621, 3621,
     3621, 3621, 3621, 3621, 3621, 3621, 3621, 3621, 3621, 3621,
     3621, 3621, 3621, 3621, 3621, 3621, 3621, 3621, 3621, 3621,
     3621, 3621, 3621, 3621, 3621, 3621, 3621, 3622, 3622, 3622,
     3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622,
     3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622,
     3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3623,
     3623, 3623, 3623, 3623, 3623, 3623, 3623, 3623, 3623, 3623,
     3623, 3623, 3623, 3623, 3623, 3623, 3623, 3623, 3623, 3623,

     3623, 3623, 3623, 3623, 3623, 3623, 3623, 3623, 3623, 3623,
     3623, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624,
     3624, 3624, 3624, 3625, 3625, 3625, 3625, 3625, 3625, 3625,
     3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625,
     3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625,
     3625, 3625, 3625, 3625, 3625, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,
     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626,

     3626, 3626, 3626, 3626, 3626, 3626, 3626, 3627, 3627, 3627,
     3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627,
     3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627,
     3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3628,
     3628, 3628, 3628, 3628, 3628, 3628, 3628, 3628, 3628, 3628,
     3628, 3628, 3628, 3628, 3628, 3628, 3628, 3628, 3628, 3628,
     3628, 3628, 3628, 3628, 3628, 3628, 3628, 3628, 3628, 3628,
     3628, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,
     3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3629,

     3629, 3629, 3629, 3630, 3630, 3630, 3630, 3630, 3630, 3630,
     3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630,
     3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630,
     3630, 3630, 3630, 3630, 3630, 3631, 3631, 3631, 3631, 3631,
     3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631,
     3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631,
     3631, 3631, 3631, 3631, 3631, 3631, 3631, 3632, 3632, 3632,
     3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632,
     3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632,
     3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632, 3632, 3633,

     3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633,
     3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633,
     3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633,
     3633, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634,
     3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634,
     3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634,
     3634, 3634, 3634, 3635, 3635, 3635, 3635, 3635, 3635, 3635,
     3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635,
     3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635,
     3635, 3635, 3635, 3635, 3635, 3636, 3636, 3636, 3636, 3636,

     3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636,
     3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636, 3636,
     3636, 3636, 3636, 3636, 3636, 3636, 3636, 3637, 3637, 3637,
     3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637,
     3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637,
     3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3638,
     3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638,
     3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638,
     3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638,
     3638, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639,

     3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639,
     3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639,
     3639, 3639, 3639, 3640, 3640, 3640, 3640, 3640, 3640, 3640,
     3640, 3640, 3640, 3640, 3640, 3640, 3640, 3640, 3640, 3640,
     3640, 3640, 3640, 3640, 3640, 3640, 3640, 3640, 3640, 3640,
     3640, 3640, 3640, 3640, 3640, 3641, 3641, 3641, 3641, 3641,
     3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641,
     3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641,
     3641, 3641, 3641, 3641, 3641, 3641, 3641, 3642, 3642, 3642,
     3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642,

     3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642,
     3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3643,
     3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643,
     3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643,
     3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643,
     3643, 3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644,
     3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644,
     3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644, 3644,
     3644, 3644, 3644, 3645, 3645, 3645, 3645, 3645, 3645, 3645,
     3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645,

     3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645,
     3645, 3645, 3645, 3645, 3645, 3646, 3646, 3646, 3646, 3646,
     3646, 3646, 3646, 3646, 3646, 3646, 3646, 3646, 3646, 3646,
     3646, 3646, 3646, 3646, 3646, 3646, 3646, 3646, 3646, 3646,
     3646, 3646, 3646, 3646, 3646, 3646, 3646, 3647, 3647, 3647,
     3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647,
     3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647,
     3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3648,
     3648, 3648, 3648, 3648, 3648, 3648, 3648, 3648, 3648, 3648,
     3648, 3648, 3648, 3648, 3648, 3648, 3648, 3648, 3648, 3648,

     3648, 3648, 3648, 3648, 3648, 3648, 3648, 3648, 3648, 3648,
     3648, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649,
     3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649,
     3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649,
     3649, 3649, 3649, 3650, 3650, 3650, 3650, 3650, 3650, 3650,
     3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650,
     3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650,
     3650, 3650, 3650, 3650, 3650, 3651, 3651, 3651, 3651, 3651,
     3651, 3651, 3651, 3651, 3651, 3651, 3651, 3651, 3651, 3651,
     3651, 3651, 3651, 3651, 3651, 3651, 3651, 3651, 3651, 3651,

     3651, 3651, 3651, 3651, 3651, 3651, 3651, 3652, 3652, 3652,
     3652, 3652, 3652, 3652, 3652, 3652, 3652, 3652, 3652, 3652,
     3652, 3652, 3652, 3652, 3652, 3652, 3652, 3652, 3652, 3652,
     3652, 3652, 3652, 3652, 3652, 3652, 3652, 3652, 3652, 3653,
     3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653,
     3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653,
     3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653,
     3653, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654,
     3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654,
     3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654,

     3654, 3654, 3654, 3655, 3655, 3655, 3655, 3655, 3655, 3655,
     3655, 3655, 3655, 3655, 3655, 3655, 3655, 3655, 3655, 3655,
     3655, 3655, 3655, 3655, 3655, 3655, 3655, 3655, 3655, 3655,
     3655, 3655, 3655, 3655, 3655, 3656, 3656, 3656, 3656, 3656,
     3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656,
     3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656,
     3656, 3656, 3656, 3656, 3656, 3656, 3656, 3657, 3657, 3657,
     3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657,
     3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657,
     3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3658,

     3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658,
     3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658,
     3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658,
     3658, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659, 3659,
     3659, 3659, 3659, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660,
     3660, 3660, 3660, 3660, 3660, 3661, 3661, 3661, 3661, 3661,

     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661,
     3661, 3661, 3661, 3661, 3661, 3661, 3661, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662,
     3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663, 3663,
     3663, 3665,    0,    0, 3665,    0,    0,    0,    0,    0,

        0, 3665,    0,    0,    0,    0,    0, 3665,    0,    0,
        0,    0,    0,    0, 3665,    0,    0,    0,    0,    0,
        0, 3665, 3666, 3666, 3666, 3666,    0,    0,    0, 3666,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3666,    0,    0,    0,    0,
        0,    0, 3666, 3667, 3667, 3667, 3667, 3667,    0,    0,
     3667,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3667,    0,    0,    0,    0,    0, 3667,    0,    0,    0,
        0,    0, 3667, 3667, 3668, 3668, 3668, 3668,    0,    0,
        0, 3668,    0,    0,    0,    0,    0,    0, 3668,    0,

        0,    0,    0,    0,    0,    0,    0, 3668,    0,    0,
        0,    0,    0, 3668, 3668, 3669, 3669, 3669, 3669,    0,
        0,    0,    0,    0,    0, 3669,    0,    0, 3669, 3669,
        0, 3669, 3669, 3669, 3669,    0,    0,    0, 3669,    0,
        0,    0,    0,    0,    0, 3669, 3670, 3670, 3670, 3670,
        0,    0,    0, 3670,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3670,
        0,    0,    0,    0,    0,    0, 3670, 3671, 3671, 3671,
     3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,
     3671,    0, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671,

     3671, 3671, 3671, 3671, 3671,    0, 3671, 3671, 3671, 3672,
     3672, 3672, 3672,    0,    0,    0, 3672,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3672,    0,    0,    0,    0,    0,    0, 3672,
     3673, 3673, 3673, 3673, 3673,    0,    0, 3673,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3673,    0,    0,
        0,    0,    0, 3673,    0,    0,    0,    0,    0, 3673,
     3673, 3674, 3674, 3674, 3674,    0,    0,    0,    0,    0,
        0, 3674,    0,    0,    0,    0,    0, 3674, 3674,    0,
        0,    0,    0,    0, 3674,    0,    0,    0,    0,    0,

        0, 3674, 3678,    0,    0,    0, 3678,    0, 3678,    0,
        0, 3678,    0,    0,    0, 3678,    0,    0,    0,    0,
        0,    0, 3678, 3685, 3685, 3685, 3685,    0,    0,    0,
     3685,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3685,    0,    0,    0,
     3685,    0,    0, 3685, 3686, 3686, 3686, 3686,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3686,    0,
     3686, 3686,    0,    0,    0,    0,    0, 3686,    0,    0,
        0,    0,    0,    0, 3686, 3687, 3687,    0, 3687,    0,
     3687, 3687, 3687, 3687, 3687,    0, 3687, 3687, 3687, 3687,

     3687, 3687, 3687, 3687, 3687, 3687, 3687, 3687, 3687, 3687,
     3687, 3687, 3687, 3687, 3687, 3687, 3687, 3688, 3688, 3688,
     3688,    0,    0,    0, 3688,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3688,    0,    0,    0,    0,    0,    0, 3688, 3689, 3689,
     3689, 3689, 3689,    0,    0, 3689,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3689,    0,    0,    0,    0,
        0, 3689,    0,    0,    0,    0,    0, 3689, 3689, 3690,
     3690, 3690, 3690,    0,    0,    0, 3690, 3690,    0,    0,
        0, 3690,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 3690,    0,    0,    0,    0,    0,    0, 3690,
     3693, 3693, 3693, 3693,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3693, 3693,    0, 3693,
        0,    0,    0, 3693,    0,    0,    0,    0,    0,    0,
     3693, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694,
     3694, 3694, 3694, 3695, 3695,    0, 3695, 3695, 3695, 3695,
     3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695,
     3695, 3695, 3695,    0, 3695, 3695, 3695, 3695, 3695, 3695,

     3695, 3695, 3695, 3695, 3695, 3696, 3696, 3696, 3696,    0,
        0,    0, 3696,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3696,    0,
        0,    0,    0,    0,    0, 3696, 3697, 3697, 3697, 3697,
     3697,    0,    0, 3697,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3697,    0,    0,    0,    0,    0, 3697,
        0,    0,    0,    0,    0, 3697, 3697, 3698, 3698, 3698,
     3698,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3698, 3698,    0, 3698,    0,    0,    0,
     3698,    0,    0,    0,    0,    0,    0, 3698, 3703, 3703,

        0,    0, 3703, 3703,    0,    0, 3703, 3703,    0, 3703,
     3703, 3703, 3703, 3703,    0, 3703, 3703, 3703, 3703, 3703,
     3703,    0, 3703, 3703, 3703, 3703,    0,    0, 3703, 3703,
     3704, 3704,    0, 3704, 3704, 3704, 3704, 3704, 3704, 3704,
     3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704,
     3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704, 3704,
     3704, 3704, 3705, 3705,    0, 3705,    0, 3705, 3705, 3705,
     3705, 3705,    0, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705, 3705,
     3705, 3705, 3705, 3705, 3707, 3707, 3707, 3707,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 3707,    0,
     3707, 3707,    0,    0,    0,    0,    0, 3707,    0,    0,
        0,    0,    0,    0, 3707, 3708, 3708, 3708, 3708,    0,
        0,    0, 3708,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3708,    0,
        0,    0,    0,    0,    0, 3708, 3709, 3709, 3709, 3709,
     3709,    0,    0, 3709,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3709,    0,    0,    0,    0,    0, 3709,
        0,    0,    0,    0,    0, 3709, 3709, 3710, 3710, 3710,
     3710,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 3710, 3710,    0,    0,    0,    0,    0,
     3710,    0,    0,    0,    0,    0,    0, 3710, 3711, 3711,
        0, 3711, 3711, 3711,    0,    0, 3711, 3711,    0, 3711,
     3711, 3711, 3711, 3711,    0, 3711, 3711, 3711, 3711, 3711,
     3711,    0, 3711, 3711,    0, 3711,    0,    0, 3711, 3711,
     3712, 3712,    0, 3712,    0, 3712, 3712, 3712, 3712, 3712,
        0, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712,
     3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712, 3712,
     3712, 3712, 3713, 3713,    0, 3713, 3713, 3713, 3713, 3713,
     3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713,

     3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713, 3713,
     3713, 3713, 3713, 3713, 3714, 3714,    0, 3714, 3714, 3714,
     3714, 3714, 3714, 3714, 3714, 3714, 3714,    0, 3714, 3714,
     3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714, 3714,
     3714, 3714, 3714, 3714, 3714, 3714, 3715, 3715, 3715, 3715,
     3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715,
     3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715,
     3715, 3715, 3715, 3715, 3715, 3715, 3715, 3715, 3716, 3716,
        0, 3716, 3716, 3716,    0, 3716, 3716, 3716, 3716, 3716,
     3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716,

     3716, 3716, 3716,    0, 3716,    0, 3716, 3716, 3716, 3716,
     3717, 3717,    0, 3717, 3717, 3717, 3717, 3717, 3717, 3717,
     3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717,
     3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717, 3717,
     3717, 3717, 3720,    0,    0,    0,    0, 3720, 3720, 3720,
     3720, 3720, 3720, 3720, 3720,    0, 3720,    0,    0, 3720,
     3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720, 3720,
     3720, 3720, 3720, 3720, 3724, 3724, 3724, 3724,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3724,    0,
     3724,    0,    0,    0,    0,    0,    0, 3724,    0,    0,

        0,    0,    0,    0, 3724, 3725, 3725,    0, 3725, 3725,
     3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725,
     3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725, 3725,
     3725, 3725, 3725, 3725, 3725, 3725, 3725, 3727,    0,    0,
        0, 3727,    0,    0,    0,    0,    0,    0, 3727,    0,
        0,    0,    0,    0,    0, 3727,    0,    0,    0,    0,
        0,    0, 3727, 3730, 3730,    0, 3730, 3730, 3730,    0,
     3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730,
     3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730, 3730,
     3730, 3730, 3730, 3730, 3730, 3733, 3733, 3733, 3733, 3733,

     3733, 3733, 3733, 3733, 3733, 3733, 3733,    0, 3733, 3733,
     3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733,
     3733, 3733, 3733, 3733, 3733, 3733, 3733, 3735, 3735, 3735,
     3735,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3735, 3735,    0,    0,    0,    0,    0,
     3735,    0,    0,    0,    0,    0,    0, 3735, 3736, 3736,
     3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736,
        0, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736,
     3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736, 3736,
     3738, 3738,    0, 3738,    0,    0,    0, 3738,    0,    0,

        0,    0,    0,    0, 3738, 3745, 3745,    0, 3745,    0,
     3745, 3745, 3745, 3745, 3745,    0, 3745, 3745, 3745, 3745,
     3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745, 3745,
     3745, 3745, 3745, 3745, 3745, 3745, 3745, 3746, 3746, 3746,
     3746,    0,    0,    0, 3746,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3746,    0,    0,    0,    0,    0,    0, 3746, 3747, 3747,
     3747, 3747,    0,    0,    0,    0,    0,    0,    0,    0,
     3747,    0,    0,    0, 3747,    0,    0,    0,    0,    0,
        0, 3747,    0,    0,    0,    0,    0,    0, 3747, 3748,

     3748, 3748, 3748,    0,    0,    0, 3748, 3748,    0,    0,
        0, 3748,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3748,    0,    0,    0,    0,    0,    0, 3748,
     3749, 3749, 3749, 3749,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3749,    0,    0,    0,
        0,    0,    0, 3749, 3749,    0,    0,    0,    0,    0,
     3749, 3750, 3750, 3750, 3750,    0,    0,    0, 3750,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3750,    0,    0,    0,    0,    0,
        0, 3750, 3751, 3751, 3751, 3751, 3751,    0,    0, 3751,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 3751,
        0,    0,    0,    0,    0, 3751,    0,    0,    0,    0,
        0, 3751, 3751, 3752, 3752, 3752, 3752,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3752,
     3752,    0,    0,    0,    0,    0, 3752,    0,    0,    0,
        0,    0,    0, 3752, 3753, 3753,    0, 3753, 3753, 3753,
     3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753,
     3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753, 3753,
     3753, 3753, 3753, 3753, 3753, 3753, 3754,    0,    0,    0,
        0, 3754,    0,    0, 3754, 3754,    0,    0,    0, 3754,

     3754, 3754,    0, 3754, 3754, 3754, 3754, 3754, 3754, 3754,
     3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3755, 3755,
        0, 3755,    0, 3755, 3755, 3755, 3755, 3755,    0, 3755,
     3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755,
     3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755,
     3760, 3760,    0, 3760, 3760, 3760, 3760, 3760, 3760, 3760,
     3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760,
     3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760,
     3760, 3760, 3761, 3761,    0, 3761, 3761, 3761, 3761, 3761,
     3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761,

     3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761, 3761,
     3761, 3761, 3761, 3761, 3762, 3762,    0, 3762, 3762, 3762,
        0, 3762, 3762, 3762,    0,    0,    0, 3762, 3762, 3762,
     3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762, 3762,
     3762, 3762, 3762, 3762, 3762, 3762, 3763, 3763,    0, 3763,
        0, 3763, 3763, 3763, 3763, 3763,    0, 3763, 3763, 3763,
     3763, 3763, 3763, 3763, 3763, 3763, 3763, 3763, 3763, 3763,
     3763, 3763, 3763, 3763, 3763, 3763, 3763, 3763, 3764, 3764,
        0, 3764, 3764, 3764,    0, 3764, 3764, 3764,    0, 3764,
     3764, 3764, 3764, 3764,    0, 3764, 3764, 3764, 3764, 3764,

     3764, 3764, 3764, 3764, 3764, 3764,    0,    0, 3764, 3764,
     3765, 3765,    0, 3765,    0, 3765, 3765, 3765, 3765, 3765,
        0, 3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765,
     3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765, 3765,
     3765, 3765, 3766, 3766,    0, 3766, 3766, 3766,    0, 3766,
     3766, 3766,    0,    0,    0, 3766, 3766, 3766,    0, 3766,
     3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766, 3766,
     3766, 3766, 3766, 3766, 3767, 3767,    0, 3767,    0, 3767,
     3767, 3767, 3767, 3767,    0, 3767, 3767, 3767, 3767, 3767,
     3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767, 3767,

     3767, 3767, 3767, 3767, 3767, 3767, 3768, 3768,    0, 3768,
     3768, 3768,    0, 3768, 3768, 3768,    0, 3768, 3768, 3768,
     3768, 3768,    0, 3768, 3768, 3768, 3768, 3768, 3768, 3768,
     3768, 3768, 3768, 3768,    0,    0, 3768, 3768, 3769, 3769,
        0, 3769,    0, 3769, 3769, 3769, 3769, 3769,    0, 3769,
     3769, 3769, 3769, 3769, 3769, 3769, 3769, 3769, 3769, 3769,
     3769, 3769, 3769, 3769, 3769, 3769, 3769, 3769, 3769, 3769,
     3771, 3771,    0, 3771,    0, 3771, 3771, 3771, 3771, 3771,
        0, 3771, 3771, 3771, 3771, 3771, 3771, 3771, 3771, 3771,
     3771, 3771, 3771, 3771, 3771, 3771, 3771, 3771, 3771, 3771,

     3771, 3771, 3773, 3773,    0, 3773, 3773, 3773,    0, 3773,
     3773, 3773,    0, 3773, 3773, 3773, 3773, 3773, 3773, 3773,
     3773, 3773, 3773, 3773, 3773, 3773, 3773, 3773,    0, 3773,
     3773, 3773, 3773, 3773, 3774, 3774,    0, 3774, 3774, 3774,
     3774, 3774, 3774, 3774, 3774, 3774, 3774, 3774, 3774, 3774,
     3774, 3774, 3774, 3774, 3774, 3774, 3774, 3774, 3774, 3774,
     3774, 3774, 3774, 3774, 3774, 3774, 3775, 3775,    0, 3775,
     3775, 3775,    0, 3775, 3775, 3775,    0,    0,    0, 3775,
     3775, 3775,    0, 3775, 3775, 3775, 3775, 3775, 3775, 3775,
     3775, 3775, 3775, 3775, 3775, 3775, 3775, 3775, 3776, 3776,

        0, 3776, 3776, 3776, 3776, 3776, 3776, 3776, 3776, 3776,
     3776,    0, 3776, 3776, 3776, 3776, 3776, 3776, 3776, 3776,
     3776,    0, 3776, 3776,    0, 3776, 3776, 3776, 3776, 3776,
     3777, 3777,    0, 3777, 3777, 3777, 3777, 3777, 3777, 3777,
     3777, 3777, 3777, 3777, 3777, 3777, 3777, 3777, 3777, 3777,
     3777, 3777, 3777,    0, 3777, 3777,    0, 3777, 3777, 3777,
     3777, 3777, 3778, 3778, 3778, 3778,    0,    0,    0, 3778,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3778, 3778,    0,    0,    0,
        0,    0, 3778, 3780, 3780, 3780, 3780,    0,    0,    0,

        0,    0,    0,    0, 3780,    0, 3780,    0,    0, 3780,
        0,    0,    0,    0,    0,    0, 3780,    0,    0,    0,
        0,    0,    0, 3780, 3781, 3781, 3781, 3781, 3781, 3781,
     3781, 3781, 3781, 3781, 3781, 3781, 3781, 3781, 3781, 3781,
     3781, 3781, 3781, 3781, 3781, 3781, 3781, 3781, 3781, 3781,
     3781, 3781, 3781, 3781, 3781, 3781, 3782, 3782, 3782, 3782,
        0,    0,    0, 3782,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3782,
        0,    0,    0,    0,    0,    0, 3782, 3784, 3784, 3784,
     3784,    0,    0,    0,    0,    0,    0, 3784,    0,    0,

        0,    0,    0, 3784,    0,    0,    0,    0,    0,    0,
     3784,    0,    0,    0,    0,    0,    0, 3784, 3785,    0,
        0, 3785,    0,    0,    0, 3785, 3785,    0,    0,    0,
     3785,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3785,    0,    0,    0,    0,    0,    0, 3785, 3786,
     3786, 3786, 3786,    0,    0,    0, 3786,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3786,    0,    0,    0,    0,    0,    0, 3786,
     3787, 3787, 3787, 3787, 3787,    0,    0, 3787,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3787,    0,    0,

        0,    0,    0, 3787,    0,    0,    0,    0,    0, 3787,
     3787, 3788, 3788, 3788, 3788,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3788, 3788,    0,
        0,    0,    0,    0, 3788,    0,    0,    0,    0,    0,
        0, 3788, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789,
     3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789,
     3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789, 3789,
     3789, 3789, 3789, 3789, 3790, 3790,    0, 3790, 3790, 3790,
     3790, 3790, 3790, 3790, 3790, 3790, 3790,    0, 3790, 3790,
        0, 3790, 3790, 3790, 3790, 3790, 3790,    0, 3790, 3790,

        0, 3790, 3790, 3790, 3790, 3790, 3791, 3791, 3791, 3791,
     3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791,
     3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791,
     3791, 3791, 3791, 3791, 3791, 3791, 3791, 3791, 3792, 3792,
        0, 3792, 3792, 3792, 3792, 3792,    0, 3792, 3792, 3792,
     3792,    0, 3792, 3792,    0, 3792, 3792, 3792,    0, 3792,
     3792,    0, 3792, 3792,    0,    0, 3792, 3792, 3792, 3792,
     3793,    0,    0, 3793,    0,    0,    0,    0,    0,    0,
     3793,    0,    0,    0,    0,    0, 3793,    0,    0,    0,
        0,    0,    0, 3793,    0,    0,    0,    0,    0,    0,

     3793, 3794, 3794, 3794, 3794,    0,    0,    0, 3794,    0,
        0,    0,    0,    0,    0, 3794,    0,    0,    0,    0,
        0,    0,    0,    0, 3794,    0,    0,    0,    0,    0,
     3794, 3794, 3795, 3795, 3795, 3795,    0,    0,    0, 3795,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3795,    0,    0,    0,    0,
        0,    0, 3795, 3796, 3796, 3796, 3796,    0,    0,    0,
        0,    0,    0, 3796,    0,    0, 3796,    0,    0, 3796,
        0, 3796, 3796,    0,    0,    0, 3796,    0,    0,    0,
        0,    0,    0, 3796, 3798, 3798, 3798, 3798,    0,    0,

        0,    0,    0,    0, 3798,    0,    0, 3798, 3798,    0,
     3798, 3798, 3798, 3798,    0,    0,    0, 3798,    0,    0,
        0,    0,    0,    0, 3798, 3799, 3799, 3799, 3799,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3799,
        0, 3799,    0,    0,    0,    0,    0,    0, 3799,    0,
        0,    0,    0,    0,    0, 3799, 3800, 3800, 3800, 3800,
        0,    0,    0, 3800,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3800,
        0,    0,    0,    0,    0,    0, 3800, 3801, 3801, 3801,
     3801,    0,    0,    0, 3801,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3801,    0,    0,    0,    0,    0,    0, 3801, 3802, 3802,
     3802, 3802,    0,    0,    0,    0,    0,    0, 3802,    0,
        0, 3802,    0,    0, 3802,    0, 3802, 3802,    0,    0,
        0, 3802,    0,    0,    0,    0,    0,    0, 3802, 3803,
     3803, 3803, 3803, 3803, 3803, 3803, 3803, 3803, 3803, 3803,
     3803, 3803, 3803,    0, 3803, 3803, 3803, 3803, 3803, 3803,
     3803, 3803, 3803, 3803, 3803, 3803, 3803,    0, 3803, 3803,
     3803, 3804, 3804, 3804, 3804,    0,    0,    0, 3804,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 3804,    0,    0,    0,    0,    0,
        0, 3804, 3805, 3805, 3805, 3805,    0,    0,    0,    0,
        0,    0, 3805,    0,    0,    0,    0,    0, 3805,    0,
        0,    0,    0,    0,    0, 3805,    0,    0,    0,    0,
        0,    0, 3805, 3807, 3807, 3807, 3807,    0,    0,    0,
        0,    0,    0, 3807,    0,    0,    0,    0,    0, 3807,
     3807,    0,    0,    0,    0,    0, 3807,    0,    0,    0,
        0,    0,    0, 3807, 3809,    0,    0,    0, 3809,    0,
     3809,    0,    0, 3809,    0,    0,    0, 3809,    0,    0,
        0,    0,    0,    0, 3809, 3815, 3815, 3815, 3815,    0,

        0,    0, 3815,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3815,    0,
        0,    0, 3815,    0,    0, 3815, 3816, 3816, 3816, 3816,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3816,    0, 3816, 3816,    0,    0,    0,    0,    0, 3816,
        0,    0,    0,    0,    0,    0, 3816, 3817, 3817, 3817,
     3817,    0,    0,    0, 3817,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3817,    0,    0,    0,    0,    0,    0, 3817, 3819, 3819,
        0, 3819,    0, 3819, 3819, 3819, 3819, 3819, 3819, 3819,

     3819, 3819, 3819, 3819, 3819, 3819, 3819, 3819, 3819, 3819,
     3819, 3819, 3819, 3819,    0, 3819, 3819, 3819, 3819, 3819,
     3820, 3820,    0, 3820, 3820, 3820, 3820, 3820, 3820, 3820,
     3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820,
     3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820, 3820,
     3820, 3820, 3821, 3821, 3821, 3821, 3821, 3821, 3821, 3821,
     3821, 3821, 3821, 3821, 3821, 3821, 3821, 3821, 3821, 3821,
     3821, 3821, 3821, 3821, 3821, 3821, 3821, 3821, 3821, 3821,
     3821, 3821, 3821, 3821, 3822, 3822, 3822, 3822,    0,    0,
        0, 3822,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 3822,    0,    0,
        0,    0,    0,    0, 3822, 3823, 3823, 3823, 3823,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3823,    0,    0, 3823,    0,    0,    0, 3823,    0,
        0,    0,    0,    0,    0, 3823, 3825, 3825, 3825, 3825,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3825, 3825,    0, 3825,    0,    0,    0, 3825,
        0,    0,    0,    0,    0,    0, 3825, 3826, 3826,    0,
     3826, 3826, 3826, 3826, 3826, 3826, 3826, 3826, 3826, 3826,
     3826, 3826, 3826, 3826, 3826, 3826, 3826, 3826, 3826, 3826,

     3826, 3826, 3826, 3826, 3826, 3826, 3826, 3826, 3826, 3827,
     3827, 3827, 3827,    0,    0,    0, 3827, 3827,    0,    0,
        0, 3827,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3827,    0,    0,    0,    0,    0,    0, 3827,
     3828, 3828, 3828, 3828,    0,    0,    0,    0,    0,    0,
        0, 3828, 3828,    0,    0,    0, 3828, 3828,    0, 3828,
        0,    0,    0, 3828,    0,    0,    0,    0,    0,    0,
     3828, 3832, 3832, 3832, 3832,    0,    0,    0,    0,    0,
        0, 3832,    0,    0,    0,    0,    0, 3832,    0,    0,
        0,    0,    0,    0, 3832,    0,    0,    0,    0,    0,

        0, 3832, 3833, 3833,    0, 3833, 3833, 3833, 3833, 3833,
     3833, 3833, 3833, 3833, 3833, 3833, 3833, 3833, 3833, 3833,
     3833, 3833,    0, 3833, 3833, 3833, 3833, 3833, 3833, 3833,
     3833, 3833, 3833, 3833, 3834, 3834, 3834, 3834,    0,    0,
        0, 3834,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3834,    0,    0,
        0,    0,    0,    0, 3834, 3835, 3835, 3835, 3835,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3835,    0,    0, 3835,    0,    0,    0, 3835,    0,
        0,    0,    0,    0,    0, 3835, 3837, 3837, 3837, 3837,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3837, 3837,    0, 3837,    0,    0,    0, 3837,
        0,    0,    0,    0,    0,    0, 3837, 3840, 3840,    0,
        0, 3840, 3840,    0,    0, 3840, 3840,    0, 3840, 3840,
     3840, 3840, 3840,    0, 3840, 3840, 3840, 3840, 3840, 3840,
        0, 3840, 3840, 3840, 3840,    0,    0, 3840, 3840, 3841,
     3841,    0, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841,
     3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841,
     3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841, 3841,
     3841, 3842, 3842,    0, 3842,    0, 3842, 3842, 3842, 3842,

     3842, 3842, 3842, 3842, 3842, 3842, 3842, 3842, 3842, 3842,
     3842, 3842, 3842, 3842, 3842, 3842, 3842,    0, 3842, 3842,
     3842, 3842, 3842, 3843, 3843,    0, 3843, 3843, 3843, 3843,
     3843, 3843, 3843, 3843, 3843, 3843, 3843, 3843, 3843, 3843,
     3843, 3843, 3843, 3843, 3843, 3843, 3843, 3843, 3843, 3843,
     3843, 3843, 3843, 3843, 3843, 3844, 3844,    0, 3844, 3844,
     3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844,
     3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844,
     3844, 3844, 3844, 3844, 3844, 3844, 3844, 3845, 3845, 3845,
     3845,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0, 3845,    0, 3845, 3845,    0,    0,    0,    0,    0,
     3845,    0,    0,    0,    0,    0,    0, 3845, 3846, 3846,
     3846, 3846,    0,    0,    0, 3846,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3846,    0,    0,    0,    0,    0,    0, 3846, 3847,
     3847, 3847, 3847,    0,    0,    0, 3847,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3847,    0,    0,    0,    0,    0,    0, 3847,
     3850, 3850, 3850, 3850,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3850, 3850,    0,    0,

        0,    0,    0, 3850,    0,    0,    0,    0,    0,    0,
     3850, 3851, 3851,    0, 3851, 3851, 3851,    0,    0, 3851,
     3851,    0, 3851, 3851, 3851, 3851, 3851,    0, 3851, 3851,
     3851, 3851, 3851, 3851,    0, 3851, 3851,    0, 3851,    0,
        0, 3851, 3851, 3852, 3852,    0, 3852,    0, 3852, 3852,
     3852, 3852, 3852, 3852, 3852, 3852, 3852, 3852, 3852, 3852,
     3852, 3852, 3852, 3852, 3852, 3852, 3852, 3852, 3852,    0,
     3852, 3852, 3852, 3852, 3852, 3853, 3853,    0, 3853, 3853,
     3853, 3853, 3853, 3853, 3853, 3853, 3853, 3853, 3853, 3853,
     3853, 3853, 3853, 3853, 3853, 3853, 3853, 3853, 3853, 3853,

     3853, 3853, 3853, 3853, 3853, 3853, 3853, 3854, 3854,    0,
     3854, 3854, 3854, 3854, 3854, 3854, 3854, 3854, 3854, 3854,
        0, 3854, 3854, 3854, 3854, 3854, 3854, 3854, 3854, 3854,
     3854, 3854, 3854, 3854, 3854, 3854, 3854, 3854, 3854, 3855,
     3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855,
     3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855,
     3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855, 3855,
     3855, 3856, 3856,    0, 3856, 3856, 3856,    0, 3856, 3856,
     3856, 3856, 3856, 3856, 3856, 3856, 3856, 3856, 3856, 3856,
     3856, 3856, 3856, 3856, 3856, 3856,    0, 3856,    0, 3856,

     3856, 3856, 3856, 3857, 3857,    0, 3857, 3857, 3857, 3857,
     3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857,
     3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857,
     3857, 3857, 3857, 3857, 3857, 3859,    0,    0,    0,    0,
     3859, 3859, 3859, 3859, 3859, 3859, 3859, 3859,    0, 3859,
        0,    0, 3859, 3859, 3859, 3859, 3859, 3859, 3859, 3859,
     3859, 3859, 3859, 3859, 3859, 3859, 3859, 3862, 3862, 3862,
     3862,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3862,    0, 3862,    0,    0,    0,    0,    0,    0,
     3862,    0,    0,    0,    0,    0,    0, 3862, 3863, 3863,

     3863, 3863,    0,    0,    0, 3863,    0,    0,    0,    0,
     3863,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3863,    0,    0,    0,    0,    0,    0, 3863, 3864,
     3864,    0, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864,
     3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864,
     3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864, 3864,
     3864, 3865,    0,    0,    0, 3865,    0,    0,    0,    0,
        0,    0, 3865,    0,    0,    0,    0,    0,    0, 3865,
        0,    0,    0,    0,    0,    0, 3865, 3867, 3867,    0,
     3867, 3867, 3867,    0, 3867, 3867, 3867, 3867, 3867, 3867,

     3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867,
     3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867, 3867, 3869,
     3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869,
     3869,    0, 3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869,
     3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869, 3869,
     3869, 3870, 3870, 3870, 3870,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3870, 3870,    0,
        0,    0,    0,    0, 3870,    0,    0,    0,    0,    0,
        0, 3870, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871,
     3871, 3871, 3871, 3871,    0, 3871, 3871, 3871, 3871, 3871,

     3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871, 3871,
     3871, 3871, 3871, 3871, 3872, 3872,    0, 3872,    0,    0,
        0, 3872,    0,    0,    0,    0,    0,    0, 3872, 3873,
        0,    0,    0, 3873, 3873,    0,    0, 3873,    0,    0,
        0,    0, 3873,    0, 3873, 3877, 3877,    0, 3877,    0,
     3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877,
     3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877, 3877,
     3877,    0, 3877, 3877, 3877, 3877, 3877, 3878, 3878,    0,
     3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878,
     3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878,

     3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878, 3878, 3879,
     3879, 3879, 3879,    0,    0,    0, 3879,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3879,    0,    0,    0,    0,    0,    0, 3879,
     3880, 3880, 3880, 3880,    0,    0,    0,    0,    0,    0,
        0,    0, 3880,    0,    0,    0, 3880,    0,    0,    0,
        0,    0,    0, 3880,    0,    0,    0,    0,    0,    0,
     3880, 3881, 3881, 3881, 3881,    0,    0,    0, 3881, 3881,
        0,    0,    0, 3881,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3881,    0,    0,    0,    0,    0,

        0, 3881, 3882, 3882, 3882, 3882,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3882,    0,
        0,    0,    0,    0,    0, 3882, 3882,    0,    0,    0,
        0,    0, 3882, 3883, 3883,    0, 3883, 3883, 3883, 3883,
     3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883,
     3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883,
     3883, 3883, 3883, 3883, 3883, 3884, 3884, 3884, 3884,    0,
        0,    0, 3884,    0,    0,    0,    0, 3884,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3884,    0,
        0,    0,    0,    0,    0, 3884, 3885, 3885, 3885, 3885,

        0,    0,    0, 3885,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3885,
        0,    0,    0,    0,    0,    0, 3885, 3888, 3888, 3888,
     3888,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3888, 3888,    0,    0,    0,    0,    0,
     3888,    0,    0,    0,    0,    0,    0, 3888, 3889, 3889,
        0, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889,
     3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889,
     3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889, 3889,
     3890,    0,    0,    0,    0, 3890,    0,    0, 3890, 3890,

        0,    0,    0, 3890, 3890, 3890,    0, 3890, 3890, 3890,
     3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
     3890, 3890, 3891, 3891,    0, 3891,    0, 3891, 3891, 3891,
     3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891,
     3891, 3891, 3891, 3891, 3891, 3891, 3891, 3891,    0, 3891,
     3891, 3891, 3891, 3891, 3892, 3892,    0, 3892, 3892, 3892,
     3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892,
     3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892, 3892,
     3892, 3892, 3892, 3892, 3892, 3892, 3895, 3895,    0, 3895,
     3895, 3895,    0, 3895, 3895, 3895,    0,    0,    0, 3895,

     3895, 3895, 3895, 3895, 3895, 3895, 3895, 3895, 3895, 3895,
     3895, 3895, 3895, 3895, 3895, 3895, 3895, 3895, 3896, 3896,
        0, 3896,    0, 3896, 3896, 3896, 3896, 3896, 3896, 3896,
     3896, 3896, 3896, 3896, 3896, 3896, 3896, 3896, 3896, 3896,
     3896, 3896, 3896, 3896,    0, 3896, 3896, 3896, 3896, 3896,
     3897, 3897,    0, 3897, 3897, 3897, 3897, 3897, 3897, 3897,
     3897, 3897, 3897, 3897, 3897, 3897, 3897, 3897, 3897, 3897,
     3897, 3897, 3897, 3897, 3897, 3897, 3897, 3897, 3897, 3897,
     3897, 3897, 3898, 3898,    0, 3898, 3898, 3898,    0, 3898,
     3898, 3898,    0, 3898, 3898, 3898, 3898, 3898,    0, 3898,

     3898, 3898, 3898, 3898, 3898, 3898, 3898, 3898, 3898, 3898,
        0,    0, 3898, 3898, 3899, 3899,    0, 3899,    0, 3899,
     3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899,
     3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899, 3899,
        0, 3899, 3899, 3899, 3899, 3899, 3900, 3900,    0, 3900,
     3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900,
     3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900,
     3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3901, 3901,
        0, 3901, 3901, 3901,    0, 3901, 3901, 3901,    0,    0,
        0, 3901, 3901, 3901,    0, 3901, 3901, 3901, 3901, 3901,

     3901, 3901, 3901, 3901, 3901, 3901, 3901, 3901, 3901, 3901,
     3902, 3902,    0, 3902,    0, 3902, 3902, 3902, 3902, 3902,
     3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902, 3902,
     3902, 3902, 3902, 3902, 3902, 3902,    0, 3902, 3902, 3902,
     3902, 3902, 3903, 3903,    0, 3903, 3903, 3903, 3903, 3903,
     3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903,
     3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903, 3903,
     3903, 3903, 3903, 3903, 3904, 3904,    0, 3904, 3904, 3904,
        0, 3904, 3904, 3904,    0, 3904, 3904, 3904, 3904, 3904,
        0, 3904, 3904, 3904, 3904, 3904, 3904, 3904, 3904, 3904,

     3904, 3904,    0,    0, 3904, 3904, 3905, 3905,    0, 3905,
        0, 3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905,
     3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905, 3905,
     3905, 3905,    0, 3905, 3905, 3905, 3905, 3905, 3906, 3906,
        0, 3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906,
     3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906,
     3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906, 3906,
     3908, 3908,    0, 3908,    0, 3908, 3908, 3908, 3908, 3908,
     3908, 3908, 3908, 3908, 3908, 3908, 3908, 3908, 3908, 3908,
     3908, 3908, 3908, 3908, 3908, 3908,    0, 3908, 3908, 3908,

     3908, 3908, 3909, 3909,    0, 3909, 3909, 3909, 3909, 3909,
     3909, 3909, 3909, 3909, 3909, 3909, 3909, 3909, 3909, 3909,
     3909, 3909, 3909, 3909, 3909, 3909, 3909, 3909, 3909, 3909,
     3909, 3909, 3909, 3909, 3910, 3910,    0, 3910, 3910, 3910,
        0, 3910, 3910, 3910,    0, 3910, 3910, 3910, 3910, 3910,
     3910, 3910, 3910, 3910, 3910, 3910, 3910, 3910, 3910, 3910,
        0, 3910, 3910, 3910, 3910, 3910, 3911, 3911,    0, 3911,
     3911, 3911,    0, 3911, 3911, 3911,    0,    0,    0, 3911,
     3911, 3911,    0, 3911, 3911, 3911, 3911, 3911, 3911, 3911,
     3911, 3911, 3911, 3911, 3911, 3911, 3911, 3911, 3912, 3912,

        0, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912,
     3912,    0, 3912, 3912, 3912, 3912, 3912, 3912, 3912, 3912,
     3912,    0, 3912, 3912,    0, 3912, 3912, 3912, 3912, 3912,
     3913, 3913,    0, 3913, 3913, 3913, 3913, 3913, 3913, 3913,
     3913, 3913, 3913, 3913, 3913, 3913, 3913, 3913, 3913, 3913,
     3913, 3913, 3913,    0, 3913, 3913,    0, 3913, 3913, 3913,
     3913, 3913, 3914, 3914, 3914, 3914,    0,    0,    0, 3914,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 3914, 3914,    0,    0,    0,
        0,    0, 3914, 3915, 3915, 3915, 3915,    0,    0,    0,

        0,    0,    0,    0, 3915,    0, 3915,    0,    0, 3915,
        0,    0,    0,    0,    0,    0, 3915,    0,    0,    0,
        0,    0,    0, 3915, 3916, 3916, 3916, 3916, 3916, 3916,
     3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916,
     3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916, 3916,
     3916, 3916, 3916, 3916, 3916, 3916, 3917, 3917, 3917, 3917,
        0,    0,    0,    0,    0,    0,    0, 3917,    0, 3917,
        0,    0, 3917,    0,    0,    0,    0,    0,    0, 3917,
        0,    0,    0,    0,    0,    0, 3917, 3918, 3918, 3918,
     3918,    0,    0,    0, 3918,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3918,    0,    0,    0,    0,    0,    0, 3918, 3919, 3919,
     3919, 3919,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3919,    0,    0,    0,    0,    0,
        0, 3919,    0,    0,    0,    0,    0,    0, 3919, 3920,
     3920, 3920, 3920,    0,    0,    0,    0,    0,    0, 3920,
        0,    0,    0,    0,    0, 3920,    0,    0,    0,    0,
        0,    0, 3920,    0,    0,    0,    0,    0,    0, 3920,
     3923, 3923, 3923, 3923,    0,    0,    0, 3923,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 3923,    0,    0,    0,    0,    0,    0,
     3923, 3926, 3926, 3926, 3926,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 3926, 3926,    0,
        0,    0,    0,    0, 3926,    0,    0,    0,    0,    0,
        0, 3926, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927,
     3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927,
     3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927, 3927,
     3927, 3927, 3927, 3927, 3928, 3928,    0, 3928, 3928, 3928,
     3928, 3928, 3928, 3928, 3928, 3928, 3928,    0, 3928, 3928,
        0, 3928, 3928, 3928, 3928, 3928, 3928,    0, 3928, 3928,

        0, 3928, 3928, 3928, 3928, 3928, 3930, 3930, 3930, 3930,
     3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930,
     3930, 3930,    0, 3930, 3930, 3930, 3930, 3930, 3930, 3930,
     3930, 3930, 3930, 3930, 3930, 3930, 3930, 3930, 3931, 3931,
        0, 3931, 3931, 3931, 3931, 3931,    0, 3931, 3931, 3931,
     3931,    0, 3931, 3931,    0, 3931, 3931, 3931,    0, 3931,
     3931,    0, 3931, 3931,    0,    0, 3931, 3931, 3931, 3931,
     3932, 3932, 3932, 3932,    0,    0,    0,    0,    0,    0,
     3932,    0,    0, 3932,    0,    0, 3932,    0, 3932, 3932,
        0,    0,    0, 3932,    0,    0,    0,    0,    0,    0,

     3932, 3933, 3933, 3933, 3933,    0,    0,    0,    0,    0,
        0, 3933,    0,    0, 3933,    0,    0, 3933, 3933, 3933,
     3933,    0,    0,    0, 3933,    0,    0,    0,    0,    0,
        0, 3933, 3934, 3934, 3934, 3934,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3934,    0, 3934,    0,
        0,    0,    0,    0,    0, 3934,    0,    0,    0,    0,
        0,    0, 3934, 3935, 3935, 3935, 3935,    0,    0,    0,
     3935,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3935,    0,    0,    0,
        0,    0,    0, 3935, 3937, 3937, 3937, 3937, 3937,    0,

        0, 3937,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3937,    0,    0,    0,    0,    0, 3937,    0,    0,
        0,    0,    0, 3937, 3937, 3938, 3938, 3938, 3938,    0,
        0,    0,    0,    0,    0, 3938,    0,    0, 3938,    0,
        0, 3938,    0, 3938, 3938,    0,    0,    0, 3938,    0,
        0,    0,    0,    0,    0, 3938, 3939, 3939, 3939, 3939,
        0,    0,    0,    0,    0,    0, 3939,    0,    0,    0,
        0,    0, 3939,    0,    0,    0,    0,    0,    0, 3939,
        0,    0,    0,    0,    0,    0, 3939, 3940, 3940, 3940,
     3940,    0,    0,    0,    0,    0,    0, 3940,    0,    0,

        0,    0,    0, 3940, 3940,    0,    0,    0,    0,    0,
     3940,    0,    0,    0,    0,    0,    0, 3940, 3941, 3941,
     3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941,
     3941,    0, 3941, 3941,    0, 3941, 3941, 3941, 3941, 3941,
     3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941, 3941,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942,    0, 3942, 3942, 3942,
     3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942, 3942,
     3942, 3942, 3943, 3943, 3943, 3943, 3943,    0,    0, 3943,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3943,

        0,    0,    0,    0,    0, 3943,    0,    0,    0,    0,
        0, 3943, 3943, 3944, 3944, 3944, 3944,    0,    0,    0,
        0,    0,    0, 3944,    0,    0,    0,    0,    0, 3944,
     3944,    0,    0,    0,    0,    0, 3944,    0,    0,    0,
        0,    0,    0, 3944, 3948,    0,    0,    0, 3948,    0,
     3948,    0,    0, 3948,    0,    0,    0, 3948,    0,    0,
        0,    0,    0,    0, 3948, 3949, 3949, 3949, 3949, 3949,
        0,    0, 3949,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3949,    0,    0,    0,    0,    0, 3949,    0,
        0,    0,    0,    0, 3949, 3949, 3950, 3950, 3950, 3950,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3950,    0, 3950, 3950,    0,    0,    0,    0,    0, 3950,
        0,    0,    0,    0,    0,    0, 3950, 3951, 3951, 3951,
     3951,    0,    0,    0, 3951,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3951,    0,    0,    0,    0,    0,    0, 3951, 3952, 3952,
     3952, 3952,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3952, 3952,    0,    0,    0,    0,
        0, 3952,    0,    0,    0,    0,    0,    0, 3952, 3955,
     3955,    0, 3955,    0, 3955, 3955, 3955, 3955, 3955, 3955,

     3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955, 3955,
     3955, 3955, 3955, 3955, 3955,    0, 3955, 3955, 3955, 3955,
     3955, 3956, 3956, 3956, 3956, 3956,    0,    0, 3956,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3956,    0,
        0,    0,    0,    0, 3956,    0,    0,    0,    0,    0,
     3956, 3956, 3957, 3957, 3957, 3957,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3957,    0,
        0, 3957,    0,    0,    0, 3957,    0,    0,    0,    0,
        0,    0, 3957, 3958, 3958,    0, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958,

     3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958, 3958,
     3958, 3958, 3958, 3958, 3958, 3959, 3959, 3959, 3959,    0,
        0,    0, 3959, 3959,    0,    0,    0, 3959,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3959,    0,
        0,    0,    0,    0,    0, 3959, 3960, 3960, 3960, 3960,
        0,    0,    0, 3960,    0,    0,    0, 3960,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3960,
        0,    0,    0,    0,    0,    0, 3960, 3961, 3961, 3961,
     3961,    0,    0,    0,    0,    0,    0,    0, 3961, 3961,
        0,    0,    0, 3961, 3961,    0, 3961,    0,    0,    0,

     3961,    0,    0,    0,    0,    0,    0, 3961, 3962,    0,
        0, 3962,    0,    0,    0,    0, 3962,    0,    0,    0,
     3962, 3962,    0,    0, 3962,    0,    0,    0,    0, 3962,
        0, 3962, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963,
     3963, 3963, 3963, 3963, 3963,    0, 3963, 3963,    0, 3963,
     3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963,
     3963, 3963, 3963, 3963, 3964, 3964, 3964, 3964, 3964, 3964,
     3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964,
        0, 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964,
     3964, 3964, 3964, 3964, 3964, 3964, 3966, 3966, 3966, 3966,

        0,    0,    0,    0,    0,    0, 3966,    0,    0,    0,
        0,    0, 3966,    0,    0,    0,    0,    0,    0, 3966,
        0,    0,    0,    0,    0,    0, 3966, 3967, 3967, 3967,
     3967,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3967, 3967,    0, 3967,    0,    0,    0,
     3967,    0,    0,    0,    0,    0,    0, 3967, 3968, 3968,
     3968, 3968,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3968,    0,    0, 3968,    0,    0,
        0, 3968,    0,    0,    0,    0,    0,    0, 3968, 3969,
     3969, 3969, 3969, 3969,    0,    0, 3969,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 3969,    0,    0,    0,
        0,    0, 3969,    0,    0,    0,    0,    0, 3969, 3969,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971, 3971,
     3971, 3971, 3972, 3972,    0, 3972, 3972, 3972, 3972, 3972,
     3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972,
     3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972, 3972,
     3972, 3972, 3972, 3972, 3973, 3973,    0, 3973,    0, 3973,
     3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973,

     3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973, 3973,
        0, 3973, 3973, 3973, 3973, 3973, 3974, 3974,    0, 3974,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974,
     3974, 3974, 3974, 3974, 3974, 3974, 3974, 3974, 3975, 3975,
     3975, 3975,    0,    0,    0, 3975,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3975,    0,    0,    0,    0,    0,    0, 3975, 3976,
     3976, 3976, 3976,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 3976,    0, 3976, 3976,    0,    0,    0,

        0,    0, 3976,    0,    0,    0,    0,    0,    0, 3976,
     3977, 3977, 3977, 3977,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 3977,    0, 3977, 3977,    0,    0,
        0,    0,    0, 3977,    0,    0,    0,    0,    0,    0,
     3977, 3979, 3979, 3979, 3979, 3979,    0,    0, 3979,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 3979,    0,
        0,    0,    0,    0, 3979,    0,    0,    0,    0,    0,
     3979, 3979, 3980, 3980,    0, 3980,    0, 3980, 3980, 3980,
     3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980,
     3980, 3980, 3980, 3980, 3980, 3980, 3980, 3980,    0, 3980,

     3980, 3980, 3980, 3980, 3982,    0,    0,    0,    0, 3982,
     3982, 3982, 3982, 3982, 3982, 3982, 3982,    0, 3982,    0,
        0, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982, 3982,
     3982, 3982, 3982, 3982, 3982, 3982, 3985, 3985, 3985, 3985,
        0,    0,    0, 3985,    0,    0,    0,    0, 3985,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 3985,
        0,    0,    0,    0,    0,    0, 3985, 3986, 3986, 3986,
     3986,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 3986,    0, 3986,    0,    0,    0,    0,    0,    0,
     3986,    0,    0,    0,    0,    0,    0, 3986, 3988,    0,

        0,    0, 3988, 3988,    0,    0, 3988,    0,    0,    0,
        0, 3988,    0, 3988, 3989, 3989,    0, 3989,    0,    0,
        0, 3989,    0,    0,    0,    0,    0,    0, 3989, 3990,
     3990,    0, 3990,    0, 3990, 3990, 3990, 3990, 3990, 3990,
     3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990, 3990,
     3990, 3990, 3990, 3990, 3990,    0, 3990, 3990, 3990, 3990,
     3990, 3991, 3991,    0, 3991, 3991, 3991, 3991, 3991, 3991,
     3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991,
     3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991, 3991,
     3991, 3991, 3991, 3992, 3992, 3992, 3992,    0,    0,    0,

     3992,    0,    0,    0,    0, 3992,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 3992,    0,    0,    0,
        0,    0,    0, 3992, 3993, 3993, 3993, 3993,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     3993, 3993,    0,    0,    0,    0,    0, 3993,    0,    0,
        0,    0,    0,    0, 3993, 3995, 3995, 3995, 3995, 3995,
        0,    0, 3995,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 3995,    0,    0,    0,    0,    0, 3995,    0,
        0,    0,    0,    0, 3995, 3995, 3996, 3996,    0, 3996,
        0, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996,

     3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996,
     3996, 3996,    0, 3996, 3996, 3996, 3996, 3996, 3998, 3998,
        0, 3998,    0, 3998, 3998, 3998, 3998, 3998, 3998, 3998,
     3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998, 3998,
     3998, 3998, 3998, 3998,    0, 3998, 3998, 3998, 3998, 3998,
     3999, 3999,    0, 3999,    0, 3999, 3999, 3999, 3999, 3999,
     3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999, 3999,
     3999, 3999, 3999, 3999, 3999, 3999,    0, 3999, 3999, 3999,
     3999, 3999, 4000, 4000,    0, 4000,    0, 4000, 4000, 4000,
     4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,

     4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000,    0, 4000,
     4000, 4000, 4000, 4000, 4001, 4001,    0, 4001,    0, 4001,
     4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001,
     4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001, 4001,
        0, 4001, 4001, 4001, 4001, 4001, 4002, 4002,    0, 4002,
     4002, 4002,    0, 4002, 4002, 4002,    0, 4002, 4002, 4002,
     4002, 4002,    0, 4002, 4002, 4002, 4002, 4002, 4002, 4002,
     4002, 4002, 4002, 4002,    0,    0, 4002, 4002, 4003, 4003,
        0, 4003,    0, 4003, 4003, 4003, 4003, 4003, 4003, 4003,
     4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003, 4003,

     4003, 4003, 4003, 4003,    0, 4003, 4003, 4003, 4003, 4003,
     4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004, 4004,
     4004, 4004, 4004, 4004, 4004, 4004, 4004,    0, 4004, 4004,
     4004, 4004, 4004, 4004,    0, 4004, 4004, 4004, 4004, 4004,
     4004, 4004, 4005, 4005, 4005, 4005,    0,    0,    0,    0,
        0,    0,    0, 4005,    0, 4005,    0,    0, 4005,    0,
        0,    0,    0,    0,    0, 4005,    0,    0,    0,    0,
        0,    0, 4005, 4006, 4006, 4006, 4006,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 4006,
        0,    0,    0,    0,    0,    0, 4006,    0,    0,    0,

        0,    0,    0, 4006, 4009, 4009, 4009, 4009, 4009,    0,
        0, 4009,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4009,    0,    0,    0,    0,    0, 4009,    0,    0,
        0,    0,    0, 4009, 4009, 4010, 4010,    0, 4010, 4010,
     4010, 4010, 4010, 4010, 4010, 4010, 4010, 4010,    0, 4010,
     4010,    0, 4010, 4010, 4010, 4010, 4010, 4010,    0, 4010,
     4010,    0, 4010, 4010, 4010, 4010, 4010, 4012, 4012, 4012,
     4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012,
     4012, 4012, 4012,    0, 4012, 4012, 4012, 4012, 4012, 4012,
     4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4012, 4013,

     4013, 4013, 4013,    0,    0,    0,    0,    0,    0, 4013,
        0,    0, 4013,    0,    0, 4013, 4013, 4013, 4013,    0,
        0,    0, 4013,    0,    0,    0,    0,    0,    0, 4013,
     4015, 4015, 4015, 4015,    0,    0,    0,    0,    0,    0,
     4015,    0,    0,    0,    0,    0, 4015, 4015,    0,    0,
        0,    0,    0, 4015,    0,    0,    0,    0,    0,    0,
     4015, 4016, 4016, 4016, 4016,    0,    0,    0,    0,    0,
        0, 4016,    0,    0,    0,    0,    0, 4016, 4016,    0,
        0,    0,    0,    0, 4016,    0,    0,    0,    0,    0,
        0, 4016, 4018,    0,    0,    0, 4018,    0, 4018,    0,

        0, 4018,    0,    0,    0, 4018,    0,    0,    0,    0,
        0,    0, 4018, 4019, 4019, 4019, 4019, 4019,    0,    0,
     4019,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4019,    0,    0,    0,    0,    0, 4019,    0,    0,    0,
        0,    0, 4019, 4019, 4020, 4020, 4020, 4020,    0,    0,
        0, 4020,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4020,    0,    0,
        0,    0,    0,    0, 4020, 4021, 4021, 4021, 4021,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4021, 4021,    0,    0,    0,    0,    0, 4021,    0,

        0,    0,    0,    0,    0, 4021, 4022, 4022, 4022, 4022,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4022,    0, 4022, 4022,    0,    0,    0,    0,    0, 4022,
        0,    0,    0,    0,    0,    0, 4022, 4023, 4023, 4023,
     4023,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4023, 4023,    0,    0,    0,    0,    0,
     4023,    0,    0,    0,    0,    0,    0, 4023, 4025, 4025,
     4025, 4025,    0,    0,    0, 4025,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4025,    0,    0,    0,    0,    0,    0, 4025, 4026,

     4026,    0, 4026,    0, 4026, 4026, 4026, 4026, 4026, 4026,
     4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026,
     4026, 4026, 4026, 4026, 4026,    0, 4026, 4026, 4026, 4026,
     4026, 4027, 4027, 4027, 4027,    0,    0,    0, 4027, 4027,
        0,    0,    0, 4027,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4027,    0,    0,    0,    0,    0,
        0, 4027, 4028, 4028, 4028, 4028,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4028, 4028,
        0, 4028,    0,    0,    0, 4028,    0,    0,    0,    0,
        0,    0, 4028, 4029, 4029, 4029, 4029,    0,    0,    0,

     4029,    0,    0,    0, 4029,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4029,    0,    0,    0,
        0,    0,    0, 4029, 4030,    0,    0,    0, 4030,    0,
        0,    0,    0, 4030,    0,    0,    0,    0,    0,    0,
     4030,    0,    0,    0,    0,    0,    0, 4030, 4031, 4031,
     4031, 4031,    0,    0,    0, 4031, 4031,    0,    0,    0,
     4031,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4031,    0,    0,    0,    0,    0,    0, 4031, 4032,
        0,    0, 4032,    0,    0,    0,    0, 4032,    0,    0,
        0, 4032, 4032,    0,    0, 4032,    0,    0,    0,    0,

     4032,    0, 4032, 4033, 4033,    0, 4033, 4033, 4033, 4033,
     4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033,
     4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033, 4033,
     4033, 4033, 4033, 4033, 4033, 4034, 4034,    0, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034, 4034,
     4034, 4034, 4034, 4034, 4034, 4034, 4034, 4035, 4035, 4035,
     4035,    0,    0,    0,    0,    0,    0, 4035,    0,    0,
        0,    0,    0, 4035,    0,    0,    0,    0,    0,    0,
     4035,    0,    0,    0,    0,    0,    0, 4035, 4036, 4036,

     4036, 4036,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4036, 4036,    0, 4036,    0,    0,
        0, 4036,    0,    0,    0,    0,    0,    0, 4036, 4038,
     4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038,
     4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038,
     4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038, 4038,
     4038, 4039, 4039,    0, 4039, 4039, 4039, 4039, 4039, 4039,
     4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039,
     4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039, 4039,
     4039, 4039, 4039, 4040, 4040,    0, 4040,    0, 4040, 4040,

     4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040,
     4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040, 4040,    0,
     4040, 4040, 4040, 4040, 4040, 4041, 4041, 4041, 4041, 4041,
     4041, 4041, 4041, 4041, 4041, 4041, 4041, 4041, 4041, 4041,
     4041, 4041,    0, 4041, 4041, 4041, 4041, 4041, 4041,    0,
     4041, 4041, 4041, 4041, 4041, 4041, 4041, 4042, 4042, 4042,
     4042,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4042,    0, 4042, 4042,    0,    0,    0,    0,    0,
     4042,    0,    0,    0,    0,    0,    0, 4042, 4043, 4043,
     4043, 4043,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 4043,    0, 4043, 4043,    0,    0,    0,    0,
        0, 4043,    0,    0,    0,    0,    0,    0, 4043, 4044,
     4044,    0, 4044,    0, 4044, 4044, 4044, 4044, 4044, 4044,
     4044, 4044, 4044, 4044, 4044, 4044, 4044, 4044, 4044, 4044,
     4044, 4044, 4044, 4044, 4044,    0, 4044, 4044, 4044, 4044,
     4044, 4046,    0,    0,    0,    0, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4046,    0, 4046,    0,    0, 4046, 4046,
     4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046, 4046,
     4046, 4046, 4046, 4048, 4048, 4048, 4048,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4048,    0, 4048,

        0,    0,    0,    0,    0,    0, 4048,    0,    0,    0,
        0,    0,    0, 4048, 4050, 4050,    0, 4050,    0,    0,
        0, 4050,    0,    0,    0,    0,    0,    0, 4050, 4051,
     4051,    0, 4051,    0, 4051, 4051, 4051, 4051, 4051, 4051,
     4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051, 4051,
     4051, 4051, 4051, 4051, 4051,    0, 4051, 4051, 4051, 4051,
     4051, 4052, 4052, 4052, 4052,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 4052, 4052,    0,
        0,    0,    0,    0, 4052,    0,    0,    0,    0,    0,
        0, 4052, 4053, 4053,    0, 4053,    0, 4053, 4053, 4053,

     4053, 4053, 4053, 4053, 4053, 4053, 4053, 4053, 4053, 4053,
     4053, 4053, 4053, 4053, 4053, 4053, 4053, 4053,    0, 4053,
     4053, 4053, 4053, 4053, 4055, 4055,    0, 4055,    0, 4055,
     4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055,
     4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055, 4055,
        0, 4055, 4055, 4055, 4055, 4055, 4056, 4056,    0, 4056,
        0, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
     4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
     4056, 4056,    0, 4056, 4056, 4056, 4056, 4056, 4057, 4057,
        0, 4057,    0, 4057, 4057, 4057, 4057, 4057, 4057, 4057,

     4057, 4057, 4057, 4057, 4057, 4057, 4057, 4057, 4057, 4057,
     4057, 4057, 4057, 4057,    0, 4057, 4057, 4057, 4057, 4057,
     4058, 4058,    0, 4058,    0, 4058, 4058, 4058, 4058, 4058,
     4058, 4058, 4058, 4058, 4058, 4058, 4058, 4058, 4058, 4058,
     4058, 4058, 4058, 4058, 4058, 4058,    0, 4058, 4058, 4058,
     4058, 4058, 4059, 4059,    0, 4059, 4059, 4059, 4059, 4059,
     4059, 4059,    0, 4059, 4059, 4059, 4059, 4059,    0, 4059,
     4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059, 4059,
        0,    0, 4059, 4059, 4060, 4060,    0, 4060,    0, 4060,
     4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060,

     4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060, 4060,
        0, 4060, 4060, 4060, 4060, 4060, 4061, 4061, 4061, 4061,
     4061, 4061, 4061, 4061, 4061, 4061, 4061, 4061, 4061, 4061,
     4061, 4061, 4061,    0, 4061, 4061, 4061, 4061, 4061, 4061,
        0, 4061, 4061, 4061, 4061, 4061, 4061, 4061, 4062,    0,
        0, 4062,    0,    0,    0, 4062, 4062,    0,    0,    0,
     4062,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4062,    0,    0,    0,    0,    0,    0, 4062, 4063,
     4063,    0, 4063, 4063, 4063, 4063, 4063, 4063, 4063, 4063,
     4063, 4063,    0, 4063, 4063,    0, 4063, 4063, 4063, 4063,

     4063, 4063,    0, 4063, 4063,    0, 4063, 4063, 4063, 4063,
     4063, 4064, 4064, 4064, 4064, 4064, 4064, 4064, 4064, 4064,
     4064, 4064, 4064, 4064, 4064, 4064, 4064, 4064,    0, 4064,
     4064, 4064, 4064, 4064, 4064,    0, 4064, 4064, 4064, 4064,
     4064, 4064, 4064, 4065, 4065, 4065, 4065,    0,    0,    0,
        0,    0,    0, 4065,    0,    0,    0,    0,    0, 4065,
     4065,    0,    0,    0,    0,    0, 4065,    0,    0,    0,
        0,    0,    0, 4065, 4066,    0,    0,    0, 4066,    0,
     4066,    0,    0, 4066,    0,    0,    0, 4066,    0,    0,
        0,    0,    0,    0, 4066, 4067, 4067, 4067, 4067,    0,

        0,    0, 4067,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4067,    0,
        0,    0,    0,    0,    0, 4067, 4070, 4070, 4070, 4070,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 4070, 4070,    0,    0,    0,    0,    0, 4070,
        0,    0,    0,    0,    0,    0, 4070, 4071, 4071, 4071,
     4071,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 4071,    0, 4071, 4071,    0,    0,    0,    0,    0,
     4071,    0,    0,    0,    0,    0,    0, 4071, 4072, 4072,
     4072, 4072,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0, 4072, 4072,    0, 4072,    0,    0,
        0, 4072,    0,    0,    0,    0,    0,    0, 4072, 4073,
        0,    0, 4073,    0,    0,    0,    0, 4073,    0,    0,
        0, 4073, 4073,    0,    0, 4073,    0,    0,    0,    0,
     4073,    0, 4073, 4074,    0,    0,    0, 4074,    0,    0,
        0,    0, 4074,    0,    0,    0,    0,    0,    0, 4074,
        0,    0,    0,    0,    0,    0, 4074, 4076, 4076, 4076,
     4076,    0,    0,    0,    0,    0,    0,    0, 4076,    0,
        0,    0,    0, 4076, 4076,    0, 4076,    0,    0,    0,
     4076,    0,    0,    0,    0,    0,    0, 4076, 4077, 4077,

        0, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077,
     4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077, 4077,
     4078, 4078,    0, 4078, 4078, 4078, 4078, 4078, 4078, 4078,
     4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078,
     4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078, 4078,
     4078, 4078, 4079, 4079, 4079, 4079,    0,    0,    0,    0,
        0,    0, 4079,    0,    0,    0,    0,    0, 4079,    0,
        0,    0,    0,    0,    0, 4079,    0,    0,    0,    0,
        0,    0, 4079, 4080, 4080, 4080, 4080,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 4080,
     4080,    0, 4080,    0,    0,    0, 4080,    0,    0,    0,
        0,    0,    0, 4080, 4082, 4082,    0, 4082, 4082, 4082,
     4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082,
     4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082, 4082,
     4082, 4082, 4082, 4082, 4082, 4082, 4083, 4083, 4083, 4083,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     4083,    0, 4083, 4083,    0,    0,    0,    0,    0, 4083,
        0,    0,    0,    0,    0,    0, 4083, 4084, 4084, 4084,
     4084,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0, 4084,    0,    0,    0,    0,    0,    0,
     4084,    0,    0,    0,    0,    0,    0, 4084, 4085,    0,
        0,    0,    0, 4085, 4085, 4085, 4085, 4085, 4085, 4085,
     4085,    0, 4085,    0,    0, 4085, 4085, 4085, 4085, 4085,
     4085, 4085, 4085, 4085, 4085, 4085, 4085, 4085, 4085, 4085,
     4086, 4086,    0, 4086,    0,    0,    0, 4086,    0,    0,
        0,    0,    0,    0, 4086, 4087, 4087, 4087, 4087,    0,
        0,    0, 4087,    0,    0,    0,    0, 4087,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 4087,    0,
        0,    0,    0,    0,    0, 4087, 4088, 4088,    0, 4088,

     4088, 4088,    0, 4088, 4088, 4088, 4088, 4088, 4088, 4088,
     4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088,
     4088, 4088, 4088, 4088, 4088, 4088, 4088, 4088, 4089, 4089,
        0, 4089, 4089, 4089, 4089, 4089, 4089, 4089, 4089, 4089,
     4089,    0, 4089, 4089,    0, 4089, 4089, 4089, 4089, 4089,
     4089,    0, 4089, 4089,    0, 4089, 4089, 4089, 4089, 4089,
     4090, 4090, 4090, 4090,    0,    0,    0,    0,    0,    0,
     4090,    0,    0,    0,    0,    0, 4090, 4090,    0,    0,
        0,    0,    0, 4090,    0,    0,    0,    0,    0,    0,
     4090, 4092, 4092, 4092, 4092, 4092,    0,    0, 4092,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 4092,    0,
        0,    0,    0,    0, 4092,    0,    0,    0,    0,    0,
     4092, 4092, 4093, 4093, 4093, 4093,    0,    0,    0, 4093,
     4093,    0,    0,    0, 4093,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 4093,    0,    0,    0,    0,
        0,    0, 4093, 4094,    0,    0, 4094,    0,    0,    0,
     4094,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 4094,    0,    0,    0,
        0,    0,    0, 4094, 4098, 4098, 4098, 4098, 4098, 4098,
     4098, 4098, 4098, 4098, 4098, 4098, 4098, 4098, 4098, 4098,

     4098,    0, 4098, 4098, 4098, 4098, 4098, 4098,    0, 4098,
     4098, 4098, 4098, 4098, 4098, 4098, 4101, 4101, 4101, 4101,
     4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101, 4101,
     4101, 4101, 4101,    0, 4101, 4101, 4101, 4101, 4101, 4101,
        0, 4101, 4101, 4101, 4101, 4101, 4101, 4101, 4103, 4103,
     4103, 4103,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 4103,    0,    0,    0, 4103,    0,
        0, 4103,    0,    0,    0,    0,    0,    0, 4103, 4104,
        0,    0, 4104,    0,    0,    0, 4104,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 4104,    0,    0,    0,    0,    0,    0, 4104,
     4105,    0,    0, 4105,    0,    0,    0, 4105,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 4105,    0,    0,    0,    0,    0,    0,
     4105, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,

     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601,
     3601, 3601, 3601, 3601, 3601, 3601
    } ;

extern int scanYY_flex_debug;
int scanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = yy_full_lp; /* restore orig. accepting pos. */ \
(yy_state_ptr) = yy_full_state; /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *scanYYtext;
#line 1 "scanner.l"
/*****************************************************************************
 *
 * $Id: scanner.l,v 1.80 2001/03/19 19:27:41 root Exp $
 *
 * Copyright (C) 1997-2008 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "scanner.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h"
#include "code.h"

#define YY_NEVER_INTERACTIVE 1

/* -----------------------------------------------------------------
 *
 *	statics
 */
static ParserInterface *g_thisParser;
static const char *     inputString;
static int		inputPosition;
static QFile            inputFile;
static int		lastContext;
static int		lastCContext;
static int              lastDocContext;
static int              lastCPPContext;
static int              lastSkipSharpContext;
static int              lastSkipRoundContext;
static int              lastStringContext;
static int              lastCurlyContext;
static int              lastRoundContext;
static int              lastSquareContext;
static int              lastInitializerContext;
static int              lastClassTemplSpecContext;
static int              lastPreLineCtrlContext;
static int              lastSkipVerbStringContext;
static int              lastCommentInArgContext;
static int              lastCSConstraint;
static Protection	protection;
static Protection	baseProt;
static int		sharpCount   = 0 ;
static int		roundCount   = 0 ;
static int		curlyCount   = 0 ;
static int		squareCount  = 0 ;
static int              padCount     = 0 ;
static QCString         slString;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		current      = 0 ;
static Entry*		previous     = 0 ;
static Entry*		tempEntry    = 0 ;
static Entry*		firstTypedefEntry = 0 ;
static Entry*		memspecEntry = 0 ;
static int		yyLineNr     = 1 ;
static int              anonCount    = 0 ;        
static int              anonNSCount  = 0 ;        
static QCString		yyFileName;
static MethodTypes 	mtype;
static bool    		gstat;
static bool             removeSlashes;
static Specifier 	virt;
static Specifier 	baseVirt;
static QCString         msType,msName,msArgs;
static bool             isTypedef;
static int              tmpDocType;
static QCString         sectionLabel;
static QCString		sectionTitle;
static QCString         funcPtrType;
static QCString         templateStr;
static QCString         aliasName;
static QCString         baseName;
static QCString*        specName;
static QCString         formulaText;
static QCString         formulaEnd;
static bool             useOverrideCommands = FALSE;

static bool             insideIDL   = FALSE;		//!< processing IDL code?
static bool             insideJava  = FALSE;		//!< processing Java code?
static bool             insideCS    = FALSE;		//!< processing C# code?
static bool             insideD     = FALSE;		//!< processing D code?
static bool             insidePHP   = FALSE;		//!< processing PHP code?
static bool             insideObjC  = FALSE;            //!< processing Objective C code?
static bool             insideCli   = FALSE;            //!< processing C++/CLI code?
static bool             insideJS    = FALSE;            //!< processing JavaScript code?

static bool             insideCppQuote = FALSE;
static bool             insideProtocolList = FALSE;

static int              argRoundCount;
static int              argSharpCount;
static int              currentArgumentContext;
static int              lastCopyArgStringContext;
static int              lastCopyArgContext;
static QCString         *copyArgString;
static QCString         fullArgString;

static ArgumentList     *currentArgumentList;
static char             lastCopyArgChar;

static QCString         *pCopyQuotedString;
static QCString         *pCopyRoundString;
static QCString         *pCopyCurlyString;

static QGString         *pCopyCurlyGString;
static QGString         *pCopyRoundGString;
static QGString         *pCopyQuotedGString;
static QGString         *pSkipVerbString;
static QStack<Grouping> autoGroupStack;

static bool             insideFormula;
static bool  	        insideTryBlock=FALSE;
static bool             insideCode;
static bool             needsSemi;

static int              depthIf;
static int  	        initBracketCount;
static QCString         memberGroupRelates;
static QCString         memberGroupInside;
static QCString         xrefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;

static QCString         g_skipBlockName;
static QCString         oldStyleArgType;
static QCString         docBackup;
static QCString         briefBackup;
static bool             g_inputFromFile;

static int              docBlockContext;
static QCString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockAutoBrief;
static char             docBlockTerm;

static QCString         idlAttr;
static QCString         idlProp;

static bool             g_lexInit = FALSE;
static bool             externC;


//-----------------------------------------------------------------------------

// forward declarations
//static void handleGroupStartCommand(const char *header);
//static void handleGroupEndCommand();

//-----------------------------------------------------------------------------

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  baseName.resize(0);
  formulaText.resize(0);
  protection = Public;
  baseProt = Public;
  sharpCount = 0;
  roundCount = 0;
  curlyCount = 0;
  mtype = Method;
  gstat = FALSE;
  virt = Normal;
  baseVirt = Normal;
  isTypedef = FALSE;
  autoGroupStack.clear();
  insideTryBlock = FALSE;
  autoGroupStack.setAutoDelete(TRUE);
  insideFormula = FALSE;
  insideCode=FALSE;
  insideCli=Config_getBool("CPP_CLI_SUPPORT");
  previous = 0;
}

static void initEntry()
{
  if (insideJava) 
  {
    protection = (current_root->spec & Entry::Interface) ?  Public : Package;
  }
  current->protection = protection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  current->objc       = insideObjC;
  //if (!autoGroupStack.isEmpty())
  //{
  //  //printf("Appending group %s\n",autoGroupStack.top()->groupname.data());
  //  current->groups->append(new Grouping(*autoGroupStack.top()));
  //}
  initGroupInfo(current);
  isTypedef=FALSE;
}


//-----------------------------------------------------------------------------

///// remove any automatic grouping and add new one (if given)
//static void setCurrentGroup( QCString *newgroup, Grouping::GroupPri_t pri )
//{
//   /* remove auto group name from current entry and discard it */
//   Grouping *g = current->groups->first();
//   int i=0; 
//   while (g)
//   {
//     if (g->pri <= Grouping::GROUPING_AUTO_DEF)
//     {
//       current->groups->remove(i);
//       i--;
//     }
//     g=current->groups->next();
//     i++;
//   }
//
//   /* use new group name instead? */
//   if ( newgroup )
//   {
//      current->groups->append(new Grouping(*newgroup, pri));
//   } 
//}
//
//static int newMemberGroupId()
//{
//  static int curGroupId=0;
//  return curGroupId++;
//}
//
// forward declarations
//static void startGroupInDoc();
//static void endGroup();

//-----------------------------------------------------------------------------

static void lineCount()
{
  for( const char* c = scanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}

static void addType( Entry* current )
{
    uint tl=current->type.length();
    if( tl>0 && !current->name.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->name ;
    current->name.resize(0) ;
    tl=current->type.length();
    if( tl>0 && !current->args.isEmpty() && current->type.at(tl-1)!='.') 
    {
      current->type += ' ' ;
    }
    current->type += current->args ;
    current->args.resize(0) ;
    current->argList->clear();
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void startCommentBlock(bool);
static void handleCommentBlock(const QCString &doc,bool brief);
static void handleParametersCommentBlocks(ArgumentList *al);

//-----------------------------------------------------------------

static bool nameIsOperator(QCString &name)
{
  int i=name.find("operator");
  if (i==-1) return FALSE;
  if (i==0 && !isId(name.at(8))) return TRUE; // case operator ::X
  if (i>0 && !isId(name.at(i-1)) && !isId(name.at(i+8))) return TRUE; // case X::operator
  return FALSE; // case TEXToperatorTEXT
}

//-----------------------------------------------------------------------------

static void setContext()
{
  QCString fileName = yyFileName;
  SrcLangExt langExt = getLanguageFromFileName(fileName);
  insideIDL  = langExt==SrcLangExt_IDL;
  insideJava = langExt==SrcLangExt_Java;
  insideCS   = langExt==SrcLangExt_CSharp; 
  insideD    = langExt==SrcLangExt_D;
  insidePHP  = langExt==SrcLangExt_PHP;
  insideObjC = langExt==SrcLangExt_ObjC;
  insideJS   = langExt==SrcLangExt_JS;
  if ( insidePHP )
  {
    useOverrideCommands = TRUE;
  }
  //printf("setContext(%s) insideIDL=%d insideJava=%d insideCS=%d "
  //       "insideD=%d insidePHP=%d insideObjC=%d\n",
  //       yyFileName.data(),insideIDL,insideJava,insideCS,insideD,insidePHP,insideObjC
  //	);
}

//-----------------------------------------------------------------------------

static void prependScope()
{
  if (current_root->section & Entry::SCOPE_MASK)
  {
    //printf("--- prependScope %s to %s\n",current_root->name.data(),current->name.data());
    current->name.prepend(current_root->name+"::");
    if (current_root->tArgLists)
    {
      if (current->tArgLists==0)
      {
	current->tArgLists = new QList<ArgumentList>;
	current->tArgLists->setAutoDelete(TRUE);
      }
      //printf("prependScope #=%d #current=%d\n",current_root->tArgLists->count(),current->tArgLists->count());
      QListIterator<ArgumentList> talsi(*current_root->tArgLists);
      ArgumentList *srcAl=0;
      for (talsi.toLast();(srcAl=talsi.current());--talsi)
      {
        ArgumentList *dstAl = new ArgumentList;
	QListIterator<Argument> tali(*srcAl);
        Argument *a;
        for (;(a=tali.current());++tali)
        {
          dstAl->append(new Argument(*a));
        //printf("appending argument %s %s\n",a->type.data(),a->name.data());
        }	  
        current->tArgLists->insert(0,dstAl);	
      }
    }
  }
}

//-----------------------------------------------------------------------------

/*! Returns TRUE iff the current entry could be a K&R style C function */
static bool checkForKnRstyleC()
{
  if (((QCString)yyFileName).right(2).lower()!=".c") return FALSE; // must be a C file
  if (!current->argList) return FALSE; // must have arguments
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    // in K&R style argument do not have a type, but doxygen expects a type
    // so it will think the argument has no name
    if (a->type.isEmpty() || !a->name.isEmpty()) return FALSE;
  }
  return TRUE;
}

//-----------------------------------------------------------------------------

static void splitKnRArg(QCString &oldStyleArgPtr,QCString &oldStyleArgName)
{
  int si = current->args.length();
  if (oldStyleArgType.isEmpty()) // new argument
  {
    static QRegExp re("([^)]*)");
    int bi1 = current->args.findRev(re);
    int bi2 = bi1!=-1 ? current->args.findRev(re,bi1-1) : -1; 
    char c;
    if (bi1!=-1 && bi2!=-1) // found something like "int (*func)(int arg)"
    {
      int s=bi2+1;
      oldStyleArgType = current->args.left(s);
      int i=s;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
      oldStyleArgType+=current->args.mid(i);
    }
    else if (bi1!=-1) // redundant braces like in "int (*var)"
    {
      int s=bi1;
      oldStyleArgType = current->args.left(s);
      s++;
      int i=s+1;
      while (i<si && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i++;
      oldStyleArgType += current->args.mid(s,i-s);
      s=i;
      while (i<si && isId(current->args.at(i))) i++;
      oldStyleArgName = current->args.mid(s,i-s);
    }
    else // normal "int *var"
    {
      int l=si,i=l-1,j;
      char c;
      // look for start of name in "type *name"
      while (i>=0 && isId(current->args.at(i))) i--;
      j=i+1;
      // look for start of *'s
      while (i>=0 && ((c=current->args.at(i))=='*' || isspace((uchar)c))) i--;
      i++;
      if (i!=l)
      {
	oldStyleArgType=current->args.left(i);
	oldStyleArgPtr=current->args.mid(i,j-i);
	oldStyleArgName=current->args.mid(j).stripWhiteSpace();
      }
      else
      {
	oldStyleArgName=current->args.copy().stripWhiteSpace();
      }
    }
  }
  else // continuation like *arg2 in "int *args,*arg2"
  {
    int l=si,j=0;
    char c;
    while (j<l && ((c=current->args.at(j))=='*' || isspace((uchar)c))) j++;
    if (j>0)
    {
      oldStyleArgPtr=current->args.left(j);
      oldStyleArgName=current->args.mid(j).stripWhiteSpace();
    }
    else
    {
      oldStyleArgName=current->args.copy().stripWhiteSpace();
    }
  }
  //fprintf(stderr,"type=%s ptr=%s name=%s\n",oldStyleArgType.data(),oldStyleArgPtr.data(),oldStyleArgName.data());
}

//-----------------------------------------------------------------------------

/*! Update the argument \a name with additional \a type info. For K&R style
 *  function the type is found \e after the argument list, so this routine
 *  in needed to fix up.
 */
static void addKnRArgInfo(const QCString &type,const QCString &name,
                          const QCString &brief,const QCString &docs)
{
  if (current->argList==0) return;
  ArgumentListIterator ali(*current->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (a->type==name)
    {
      a->type=type.stripWhiteSpace();
      if (a->type.left(9)=="register ") // strip keyword
      {
	a->type=a->type.mid(9);
      }
      a->name=name.stripWhiteSpace();
      if (!brief.isEmpty() && !docs.isEmpty())
      {
        a->docs=brief+"\n\n"+docs;
      }
      else if (!brief.isEmpty())
      {
        a->docs=brief;
      }
      else
      {
	a->docs=docs;
      }
    }
  }
}

//-----------------------------------------------------------------------------


void fixArgumentListForJavaScript(ArgumentList *al)
{
  if (al==0) return;
  ArgumentListIterator ali(*al);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (!a->type.isEmpty() && a->name.isEmpty())
    { // a->type is actually the (typeless) parameter name, so move it
      a->name=a->type;
      a->type.resize(0);
    }
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    if (g_inputFromFile)
    {
       c = inputFile.readBlock(buf,max_size);
       if (c==-1) yy_fatal_error("input in flex scanner failed");
    }
    else
    {
      while( c < max_size && inputString[inputPosition] )
      {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
      }
    }
    return c;
}

/* start command character */
/* language parsing states */


















































































































/** Prototype scanner states */





/** comment parsing states */



#line 9002 "<stdout>"

#define INITIAL 0
#define Define 1
#define DefineEnd 2
#define CompoundName 3
#define ClassVar 4
#define CSConstraintName 5
#define CSConstraintType 6
#define ClassCategory 7
#define ClassTemplSpec 8
#define CliPropertyType 9
#define CliPropertyIndex 10
#define CliOverride 11
#define Bases 12
#define BasesProt 13
#define NextSemi 14
#define BitFields 15
#define FindMembers 16
#define FindMembersPHP 17
#define FindMemberName 18
#define FindFields 19
#define FindFieldArg 20
#define Function 21
#define FuncRound 22
#define ExcpRound 23
#define ExcpList 24
#define FuncQual 25
#define Operator 26
#define Array 27
#define ReadBody 28
#define ReadNSBody 29
#define ReadBodyIntf 30
#define Using 31
#define UsingDirective 32
#define SkipCurly 33
#define SkipCurlyCpp 34
#define SkipCurlyEndDoc 35
#define SkipString 36
#define SkipPHPString 37
#define SkipInits 38
#define SkipCPP 39
#define SkipCPPBlock 40
#define SkipComment 41
#define SkipCxxComment 42
#define SkipCurlyBlock 43
#define SkipRoundBlock 44
#define Sharp 45
#define SkipSharp 46
#define SkipRound 47
#define SkipSquare 48
#define SkipRemainder 49
#define TypedefName 50
#define TryFunctionBlock 51
#define TryFunctionBlockEnd 52
#define Comment 53
#define PackageName 54
#define JavaImport 55
#define CSAccessorDecl 56
#define CSGeneric 57
#define PreLineCtrl 58
#define DefinePHP 59
#define DefinePHPEnd 60
#define OldStyleArgs 61
#define SkipVerbString 62
#define ObjCMethod 63
#define ObjCReturnType 64
#define ObjCParams 65
#define ObjCParamType 66
#define ObjCProtocolList 67
#define ObjCPropAttr 68
#define ObjCSkipStatement 69
#define QtPropType 70
#define QtPropName 71
#define QtPropAttr 72
#define QtPropRead 73
#define QtPropWrite 74
#define ReadInitializer 75
#define GetCallType 76
#define CppQuote 77
#define EndCppQuote 78
#define MemberSpec 79
#define MemberSpecSkip 80
#define EndTemplate 81
#define FuncPtr 82
#define FuncPtrOperator 83
#define EndFuncPtr 84
#define ReadFuncArgType 85
#define ReadTempArgs 86
#define IDLUnionCase 87
#define NSAliasName 88
#define NSAliasArg 89
#define CopyString 90
#define CopyPHPString 91
#define CopyGString 92
#define CopyPHPGString 93
#define CopyRound 94
#define CopyCurly 95
#define GCopyRound 96
#define GCopyCurly 97
#define SkipUnionSwitch 98
#define Specialization 99
#define FuncPtrInit 100
#define FuncFunc 101
#define FuncFuncEnd 102
#define FuncFuncType 103
#define FuncFuncArray 104
#define CopyArgString 105
#define CopyArgPHPString 106
#define CopyArgRound 107
#define CopyArgSharp 108
#define CopyArgComment 109
#define CopyArgCommentLine 110
#define CopyArgVerbatim 111
#define IDLAttribute 112
#define IDLProp 113
#define IDLPropName 114
#define Prototype 115
#define PrototypePtr 116
#define PrototypeQual 117
#define PrototypeExc 118
#define PrototypeSkipLine 119
#define DocLine 120
#define DocBlock 121
#define DocCopyBlock 122

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int scanYYwrap (void );
#else
extern int scanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( scanYYtext, scanYYleng, 1, scanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( scanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( scanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, scanYYin))==0 && ferror(scanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(scanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int scanYYlex (void);

#define YY_DECL int scanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after scanYYtext and scanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( scanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(scanYYtext[scanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 712 "scanner.l"


#line 9283 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)scanYYalloc(YY_STATE_BUF_SIZE  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! scanYYin )
			scanYYin = stdin;

		if ( ! scanYYout )
			scanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			scanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
		}

		scanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of scanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 3602 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 27542 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 714 "scanner.l"
{
  					  curlyCount=0;
					  needsSemi = TRUE;
  					  BEGIN(SkipCurlyBlock); 
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 719 "scanner.l"
{
  				 	  roundCount=0;
  					  BEGIN(SkipRoundBlock);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 723 "scanner.l"
{
					  ++roundCount;
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 726 "scanner.l"
{
  					  if (roundCount )
					    --roundCount ;
					  else
					    BEGIN( NextSemi ) ;
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 732 "scanner.l"
{
  					  ++curlyCount ; 
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 735 "scanner.l"
{ 
  				          if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else if (needsSemi)
					  {
					    BEGIN( NextSemi );
					  }
					  else
					  {
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 749 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=NextSemi;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 756 "scanner.l"
{ if (insidePHP) REJECT; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 757 "scanner.l"
{
  					  lastStringContext=NextSemi;
					  BEGIN(SkipString);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 761 "scanner.l"
{ 
  					  unput(*scanYYtext);
  					  BEGIN( FindMembers ); 
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 765 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 769 "scanner.l"
{ // PHP code with unsupported extension?
                                          insidePHP = TRUE;
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 772 "scanner.l"
{ // PHP code start
                                           BEGIN( FindMembers );
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 775 "scanner.l"
{ // Non-PHP code text, ignore
  					}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 777 "scanner.l"
{ // Non-PHP code text, ignore
  					  yyLineNr++;
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 780 "scanner.l"
{ // Non-PHP code text, ignore
				        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 782 "scanner.l"
{ // PHP code end
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    REJECT;
                                        }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 788 "scanner.l"
{ if (insidePHP)
					    BEGIN( NextSemi );
					  else
					    REJECT;
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 793 "scanner.l"
{ // Mozilla XPIDL lang-specific block
					  if (!insideIDL)
					    REJECT;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 797 "scanner.l"
{ // Mozilla XPIDL lang-specific block end
					  if (!insideIDL)
					    REJECT;
					}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 801 "scanner.l"
{ // IDL or Borland C++ builder property 
  					  current->mtype = mtype = Property;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 811 "scanner.l"
{ current->mtype = mtype = DCOP;
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 820 "scanner.l"
{ current->mtype = mtype = Signal;
  
					  current->protection = protection = Public ;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 830 "scanner.l"
{
					  current->protection = protection = Public ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 840 "scanner.l"
{
					  current->protection = protection = Protected ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 850 "scanner.l"
{
					  current->protection = protection = Private ;
					  current->mtype = mtype = Slot;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount();
					}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 859 "scanner.l"
{ 
					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 868 "scanner.l"
{  // for now treat C++/CLI's internal as package...
  					  if (insideCli)
					  {
					    current->protection = protection = Package ;
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    lineCount() ;
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 884 "scanner.l"
{  
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 893 "scanner.l"
{ 
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 902 "scanner.l"
{ 
  					  if (insideCli)
					  {
					    // C++/CLI event
					    lineCount() ;
  					    current->mtype = mtype = Event;
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN( CliPropertyType );
					  }
					  else if (insideCS)
					  {
					    lineCount() ;
  					    current->mtype = Event;
					    current->bodyLine = yyLineNr;
					  }
					  else
					  {
					    REJECT;
					  }
                                        }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 923 "scanner.l"
{
  					   if (insideCli)
					   {
					     // C++/CLI property
					     lineCount() ;
  					     current->mtype = mtype = Property;
					     current->bodyLine = yyLineNr;
					     curlyCount=0;
					     BEGIN( CliPropertyType );
					   }
					   else
					   {
					     REJECT;
					   }
					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 938 "scanner.l"
{
  					  addType( current );
  					  current->name = scanYYtext;
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 942 "scanner.l"
{ // C++/CLI indexed property
  					  current->name += scanYYtext;
					  BEGIN( CliPropertyIndex );
  					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 946 "scanner.l"
{
					  curlyCount=0;
					  //printf("event: '%s' '%s'\n",current->type.data(),current->name.data());
  					  BEGIN( CSAccessorDecl );
  					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 951 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 955 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 958 "scanner.l"
{
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 960 "scanner.l"
{
  					  addType( current );
  					  current->type += scanYYtext;
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 964 "scanner.l"
{
                                          BEGIN( CliPropertyType );
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 968 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 971 "scanner.l"
{ 
                                          if (!current->type.isEmpty())
					  {
					    REJECT;
                                          }
					  else
					  { 
                                            current->mtype = mtype = Property;
                                            lineCount();
					  }
                                        }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 982 "scanner.l"
{
  					  current->protection = protection = Private ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 991 "scanner.l"
{
  					  current->protection = protection = Protected ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1000 "scanner.l"
{
  					  current->protection = protection = Public ;
					  current->mtype = mtype = Method;
					  current->type.resize(0); 
					  current->name.resize(0); 
					  current->args.resize(0);
					  current->argList->clear();
					  lineCount() ;
  					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1009 "scanner.l"
{
  					  if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
  					    lineCount();
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    current->section = Entry::FUNCTION_SEC;
					    current->protection = protection = Public ;
					    current->objc = TRUE;
					    current->virt = Virtual;
					    current->stat=scanYYtext[0]=='+';
					    current->mtype = mtype = Method;
					    current->type.resize(0); 
					    current->name.resize(0); 
					    current->args.resize(0);
					    current->argList->clear();
					    BEGIN( ObjCMethod );
					  }
  					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1033 "scanner.l"
{ // start of method's return type
  					  BEGIN( ObjCReturnType );
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1036 "scanner.l"
{ // found method name
  					  if (current->type.isEmpty())
					  {
					    current->type = "id";
					  }
					  current->name = scanYYtext;
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1043 "scanner.l"
{ // start of parameter list
  					  current->name += ':';
  					  Argument *a = new Argument;
					  current->argList->append(a);
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 1049 "scanner.l"
{ // TODO: check if nested braches are possible.
  					  current->type = scanYYtext;
  					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1052 "scanner.l"
{
  					  BEGIN( ObjCMethod );
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1055 "scanner.l"
{ // Keyword of parameter
					  QCString keyw = scanYYtext;
					  keyw=keyw.left(keyw.length()-1); // strip :
					  if (keyw.isEmpty())
					  {
					    current->name += " :";
					  }
					  else
					  {
					    current->name += keyw+":";
					  }
					  if (current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  Argument *a = new Argument;
  					  a->attrib=(QCString)"["+keyw+"]";
					  current->argList->append(a);
  					}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 1074 "scanner.l"
{ // name of parameter
  					  lineCount();
  					  current->argList->getLast()->name=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1078 "scanner.l"
{ // name of parameter
  					  lineCount();
					  // do we want the comma as part of the name?
  					  //current->name += ",";
  					  Argument *a = new Argument;
  					  a->attrib="[,]";
  					  a->type="...";
					  current->argList->append(a);
  					}
	YY_BREAK
/*
<ObjCParams>":"				{ 
					  current->name += ':';
					}
   */
case 55:
YY_RULE_SETUP
#line 1092 "scanner.l"
{
  					  BEGIN( ObjCParamType );
  					}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 1095 "scanner.l"
{
  					  current->argList->getLast()->type=QCString(scanYYtext).stripWhiteSpace();
  					}
	YY_BREAK
case 57:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1098 "scanner.l"
{
  					  BEGIN( ObjCParams );
  					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 1101 "scanner.l"
{ // end of method declaration
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
					  //printf("argList=%s\n",current->args.data());
  					  unput(';');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1111 "scanner.l"
{ // start of a method body
  					  lineCount();
                                          //printf("Type=%s Name=%s args=%s\n",
					  //    current->type.data(),current->name.data(),argListToString(current->argList).data()
					  //    );
					  if (current->argList->getLast() && current->argList->getLast()->type.isEmpty())
					  {
					    current->argList->getLast()->type="id";
					  }
  					  current->args = argListToString(current->argList);
                                          unput('{');
  					  BEGIN( Function );
  					}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1124 "scanner.l"
{
  					  lineCount();
  					}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1127 "scanner.l"
{
  					  if (insideJava) // Java annotation
					  {
  					    lineCount();
					    lastSkipRoundContext = YY_START;
					    roundCount=1;
					    BEGIN( SkipRound );
					  }
					  else if (strncmp(scanYYtext,"@property",9)==0) // ObjC 2.0 property
					  {
  					    current->mtype = mtype = Property;
					    current->spec|=Entry::Readable | Entry::Writable | Entry::Assign;
					    current->protection = Public ;
					    unput('(');
					    BEGIN( ObjCPropAttr );
					  }
					  else
					  {
					    REJECT;
					  }
                                        }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1148 "scanner.l"
{ 
                                          current->read = scanYYtext+7;
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1151 "scanner.l"
{ 
                                          current->write = scanYYtext+7;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1154 "scanner.l"
{
					  current->spec&=~Entry::Writable;
  					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1157 "scanner.l"
{ // default
  					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1159 "scanner.l"
{ // default
  					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1161 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Retain;
  					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1165 "scanner.l"
{
					  current->spec&=~Entry::Assign;
					  current->spec|=Entry::Copy;
  					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1169 "scanner.l"
{
					  current->spec|=Entry::NonAtomic;
  					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1172 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1175 "scanner.l"
{
  					  if (insideJava) // Java annotation
					  {
					    // skip annotation
					  }
					  else if (strcmp(scanYYtext,"@property")==0) // ObjC 2.0 property
					  {
  					    current->mtype = mtype = Property;
					    current->spec|=Entry::Writable | Entry::Readable | Entry::Assign;
					    current->protection = Public ;
					  }
					  else if (strcmp(scanYYtext,"@synthesize")==0)
					  {
					    BEGIN( ObjCSkipStatement );
					  }
					  else if (strcmp(scanYYtext,"@dynamic")==0)
					  {
					    BEGIN( ObjCSkipStatement );
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1199 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1202 "scanner.l"
{
  					  isTypedef=FALSE;
					  current->name = scanYYtext;
					  current->name = substitute(current->name,".","::");
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  curlyCount=0;
					  current_root->addSubEntry(current);
                                          current_root = current ;
					  current             = new Entry ;
					  initEntry();
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1219 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 1222 "scanner.l"
{
  					  current->type += " initonly ";
					  if (insideCli) current->spec |= Entry::Initonly;
					  lineCount();
  					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1227 "scanner.l"
{ current->type += " static ";
  					  current->stat = TRUE;
					  lineCount();
					}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1231 "scanner.l"
{
  					  current->stat = FALSE;
					  current->explicitExternal = TRUE;
					  lineCount();
  					}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1236 "scanner.l"
{ current->type += " virtual ";
					  current->virt = Virtual;
					  lineCount();
					}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 1240 "scanner.l"
{ 
                                          if (!insidePHP) 
					  {
					    current->type += " abstract ";
					    current->virt = Pure;
					  }
					  else
					  {
					    current->spec|=Entry::Abstract;
					  }
					  lineCount();
					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1252 "scanner.l"
{ current->spec|=Entry::Inline;
                                          lineCount(); 
                                        }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1255 "scanner.l"
{ current->spec|=Entry::Mutable;
                                          lineCount(); 
                                        }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 1258 "scanner.l"
{ current->spec|=Entry::Explicit;
                                          lineCount(); 
                                        }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1261 "scanner.l"
{ // Objective C 2.0 protocol required section
                                          current->spec=(current->spec & ~Entry::Optional) | Entry::Required;
                                          lineCount(); 
                                        }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1265 "scanner.l"
{  // Objective C 2.0 protocol optional section
                                          current->spec=(current->spec & ~Entry::Required) | Entry::Optional;
                                          lineCount(); 
                                        }
	YY_BREAK
/*
<FindMembers>{B}*"import"{BN}+		{ // IDL import keyword
  					  BEGIN( NextSemi );
  					}
  */
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1274 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 86:
/* rule 86 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1275 "scanner.l"
{ 
  					  isTypedef=FALSE;
					  current->section = Entry::NAMESPACE_SEC;
					  current->type = "namespace" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
  					  BEGIN( CompoundName ); 
					}
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1285 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "module" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else if (insideD)
					  {
					    lineCount();
					    BEGIN(PackageName);
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1308 "scanner.l"
{ 
					  lineCount();
                                          if (insideIDL)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::NAMESPACE_SEC;
					    current->type = "library" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
  					    BEGIN( CompoundName ); 
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
					}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 1326 "scanner.l"
{ // M$/Corba IDL/Java interface
					  lineCount();
                                          if (insideIDL || insideJava || insideCS || insideD || insidePHP)
					  {
  					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
                                            current->spec = Entry::Interface;
					    addType( current ) ;
					    current->type += " interface" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    BEGIN( CompoundName );
					  }
					  else
					  {
					    addType( current ) ;
					    current->name = QCString(scanYYtext).stripWhiteSpace();
					  }
  					}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1346 "scanner.l"
{ // Objective-C class implementation
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::OBJCIMPL_SEC;
					  current->objc = insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " implementation" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1359 "scanner.l"
{ // Objective-C class interface, or Java attribute
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Interface;
					  current->objc = insideObjC = !insideJava;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " interface" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 1373 "scanner.l"
{ // Objective-C protocol definition
					  lineCount();
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Protocol;
					  current->objc = insideObjC = TRUE;
					  current->protection = protection = Public ;
					  addType( current ) ;
					  current->type += " protocol" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1387 "scanner.l"
{ // Corba IDL exception
  					  isTypedef=FALSE;
					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Exception;
					  addType( current ) ;
					  current->type += " exception" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount();
					  BEGIN( CompoundName );
  					}
	YY_BREAK
case 94:
#line 1400 "scanner.l"
case 95:
/* rule 95 can match eol */
#line 1401 "scanner.l"
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1401 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
					  addType( current ) ;
					  current->type += " class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  current->objc = insideObjC = scanYYtext[0]=='@';
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  if (insidePHP && current->spec&Entry::Abstract)
					  {
					    // convert Abstract to AbstractClass
					    current->spec=(current->spec&~Entry::Abstract)|Entry::AbstractClass;
					  }
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 97:
#line 1420 "scanner.l"
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 1420 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Value;
					  addType( current ) ;
					  current->type += " value class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 99:
#line 1434 "scanner.l"
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1434 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Ref;
					  addType( current ) ;
					  current->type += " ref class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 101:
#line 1448 "scanner.l"
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 1448 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec = Entry::Interface;
					  addType( current ) ;
					  current->type += " interface class" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1461 "scanner.l"
{
  					  if (insideIDL)
					  {
					    isTypedef=FALSE;
					    current->section = Entry::CLASS_SEC;
					    addType( current ) ;
					    current->type += " coclass" ;
					    current->fileName  = yyFileName;
					    current->startLine = yyLineNr;
					    current->bodyLine  = yyLineNr;
					    lineCount() ;
					    BEGIN( CompoundName ) ;
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
					  }
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
#line 1483 "scanner.l"
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 1483 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC ;
                                          current->spec    = Entry::Struct;
					  // bug 582676: can be a struct nested in an interface so keep insideObjC state
					  //current->objc    = insideObjC = FALSE;
					  addType( current ) ;
					  current->type += " struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 106:
#line 1499 "scanner.l"
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1499 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Value;
					  addType( current ) ;
					  current->type += " value struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 108:
#line 1513 "scanner.l"
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1513 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Ref;
					  addType( current ) ;
					  current->type += " ref struct" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 110:
#line 1527 "scanner.l"
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1527 "scanner.l"
{
  					  isTypedef=FALSE;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Struct | Entry::Interface;
					  addType( current ) ;
					  current->type += " interface struct";
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
  					}
	YY_BREAK
case 112:
/* rule 112 can match eol */
#line 1541 "scanner.l"
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 1541 "scanner.l"
{ 
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::CLASS_SEC;
                                          current->spec    = Entry::Union;
					  // bug 582676: can be a struct nested in an interface so keep insideObjC state
					  //current->objc    = insideObjC = FALSE;
					  addType( current ) ;
					  current->type += " union" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 114:
/* rule 114 can match eol */
#line 1557 "scanner.l"
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1557 "scanner.l"
{ // for IDL: typedef [something] enum
					  isTypedef=((QCString)scanYYtext).find("typedef")!=-1;
  					  current->section = Entry::ENUM_SEC ;
					  addType( current ) ;
					  current->type += " enum" ;
					  current->fileName  = yyFileName;
					  current->startLine = yyLineNr;
					  current->bodyLine  = yyLineNr;
					  lineCount() ;
					  if (scanYYtext[scanYYleng-1]=='{') unput('{');
					  BEGIN( CompoundName ) ;
					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1569 "scanner.l"
{  // A::operator()<int>(int arg)
  					  lineCount();
					  current->name += "()";
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 117:
/* rule 117 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1574 "scanner.l"
{
  					  lineCount();
    					  current->name += scanYYtext ;
					  current->name = current->name.simplifyWhiteSpace();
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1580 "scanner.l"
{ // can occur when importing members
  					  unput(';');
					  BEGIN( FindMembers ) ;
  					}
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 1584 "scanner.l"
{ 
    					  lineCount();
    					  current->name += *scanYYtext ;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1588 "scanner.l"
{ /* skip guided templ specifiers */ }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1589 "scanner.l"
{
					  current->name = current->name.simplifyWhiteSpace();
					  unput(*scanYYtext);
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 1594 "scanner.l"
{  // generic is a C++/CLI extension
  					  lineCount();
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  current->spec |= (scanYYtext[0]=='g') ? Entry::Generic : Entry::Template;
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  fullArgString = templateStr;
					  copyArgString = &templateStr;
					  currentArgumentContext = FindMembers;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 1611 "scanner.l"
{ // namespace alias
                                          lineCount(); 
  					  BEGIN( NSAliasName );
					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1615 "scanner.l"
{
  					  aliasName = scanYYtext;
					  BEGIN( NSAliasArg );
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1619 "scanner.l"
{
  					  //printf("Inserting namespace alias %s::%s->%s\n",current_root->name.data(),aliasName.data(),scanYYtext);
					  //if (current_root->name.isEmpty())
					  //{
                                          // TODO: namespace aliases are now treated as global entities
                                          // while they should be aware of the scope they are in
                                            Doxygen::namespaceAliasDict.insert(aliasName,new QCString(scanYYtext));
					  //}
					  //else
					  //{
                                          //  Doxygen::namespaceAliasDict.insert(current_root->name+"::"+aliasName,
					  //	new QCString(current_root->name+"::"+scanYYtext));
					  //}
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1633 "scanner.l"
{
  					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 1636 "scanner.l"
{ // package import => add as a using directive
  					  lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope.left(scope.length()-2),".","::"));
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1647 "scanner.l"
{ // class import => add as a using declaration
                                          lineCount();
  					  QCString scope=scanYYtext;
					  current->name=removeRedundantWhiteSpace(substitute(scope,".","::"));
					  current->fileName = yyFileName; 
					  if (insideD) 
					  {
					    current->section=Entry::USINGDIR_SEC;
					  }
					  else
					  {
					    //printf("import name = %s -> %s\n",scanYYtext,current->name.data());
					    current->section=Entry::USINGDECL_SEC;
					  }
					  current_root->addSubEntry(current);
					  current = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1666 "scanner.l"
{ 
					  current->startLine=yyLineNr; 
                                          lineCount(); 
                                          BEGIN(Using); 
                                        }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1671 "scanner.l"
{ lineCount(); BEGIN(UsingDirective); }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 1672 "scanner.l"
{
                                          lineCount();
  					  current->name=scanYYtext;
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDECL_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  if (insideCS) /* Hack: in C# a using declaration and 
							   directive have the same syntax, so we
							   also add it as a using directive here
							 */
					  {
					    current->name=scanYYtext;
					    current->fileName = yyFileName; 
					    current->startLine = yyLineNr;
					    current->section=Entry::USINGDIR_SEC;
					    current_root->addSubEntry(current);
					    current             = new Entry ;
					  }
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1694 "scanner.l"
{ current->name=removeRedundantWhiteSpace(scanYYtext);
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(Using);
  					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1702 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 1703 "scanner.l"
{ // guided template decl
					  QCString n=scanYYtext;
					  addType( current );
					  current->name=n.left(n.length()-2);
					}
	YY_BREAK
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1708 "scanner.l"
{ // Note: this could be a return type!
  					  sharpCount=0;
					  lineCount();
					  addType( current );
  					  current->name=scanYYtext;
					  current->name=current->name.stripWhiteSpace();
					  //current->scopeSpec.resize(0);
					  // currentTemplateSpec = &current->scopeSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
					}
	YY_BREAK
case 136:
/* rule 136 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1721 "scanner.l"
{
  					  sharpCount=0;
					  roundCount=0;
					  lineCount();
  					  current->name+=((QCString)scanYYtext).stripWhiteSpace();
					  //current->memberSpec.resize(0);
					  // currentTemplateSpec = &current->memberSpec;
					  if (nameIsOperator(current->name))
					    BEGIN( Operator );
					  else
					    BEGIN( EndTemplate );
  					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1733 "scanner.l"
{
  					  current->name+=scanYYtext;
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1737 "scanner.l"
{ 
  					  current->name+='<';
  					  // *currentTemplateSpec+='<'; 
					  sharpCount++; 
					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1742 "scanner.l"
{
  					  if (insideJava || insideCS || insideCli || roundCount==0)
					  {
					    unput('>');
					    unput(' ');
					    unput('>');
					  }
					  else
					  {
  					    current->name+=scanYYtext;
					  }
  					  // *currentTemplateSpec+=scanYYtext; 
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1755 "scanner.l"
{
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {  
					    //printf("Found %s\n",current->name.data());
					    BEGIN(FindMembers);
					  }
					}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
#line 1764 "scanner.l"
{ 
  					  lineCount();
  					  current->name+='>';
					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    current->args = "(";
					    currentArgumentContext = FuncQual;
					    fullArgString = current->args.copy();
					    copyArgString = &current->args;
					    //printf("Found %s\n",current->name.data());
					    BEGIN( ReadFuncArgType ) ;
					  }
					}
	YY_BREAK
case 142:
/* rule 142 can match eol */
YY_RULE_SETUP
#line 1778 "scanner.l"
{ // function pointer returning a template instance
  					  lineCount();
  					  current->name+='>';
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 143:
/* rule 143 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 1783 "scanner.l"
{
  					  lineCount();
  					  current->name+='>';
  					  // *currentTemplateSpec+='>';
					  if (--sharpCount<=0)
					  {
					    BEGIN(FindMemberName);
					  }
  					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1792 "scanner.l"
{ current->name+=*scanYYtext;
                                          roundCount++; 
                                        }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1795 "scanner.l"
{ current->name+=*scanYYtext;
                                          if (roundCount>0) roundCount--; 
                                        }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 1798 "scanner.l"
{ 
  					  current->name+=*scanYYtext;
  					  // *currentTemplateSpec+=*scanYYtext; 
					}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1802 "scanner.l"
{
					  if (insidePHP)
					  {
					    current->bodyLine = yyLineNr;
					    BEGIN( DefinePHP );
					  }
					  else
					    REJECT;
					}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 1811 "scanner.l"
{ // Qt object macro
  					}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 1813 "scanner.l"
{ // Qt property declaration
					  current->protection = protection = Public ;
  					  current->mtype = mtype = Property;
					  current->type.resize(0);
  					  BEGIN(QtPropType);
  					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1819 "scanner.l"
{ // start of property arguments
  					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1821 "scanner.l"
{ // end of property arguments
  					  unput(';');
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1825 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1828 "scanner.l"
{
  				          current->type+=scanYYtext;
  					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1831 "scanner.l"
{
  					  current->type+=scanYYtext;
                                          BEGIN(QtPropName);
  					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1835 "scanner.l"
{
  					  current->name=scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1839 "scanner.l"
{
  					  current->spec |= Entry::Readable;
					  BEGIN(QtPropRead);
  					}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 1843 "scanner.l"
{
  					  current->spec |= Entry::Writable;
					  BEGIN(QtPropWrite);
  					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1847 "scanner.l"
{ // reset method => not supported yet
  					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1849 "scanner.l"
{ // scriptable property => not supported yet
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1851 "scanner.l"
{ // designable property => not supported yet
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1853 "scanner.l"
{
  					  current->read = scanYYtext;
  					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1857 "scanner.l"
{
  					  current->write = scanYYtext;
					  BEGIN(QtPropAttr);
  					}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 1861 "scanner.l"
{
  					  current->name=scanYYtext;
				          BEGIN(FindMembers);
			 	        }
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 1865 "scanner.l"
{
					  lineCount();
                                          if (insideIDL && scanYYleng==9 && strcmp(scanYYtext,"cpp_quote")==0)
					  {
					    BEGIN(CppQuote);
					  }
					  else if ((insideIDL || insideJava || insideD) && scanYYleng==6 && strcmp(scanYYtext,"import")==0)
					  {
					    if (insideIDL)
					      BEGIN(NextSemi);
					    else // insideJava or insideD
					      BEGIN(JavaImport);
					  }
					  else if (insideJava && strcmp(scanYYtext,"package")==0)
					  {
  					    lineCount();
					    BEGIN(PackageName);
					  }
					  else if (insideIDL && strcmp(scanYYtext,"case")==0)
					  {
					    BEGIN(IDLUnionCase);
					  }
					  else if (insideTryBlock && strcmp(scanYYtext,"catch")==0)
					  {
					    insideTryBlock=FALSE;
					    BEGIN(TryFunctionBlock);
					  }
					  else if (insideJS && strcmp(scanYYtext,"var")==0)
					  { // javascript variable
					    current->type="var";
					  }
					  else if (insideJS && strcmp(scanYYtext,"function")==0)
					  { // javascript function
					    current->type="function";
					  }
					  else
					  {
					    if (YY_START==FindMembers)
					    {
					      addType( current ) ;
					    }
					    bool javaLike = insideJava || insideCS || insideD || insidePHP || insideJS;
					    if (javaLike && strcmp(scanYYtext,"public")==0)
					    {
					      current->protection = Public;
					    }
					    else if (javaLike && strcmp(scanYYtext,"protected")==0)
					    {
					      current->protection = Protected;
					    }
					    else if (javaLike && strcmp(scanYYtext,"private")==0)
					    {
					      current->protection = Private;
					    }
					    else if (javaLike && strcmp(scanYYtext,"static")==0)
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
			 		      current->stat = TRUE;
					    }
					    else
					    {
					      if (YY_START==FindMembers)
					        current->name  = scanYYtext;
					      else
						current->name += scanYYtext;
					      if (current->name.left(7)=="static ")
					      {
						current->stat = TRUE;
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(7)=="inline ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="inline";
						}
						else
						{
						  current->type+="inline ";
						}
						current->name= current->name.mid(7);
					      }
					      else if (current->name.left(6)=="const ")
					      {
						if (current->type.isEmpty())
						{
						  current->type="const";
						}
						else
						{
						  current->type+="const ";
						}
						current->name=current->name.mid(6);
					      }
					    }
					    QCString tmp=scanYYtext;
					    if (nameIsOperator(tmp))
                                            {
					      BEGIN( Operator );
                                            }
					    else
                                            {
		 			      BEGIN(FindMembers);
                                            }
					  }
					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1974 "scanner.l"
{ // some number where we did not expect one
  					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1976 "scanner.l"
{
  					  if (insideJava || insideCS || insideD)
					  {
					    current->name+=".";
					  }
  					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1982 "scanner.l"
{
					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1985 "scanner.l"
{
  					  insideCppQuote=TRUE;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1989 "scanner.l"

	YY_BREAK
case 170:
YY_RULE_SETUP
#line 1990 "scanner.l"
{ BEGIN(FindMembers); }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 1991 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1992 "scanner.l"

	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 1993 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1994 "scanner.l"
{ 
					  curlyCount=0;
					  lastCurlyContext = TryFunctionBlockEnd ;
  					  BEGIN( SkipCurly );
					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1999 "scanner.l"

	YY_BREAK
case 176:
YY_RULE_SETUP
#line 2000 "scanner.l"
{ BEGIN(TryFunctionBlock); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 2001 "scanner.l"
{ unput(*scanYYtext); 
  					  BEGIN( FindMembers );
					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 2004 "scanner.l"
{
  					  insideCppQuote=FALSE;
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2008 "scanner.l"
{ if (insidePHP)
					    REJECT;
					  lastCPPContext = YY_START;
					  BEGIN( SkipCPP ) ;
					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 2013 "scanner.l"
{ if (insidePHP)
					    REJECT;
  					  current->bodyLine = yyLineNr;
  					  BEGIN( Define );
  					}
	YY_BREAK
case 181:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 2018 "scanner.l"
{ /* line control directive */
                                          yyLineNr = atoi(&scanYYtext[1]);
					  //printf("setting line number to %d\n",yyLineNr);
					  lastPreLineCtrlContext = YY_START;
  					  BEGIN( PreLineCtrl );
  					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 2024 "scanner.l"
{
				          yyFileName = stripQuotes(scanYYtext);
  					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2027 "scanner.l"
{}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 2028 "scanner.l"
{
                                          yyLineNr++;
  					  BEGIN( lastPreLineCtrlContext );
  					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2032 "scanner.l"

	YY_BREAK
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 2033 "scanner.l"
{ yyLineNr++ ; }
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 2034 "scanner.l"
{ yyLineNr++ ;
					  BEGIN( lastCPPContext) ;
					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2037 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->args = "(";
  					  current->bodyLine = yyLineNr;
					  currentArgumentContext = DefineEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
/*
<DefineArg>")"				{
  					  //printf("Define with args\n");
  					  current->args += ')';
  					  BEGIN( DefineEnd );
  					}
<DefineArg>.				{
  					  current->args += *scanYYtext;
  					}
  */
case 189:
YY_RULE_SETUP
#line 2057 "scanner.l"
{
  					  //printf("Define `%s' without args\n",scanYYtext);
  					  current->bodyLine = yyLineNr;
  					  current->name = scanYYtext;
					  BEGIN(DefineEnd);
  					}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 2063 "scanner.l"
{
  					  //printf("End define\n");
					  yyLineNr++;
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
  					  current->args       = current->args.simplifyWhiteSpace();
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::DEFINE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 2077 "scanner.l"
{
  					  //printf("End define\n");
					  current->fileName   = yyFileName;
					  current->startLine  = yyLineNr;
					  current->type.resize(0);
  					  current->args       = current->args.simplifyWhiteSpace();
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::ENUM_SEC;  //HACK!
					  current_root->addSubEntry(current);
					  current             = new Entry ;
					  initEntry();
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 2090 "scanner.l"

	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 2091 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2094 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
					    lastStringContext=DefineEnd;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 2105 "scanner.l"

	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 2106 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
					  current->name = current->name.left(current->name.length()-1);
					  current->args = "(";
  					  current->bodyLine = yyLineNr;
  					  lastRoundContext = DefinePHPEnd;
  					  pCopyRoundString = &current->args;
					  roundCount = 0;
  					  BEGIN( CopyRound );
					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 2119 "scanner.l"
{  // ^ and % are C++/CLI extensions
  					  if (insideCli)
					  {
  					    addType( current );
                                            current->name = scanYYtext ; 
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2130 "scanner.l"
{ 
                                          current->name += scanYYtext ;  
  					  addType( current );
					}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 2134 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = ';';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 2157 "scanner.l"
{
  					  lineCount();
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = ',';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 2176 "scanner.l"
{
  					  lineCount();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine=yyLineNr;
					  }
					  docBlockContext   = YY_START;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = 0;
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 2200 "scanner.l"
{
  					  //handleGroupStartCommand(current->name);
                                          if (previous && previous->section==Entry::GROUPDOC_SEC)
					  {
					    // link open command to the group defined in the previous entry
					    openGroup(previous,yyFileName,yyLineNr);
					  }
					  else
					  {
					    // link open command to the current entry
					    openGroup(current,yyFileName,yyLineNr);
					  }
					  //current = tmp;
					  initEntry();
					  if (scanYYtext[1]=='/')
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='/')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlockAutoBrief = FALSE;
					      docBlock.resize(0);
					      docBlockTerm = 0;
					      startCommentBlock(TRUE);
					      BEGIN(DocLine);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipCxxComment);
					    }
					  }
					  else
					  {
					    if (scanYYtext[2]=='!' || scanYYtext[2]=='*')
					    {
					      docBlockContext   = YY_START;
					      docBlockInBody    = FALSE;
					      docBlock.resize(0);
					      docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                          ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					      docBlockTerm = 0;
					      startCommentBlock(FALSE);
					      BEGIN(DocBlock);
					    }
					    else
					    {
					      lastCContext=YY_START;
					      BEGIN(SkipComment);
					    }
					  }
  					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 2252 "scanner.l"
{
  					  closeGroup(current,yyFileName,yyLineNr);
  					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 2255 "scanner.l"
{ // in PHP code this could also be due to "<?="
  					  current->bodyLine = yyLineNr;
					  lastInitializerContext = YY_START;
					  initBracketCount=0;
					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
/* Read initializer rules */
case 205:
YY_RULE_SETUP
#line 2262 "scanner.l"
{
  					  lastRoundContext=YY_START;
  					  pCopyRoundGString=&current->initializer;
					  roundCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(GCopyRound);
  					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 2269 "scanner.l"
{
  					  lastCurlyContext=YY_START;
  					  pCopyCurlyGString=&current->initializer;
					  curlyCount=0;
  					  current->initializer+=*scanYYtext; 
  					  BEGIN(GCopyCurly);
  					}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 2276 "scanner.l"
{
  					  //printf(">> initializer `%s' <<\n",current->initializer.data());
  					  if (*scanYYtext==';' || lastInitializerContext==FindFields)
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else if (*scanYYtext==',' && initBracketCount==0) // for "int a=0,b=0"
					  {
  					    unput(*scanYYtext);
  					    BEGIN(lastInitializerContext);
					  }
					  else
					  {
  					    current->initializer+=*scanYYtext; 
					  }
  					}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 2293 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
  					  {
					    BEGIN(EndCppQuote);
					  }
					  else
					  {
                                            lastStringContext=YY_START;
  					    current->initializer+=*scanYYtext; 
  					    pCopyQuotedGString=&current->initializer;
					    BEGIN(CopyGString);
					  }
					}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 2306 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 2309 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
					}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 2312 "scanner.l"
{
  					  current->initializer+=scanYYtext; 
  					}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 2315 "scanner.l"
{
  					  initBracketCount++;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 2319 "scanner.l"
{
  					  initBracketCount--;
  					  current->initializer+=*scanYYtext; 
  					}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 2323 "scanner.l"
{	
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedGString = &current->initializer;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					  else
					  {
					    current->initializer+=scanYYtext; 
					  }
  					}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 2336 "scanner.l"
{ 
                                          if (insidePHP) 
					  {
					    REJECT;
					  }
					  else
					  {  
					    current->initializer+=scanYYtext; 
					  }
                                        } 
	YY_BREAK
case 216:
/* rule 216 can match eol */
YY_RULE_SETUP
#line 2346 "scanner.l"
{
  					  current->initializer+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 2350 "scanner.l"
{ 
  					  //printf("insideCS=%d\n",insideCS);
  					  current->initializer+=scanYYtext;
                                          if (!insideCS && !insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
					    // C#/ObjC verbatim string
					    lastSkipVerbStringContext=YY_START;
					    pSkipVerbString=&current->initializer;
					    BEGIN(SkipVerbString);
					  }
					}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 2365 "scanner.l"
{
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 2368 "scanner.l"
{ // quote escape
					  *pSkipVerbString+=scanYYtext;
					}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 2371 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
					  BEGIN(lastSkipVerbStringContext);
					}
	YY_BREAK
case 221:
/* rule 221 can match eol */
YY_RULE_SETUP
#line 2375 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 2379 "scanner.l"
{
					  *pSkipVerbString+=*scanYYtext;
  					}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 2382 "scanner.l"
{
					  if (insidePHP)
					    BEGIN( FindMembersPHP );
					  else
					    current->initializer+=scanYYtext;
  					}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 2388 "scanner.l"
{ 
  					  current->initializer+=*scanYYtext; 
					}
	YY_BREAK
/* generic quoted string copy rules */
case 225:
YY_RULE_SETUP
#line 2393 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 2396 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 2400 "scanner.l"
{ 
  					  *pCopyQuotedString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 2404 "scanner.l"
{
  					  *pCopyQuotedString+=scanYYtext;
  					}
	YY_BREAK
case 229:
/* rule 229 can match eol */
YY_RULE_SETUP
#line 2407 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
  					  yyLineNr++;
  					}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 2411 "scanner.l"
{
  					  *pCopyQuotedString+=*scanYYtext;
  					}
	YY_BREAK
/* generic quoted growable string copy rules */
case 231:
YY_RULE_SETUP
#line 2416 "scanner.l"
{
  					  *pCopyQuotedGString+=scanYYtext;
  					}
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 2419 "scanner.l"
{ 
  					  *pCopyQuotedGString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 2423 "scanner.l"
{ 
  					  *pCopyQuotedGString+=*scanYYtext;
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 2427 "scanner.l"
{
  					  *pCopyQuotedGString+=scanYYtext;
  					}
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 2430 "scanner.l"
{
  					  *pCopyQuotedGString+=*scanYYtext;
  					  yyLineNr++;
  					}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 2434 "scanner.l"
{
  					  *pCopyQuotedGString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules */
case 237:
YY_RULE_SETUP
#line 2439 "scanner.l"
{
					  *pCopyRoundString+=*scanYYtext;
  					  pCopyQuotedString=pCopyRoundString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 2445 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 2449 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 2454 "scanner.l"
{
  					  yyLineNr++;
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 2458 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedString = pCopyRoundString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					  else
					  {
					    *pCopyRoundString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 2471 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 2481 "scanner.l"
{
  					  *pCopyRoundString+=scanYYtext;
  					}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 2484 "scanner.l"
{
  					  *pCopyRoundString+=*scanYYtext;
  					}
	YY_BREAK
/* generic round bracket list copy rules for growable strings */
case 245:
YY_RULE_SETUP
#line 2489 "scanner.l"
{
					  *pCopyRoundGString+=*scanYYtext;
  					  pCopyQuotedGString=pCopyRoundGString;
					  lastStringContext=YY_START;
					  BEGIN(CopyGString);
					}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 2495 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
  					  roundCount++;
  					}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 2499 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
					  if (--roundCount<0)
					    BEGIN(lastRoundContext);
  					}
	YY_BREAK
case 248:
/* rule 248 can match eol */
YY_RULE_SETUP
#line 2504 "scanner.l"
{
  					  yyLineNr++;
  					  *pCopyRoundGString+=*scanYYtext;
  					}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 2508 "scanner.l"
{
  					  if (insidePHP)
					  {
					    current->initializer+=scanYYtext; 
                                            pCopyQuotedGString = pCopyRoundGString;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					  else
					  {
					    *pCopyRoundGString+=scanYYtext;
					  }
  					}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 2521 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            *pCopyRoundGString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 2531 "scanner.l"
{
  					  *pCopyRoundGString+=scanYYtext;
  					}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 2534 "scanner.l"
{
  					  *pCopyRoundGString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules */
case 253:
YY_RULE_SETUP
#line 2539 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  pCopyQuotedString=pCopyCurlyString;
					  lastStringContext=YY_START;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 2545 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedString=pCopyCurlyString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 2554 "scanner.l"
{
  					  *pCopyCurlyString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 2558 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 2563 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 2572 "scanner.l"
{
  					  *pCopyCurlyString+=scanYYtext;
  					}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 2575 "scanner.l"
{ *pCopyCurlyString+=scanYYtext; }
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 2576 "scanner.l"
{
  					  yyLineNr++;
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 2580 "scanner.l"
{
					  *pCopyCurlyString+=*scanYYtext;
  					}
	YY_BREAK
/* generic curly bracket list copy rules for growable strings */
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 2585 "scanner.l"
{ // start of included file marker
                                        }
	YY_BREAK
case 263:
/* rule 263 can match eol */
YY_RULE_SETUP
#line 2587 "scanner.l"
{ // end of included file marker
					  QCString line = QCString(scanYYtext);
					  int s = line.find(' ');
					  int e = line.find('"',s);
					  yyLineNr = line.mid(s,e-s).toInt();
					  if (scanYYtext[scanYYleng-1]=='\n')
					  {
					    yyLineNr++;
					  }
  					}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 2597 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					  pCopyQuotedGString=pCopyCurlyGString;
					  lastStringContext=YY_START;
					  BEGIN(CopyGString);
					}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 2603 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					  if (insidePHP)
					  {
					    pCopyQuotedGString=pCopyCurlyGString;
					    lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
					}
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 2612 "scanner.l"
{
  					  *pCopyCurlyGString+=*scanYYtext;
					  curlyCount++;
  					}
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 2616 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
					  if (--curlyCount<0)
					    BEGIN(lastCurlyContext); 
  					}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 2621 "scanner.l"
{ if (insidePHP) 
                                          { 
					    REJECT; 
					  } 
					  else 
					  {
					    *pCopyCurlyGString+=scanYYtext; 
					  }
                                        }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 2630 "scanner.l"
{
  					  *pCopyCurlyGString+=scanYYtext;
  					}
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 2633 "scanner.l"
{ *pCopyCurlyGString+=scanYYtext; }
	YY_BREAK
case 271:
/* rule 271 can match eol */
YY_RULE_SETUP
#line 2634 "scanner.l"
{
  					  yyLineNr++;
					  *pCopyCurlyGString+=*scanYYtext;
  					}
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 2638 "scanner.l"
{
					  *pCopyCurlyGString+=*scanYYtext;
  					}
	YY_BREAK
/* ---------------------- */
case 273:
YY_RULE_SETUP
#line 2645 "scanner.l"
{
  					  if (current->type.isEmpty()) // anonymous padding field, e.g. "int :7;"
					  {
					    addType(current);
					    current->name.sprintf("__pad%d__",padCount++);
					  }
  					  BEGIN(BitFields);
					  current->bitfields+=":";
  					}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 2654 "scanner.l"
{
  					  current->bitfields+=*scanYYtext;
  					}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 2657 "scanner.l"
{ 
  					  QCString oldType = current->type.copy();
					  if (current->bodyLine==-1)
					  {
					    current->bodyLine = yyLineNr;
					  }
                                          if ( insidePHP && current->type.left(3) == "var" )
                                          {
                                            current->type = current->type.mid(3);
                                          }
					  if (isTypedef && current->type.left(8)!="typedef ")
					  {
					    current->type.prepend("typedef ");
					  }
					  bool needNewCurrent=FALSE;
					  if (!current->name.isEmpty() && current->section!=Entry::ENUM_SEC)
					  {
					    current->type=current->type.simplifyWhiteSpace();
					    current->args=removeRedundantWhiteSpace(current->args);
					    current->name=current->name.stripWhiteSpace();
					    current->section = Entry::VARIABLE_SEC ;
					    current->fileName = yyFileName;
					    current->startLine = yyLineNr;
					    current_root->addSubEntry( current ) ;
					    needNewCurrent=TRUE;
					  }
					  if ( *scanYYtext == ',')
					  {
					    if (needNewCurrent)
					    {
					      current = new Entry(*current);
					    }
					    current->name.resize(0);
					    current->args.resize(0);
					    current->brief.resize(0);
					    current->doc.resize(0);
					    current->initializer.resize(0);
					    current->bitfields.resize(0);
					    int i=oldType.length(); 
					    while (i>0 && (oldType[i-1]=='*' || oldType[i-1]=='&' || oldType[i-1]==' ')) i--;
					    current->type = oldType.left(i);
					  }
					  else
					  {
					    if (needNewCurrent)
					    {
					      current = new Entry ;
					    }
					    else if (current->groups)
					    {
					      current->groups->clear();
					    }
					    initEntry();
					  }
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 2714 "scanner.l"
{ 
  					  if (!insideCS &&  
					      (current->name.isEmpty() || 
					       current->name=="typedef"
					      )
					     ) // IDL function property
 					  {
          				    squareCount=1;
					    lastSquareContext = YY_START;
					    idlAttr.resize(0);
					    idlProp.resize(0);
					    current->mtype = mtype;
					    BEGIN( IDLAttribute );
					  }
                                          else if (insideCS &&
                                                  current->name.isEmpty())
                                          {
                                            squareCount=1;
                                            lastSquareContext = YY_START;
                                            // Skip the C# attribute
                                            // for this member
                                            current->args.resize(0);
                                            BEGIN( SkipSquare );
                                          }
					  else
					  {
  					    current->args += scanYYtext ;
					    squareCount=1;
					    BEGIN( Array ) ;
					  }
					}
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 2745 "scanner.l"
{
  					  // end of IDL function attribute
					  if (--squareCount<=0)
					  {
					    lineCount();
					    if (current->mtype == Property)
					      BEGIN( IDLPropName );
					    else
					      BEGIN( lastSquareContext );
					  }
					}
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 2756 "scanner.l"
{
                                          if (Config_getBool("IDL_PROPERTY_SUPPORT"))
					  {
					    current->mtype = Property;
					  }
					  current->spec |= Entry::Settable;
					}
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 2763 "scanner.l"
{
                                          if (Config_getBool("IDL_PROPERTY_SUPPORT"))
					  {
					    current->mtype = Property;
					  }
					  current->spec |= Entry::Gettable;
					}
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 2770 "scanner.l"
{
					}
	YY_BREAK
case 281:
/* rule 281 can match eol */
YY_RULE_SETUP
#line 2772 "scanner.l"
{
					  // return type (probably HRESULT) - skip it
					}
	YY_BREAK
case 282:
/* rule 282 can match eol */
YY_RULE_SETUP
#line 2775 "scanner.l"
{
  					  current->name = scanYYtext;
					  current->name = current->name.left(current->name.length()-1).stripWhiteSpace();
  					  current->startLine = yyLineNr;
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 283:
/* rule 283 can match eol */
YY_RULE_SETUP
#line 2781 "scanner.l"
{  // attribute of a parameter
					   idlAttr = scanYYtext;
					   idlAttr=idlAttr.stripWhiteSpace();
					}
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 2785 "scanner.l"
{  // property type
					   idlProp = scanYYtext;
					}
	YY_BREAK
case 285:
/* rule 285 can match eol */
YY_RULE_SETUP
#line 2788 "scanner.l"
{  // Rare: Another parameter ([propput] HRESULT Item(int index, [in] Type theRealProperty);)
					  if (!current->args)
					    current->args = "(";
					  else
					    current->args += ", ";
					  current->args += idlAttr;
					  current->args += " ";
					  current->args += idlProp;	// prop was actually type of extra parameter
					  current->args += " ";
					  current->args += scanYYtext;
					  current->args = current->args.left(current->args.length() - 1);	// strip comma
					  idlProp.resize(0);
					  idlAttr.resize(0);
					  BEGIN( IDLProp );
					}
	YY_BREAK
case 286:
/* rule 286 can match eol */
YY_RULE_SETUP
#line 2803 "scanner.l"
{
					  // the parameter name for the property - just skip.
					}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 2806 "scanner.l"
{
					  current->fileName   = yyFileName;
					  current->type		= idlProp;
  					  current->args       = current->args.simplifyWhiteSpace();
  					  if (current->args)
  					    current->args += ")";
  					  current->name       = current->name.stripWhiteSpace();
					  current->section    = Entry::VARIABLE_SEC;
					  current_root->addSubEntry(current);
					  current             = new Entry;
					  initEntry();
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 2819 "scanner.l"
{ // spaces, *, or other stuff
  					  //idlProp+=scanYYtext;
 					}
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 2822 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 2826 "scanner.l"
{ current->args += *scanYYtext ;
					  if (--squareCount<=0)
	                                     BEGIN( Function ) ;
					}
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 2830 "scanner.l"
{ current->args += *scanYYtext ;
					  squareCount++;	
					}
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 2833 "scanner.l"
{ current->args += *scanYYtext ; }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 2834 "scanner.l"
{ squareCount++; }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 2835 "scanner.l"
{
  					  if (--squareCount<=0)
					    BEGIN( lastSquareContext );
  					}
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 2839 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 2843 "scanner.l"

	YY_BREAK
case 297:
YY_RULE_SETUP
#line 2844 "scanner.l"
{ addType( current ) ;
					  current->type += scanYYtext ;
					  BEGIN( Sharp ) ;
					}
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 2848 "scanner.l"
{ current->type += *scanYYtext ;
					  if (--sharpCount<=0)
	                                     BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 2852 "scanner.l"
{ current->type += *scanYYtext ;
					  sharpCount++;	
					}
	YY_BREAK
case 300:
/* rule 300 can match eol */
YY_RULE_SETUP
#line 2855 "scanner.l"
{
  					  lineCount();
					}
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 2858 "scanner.l"
{ current->type += *scanYYtext ; }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 2859 "scanner.l"
{
  					  current->bodyLine = yyLineNr;
  					  current->name     = scanYYtext;
					}
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 2863 "scanner.l"
{
  					  // Java enum initializer
  					  unput('(');
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 2870 "scanner.l"
{
  					  lastInitializerContext = YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					}
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 2875 "scanner.l"
{
  					  if (insideJava)  // last enum field in Java class
					  {
					    if (!current->name.isEmpty())
					    {
					      current->fileName   = yyFileName;
					      current->startLine  = yyLineNr;
					      current->type       = "@"; // enum marker
					      current->args       = current->args.simplifyWhiteSpace();
					      current->name       = current->name.stripWhiteSpace();
					      current->section    = Entry::VARIABLE_SEC;
					      current_root->addSubEntry(current);
					      current             = new Entry ;
					      initEntry();
					    }

					    // TODO: skip until the end of the scope
					    BEGIN( SkipRemainder );
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 306:
/* rule 306 can match eol */
YY_RULE_SETUP
#line 2899 "scanner.l"
{ 
                                          yyLineNr++;
                                        }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 2902 "scanner.l"

	YY_BREAK
case 308:
YY_RULE_SETUP
#line 2903 "scanner.l"
{
					  //printf("adding `%s' `%s' `%s' to enum `%s' (mGrpId=%d)\n",
					  //     current->type.data(), current->name.data(),
					  //     current->args.data(), current_root->name.data(),current->mGrpId);
  					  if (!current->name.isEmpty())
					  {
					    current->fileName   = yyFileName;
					    current->startLine  = yyLineNr;
					    current->type       = "@"; // enum marker
  					    current->args       = current->args.simplifyWhiteSpace();
  					    current->name       = current->name.stripWhiteSpace();
					    current->section    = Entry::VARIABLE_SEC;
					    // add to the scope of the enum
					    current_root->addSubEntry(current);
					    if (!insideCS && !insideJava) // for C# and Java 1.5+ enum values always have to be explicitly qualified
					    {
					      current             = new Entry(*current);
					      // add to the scope surrounding the enum (copy!)
					      current_root->parent()->addSubEntry(current);
					    }
					    current             = new Entry ;
					    initEntry();
					  }
					  else // probably a redundant , 
					  {
				     	    current->reset();
					  }
  					}
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 2931 "scanner.l"
{ // attribute list in IDL
					  squareCount=1;
					  lastSquareContext = YY_START;
					  BEGIN(SkipSquare);
  					}
	YY_BREAK
/*
<FindFieldArg>","			{ unput(*scanYYtext); BEGIN(FindFields); }
  */
case 310:
YY_RULE_SETUP
#line 2939 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 2940 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 2941 "scanner.l"
{ if (!insidePHP) 
					    REJECT;
					  // append PHP comment.
					  current->program += scanYYtext ;
					}
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 2946 "scanner.l"
{ current->program += scanYYtext ; 
                                          pSkipVerbString = &current->program;
                                          lastSkipVerbStringContext=YY_START;
                                          BEGIN( SkipVerbString );
					}
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 2951 "scanner.l"
{ current->program += scanYYtext ; 
                                          pCopyQuotedGString = &current->program;
                                          lastStringContext=YY_START;
                                          BEGIN( CopyGString );
					}
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 2956 "scanner.l"
{ current->program += scanYYtext ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 316:
/* rule 316 can match eol */
YY_RULE_SETUP
#line 2960 "scanner.l"
{ current->program += scanYYtext ;
					  ++yyLineNr ;
					  lastContext = YY_START ;
					  BEGIN( Comment ) ;
					}
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 2965 "scanner.l"
{
  					  if (!insidePHP)
					  {
					    current->program += scanYYtext;
					  }
					  else
					  { // begin of single quoted string
					    current->program += scanYYtext;
                                            pCopyQuotedGString = &current->program;
                                            lastStringContext=YY_START;
					    BEGIN(CopyPHPGString);
					  }
  					}
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 2978 "scanner.l"
{ 
                                              if (insidePHP) 
					      {
						REJECT; // for PHP code single quotes 
					                // are used for strings of arbitrary length
					      }
					      else
					      {
                                                current->program += scanYYtext; 
					      }
                                            }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 2989 "scanner.l"
{ current->program += scanYYtext ;
					  ++curlyCount ;
					}
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 2992 "scanner.l"
{
					  current->program += scanYYtext ;
					  --curlyCount ;
  					}
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 2996 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    //printf("cn=`%s' rn=`%s'\n",cn.data(),rn.data());
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    if (isTypedef && cn.isEmpty())
					    {
					      //printf("Typedef Name\n");
					      BEGIN( TypedefName );
					    }
					    else
					    {
					      if (current->section == Entry::ENUM_SEC)
					      {
					        current->program+=','; // add field terminator
					      }
					      // add compound definition to the tree
					      current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
  					      current->type = current->type.simplifyWhiteSpace();
  					      current->name = current->name.stripWhiteSpace();
					      //printf("adding `%s' `%s' `%s' brief=%s insideObjC=%d %x\n",current->type.data(),current->name.data(),current->args.data(),current->brief.data(),insideObjC,current->section);
					      if (insideObjC && 
						  ((current->spec&Entry::Interface) || (current->spec==Entry::Category))
						 ) // method definition follows
					      {
				                BEGIN( ReadBodyIntf ) ;
					      }
					      else
					      {
					        current_root->addSubEntry( current ) ;
					        memspecEntry = current;
						current = new Entry(*current);
						if (current->section==Entry::NAMESPACE_SEC || 
						    (current->spec==Entry::Interface) ||
						    insideJava || insidePHP || insideCS || insideD || insideJS
						   )
						{ // namespaces and interfaces and java classes ends with a closing bracket without semicolon
						  current->reset();
						  initEntry();
						  memspecEntry = 0;
						  BEGIN( FindMembers ) ;
						}
						else
						{
						  //current->doc.resize(0);
						  //current->brief.resize(0);
						  BEGIN( MemberSpec ) ;
						}
					      }
					    }
					  }
					}
	YY_BREAK
case 322:
/* rule 322 can match eol */
YY_RULE_SETUP
#line 3060 "scanner.l"
{ //err("ReadBody count=%d\n",curlyCount);
					  lineCount();
  					  if ( curlyCount>0 )
					  {
					    current->program += scanYYtext ;
					    --curlyCount ;
					  }
					  else
					  {
					    isTypedef = TRUE;
					    current->endBodyLine = yyLineNr;
					    QCString &cn = current->name;
					    QCString rn = current_root->name.copy();
					    if (!cn.isEmpty() && !rn.isEmpty())
					    {
					      prependScope();
					    }
					    BEGIN( TypedefName );
					  }
					}
	YY_BREAK
case 323:
/* rule 323 can match eol */
YY_RULE_SETUP
#line 3080 "scanner.l"
{ // late "const" or "volatile" keyword
					  lineCount();
  					  current->type.prepend(scanYYtext);
  					}
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 3084 "scanner.l"
{
  					  if (current->section == Entry::ENUM_SEC)
					  {
					    current->program+=","; // add field terminator
					  }
  				          current->name=scanYYtext;
					  prependScope();
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  //printf("Adding compound %s %s %s\n",current->type.data(),current->name.data(),current->args.data());
					  current_root->addSubEntry( current ) ;
					  if (!firstTypedefEntry)
					  {
					    firstTypedefEntry = current;
					  }
					  current = new Entry;
					  initEntry();
					  isTypedef=TRUE; // to undo reset by initEntry()
  					  BEGIN(MemberSpecSkip); 
  					}
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 3104 "scanner.l"
{ /* typedef of anonymous type */
					  current->name.sprintf("@%d",anonCount++);
					  if (current->section == Entry::ENUM_SEC)
					  {
					    current->program+=','; // add field terminator
					  }
					  // add compound definition to the tree
  					  current->args = current->args.simplifyWhiteSpace();
  					  current->type = current->type.simplifyWhiteSpace();
					  current_root->addSubEntry( current ) ;
					  memspecEntry = current;
					  current = new Entry(*current);
					  unput(';');
					  BEGIN( MemberSpec ) ;
  					}
	YY_BREAK
case 326:
/* rule 326 can match eol */
YY_RULE_SETUP
#line 3119 "scanner.l"
{ // the [] part could be improved.
  					  lineCount();
  					  int i=0,l=scanYYleng,j;
					  while (i<l && (!isId(scanYYtext[i]))) i++;
					  msName = QCString(scanYYtext).right(l-i).stripWhiteSpace();
					  j=msName.find("[");
					  if (j!=-1) 
					  {
					    msArgs=msName.right(msName.length()-j);
					    msName=msName.left(j);
					  }
					  msType=QCString(scanYYtext).left(i);

					  // handle *pName in: typedef { ... } name, *pName;
					  if (firstTypedefEntry) 
					  {
					    if (firstTypedefEntry->spec&Entry::Struct)
					    {
					      msType.prepend("struct "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->spec&Entry::Union)
					    {
					      msType.prepend("union "+firstTypedefEntry->name);
					    }
					    else if (firstTypedefEntry->section==Entry::ENUM_SEC)
					    {
					      msType.prepend("enum "+firstTypedefEntry->name);
					    }
					    else
					    {
					      msType.prepend(firstTypedefEntry->name);
					    }
					  }
					}
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 3153 "scanner.l"
{
                                          //printf("current->name=`%s' msName=`%s'\n",current->name.data(),msName.data());
  					  if (msName.isEmpty() && !current->name.isEmpty())
					  { 
					    // see if the compound does not have a name or is inside another
					    // annonymous compound. If so we insert a 
					    // special `annonymous' variable.
					    //Entry *p=current_root;
					    Entry *p=current;
					    while (p)
					    {
					      // only look for class scopes, not namespace scopes
					      if ((p->section & Entry::COMPOUND_MASK) && !p->name.isEmpty())
					      {
						//printf("Trying scope `%s'\n",p->name.data());
						int i=p->name.findRev("::");
						int pi = (i==-1) ? 0 : i+2;
						if (p->name.at(pi)=='@')
						{
						  // annonymous compound inside -> insert dummy variable name
						  //printf("Adding annonymous variable for scope %s\n",p->name.data());
						  msName.sprintf("@%d",anonCount++); 
						  break;
						}
					      }
					      //p=p->parent;
					      if (p==current) p=current_root; else p=p->parent();
					    }
					  }
					  //printf("msName=%s current->name=%s\n",msName.data(),current->name.data());
					  if (!msName.isEmpty() && msName!=current->name) // skip typedef T {} T;
					  {
					    static bool typedefHidesStruct = Config_getBool("TYPEDEF_HIDES_STRUCT");
					    // case 1: typedef struct _S { ... } S_t; 
					    // -> omit typedef and use S_t as the struct name
					    if (typedefHidesStruct && 
						isTypedef && 
						((current->spec&(Entry::Struct|Entry::Union)) ||
						 current->section==Entry::ENUM_SEC )&&
						msType.stripWhiteSpace().isEmpty() && 
						memspecEntry)
					    {
					      memspecEntry->name=msName;
					    }
					    else // case 2: create a typedef field
					    {
					      Entry *varEntry=new Entry;
					      varEntry->protection = current->protection ;
					      varEntry->mtype = current->mtype;
					      varEntry->virt = current->virt;
					      varEntry->stat = current->stat;
					      varEntry->section = Entry::VARIABLE_SEC;
					      varEntry->name = msName.stripWhiteSpace();
					      varEntry->type = current->type.simplifyWhiteSpace()+" ";
					      varEntry->args = msArgs; 
					      if (isTypedef)
					      {
						varEntry->type.prepend("typedef ");
						//  //printf("current->name = %s %s\n",current->name.data(),msName.data());
					      }
					      if (typedefHidesStruct &&
						  isTypedef &&
						  (current->spec&(Entry::Struct|Entry::Union)) &&
						  memspecEntry
						 ) // case 1: use S_t as type for pS_t in "typedef struct _S {} S_t, *pS_t;"
					      {
						varEntry->type+=memspecEntry->name+msType;
					      }
					      else // case 2: use _S as type for for pS_t
					      {
						varEntry->type+=current->name+msType;
					      }
					      varEntry->fileName = yyFileName;
					      varEntry->startLine = yyLineNr;
					      varEntry->doc = current->doc.copy();
					      varEntry->brief = current->brief.copy();
					      varEntry->mGrpId = current->mGrpId;

					      // deep copy group list
					      QListIterator<Grouping> gli(*current->groups);
					      Grouping *g;
					      for (;(g=gli.current());++gli)
					      {
						varEntry->groups->append(new Grouping(*g));
					      }
					      if (current->sli) // copy special list items
					      {
						QListIterator<ListItemInfo> li(*current->sli);
						ListItemInfo *lii;
						for (li.toFirst();(lii=li.current());++li)
						{
						  varEntry->addSpecialListItem(lii->type,lii->itemId);
						}
					      }

					      //printf("Add: type=`%s',name=`%s',args=`%s' brief=%s doc=%s\n",
					      //      varEntry->type.data(),varEntry->name.data(),
					      //      varEntry->args.data(),varEntry->brief.data(),varEntry->doc.data());
					      current_root->addSubEntry(varEntry);
					    }
					  }
					  if (*scanYYtext==';')
					  {
					    msType.resize(0);
					    msName.resize(0);
					    msArgs.resize(0);
					    isTypedef=FALSE;
					    firstTypedefEntry=0;
					    memspecEntry=0;
					    current->reset();
					    initEntry();
					    BEGIN( FindMembers );
					  }
					  else
					  {
					    current->doc.resize(0);
					    current->brief.resize(0);
					  }
  					}
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 3272 "scanner.l"
{ 
  					  lastInitializerContext=YY_START;
					  initBracketCount=0;
  					  BEGIN(ReadInitializer);
  					  /* BEGIN(MemberSpecSkip); */
					}
	YY_BREAK
/*
<MemberSpecSkip>"{"			{
  					  curlyCount=0;
					  lastCurlyContext = MemberSpecSkip;
					  previous = current;
  					  BEGIN(SkipCurly);
  					}
  */
case 329:
YY_RULE_SETUP
#line 3286 "scanner.l"
{ BEGIN(MemberSpec); }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 3287 "scanner.l"
{ unput(';'); BEGIN(MemberSpec); }
	YY_BREAK
case 331:
/* rule 331 can match eol */
YY_RULE_SETUP
#line 3288 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 332:
/* rule 332 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3291 "scanner.l"
{ // end of Objective C block
					  current_root->addSubEntry( current ) ;
  					  current=new Entry;
					  initEntry();
					  insideObjC=FALSE;
					  BEGIN( FindMembers ); 
  					}
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 3298 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 334:
/* rule 334 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 3301 "scanner.l"
case 335:
/* rule 335 can match eol */
YY_RULE_SETUP
#line 3301 "scanner.l"
{   /* typedef void (A::*ptr_t)(args...) or int (*func(int))[] */
  					  if (insidePHP) // reference parameter
					  {
					    REJECT
					  }
					  else
					  {
					    current->bodyLine = yyLineNr;
					    lineCount();
					    addType(current);
					    funcPtrType=scanYYtext;
					    roundCount=0;
					    //current->type += scanYYtext;
					    BEGIN( FuncPtr );
					  }
  					}
	YY_BREAK
case 336:
/* rule 336 can match eol */
YY_RULE_SETUP
#line 3317 "scanner.l"
{
  					  current->name = scanYYtext;
					  if (nameIsOperator(current->name))
					  {
					    BEGIN( FuncPtrOperator );
					  }
					  else
					  {
					    if (current->name=="const" || current->name=="volatile")
					    {
					      funcPtrType += current->name;
					    }
					    else
					    {
					      BEGIN( EndFuncPtr );
					    }
					  }
  					}
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 3335 "scanner.l"
{
  					  //printf("Error: FuncPtr `%c' unexpected at line %d of %s\n",*scanYYtext,yyLineNr,yyFileName);
  					}
	YY_BREAK
case 338:
/* rule 338 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3338 "scanner.l"
{
  					  current->name += scanYYtext;
					  current->name = current->name.simplifyWhiteSpace();
					  lineCount();
  					}
	YY_BREAK
case 339:
/* rule 339 can match eol */
YY_RULE_SETUP
#line 3343 "scanner.l"
{
                                          yyLineNr++;
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 3347 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN( EndFuncPtr );
                                        }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 3351 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 342:
/* rule 342 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3354 "scanner.l"
{ // a variable with extra braces
 					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 343:
/* rule 343 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3359 "scanner.l"
{ // a function pointer
  					  lineCount();
					  current->type+=funcPtrType+")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 344:
/* rule 344 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3364 "scanner.l"
{ // an array of variables
  					  lineCount();
					  current->type+=funcPtrType.data();
					  current->args += ")";
					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 3370 "scanner.l"
{ // a function returning a function or 
                                          // a function returning a pointer to an array
  					  current->args += *scanYYtext ;
					  //roundCount=0;
					  //BEGIN( FuncFunc );
					  current->bodyLine = yyLineNr;
					  currentArgumentContext = FuncFuncEnd;
					  fullArgString=current->args.copy();
					  copyArgString=&current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 3381 "scanner.l"
{
  					  funcPtrType+=scanYYtext;
  					}
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 3384 "scanner.l"
{
  					  BEGIN(FindMembers);
  					}
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 3387 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  ++roundCount;
					}
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 3391 "scanner.l"
{
  					  current->args += *scanYYtext ;
  					  if ( roundCount )
					    --roundCount;
					  else
					  {
					    BEGIN(FuncFuncEnd);
					  }
  					}
	YY_BREAK
case 350:
/* rule 350 can match eol */
YY_RULE_SETUP
#line 3400 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType+")(";
					  BEGIN(FuncFuncType);
  					}
	YY_BREAK
case 351:
/* rule 351 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3405 "scanner.l"
{
  					  lineCount();
					  current->type+=funcPtrType.data()+1;
  					  BEGIN(Function);
  					}
	YY_BREAK
case 352:
/* rule 352 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3410 "scanner.l"
{ // function returning a pointer to an array
                                          lineCount();
					  current->type+=funcPtrType;
					  current->args+=")";
					  BEGIN(FuncFuncArray);
  					}
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 3416 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 3419 "scanner.l"
{
  					  current->type += *scanYYtext;
					  roundCount++;
  					}
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 3423 "scanner.l"
{
  					  current->type += *scanYYtext;
  					  if (roundCount)
					    --roundCount;
					  else
					    BEGIN(Function);
					}
	YY_BREAK
case 356:
/* rule 356 can match eol */
YY_RULE_SETUP
#line 3430 "scanner.l"
{ lineCount() ; current->type += ", " ; }
	YY_BREAK
case 357:
/* rule 357 can match eol */
YY_RULE_SETUP
#line 3431 "scanner.l"
{ lineCount() ; current->type += ' ' ; }
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 3432 "scanner.l"
{
  					  current->type += *scanYYtext;
  					}
	YY_BREAK
case 359:
/* rule 359 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3435 "scanner.l"
{ // for catching typedef void (__stdcall *f)() like definitions
                                          if (current->type.left(7)=="typedef" && current->bodyLine==-1) 
					    // the bodyLine check is to prevent this guard to be true more than once
					  {
  					    current->bodyLine = yyLineNr;
					    BEGIN( GetCallType );
					  }
					  else if (!current->name.isEmpty()) // normal function
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments!\n");
					  }
					}
	YY_BREAK
case 360:
/* rule 360 can match eol */
YY_RULE_SETUP
#line 3453 "scanner.l"
{
  					  lineCount();
  					  addType(current);
					  funcPtrType="(";
					  funcPtrType+=scanYYtext;
					  roundCount=0;
					  BEGIN( FuncPtr );
  					}
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 3461 "scanner.l"
{ 
                                          if (!current->name.isEmpty())
					  {
					    current->args = scanYYtext;
					    current->bodyLine = yyLineNr;
					    currentArgumentContext = FuncQual;
					    fullArgString=current->args.copy();
					    copyArgString=&current->args;
					    BEGIN( ReadFuncArgType ) ;
					    //printf(">>> Read function arguments current->argList->count()=%d\n",current->argList->count());
					  }
					}
	YY_BREAK
/*
<FindMembers>"("{BN}*("void"{BN}*)?")"	{
  					  lineCount();
  					  current->args = "()"; 
  					  BEGIN( FuncQual );
  					}
  */
/*- Function argument reading rules ---------------------------------------*/
case 362:
YY_RULE_SETUP
#line 3483 "scanner.l"
{ *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 3486 "scanner.l"
{ *copyArgString+=scanYYtext; 
					  fullArgString+=scanYYtext;
					}
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 3489 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 365:
/* rule 365 can match eol */
YY_RULE_SETUP
#line 3493 "scanner.l"
{
  					  *copyArgString+=" ";
  					  fullArgString+=" ";
  					  lineCount();
  					}
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 3498 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  lastCopyArgStringContext = YY_START;
  					  BEGIN( CopyArgString );
  					}
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 3504 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
  					  argRoundCount=0; 
					  lastCopyArgContext = YY_START;
					  BEGIN( CopyArgRound ); 
  					}
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 3511 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  stringToArgumentList(fullArgString,current->argList);
					  if (insideJS)
					  {
					    fixArgumentListForJavaScript(current->argList);
					  }
                                          handleParametersCommentBlocks(current->argList);

					  /* remember the current documentation block, since
					     we could overwrite it with the documentation of
					     a function argument, which we then have to correct later
					     on
					   */
					  docBackup = current->doc;
					  briefBackup = current->brief;

					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
/* a special comment */
case 369:
YY_RULE_SETUP
#line 3532 "scanner.l"
{ 
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>=0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks(current->argList);
					    BEGIN( currentArgumentContext );
					  }
					  else // not a define
					  {
					    // for functions we interpret a comment
					    // as documentation for the argument
					    fullArgString+=scanYYtext;
					    lastCopyArgChar=0;
					    lastCommentInArgContext=YY_START;
					    if (scanYYtext[1]=='/')
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
/* a non-special comment */
case 370:
YY_RULE_SETUP
#line 3559 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipComment );
  					}
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 3563 "scanner.l"
{
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
	YY_BREAK
/*
<ReadFuncArgType,ReadTempArgs>"'#"	{ if (insidePHP)
                                            REJECT;
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					}
<ReadFuncArgType,ReadTempArgs>"#"	{
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START;
					  BEGIN( SkipCxxComment );
  					}
  */
/* `)' followed by a special comment */
case 372:
/* rule 372 can match eol */
YY_RULE_SETUP
#line 3581 "scanner.l"
{
  					  lineCount();
                                          if (currentArgumentContext==DefineEnd)
					  {
					    // for defines we interpret a comment
					    // as documentation for the define 
					    int i;for (i=scanYYleng-1;i>0;i--)
					    {
					      unput(scanYYtext[i]);
					    }
					    *copyArgString+=*scanYYtext;
					    fullArgString+=*scanYYtext;
					    stringToArgumentList(fullArgString,current->argList);
                                            handleParametersCommentBlocks(current->argList);
					    BEGIN( currentArgumentContext );
					  }
					  else
					  {
					    // for functions we interpret a comment
					    // as documentation for the last argument
					    lastCopyArgChar=*scanYYtext;
					    QCString text=&scanYYtext[1];
					    text=text.stripWhiteSpace();
					    lastCommentInArgContext=YY_START;
					    fullArgString+=text;
					    if (text.find("//")!=-1)
					      BEGIN( CopyArgCommentLine );
					    else
					      BEGIN( CopyArgComment );
					  }
  					}
	YY_BREAK
case 373:
/* rule 373 can match eol */
YY_RULE_SETUP
#line 3612 "scanner.l"

	YY_BREAK
case 374:
YY_RULE_SETUP
#line 3613 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 3614 "scanner.l"
{ fullArgString+=scanYYtext; 
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar); 
                                          BEGIN( lastCommentInArgContext ); 
					}
	YY_BREAK
case 376:
/* rule 376 can match eol */
YY_RULE_SETUP
#line 3619 "scanner.l"
{ fullArgString+=scanYYtext;
  					  yyLineNr++;
  					  if (lastCopyArgChar!=0)
					    unput(lastCopyArgChar);
					  BEGIN( lastCommentInArgContext );
  					}
	YY_BREAK
case 377:
/* rule 377 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3625 "scanner.l"
{ // verbatim command (which could contain nested comments!)
				          docBlockName=&scanYYtext[1];
  					  fullArgString+=scanYYtext;
					  BEGIN(CopyArgVerbatim);
  					}
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 3630 "scanner.l"
{
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='[')
					  {
				            docBlockName.at(1)='}';
					  }
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  fullArgString+=scanYYtext;
  					  BEGIN(CopyArgVerbatim);
                                        }
	YY_BREAK
case 379:
/* rule 379 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 3643 "scanner.l"
{ // end of verbatim block
  					  fullArgString+=scanYYtext;
				          if (scanYYtext[1]=='f') // end of formula
				          {
				            BEGIN(CopyArgCommentLine);
				          }
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(CopyArgCommentLine);
					  }
  					}
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 3654 "scanner.l"
{ fullArgString+=scanYYtext; }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 3655 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 382:
/* rule 382 can match eol */
YY_RULE_SETUP
#line 3656 "scanner.l"
{ fullArgString+=*scanYYtext; yyLineNr++; }
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 3657 "scanner.l"
{ fullArgString+=*scanYYtext; }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 3658 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "Warning: Ignoring %cbrief command inside argument documentation",*scanYYtext
					     );
                                          fullArgString+=' ';
                                        }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 3664 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  argSharpCount=1;
					  BEGIN( CopyArgSharp );
					}
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 3670 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  //printf("end template list %s\n",copyArgString->data());
					  stringToArgumentList(fullArgString,currentArgumentList);
					  BEGIN( currentArgumentContext );
					}
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 3677 "scanner.l"
{
  					  argRoundCount++;
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 3682 "scanner.l"
{
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
					  if (argRoundCount>0) 
					    argRoundCount--;
					  else 
					    BEGIN( lastCopyArgContext );
  					}
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 3690 "scanner.l"
{
  					  argSharpCount++;
					  //printf("argSharpCount++=%d  copy\n",argSharpCount);
					  *copyArgString+=*scanYYtext;
					  fullArgString+=*scanYYtext;
  					}
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 3696 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  argSharpCount--;
					  if (argSharpCount>0)
					  {
					    //printf("argSharpCount--=%d copy\n",argSharpCount);
					  }
					  else
					  {
					    BEGIN( ReadTempArgs );
					    //printf("end of argSharpCount\n");
					  }
  					}
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 3710 "scanner.l"
{
  					  *copyArgString+=scanYYtext;
  					  fullArgString+=scanYYtext;
  					}
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 3714 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 3719 "scanner.l"
{
  					  *copyArgString+=*scanYYtext;
  					  fullArgString+=*scanYYtext;
					  BEGIN( lastCopyArgStringContext );
  					}
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 3724 "scanner.l"
{ 
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
  					    *copyArgString+=scanYYtext; 
  					    fullArgString+=scanYYtext; 
					  }
					}
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 3735 "scanner.l"
{ 
  					  *copyArgString+=scanYYtext; 
  					  fullArgString+=scanYYtext; 
					  if (insidePHP)
					  {
					    lastCopyArgStringContext=YY_START;
					    BEGIN(CopyArgPHPString);
					  }
  					}
	YY_BREAK
case 396:
/* rule 396 can match eol */
YY_RULE_SETUP
#line 3744 "scanner.l"
{ 
  					  yyLineNr++; 
					  *copyArgString+=*scanYYtext; 
					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 3749 "scanner.l"
{ 
  					  *copyArgString+=*scanYYtext; 
  					  fullArgString+=*scanYYtext; 
					}
	YY_BREAK
/*------------------------------------------------------------------------*/
case 398:
YY_RULE_SETUP
#line 3759 "scanner.l"
{ current->args += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 3762 "scanner.l"
{ current->args += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
/*
<FuncQual>"#"				{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}
  */
case 400:
YY_RULE_SETUP
#line 3775 "scanner.l"
{
                                          if ( strcmp(scanYYtext,";")==0 && 
					       insidePHP && 
					       !containsWord(current->type,"function") )
                                          {
                                            current->reset();
                                            initEntry();
                                            BEGIN( FindMembers );
                                          }
                                          else
                                          {
                                            unput(*scanYYtext); BEGIN( Function );
                                          }
                                        }
	YY_BREAK
case 401:
/* rule 401 can match eol */
YY_RULE_SETUP
#line 3789 "scanner.l"
{ // pure virtual member function
                                          lineCount() ; 
                                          current->virt = Pure;
                                          current->args += " override "; 
                                        }
	YY_BREAK
case 402:
/* rule 402 can match eol */
YY_RULE_SETUP
#line 3794 "scanner.l"
{ // overridden virtual member function
                                          lineCount() ; 
                                          current->spec |= Entry::Override;
                                          current->args += " override "; 
                                        }
	YY_BREAK
case 403:
/* rule 403 can match eol */
YY_RULE_SETUP
#line 3799 "scanner.l"
{ // sealed member function
                                          lineCount() ; 
                                          current->spec |= Entry::Sealed;
                                          current->args += " sealed "; 
                                        }
	YY_BREAK
case 404:
/* rule 404 can match eol */
YY_RULE_SETUP
#line 3804 "scanner.l"
{ // new member function
                                          lineCount() ; 
                                          current->spec |= Entry::New;
                                          current->args += " new "; 
                                        }
	YY_BREAK
case 405:
/* rule 405 can match eol */
YY_RULE_SETUP
#line 3809 "scanner.l"
{ // const member function
  					  lineCount() ; 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 406:
/* rule 406 can match eol */
YY_RULE_SETUP
#line 3814 "scanner.l"
{ // volatile member function
  					  lineCount() ; 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 407:
/* rule 407 can match eol */
YY_RULE_SETUP
#line 3819 "scanner.l"
{ // pure virtual member function
  					  lineCount() ; 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 408:
/* rule 408 can match eol */
YY_RULE_SETUP
#line 3825 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ", " ; 
					}
	YY_BREAK
case 409:
/* rule 409 can match eol */
YY_RULE_SETUP
#line 3829 "scanner.l"
{ 
  					  lineCount() ; 
					  current->args += ' ' ; 
					}
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 3833 "scanner.l"
{ if (insidePHP)
  					    REJECT;
  					  lastCPPContext = YY_START;
  					  BEGIN(SkipCPP);
					}	
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 3838 "scanner.l"
{ 
                                          if (insideCli && 
					      (current_root->section&Entry::COMPOUND_MASK) 
					     )
					  {
					    BEGIN(CliOverride);
					  }
					  else
					  {
                                            // typically an initialized function pointer
  					    lastInitializerContext=YY_START;
					    initBracketCount=0;
  					    BEGIN(ReadInitializer);
					  }
  					}
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 3853 "scanner.l"
{
  					}
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 3855 "scanner.l"
{ 
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 414:
/* rule 414 can match eol */
YY_RULE_SETUP
#line 3859 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 3862 "scanner.l"
{
  					}
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 3864 "scanner.l"
{
  					  unput(*scanYYtext);
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 3868 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					  pCopyQuotedString=&current->args;
					  lastStringContext=FuncPtrInit;
					  BEGIN(CopyString);
					}
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 3874 "scanner.l"
{
                                          current->args += *scanYYtext; 
					  if (insidePHP)
					  {
					    pCopyQuotedString=&current->args;
					    lastStringContext=FuncPtrInit;
					    BEGIN(CopyPHPString);
					  }
					}
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 3883 "scanner.l"
{
                                          if (insidePHP)
					  {
					    REJECT;
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 3893 "scanner.l"
{
                                          current->args += scanYYtext; 
					}
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 3896 "scanner.l"
{
                                          current->args += *scanYYtext; 
  					}
	YY_BREAK
case 422:
/* rule 422 can match eol */
YY_RULE_SETUP
#line 3899 "scanner.l"
{
                                          current->args += *scanYYtext; 
					  yyLineNr++;
  					}
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 3903 "scanner.l"
{ // typically a K&R style C function
                                          if (insideCS && strcmp(scanYYtext,"where")==0)
					  { 
					    // type contraint for a method
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else if (checkForKnRstyleC())
					  {
					    //fprintf(stderr,"===> got a K&R style function\n");
                                            current->args = scanYYtext; 
					    oldStyleArgType.resize(0);
					    BEGIN(OldStyleArgs);
					  }
					  else
					  {
                                            current->args += scanYYtext; 
					  }
  					}
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 3925 "scanner.l"
{
  					  QCString oldStyleArgPtr;
  					  QCString oldStyleArgName;
					  splitKnRArg(oldStyleArgPtr,oldStyleArgName);
					  QCString doc,brief;
					  if (current->doc!=docBackup)
					  {
                                            doc=current->doc.copy();
					    current->doc=docBackup;
					  }
					  if (current->brief!=briefBackup)
					  {
                                            brief=current->brief.copy();
					    current->brief=briefBackup;
					  }
					  addKnRArgInfo(oldStyleArgType+oldStyleArgPtr,
					                oldStyleArgName,brief,doc);
					  current->args.resize(0);
					  if (*scanYYtext==';') oldStyleArgType.resize(0);
  					}
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 3945 "scanner.l"
{ current->args += scanYYtext; }
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 3946 "scanner.l"
{
  					  current->args = argListToString(current->argList);
  					  unput('{');
					  BEGIN(FuncQual);
  					}
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 3951 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 3952 "scanner.l"
{ current->args += *scanYYtext; }
	YY_BREAK
case 429:
/* rule 429 can match eol */
YY_RULE_SETUP
#line 3953 "scanner.l"
{ /* try-function-block */ 
					  insideTryBlock=TRUE;
					  lineCount();
					}
	YY_BREAK
case 430:
/* rule 430 can match eol */
YY_RULE_SETUP
#line 3957 "scanner.l"
{ // C++ style throw clause
  					  current->exception = " throw (" ;
					  roundCount=0;
					  lineCount() ;
					  BEGIN( ExcpRound ) ;
					}
	YY_BREAK
case 431:
/* rule 431 can match eol */
YY_RULE_SETUP
#line 3963 "scanner.l"
{
  					  current->exception = " raises (" ;
					  lineCount() ;
					  roundCount=0;
					  BEGIN( ExcpRound ) ;
  					}
	YY_BREAK
case 432:
/* rule 432 can match eol */
YY_RULE_SETUP
#line 3969 "scanner.l"
{ // Java style throw clause
  					  current->exception = " throws " ;
					  lineCount() ;
					  BEGIN( ExcpList );
  					}
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 3974 "scanner.l"
{ current->exception += *scanYYtext ;
					  ++roundCount ;
					}
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 3977 "scanner.l"
{ current->exception += *scanYYtext ; 
					  if ( roundCount )
					    --roundCount ;
				          else
					    BEGIN( FuncQual ) ;
					}
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 3983 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 3986 "scanner.l"
{
  					  unput('{'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 3989 "scanner.l"
{
  					  unput(';'); BEGIN( FuncQual );
  					}
	YY_BREAK
case 438:
/* rule 438 can match eol */
YY_RULE_SETUP
#line 3992 "scanner.l"
{
  					  current->exception += ' ';
					  yyLineNr++;
  					}
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 3996 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 3999 "scanner.l"
{ current->type += current->name ;
					  current->name  = current->args ;
					  current->args  = scanYYtext ;
					  roundCount=0;
					  BEGIN( FuncRound ) ;
					}
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 4005 "scanner.l"
{
  					  if (!insidePHP) BEGIN(SkipInits);
  					}
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 4008 "scanner.l"
{ 
					  current->name=current->name.simplifyWhiteSpace();
  					  current->type=current->type.simplifyWhiteSpace();
					  current->args=removeRedundantWhiteSpace(current->args);
					                // was: current->args.simplifyWhiteSpace();
					  current->fileName = yyFileName;
					  current->startLine = yyLineNr;
					  static QRegExp re("([^)]*\\[*&][^)]*)"); // (...*...)
					  if (*scanYYtext!=';' || (current_root->section&Entry::COMPOUND_MASK) )
					  {
					    int tempArg=current->name.find('<');
					    QCString tempName;
					    if (tempArg==-1) tempName=current->name; else tempName=current->name.left(tempArg);
					    if (!current->type.isEmpty() &&
						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
					    {
					      //printf("Scanner.l: found in class variable: `%s' `%s' `%s'\n", current->type.data(),current->name.data(),current->args.data());
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    else	      
					    {
					      //printf("Scanner.l: found in class function: `%s' `%s' `%s'\n", current->type.data(),current->name.data(),current->args.data());
					      current->section = Entry::FUNCTION_SEC ;
			                      current->proto = *scanYYtext==';';
					    }
					  }
					  else // a global function prototype or function variable
					  {
					    //printf("Scanner.l: prototype? type=`%s' name=`%s' args=`%s'\n",current->type.data(),current->name.data(),current->args.data());
					    if (!current->type.isEmpty() && 
						(current->type.find(re,0)!=-1 || current->type.left(8)=="typedef "))
					    {
					      //printf("Scanner.l: found function variable!\n");
					      current->section = Entry::VARIABLE_SEC;
					    }
					    else
					    {
					      //printf("Scanner.l: found prototype\n");
					      current->section = Entry::FUNCTION_SEC;
					      current->proto = TRUE;
					    }
					  }
					  //printf("Adding entry `%s'\n",current->name.data());
					  if ( insidePHP)
					  {
					    if (findAndRemoveWord(current->type,"final"))
					    {
					      current->spec |= Entry::Final;
					    }
					    if (findAndRemoveWord(current->type,"abstract"))
					    {
					      current->spec |= Entry::Abstract;
					    }
					  }
					  if ( insidePHP && !containsWord(current->type,"function"))
					  {
					    initEntry();
					    if ( *scanYYtext == '{' )
					    {
					      lastCurlyContext = FindMembers;
					      curlyCount=0;
					      BEGIN( SkipCurly );
					    }
					    else
					    {
					      BEGIN( FindMembers );
					    }
					  }
					  else
					  {
					    if ( insidePHP)
					    {
					      findAndRemoveWord(current->type,"function");
					    }
					    previous = current;
					    current_root->addSubEntry(current);
					    current = new Entry ;
					    initEntry();
					    // Objective C 2.0: Required/Optional section
					    if (previous->spec & (Entry::Optional | Entry::Required))
					    {
					      current->spec |= previous->spec & (Entry::Optional|Entry::Required);
					    }
					    lastCurlyContext = FindMembers;
					    if ( *scanYYtext == ',' )
					    {
					      current->type = previous->type.data();
					    }
					    if ( *scanYYtext == '{' )
					    {
					      if ( !insidePHP && (current_root->section & Entry::COMPOUND_MASK) )
					      {
						previous->spec |= Entry::Inline;
					      }
					      //addToBody(scanYYtext);
					      curlyCount=0;
					      BEGIN( SkipCurly ) ;
					    }
					    else
					    {
					      if (previous->section!=Entry::VARIABLE_SEC)
						previous->bodyLine=-1; // a function/member declaration
					      BEGIN( FindMembers ) ;
					    }
					  }
                                        }
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 4114 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  				          //lastCurlyContext = FindMembers;
					  //curlyCount=0;
  					  //BEGIN( SkipCurly ) ; 
  					  unput('{');
					  BEGIN( Function );
					}
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 4122 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  ++curlyCount ; 
					}
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 4126 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  if( curlyCount )
					  {
					    --curlyCount ;
					  }
					  else
					  {
#if 0
					    if (!Config_getBool("HIDE_IN_BODY_DOCS") && 
						!current->doc.isEmpty())
					    {
					      // copy documentation found inside the body
					      // to the previous item
					      if (previous->inbodyLine==-1)
					      {
					        previous->inbodyLine = current->docLine;
					        previous->inbodyFile = current->docFile;
					      }
					      //printf("*** inbodyDocs+=%s\n",current->doc.data());
					      previous->inbodyDocs += current->doc;
					      current->doc.resize(0);
					    }
#endif
					    if (current->sli && previous) // copy special list items
					    {
					      QListIterator<ListItemInfo> li(*current->sli);
					      ListItemInfo *lii;
					      for (li.toFirst();(lii=li.current());++li)
					      {
						previous->addSpecialListItem(lii->type,lii->itemId);
					      }
					      delete current->sli;
					      current->sli = 0;
					    }
					    if (previous) previous->endBodyLine=yyLineNr;
					    BEGIN( lastCurlyContext ) ;
					  }
					}
	YY_BREAK
case 446:
/* rule 446 can match eol */
YY_RULE_SETUP
#line 4165 "scanner.l"
{ 
					  lineCount();
  					  if ( curlyCount )
					  {
					    //addToBody(scanYYtext);
					    --curlyCount ;
					  }
					  else
					  {
					    current->endBodyLine=yyLineNr;

					    tempEntry = current; // temporarily switch to the previous entry
					    current = previous;

					    docBlockContext   = SkipCurlyEndDoc;
					    docBlockInBody    = FALSE;
					    docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                        ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					    docBlock.resize(0);
					    docBlockTerm = '}';
					    if (scanYYtext[scanYYleng-3]=='/')
					    {
					      startCommentBlock(TRUE);
					      BEGIN( DocLine );
					    }
					    else
					    {
					      startCommentBlock(FALSE);
					      BEGIN( DocBlock );
					    }
					  }
					}
	YY_BREAK
case 447:
/* rule 447 can match eol */
YY_RULE_SETUP
#line 4197 "scanner.l"
{ // desc is followed by another one
					  docBlockContext   = SkipCurlyEndDoc;
					  docBlockInBody    = FALSE;
					  docBlockAutoBrief = ( scanYYtext[scanYYleng-2]=='*' && Config_getBool("JAVADOC_AUTOBRIEF") ) ||
					                      ( scanYYtext[scanYYleng-2]=='!' && Config_getBool("QT_AUTOBRIEF") );
					  docBlock.resize(0);
					  docBlockTerm = '}';
					  if (scanYYtext[scanYYleng-3]=='/')
					  {
					    startCommentBlock(TRUE);
					    BEGIN( DocLine );
					  }
					  else
					  {
					    startCommentBlock(FALSE);
					    BEGIN( DocBlock );
					  }
  					}
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 4215 "scanner.l"
{
  				          //addToBody("}");
					  current = tempEntry;
  					  BEGIN( lastCurlyContext );
  					}
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 4220 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  lastStringContext=SkipCurly;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 4225 "scanner.l"
{ 
  				          if (insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  BEGIN( SkipCurlyCpp );
					}
	YY_BREAK
case 451:
/* rule 451 can match eol */
YY_RULE_SETUP
#line 4231 "scanner.l"
{
  					  yyLineNr++;
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 4235 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					}
	YY_BREAK
case 453:
/* rule 453 can match eol */
YY_RULE_SETUP
#line 4238 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  yyLineNr++; 
  					  lastCurlyContext = FindMembers;
  					  BEGIN( SkipCurly ); 
					}
	YY_BREAK
case 454:
/* rule 454 can match eol */
YY_RULE_SETUP
#line 4244 "scanner.l"
{ 
  				          //addToBody(scanYYtext);
  					  yyLineNr++; 
					}
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 4248 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipComment);
  					}
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 4253 "scanner.l"
{
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 4258 "scanner.l"
{
  					  lastStringContext=YY_START;
  				          BEGIN( SkipString ); 
					}
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 4262 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "Warning: Found ';' while parsing initializer list! "
					      "(doxygen could be confused by a macro call without semicolon)"
					     );
					  BEGIN( FindMembers );
  					}
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 4269 "scanner.l"
{
  				          if (!insidePHP)
  				            REJECT;
  				          //addToBody(scanYYtext);
  					  lastCContext = YY_START;
					  BEGIN(SkipCxxComment);
  					}
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 4276 "scanner.l"
{
  				          if (!insideCS) REJECT;
					  // C# verbatim string
					  lastSkipVerbStringContext=YY_START;
					  pSkipVerbString=&current->initializer;
					  BEGIN(SkipVerbString);
  					}
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 4283 "scanner.l"
{
                                          if (insidePHP) REJECT;
                                        }
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 4286 "scanner.l"
{
  					  if (insidePHP)
					  {
					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
					}
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 4293 "scanner.l"
{ }
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 4294 "scanner.l"
{ }
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 4295 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 4298 "scanner.l"
{ 
  					  BEGIN( lastStringContext ); 
					}
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 4301 "scanner.l"
{ }
	YY_BREAK
case 468:
/* rule 468 can match eol */
YY_RULE_SETUP
#line 4302 "scanner.l"
{
  					  yyLineNr++;
  					}
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 4305 "scanner.l"
{ }
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 4306 "scanner.l"
{ 
					  current->section = Entry::EMPTY_SEC ;
					  current->type.resize(0) ;
					  current->name.resize(0) ;
					  current->args.resize(0) ;
					  current->argList->clear();
					  BEGIN( FindMembers ) ;
					}
	YY_BREAK
case 471:
/* rule 471 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4314 "scanner.l"
{
  					  sharpCount = 0;
  					  current->name = scanYYtext ;
					  if (current->spec & Entry::Protocol)
					  {
					    current->name+="-p";
					  }
					  lineCount();
					  lastClassTemplSpecContext = ClassVar;
					  if (insideObjC) // protocol list
					  {
					    BEGIN( ObjCProtocolList );
					  }
					  else if (insideCS) // C# generic class
					  {
					    BEGIN( CSGeneric );
					  }
					  else // C++ template specialization
					  {
					    roundCount=0;
					    BEGIN( ClassTemplSpec );
					  }
					}
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 4337 "scanner.l"
{
					  if (current->tArgLists==0)
					  {
					    current->tArgLists = new QList<ArgumentList>;
					    current->tArgLists->setAutoDelete(TRUE);
					  }
					  ArgumentList *al = new ArgumentList;
					  current->spec |= Entry::Template;
					  current->tArgLists->append(al);
					  currentArgumentList = al;
					  templateStr="<";
					  current->name += "<";
					  fullArgString = templateStr;
					  copyArgString = &current->name;
					  currentArgumentContext = ClassVar;
					  BEGIN( ReadTempArgs );
  					}
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 4354 "scanner.l"
{
  					  insideProtocolList=TRUE;
  					  BEGIN( Bases );
  					}
	YY_BREAK
case 474:
/* rule 474 can match eol */
YY_RULE_SETUP
#line 4358 "scanner.l"
{
					  current->name += scanYYtext;
					  lineCount();
  					  if (--sharpCount<=0)
					  {
					    current->name = removeRedundantWhiteSpace(current->name);
					    if (current->spec & Entry::Protocol)
					    { // Objective-C protocol
					      unput('{'); // fake start of body
					      BEGIN( ClassVar );
					    }
					    else
					    {
					      BEGIN( lastClassTemplSpecContext );
					    }
					  }
					}
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 4375 "scanner.l"
{
  					  current->name += scanYYtext;
  					  sharpCount++;
  					}
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 4379 "scanner.l"
{
  					  current->name += scanYYtext;
					}
	YY_BREAK
case 477:
/* rule 477 can match eol */
YY_RULE_SETUP
#line 4382 "scanner.l"
{ // forward declaration
    					  unput(';');
					  current->reset();
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  BEGIN( FindMembers );
					}
	YY_BREAK
case 478:
/* rule 478 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4391 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->spec & Entry::Protocol)
					  {
					    current->name += "-p";
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 479:
/* rule 479 can match eol */
YY_RULE_SETUP
#line 4400 "scanner.l"
{  // multiple forward declarations on one line
                                           // e.g. @protocol A,B;
					  current->reset();
  					}
	YY_BREAK
case 480:
/* rule 480 can match eol */
YY_RULE_SETUP
#line 4404 "scanner.l"
{ 
					  current->name = scanYYtext ;
					  lineCount();
					  if (current->spec & Entry::Protocol)
					  {
					    current->name += "-p";
					  }
					  if ((current->spec & Entry::Protocol) ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 481:
/* rule 481 can match eol */
YY_RULE_SETUP
#line 4418 "scanner.l"
{ // C# style scope
					  current->name = substitute(scanYYtext,".","::");
					  lineCount();
					  BEGIN( ClassVar );
                                        }
	YY_BREAK
case 482:
/* rule 482 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4423 "scanner.l"
{
  					  if (insideIDL && strncmp(scanYYtext,"switch",6)==0 && !isId(scanYYtext[6]))
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else
					  {
  					    addType(current);
					    current->name = scanYYtext;
					    current->name = current->name.stripWhiteSpace();
					    lineCount();
  					    BEGIN( FindMembers );
					  }
  					}
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 4439 "scanner.l"
{
 					  if (isTypedef)
					  {
					    // multiple types in one typedef
					    unput(',');
					    current->type.prepend("typedef ");
					    BEGIN(FindMembers);
					  }
					  else
					  { 
  					    // Multiple class forward declaration
					  }
  					}
	YY_BREAK
case 484:
/* rule 484 can match eol */
YY_RULE_SETUP
#line 4452 "scanner.l"
{
  					  if (insideCli)
					  {
					    if (scanYYtext[0]=='s') // sealed
					      current->spec |= Entry::SealedClass;
					    else // abstract
					      current->spec |= Entry::AbstractClass;
					    BEGIN( ClassVar ); 
					  }
					  else
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 4466 "scanner.l"
{
  					  if (insideIDL && strcmp(scanYYtext,"switch")==0)
					  {
					    // Corba IDL style union
					    roundCount=0;
					    BEGIN(SkipUnionSwitch);
					  }
					  else if ((insideJava || insidePHP || insideJS) && (strcmp(scanYYtext,"implements")==0 || strcmp(scanYYtext,"extends")==0))
					  {
  					    current->type.resize(0);
					    baseProt=Public;
                                            baseVirt=Normal;
					    baseName.resize(0);
					    BEGIN( BasesProt ) ;
					  }
					  else if (insideCS && strcmp(scanYYtext,"where")==0) // C# type contraint
					  {
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else if (insideCli &&  strcmp(scanYYtext,"abstract"))
					  {
					    current->spec|=Entry::Abstract;
					  }
					  else if (insideCli &&  strcmp(scanYYtext,"sealed"))
					  {
					    current->spec|=Entry::Sealed;
					  }
					  else
					  {
					    if (current->section == Entry::ENUM_SEC)
					    { // found "enum a b" -> variable
					      current->section = Entry::VARIABLE_SEC ;
					    }
					    current->type += ' ' ;
					    current->type += current->name ;
					    current->name = scanYYtext ;
					    
					    if (nameIsOperator(current->name))
					    {
				              BEGIN( Operator );
					    }
					  }
  					}
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 4513 "scanner.l"
{
    					  if (insideObjC && *scanYYtext=='(') // class category
					  {
					    current->name+='(';
                                            if (current->section!=Entry::OBJCIMPL_SEC)
                                            {
					      current->spec|=Entry::Category;
                                            }
					    BEGIN( ClassCategory );
					  }
					  else
					  {
                                            // probably a function anyway
                                            unput(*scanYYtext);
					    BEGIN( FindMembers );
					  }
					}
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 4530 "scanner.l"
{ // special comment
                                          fullArgString.resize(0);
					  lastCopyArgChar='#'; // end marker
					  lastCommentInArgContext=YY_START;
					  if (scanYYtext[1]=='/')
					    BEGIN( CopyArgCommentLine );
					  else
					    BEGIN( CopyArgComment );
					}
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 4539 "scanner.l"
{ // artifically inserted token to signal end of comment block
                                          current->typeConstr->last()->docs = fullArgString;
  					}
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 4542 "scanner.l"
{ // end of type constraint reached
                                          // parse documentation of the constraints
                                          handleParametersCommentBlocks(current->typeConstr);
					  unput('{');
					  BEGIN( lastCSConstraint );
					}
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 4548 "scanner.l"
{
                                          handleParametersCommentBlocks(current->typeConstr);
					  unput(';');
					  BEGIN( lastCSConstraint );
  					}
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 4553 "scanner.l"
{
                                          BEGIN( CSConstraintType );
                                        }
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 4556 "scanner.l"
{
                                          // parameter name
                                          current->typeConstr->last()->name=scanYYtext;
                                        }
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 4560 "scanner.l"
{ // another constraint for a different param
					  current->typeConstr->append(new Argument);
                                          BEGIN( CSConstraintName );
  					}
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 4564 "scanner.l"
{
                                          if (current->typeConstr->last()->type.isEmpty())
                                              // first type constraint for this parameter
                                          {
                                            current->typeConstr->last()->type=scanYYtext;
                                          }
                                          else // new type constraint for same parameter
                                          {
                                            QCString name = current->typeConstr->last()->name;
                                            current->typeConstr->append(new Argument);
                                            current->typeConstr->last()->name=name;
                                            current->typeConstr->last()->type=scanYYtext;
                                          }
                                        }
	YY_BREAK
case 495:
/* rule 495 can match eol */
YY_RULE_SETUP
#line 4578 "scanner.l"
{
					  yyLineNr++;
					}
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 4581 "scanner.l"
{
					}
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 4583 "scanner.l"
{
					  current->name+=scanYYtext;
					}
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 4586 "scanner.l"
{
					  current->name+=')';
					  if ((current->section & Entry::Protocol) ||
					      current->section == Entry::OBJCIMPL_SEC)
					  {
					    unput('{'); // fake start of body
					  }
					  else // category has no variables so push back an empty body
					  {
					    unput('}');
					    unput('{');
					  }
					  BEGIN( ClassVar );
					}
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 4600 "scanner.l"
{ 
  					  current->type.resize(0);
					  if ((current->spec & Entry::Interface) || 
					      (current->spec & Entry::Struct)    || 
					      (current->spec & Entry::Ref)       || 
					      (current->spec & Entry::Value)     || 
					      insidePHP || insideCS || insideD || insideObjC
					     )
					    baseProt=Public;
					  else
					    baseProt=Private;
                                          baseVirt=Normal;
					  baseName.resize(0);
					  BEGIN( BasesProt ) ;
					}
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 4615 "scanner.l"
{
    					  unput(*scanYYtext);
					  if (isTypedef) // typedef of a class, put typedef keyword back
					  {
					    current->type.prepend("typedef");
					  }
					  BEGIN( FindMembers );
    					}
	YY_BREAK
case 501:
/* rule 501 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4623 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 502:
/* rule 502 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
#line 4639 "scanner.l"
case 503:
/* rule 503 can match eol */
#line 4640 "scanner.l"
case 504:
/* rule 504 can match eol */
#line 4641 "scanner.l"
case 505:
/* rule 505 can match eol */
YY_RULE_SETUP
#line 4641 "scanner.l"
{
  					  if (!insideObjC)
					  {
					    REJECT;
					  }
					  else
					  {
					    lineCount();
					    current->program+=scanYYtext;
                                            current->fileName = yyFileName ;
					    current->startLine = yyLineNr ;
					    curlyCount=0;
					    BEGIN( ReadBodyIntf );
					  }
  					}
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 4656 "scanner.l"
{ 
                                          current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
					  if (current->name.isEmpty() && !isTypedef) // anonymous compound
					  {
					    if (current->section==Entry::NAMESPACE_SEC) // allow reopening of anonymous namespaces
					    {
					      if (Config_getBool("EXTRACT_ANON_NSPACES")) // use visible name
					      {
					        current->name="anonymous_namespace{"+stripPath(current->fileName)+"}";
					      }
					      else // use invisible name
					      {
					        current->name.sprintf("@%d",anonNSCount);
					      }
					    }
					    else
					    {
					      current->name.sprintf("@%d",anonCount++);
					    }
					  }
					  curlyCount=0;
					  if (current_root && // not a nested struct inside an @interface section
					      !(current_root->spec & Entry::Interface) &&
					      ((current->spec & (Entry::Interface | Entry::Protocol | Entry::Category) ||
					        current->section==Entry::OBJCIMPL_SEC)
					      ) &&
					      insideObjC
					     )
					  { // ObjC body that ends with @end
					    BEGIN( ReadBodyIntf );
					  }
					  else if (current->section==Entry::NAMESPACE_SEC)
					  { // namespace body
					    BEGIN( ReadNSBody );
					  }
					  else
					  { // class body
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 507:
/* rule 507 can match eol */
YY_RULE_SETUP
#line 4698 "scanner.l"
{ lineCount(); baseVirt = Virtual; }
	YY_BREAK
case 508:
/* rule 508 can match eol */
YY_RULE_SETUP
#line 4699 "scanner.l"
{ lineCount(); baseProt = Public; }
	YY_BREAK
case 509:
/* rule 509 can match eol */
YY_RULE_SETUP
#line 4700 "scanner.l"
{ lineCount(); baseProt = Protected; }
	YY_BREAK
case 510:
/* rule 510 can match eol */
YY_RULE_SETUP
#line 4701 "scanner.l"
{ lineCount(); baseProt = Private; }
	YY_BREAK
case 511:
/* rule 511 can match eol */
YY_RULE_SETUP
#line 4702 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 4703 "scanner.l"
{ unput(*scanYYtext); BEGIN(Bases); }
	YY_BREAK
case 513:
/* rule 513 can match eol */
YY_RULE_SETUP
#line 4704 "scanner.l"
{ 
                                          QCString baseScope = scanYYtext;
                                          if (insideCS && baseScope.stripWhiteSpace()=="where")
					  { 
					    // type contraint for a class
                                            delete current->typeConstr;
                                            current->typeConstr = new ArgumentList;
					    current->typeConstr->append(new Argument);
					    lastCSConstraint = YY_START;
					    BEGIN( CSConstraintName );
					  }
					  else
					  {
  					    baseName+=scanYYtext;
					    current->args += ' ';
					    current->args += scanYYtext;
					  }
					}
	YY_BREAK
case 514:
/* rule 514 can match eol */
YY_RULE_SETUP
#line 4722 "scanner.l"
{ // Java style class
    					  QCString name = substitute(scanYYtext,".","::");
					  baseName += name;
					  current->args += ' ';
					  current->args += name;
    					}
	YY_BREAK
case 515:
/* rule 515 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4728 "scanner.l"
{
                                          if (!insideObjC) 
					  {
					    REJECT;
					  }
					  else
					  {
					    yyLineNr++;
					    unput('{');
					  }
					}
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 4739 "scanner.l"
{ // empty ObjC interface
  					  unput('d'); // insert fake body: {}@end
  					  unput('n'); 
  					  unput('e'); 
  					  unput('@'); 
  					  unput('}'); 
  					  unput('{');
					}
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 4747 "scanner.l"
{ current->name += *scanYYtext;
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  specName = &current->name;
					  BEGIN ( Specialization );
					}
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 4754 "scanner.l"
{ 
  					  sharpCount=1; 
					  roundCount=0;
					  lastSkipSharpContext = YY_START;
					  if (insideObjC) // start of protocol list
					  {
					    unput(',');
					  }
					  else // template specialization
					  {
                                            baseName += *scanYYtext;
					    specName = &baseName;
					    BEGIN ( Specialization );
					  }
					}
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 4769 "scanner.l"
{ *specName += *scanYYtext;
  					  if (roundCount==0) sharpCount++;
  					}
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 4772 "scanner.l"
{
  					  *specName += *scanYYtext;
  					  if (roundCount==0 && --sharpCount<=0)
					    BEGIN(lastSkipSharpContext);
  					}
	YY_BREAK
case 521:
/* rule 521 can match eol */
YY_RULE_SETUP
#line 4777 "scanner.l"
{ lineCount(); *specName +=' '; }
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 4778 "scanner.l"
{ *specName += scanYYtext; }
	YY_BREAK
case 523:
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4779 "scanner.l"
{ // M$ C++ extension to allow >> to close a template...
  					  unput('>');
  					  unput(' ');
  					  unput('>');
                                        }
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 4784 "scanner.l"
{
                                          if (insideCS) // for C# >> ends a nested template
					  {
					    REJECT;
					  }
					  else // for C++ >> is a bitshift 
					       // operator and > > would end 
					       // a nested template.
					       // We require the bitshift to be enclosed in braces.
					       // See http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1757.html
					  {
					    if (roundCount>0)
					    {
                                              *specName += scanYYtext; 
					    }
					    else
					    {
  					      unput('>');
  					      unput(' ');
  					      unput('>');
					    }
					  }
                                        }
	YY_BREAK
case 525:
/* rule 525 can match eol */
YY_RULE_SETUP
#line 4807 "scanner.l"
{ lineCount(); }
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 4808 "scanner.l"
{ *specName += *scanYYtext; roundCount++; }
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 4809 "scanner.l"
{ *specName += *scanYYtext; roundCount--; }
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 4810 "scanner.l"
{
  					  *specName += *scanYYtext;
  					}
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 4813 "scanner.l"
{ ++sharpCount; }
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 4814 "scanner.l"
{ if (--sharpCount<=0)
					    BEGIN ( lastSkipSharpContext );
					}
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 4817 "scanner.l"
{ ++roundCount; }
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 4818 "scanner.l"
{ if (--roundCount<=0)
					    BEGIN ( lastSkipRoundContext );
					}
	YY_BREAK
case 533:
/* rule 533 can match eol */
YY_RULE_SETUP
#line 4821 "scanner.l"
{ lineCount();
                                          if (insideProtocolList)
					  {
					    baseName+="-p";
					  }
					  else
					  {
                                            current->args += ',' ; 
					  }
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
					  {
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  }
					  if ((current->spec & Entry::Interface) || 
					      insideJava || insidePHP || insideCS || 
					      insideD || insideObjC)
					  {
					    baseProt=Public;
					  }
					  else
					  {
					    baseProt=Private;
					  }
					  baseVirt=Normal;
					  baseName.resize(0);
                                          if (*scanYYtext=='>')
					  { // end of a ObjC protocol list
  					    insideProtocolList=FALSE;
					    if (scanYYleng==1)
					    {
					      unput('{'); // dummy start body
					    }
					    else
					    {
					      yyless(1);
					    }
					  }
					  else
					  {
					    if (*scanYYtext==',' && insideObjC) // Begin of protocol list
					    {
  					      insideProtocolList=TRUE;
					    }
					    BEGIN(BasesProt);
					  }
					}
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 4870 "scanner.l"
{ current->fileName = yyFileName ;
					  current->startLine = yyLineNr ;
					  current->name = removeRedundantWhiteSpace(current->name);
  					  if (!baseName.isEmpty())
  					    current->extends->append(
					      new BaseInfo(baseName,baseProt,baseVirt)
					    );
					  curlyCount=0;
					  if (insideObjC)
					  {
					    BEGIN( ReadBodyIntf );
					  }
					  else
					  {
					    BEGIN( ReadBody ) ;
					  }
					}
	YY_BREAK
case 535:
YY_RULE_SETUP
#line 4887 "scanner.l"
{
  					  roundCount++;
  					}
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 4890 "scanner.l"
{
  					  if (--roundCount==0)
					  {
					    BEGIN(ClassVar);
					  }
  					}
	YY_BREAK
case 537:
/* rule 537 can match eol */
YY_RULE_SETUP
#line 4896 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
case 538:
YY_RULE_SETUP
#line 4897 "scanner.l"

	YY_BREAK
case 539:
/* rule 539 can match eol */
YY_RULE_SETUP
#line 4898 "scanner.l"
{ current->program += scanYYtext ;
					  lineCount() ;
					}
	YY_BREAK
case 540:
YY_RULE_SETUP
#line 4901 "scanner.l"
{ current->program += scanYYtext ; } 
	YY_BREAK
case 541:
YY_RULE_SETUP
#line 4902 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 542:
YY_RULE_SETUP
#line 4903 "scanner.l"
{
                                          insideCode=TRUE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 543:
YY_RULE_SETUP
#line 4907 "scanner.l"
{
                                          insideCode=FALSE;
  					  current->program += scanYYtext ;
  					}
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 4911 "scanner.l"
{ current->program += scanYYtext ; }
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 4912 "scanner.l"
{ current->program += scanYYtext ;
					  if (!insideCode) BEGIN( lastContext ) ;
					}
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 4915 "scanner.l"
{ current->program += *scanYYtext ; }
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 4917 "scanner.l"
{ 
  					  //printf("Start doc block at %d\n",yyLineNr);
					  removeSlashes=(scanYYtext[1]=='/');
					  tmpDocType=-1;
					  if (!current->doc.isEmpty())
					  {
					    current->doc+="\n\n";
					  }
					  else
					  {
					    current->docLine = yyLineNr;
					    current->docFile = yyFileName;
					  }

					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = Config_getBool("QT_AUTOBRIEF");
					  docBlock.resize(0);
					  if (docBlockAutoBrief)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
					}
	YY_BREAK
case 548:
/* rule 548 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4948 "scanner.l"
{
  					  removeSlashes=(scanYYtext[1]=='/');
					  lastDocContext = YY_START;

					  //printf("Found comment block at %s:%d\n",yyFileName,yyLineNr);
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  current->docLine = yyLineNr;
					  current->docFile = yyFileName;
					  docBlockContext = YY_START;
					  docBlockInBody  = YY_START==SkipCurly;
					  docBlockAutoBrief = Config_getBool("JAVADOC_AUTOBRIEF");
					  docBlock.resize(0);
					  if (docBlockAutoBrief)
					  {
					    current->briefLine = yyLineNr;
					    current->briefFile = yyFileName;
					  }
					  startCommentBlock(FALSE);
					  BEGIN( DocBlock );
  					}
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 4971 "scanner.l"
{ 
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(current->brief.isEmpty());
					  BEGIN( DocLine );
					}
	YY_BREAK
case 550:
/* rule 550 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 4985 "scanner.l"
{ 
					  tmpDocType=-1;
					  lastDocContext = YY_START;
					  if (current_root->section & Entry::SCOPE_MASK)
                                          {
					    current->inside = current_root->name+"::";
                                          }
					  docBlockContext   = YY_START;
					  docBlockInBody    = YY_START==SkipCurly;
					  docBlockAutoBrief = FALSE;
					  docBlock.resize(0);
					  startCommentBlock(current->brief.isEmpty());
					  BEGIN( DocLine );
					}
	YY_BREAK
case 551:
/* rule 551 can match eol */
YY_RULE_SETUP
#line 4999 "scanner.l"
{
					  lineCount();
					  externC=TRUE;
					}
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 5003 "scanner.l"
{
                                          if (externC) 
					  {
					    externC=FALSE;
					  }
                                          else if (insideCS &&    
					      !current->name.isEmpty() && 
					      !current->type.isEmpty())
					  {
					    if (containsWord(current->type,"event")) // event
					    {
  					      current->mtype = mtype = Event;
					    }
					    else // property
					    {				
  					      current->mtype = mtype = Property;
					    }
					    current->bodyLine = yyLineNr;
					    curlyCount=0;
					    BEGIN( CSAccessorDecl );
					  }
					  else
					  {
					    if ((insideJava || insideCS || insideD) &&
						current->name.isEmpty()
					       )
					    {
					      // static Java initializer
					      needsSemi = FALSE;
					      if (current->stat)
					      {
						current->name="[static initializer]";
						current->type.resize(0);
					      }
					      else
					      {
						current->name="[instance initializer]";
					      }
                                              unput(*scanYYtext); 
					      BEGIN( Function );
					    }
					    else
					    {
					      needsSemi = TRUE;
					      current->type.resize(0);
					      current->name.resize(0);
					      current->args.resize(0);
					      current->argList->clear();
					      curlyCount=0;
					      BEGIN( SkipCurlyBlock );
					    }
					  }
  					}
	YY_BREAK
case 553:
YY_RULE_SETUP
#line 5056 "scanner.l"
{ curlyCount++; }
	YY_BREAK
case 554:
YY_RULE_SETUP
#line 5057 "scanner.l"
{ 
                                          if (curlyCount) 
                                          {
                                            curlyCount--; 
					  }
					  else
					  {
  					    mtype = Method;
                                            unput(';');
					    BEGIN(FindMembers);
					  }
                                        }
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 5069 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Settable;  }
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 5070 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Gettable;  }
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 5071 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Addable;   }
	YY_BREAK
case 558:
YY_RULE_SETUP
#line 5072 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Removable; }
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 5073 "scanner.l"
{ if (curlyCount==0) current->spec |= Entry::Raisable;  }
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 5074 "scanner.l"
{}
	YY_BREAK
case 561:
/* rule 561 can match eol */
YY_RULE_SETUP
#line 5075 "scanner.l"
{ yyLineNr++; }
	YY_BREAK
/**********************************************************************************/
/******************** Documentation block related rules ***************************/
/**********************************************************************************/
/* ---- Single line comments ------ */
case 562:
/* rule 562 can match eol */
YY_RULE_SETUP
#line 5085 "scanner.l"
{ // continuation of multiline C++-style comment
				           docBlock+=scanYYtext;
          		                   docBlock.resize(docBlock.size() - 3);
					   yyLineNr++;
                                        }
	YY_BREAK
case 563:
/* rule 563 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5090 "scanner.l"
{ // whole line
  					  docBlock+=scanYYtext;
					  handleCommentBlock(docBlock,current->brief.isEmpty());
					  BEGIN( docBlockContext );
  					}
	YY_BREAK
/* ---- Comments blocks ------ */
case 564:
YY_RULE_SETUP
#line 5098 "scanner.l"
{ // end of comment block
  				          handleCommentBlock(docBlock,FALSE);
					  BEGIN(docBlockContext);
  					}
	YY_BREAK
case 565:
/* rule 565 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5102 "scanner.l"
{ // start of a comment line
  					}
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 5104 "scanner.l"
{ // strip embedded C++ comments if at the start of a line
  					}
	YY_BREAK
case 567:
YY_RULE_SETUP
#line 5106 "scanner.l"
{ // slashes in the middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 568:
YY_RULE_SETUP
#line 5109 "scanner.l"
{ // start of a new comment in the 
                                          // middle of a comment block
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 569:
/* rule 569 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5113 "scanner.l"
{ // escaped command
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 5116 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
					  if (docBlockName.at(1)=='{')
					  {
				            docBlockName.at(1)='}';
					  }
  					  BEGIN(DocCopyBlock);
                                        }
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 5125 "scanner.l"
{
                                          docBlock+=scanYYtext;
				          docBlockName="<pre>";
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 572:
/* rule 572 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5130 "scanner.l"
{ // verbatim command (which could contain nested comments!)
                                          docBlock+=scanYYtext;
				          docBlockName=&scanYYtext[1];
  					  BEGIN(DocCopyBlock);
  					}
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 5135 "scanner.l"
{
  					  if (insideCS)
					  {
					    docBlock+=scanYYtext;
					    docBlockName="<code>";
					    BEGIN(DocCopyBlock);
					  }
					  else
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 5147 "scanner.l"
{ // any character that isn't special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 575:
/* rule 575 can match eol */
YY_RULE_SETUP
#line 5150 "scanner.l"
{ // newline
  					  yyLineNr++;
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case 576:
YY_RULE_SETUP
#line 5154 "scanner.l"
{ // command block
					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
/* ---- Copy verbatim sections ------ */
case 577:
YY_RULE_SETUP
#line 5160 "scanner.l"
{ // end of a <pre> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<pre>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 578:
YY_RULE_SETUP
#line 5167 "scanner.l"
{ // end of a <code> block
  					  docBlock+=scanYYtext;
					  if (docBlockName=="<code>")
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 579:
YY_RULE_SETUP
#line 5174 "scanner.l"
{
  					  docBlock+=scanYYtext;
					  BEGIN(DocBlock);
  					}
	YY_BREAK
case 580:
/* rule 580 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5178 "scanner.l"
{ // end of verbatim block
  					  docBlock+=scanYYtext;
					  if (&scanYYtext[4]==docBlockName)
					  {
  					    BEGIN(DocBlock);
					  }
  					}
	YY_BREAK
case 581:
/* rule 581 can match eol */
YY_RULE_SETUP
#line 5185 "scanner.l"
{ // start of a comment line
  					  if (docBlockName=="verbatim")
					  {
					    REJECT;
					  }
  					}
	YY_BREAK
case 582:
YY_RULE_SETUP
#line 5191 "scanner.l"
{ // any character that is not special
  					  docBlock+=scanYYtext;
  					}
	YY_BREAK
case 583:
YY_RULE_SETUP
#line 5194 "scanner.l"
{
  					  docBlock+=scanYYtext;
					}
	YY_BREAK
case 584:
/* rule 584 can match eol */
YY_RULE_SETUP
#line 5197 "scanner.l"
{ // newline
  					  docBlock+=*scanYYtext;
					  yyLineNr++;
  					}
	YY_BREAK
case 585:
YY_RULE_SETUP
#line 5201 "scanner.l"
{ // any other character
  					  docBlock+=*scanYYtext;
  					}
	YY_BREAK
case YY_STATE_EOF(DocCopyBlock):
#line 5204 "scanner.l"
{
  					  warn(yyFileName,yyLineNr,
					      "Warning: reached end of file while inside a %s block!\n"
					      "The command that should end the block seems to be missing!\n",
					      docBlockName.data());
  					  yyterminate();
  					}
	YY_BREAK
/* ------------- Prototype parser -------------- */
case 586:
YY_RULE_SETUP
#line 5215 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 587:
YY_RULE_SETUP
#line 5218 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 588:
YY_RULE_SETUP
#line 5225 "scanner.l"
{
  					  current->type+=current->name+scanYYtext;
					  current->name.resize(0);
  					  BEGIN( PrototypePtr );
  					}
	YY_BREAK
case 589:
/* rule 589 can match eol */
YY_RULE_SETUP
#line 5230 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 590:
YY_RULE_SETUP
#line 5233 "scanner.l"
{
  					  current->args+=*scanYYtext;
					  currentArgumentContext = PrototypeQual;
					  fullArgString = current->args.copy();
					  copyArgString = &current->args;
					  BEGIN( ReadFuncArgType ) ;
  					}
	YY_BREAK
case 591:
YY_RULE_SETUP
#line 5240 "scanner.l"
{
  					  current->type+=')';
  					  BEGIN( Prototype );
  					}
	YY_BREAK
case 592:
YY_RULE_SETUP
#line 5244 "scanner.l"
{
  					  current->name+=scanYYtext;
  					}
	YY_BREAK
case 593:
YY_RULE_SETUP
#line 5247 "scanner.l"
{
  					  BEGIN( PrototypeSkipLine);
  					}
	YY_BREAK
case 594:
YY_RULE_SETUP
#line 5250 "scanner.l"
{ 
  					  current->args += " const "; 
					  current->argList->constSpecifier=TRUE;
					}
	YY_BREAK
case 595:
YY_RULE_SETUP
#line 5254 "scanner.l"
{ 
  					  current->args += " volatile "; 
					  current->argList->volatileSpecifier=TRUE;
					}
	YY_BREAK
case 596:
YY_RULE_SETUP
#line 5258 "scanner.l"
{ 
					  current->args += " = 0"; 
					  current->virt = Pure; 
					  current->argList->pureSpecifier=TRUE;
					}
	YY_BREAK
case 597:
YY_RULE_SETUP
#line 5263 "scanner.l"
{
  					  current->exception = "throw(";
					  BEGIN(PrototypeExc);
  					}
	YY_BREAK
case 598:
YY_RULE_SETUP
#line 5267 "scanner.l"
{
  					  current->exception += ')';
					  BEGIN(PrototypeQual);
  					}
	YY_BREAK
case 599:
YY_RULE_SETUP
#line 5271 "scanner.l"
{
  					  current->exception += *scanYYtext;
  					}
	YY_BREAK
case 600:
YY_RULE_SETUP
#line 5274 "scanner.l"
{
  					  current->args += *scanYYtext;
  					}
	YY_BREAK
case 601:
YY_RULE_SETUP
#line 5277 "scanner.l"
{
  					  current->name += *scanYYtext;
  					}
	YY_BREAK
case 602:
YY_RULE_SETUP
#line 5280 "scanner.l"
{
  					}
	YY_BREAK
/* ------------ Generic rules -------------- */
case 603:
/* rule 603 can match eol */
YY_RULE_SETUP
#line 5287 "scanner.l"
{  // line continuation
  					  yyLineNr++; 
  					}
	YY_BREAK
case 604:
/* rule 604 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up scanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up scanYYtext again */
YY_RULE_SETUP
#line 5290 "scanner.l"
{ 
					  BEGIN( lastCContext ) ;
					}
	YY_BREAK
case 605:
YY_RULE_SETUP
#line 5293 "scanner.l"

	YY_BREAK
case 606:
/* rule 606 can match eol */
YY_RULE_SETUP
#line 5294 "scanner.l"
{ yyLineNr++ ; }
	YY_BREAK
case 607:
YY_RULE_SETUP
#line 5295 "scanner.l"
{
					  if (insideIDL && insideCppQuote)
					  {
					    BEGIN(EndCppQuote);
					  }
					}
	YY_BREAK
case 608:
YY_RULE_SETUP
#line 5301 "scanner.l"
{	
  					  if (!insidePHP)
  					    REJECT;
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 609:
YY_RULE_SETUP
#line 5307 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipPHPString);
					  }
  					}
	YY_BREAK
case 610:
YY_RULE_SETUP
#line 5314 "scanner.l"
{
  					  if (insidePHP)
					  {
  					    lastStringContext=YY_START;
					    BEGIN(SkipString);
					  }
  					}
	YY_BREAK
case 611:
YY_RULE_SETUP
#line 5321 "scanner.l"

	YY_BREAK
case 612:
YY_RULE_SETUP
#line 5322 "scanner.l"

	YY_BREAK
case 613:
YY_RULE_SETUP
#line 5323 "scanner.l"
{ lastCContext = YY_START ;
					  BEGIN( SkipComment ) ;
					}
	YY_BREAK
case 614:
YY_RULE_SETUP
#line 5326 "scanner.l"
{ BEGIN( lastCContext ) ; }
	YY_BREAK
case 615:
YY_RULE_SETUP
#line 5327 "scanner.l"
{	
  					  lastCContext = YY_START ;
					  BEGIN( SkipCxxComment ) ;
					}
	YY_BREAK
case 616:
YY_RULE_SETUP
#line 5331 "scanner.l"
ECHO;
	YY_BREAK
#line 16702 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Define):
			case YY_STATE_EOF(DefineEnd):
			case YY_STATE_EOF(CompoundName):
			case YY_STATE_EOF(ClassVar):
			case YY_STATE_EOF(CSConstraintName):
			case YY_STATE_EOF(CSConstraintType):
			case YY_STATE_EOF(ClassCategory):
			case YY_STATE_EOF(ClassTemplSpec):
			case YY_STATE_EOF(CliPropertyType):
			case YY_STATE_EOF(CliPropertyIndex):
			case YY_STATE_EOF(CliOverride):
			case YY_STATE_EOF(Bases):
			case YY_STATE_EOF(BasesProt):
			case YY_STATE_EOF(NextSemi):
			case YY_STATE_EOF(BitFields):
			case YY_STATE_EOF(FindMembers):
			case YY_STATE_EOF(FindMembersPHP):
			case YY_STATE_EOF(FindMemberName):
			case YY_STATE_EOF(FindFields):
			case YY_STATE_EOF(FindFieldArg):
			case YY_STATE_EOF(Function):
			case YY_STATE_EOF(FuncRound):
			case YY_STATE_EOF(ExcpRound):
			case YY_STATE_EOF(ExcpList):
			case YY_STATE_EOF(FuncQual):
			case YY_STATE_EOF(Operator):
			case YY_STATE_EOF(Array):
			case YY_STATE_EOF(ReadBody):
			case YY_STATE_EOF(ReadNSBody):
			case YY_STATE_EOF(ReadBodyIntf):
			case YY_STATE_EOF(Using):
			case YY_STATE_EOF(UsingDirective):
			case YY_STATE_EOF(SkipCurly):
			case YY_STATE_EOF(SkipCurlyCpp):
			case YY_STATE_EOF(SkipCurlyEndDoc):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipPHPString):
			case YY_STATE_EOF(SkipInits):
			case YY_STATE_EOF(SkipCPP):
			case YY_STATE_EOF(SkipCPPBlock):
			case YY_STATE_EOF(SkipComment):
			case YY_STATE_EOF(SkipCxxComment):
			case YY_STATE_EOF(SkipCurlyBlock):
			case YY_STATE_EOF(SkipRoundBlock):
			case YY_STATE_EOF(Sharp):
			case YY_STATE_EOF(SkipSharp):
			case YY_STATE_EOF(SkipRound):
			case YY_STATE_EOF(SkipSquare):
			case YY_STATE_EOF(SkipRemainder):
			case YY_STATE_EOF(TypedefName):
			case YY_STATE_EOF(TryFunctionBlock):
			case YY_STATE_EOF(TryFunctionBlockEnd):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PackageName):
			case YY_STATE_EOF(JavaImport):
			case YY_STATE_EOF(CSAccessorDecl):
			case YY_STATE_EOF(CSGeneric):
			case YY_STATE_EOF(PreLineCtrl):
			case YY_STATE_EOF(DefinePHP):
			case YY_STATE_EOF(DefinePHPEnd):
			case YY_STATE_EOF(OldStyleArgs):
			case YY_STATE_EOF(SkipVerbString):
			case YY_STATE_EOF(ObjCMethod):
			case YY_STATE_EOF(ObjCReturnType):
			case YY_STATE_EOF(ObjCParams):
			case YY_STATE_EOF(ObjCParamType):
			case YY_STATE_EOF(ObjCProtocolList):
			case YY_STATE_EOF(ObjCPropAttr):
			case YY_STATE_EOF(ObjCSkipStatement):
			case YY_STATE_EOF(QtPropType):
			case YY_STATE_EOF(QtPropName):
			case YY_STATE_EOF(QtPropAttr):
			case YY_STATE_EOF(QtPropRead):
			case YY_STATE_EOF(QtPropWrite):
			case YY_STATE_EOF(ReadInitializer):
			case YY_STATE_EOF(GetCallType):
			case YY_STATE_EOF(CppQuote):
			case YY_STATE_EOF(EndCppQuote):
			case YY_STATE_EOF(MemberSpec):
			case YY_STATE_EOF(MemberSpecSkip):
			case YY_STATE_EOF(EndTemplate):
			case YY_STATE_EOF(FuncPtr):
			case YY_STATE_EOF(FuncPtrOperator):
			case YY_STATE_EOF(EndFuncPtr):
			case YY_STATE_EOF(ReadFuncArgType):
			case YY_STATE_EOF(ReadTempArgs):
			case YY_STATE_EOF(IDLUnionCase):
			case YY_STATE_EOF(NSAliasName):
			case YY_STATE_EOF(NSAliasArg):
			case YY_STATE_EOF(CopyString):
			case YY_STATE_EOF(CopyPHPString):
			case YY_STATE_EOF(CopyGString):
			case YY_STATE_EOF(CopyPHPGString):
			case YY_STATE_EOF(CopyRound):
			case YY_STATE_EOF(CopyCurly):
			case YY_STATE_EOF(GCopyRound):
			case YY_STATE_EOF(GCopyCurly):
			case YY_STATE_EOF(SkipUnionSwitch):
			case YY_STATE_EOF(Specialization):
			case YY_STATE_EOF(FuncPtrInit):
			case YY_STATE_EOF(FuncFunc):
			case YY_STATE_EOF(FuncFuncEnd):
			case YY_STATE_EOF(FuncFuncType):
			case YY_STATE_EOF(FuncFuncArray):
			case YY_STATE_EOF(CopyArgString):
			case YY_STATE_EOF(CopyArgPHPString):
			case YY_STATE_EOF(CopyArgRound):
			case YY_STATE_EOF(CopyArgSharp):
			case YY_STATE_EOF(CopyArgComment):
			case YY_STATE_EOF(CopyArgCommentLine):
			case YY_STATE_EOF(CopyArgVerbatim):
			case YY_STATE_EOF(IDLAttribute):
			case YY_STATE_EOF(IDLProp):
			case YY_STATE_EOF(IDLPropName):
			case YY_STATE_EOF(Prototype):
			case YY_STATE_EOF(PrototypePtr):
			case YY_STATE_EOF(PrototypeQual):
			case YY_STATE_EOF(PrototypeExc):
			case YY_STATE_EOF(PrototypeSkipLine):
			case YY_STATE_EOF(DocLine):
			case YY_STATE_EOF(DocBlock):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed scanYYin at a new source and called
			 * scanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = scanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( scanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * scanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of scanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			scanYYrestart(scanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 3602 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 3602 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 3601);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up scanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					scanYYrestart(scanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( scanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve scanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void scanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        scanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            scanYY_create_buffer(scanYYin,YY_BUF_SIZE );
	}

	scanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	scanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void scanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		scanYYpop_buffer_state();
	 *		scanYYpush_buffer_state(new_buffer);
     */
	scanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	scanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (scanYYwrap()) processing, but the only time this flag
	 * is looked at is after scanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void scanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	scanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE scanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) scanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	scanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with scanYY_create_buffer()
 * 
 */
    void scanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		scanYYfree((void *) b->yy_ch_buf  );

	scanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a scanYYrestart() or at EOF.
 */
    static void scanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	scanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then scanYY_init_buffer was _probably_
     * called from scanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void scanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		scanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void scanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	scanYYensure_buffer_stack();

	/* This block is copied from scanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from scanYY_switch_to_buffer. */
	scanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void scanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	scanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		scanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void scanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)scanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE scanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) scanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	scanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to scanYYlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       scanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE scanYY_scan_string (yyconst char * yystr )
{
    
	return scanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to scanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE scanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) scanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in scanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = scanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in scanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		scanYYtext[scanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = scanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		scanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int scanYYget_lineno  (void)
{
        
    return scanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *scanYYget_in  (void)
{
        return scanYYin;
}

/** Get the output stream.
 * 
 */
FILE *scanYYget_out  (void)
{
        return scanYYout;
}

/** Get the length of the current token.
 * 
 */
int scanYYget_leng  (void)
{
        return scanYYleng;
}

/** Get the current token.
 * 
 */

char *scanYYget_text  (void)
{
        return scanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void scanYYset_lineno (int  line_number )
{
    
    scanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see scanYY_switch_to_buffer
 */
void scanYYset_in (FILE *  in_str )
{
        scanYYin = in_str ;
}

void scanYYset_out (FILE *  out_str )
{
        scanYYout = out_str ;
}

int scanYYget_debug  (void)
{
        return scanYY_flex_debug;
}

void scanYYset_debug (int  bdebug )
{
        scanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from scanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    scanYYin = stdin;
    scanYYout = stdout;
#else
    scanYYin = (FILE *) 0;
    scanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * scanYYlex_init()
     */
    return 0;
}

/* scanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int scanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		scanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		scanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	scanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    scanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * scanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *scanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *scanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void scanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see scanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 5331 "scanner.l"



//----------------------------------------------------------------------------

static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}
  
//----------------------------------------------------------------------------

static void newEntry()
{
  current_root->addSubEntry(current);
  previous = current;
  current = new Entry ;
  initEntry();
}

static void handleCommentBlock(const QCString &doc,bool brief)
{
  static bool hideInBodyDocs = Config_getBool("HIDE_IN_BODY_DOCS");
  int position=0;
  bool needsEntry=FALSE;
  if (docBlockInBody && hideInBodyDocs) return;
  //printf("parseCommentBlock [%s]\n",doc.data());
  while (parseCommentBlock(
	g_thisParser,
	docBlockInBody && previous ? previous : current,
	doc,        // text
	yyFileName, // file
	brief ? current->briefLine : current->docLine,   // line of block start
	docBlockInBody ? FALSE : brief, 
	docBlockInBody ? FALSE : docBlockAutoBrief,
	docBlockInBody,
	protection,
        position,
        needsEntry
        )
     ) 
  {
    //printf("parseCommentBlock position=%d [%s]\n",position,doc.data()+position);
    if (needsEntry) newEntry();
  }
  if (needsEntry)
  {
    newEntry();
  }

  if (docBlockTerm)
  {
    unput(docBlockTerm);
    docBlockTerm=0;
  }
}

static void handleParametersCommentBlocks(ArgumentList *al)
{
  //printf(">>>>>>> handleParametersCommentBlocks()\n");
  ArgumentListIterator ali(*al);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    //printf("    Param %s docs=%s\n",a->name.data(),a->docs.data());
    if (!a->docs.isEmpty())
    {
      int position=0;
      bool needsEntry;

      // save context
      QCString orgDoc   = current->doc;
      QCString orgBrief = current->brief;
      int orgDocLine    = current->docLine;
      int orgBriefLine  = current->briefLine;

      current->doc.resize(0);
      current->brief.resize(0);

      //printf("handleParametersCommentBlock [%s]\n",doc.data());
      while (parseCommentBlock(
	     g_thisParser,
	     current,
	     a->docs,            // text
	     yyFileName,         // file
	     current->docLine,   // line of block start
	     FALSE, 
	     FALSE,
	     FALSE,
	     protection,
	     position,
	     needsEntry
	    )
	  ) 
      {
	//printf("handleParametersCommentBlock position=%d [%s]\n",position,doc.data()+position);
	if (needsEntry) newEntry();
      }
      if (needsEntry)
      {
	newEntry();
      }
      a->docs = current->doc;

      // restore context
      current->doc       = orgDoc;
      current->brief     = orgBrief;
      current->docLine   = orgDocLine;
      current->briefLine = orgBriefLine;
    }
  }
}


//----------------------------------------------------------------------------

static void parseCompounds(Entry *rt)
{
  //printf("parseCompounds(%s)\n",rt->name.data());
  g_inputFromFile = FALSE;
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
    if (!ce->program.isEmpty())
    {
      //printf("-- %s ---------\n%s\n---------------\n",
      //  ce->name.data(),ce->program.data());
      // init scanner state
      padCount=0;
      depthIf = 0;
      inputString = ce->program;
      inputPosition = 0;
      scanYYrestart( scanYYin ) ;
      if (ce->section==Entry::ENUM_SEC)
	BEGIN( FindFields ) ;
      else
	BEGIN( FindMembers ) ;
      current_root = ce ;
      yyFileName = ce->fileName;
      //setContext();
      yyLineNr = ce->startLine ;
      insideObjC = ce->objc;
      //printf("---> Inner block starts at line %d objC=%d\n",yyLineNr,insideObjC);
      //current->reset();
      if (current) delete current;
      current = new Entry;
      gstat = FALSE;
      int ni=ce->name.findRev("::"); if (ni==-1) ni=0; else ni+=2;
      // set default protection based on the compound type
      if( ce->section==Entry::CLASS_SEC ) // class
      {

        if (insidePHP || insideD || insideJS)
	{
          current->protection = protection = Public ; 
	}
	else if (insideJava)
	{
          current->protection = protection = Package ; 
	}
	else if (ce->spec&(Entry::Interface | Entry::Ref | Entry::Value | Entry::Struct | Entry::Union))
	{
	  if (ce->objc)
	  {
	    current->protection = protection = Protected ;
	  }
	  else
	  {
	    current->protection = protection = Public ;
	  }
	}
	else 
	{
          current->protection = protection = Private ;
	}
      }
      else if (ce->section == Entry::ENUM_SEC ) // enum
      {
	current->protection = protection = ce->protection;
      }
      else if (!ce->name.isEmpty() && ce->name.at(ni)=='@') // unnamed union or namespace
      {
	if (ce->section == Entry::NAMESPACE_SEC ) // unnamed namespace
	{
          current->stat = gstat = TRUE;
	}
	current->protection = protection = ce->protection;
      }
      else // named struct, union, protocol, category
      {
	current->protection = protection = Public ;
      }
      mtype = Method;
      virt = Normal;
      //printf("name=%s current->stat=%d gstat=%d\n",ce->name.data(),current->stat,gstat);

      //memberGroupId = DOX_NOGROUP;
      //memberGroupRelates.resize(0);
      //memberGroupInside.resize(0);
      groupEnterCompound(yyFileName,yyLineNr,ce->name);
      
      scanYYlex() ;
      g_lexInit=TRUE;
      //forceEndGroup();

      groupLeaveCompound(yyFileName,yyLineNr,ce->name);
      
      delete current; current=0;
      ce->program.resize(0);


      if (depthIf>0)
      {
	warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
      }
    }
    parseCompounds(ce);
  }
}

//----------------------------------------------------------------------------

static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();
  //g_inputFromFile = TRUE;

  inputString = fileBuf;
  inputPosition = 0;
  g_inputFromFile = FALSE;

  //anonCount     = 0;  // don't reset per file
  depthIf       = 0;
  protection    = Public;
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  global_root   = rt;
  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    yyLineNr= 1 ; 
    yyFileName = fileName;
    setContext();
    msg("Parsing file %s...\n",yyFileName.data());

    current_root  = rt ;
    initParser();
    groupEnterFile(yyFileName,yyLineNr);
    current       = new Entry;
    //printf("current=%p current_root=%p\n",current,current_root);
    int sec=guessSection(yyFileName);
    if (sec)
    {
      current->name    = yyFileName;
      current->section = sec;
      current_root->addSubEntry(current);
      current          = new Entry;
    }
    current->reset();
    scanYYrestart( scanYYin );
    if ( insidePHP )
    {
      BEGIN( FindMembersPHP );
    }
    else
    {
      BEGIN( FindMembers );
    }

    scanYYlex();
    g_lexInit=TRUE;

    if (YY_START==Comment)
    {
      warn(yyFileName,yyLineNr,"File ended in the middle of a comment block! Perhaps a missing \\endcode?");
    }

    //forceEndGroup();
    groupLeaveFile(yyFileName,yyLineNr);

    if (depthIf>0)
    {
      warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
    }

    rt->program.resize(0);
    delete current; current=0;

    parseCompounds(rt);

    inputFile.close();

    anonNSCount++;
  }
}

//----------------------------------------------------------------------------

static void parsePrototype(const QCString &text)
{
  //printf("**** parsePrototype(%s) begin\n",text.data());
  if (text.isEmpty()) 
  {
    warn(yyFileName,yyLineNr,"Empty prototype found!");
    return;
  }

  const char *orgInputString;
  int orgInputPosition;
  YY_BUFFER_STATE orgState;
  bool orgInputFromFile;
  
  // save scanner state
  orgState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(scanYY_create_buffer(scanYYin,YY_BUF_SIZE));
  orgInputString = inputString; 
  orgInputPosition = inputPosition;
  orgInputFromFile = g_inputFromFile;

  // set new string
  inputString = text;
  inputPosition = 0;
  g_inputFromFile = FALSE;
  scanYYrestart( scanYYin );
  BEGIN(Prototype);
  scanYYlex();
  g_lexInit=TRUE;

  current->name = current->name.stripWhiteSpace();
  if (current->section == Entry::MEMBERDOC_SEC && current->args.isEmpty())
    current->section = Entry::VARIABLEDOC_SEC;

  // restore original scanner state
  YY_BUFFER_STATE tmpState = YY_CURRENT_BUFFER;
  scanYY_switch_to_buffer(orgState);
  scanYY_delete_buffer(tmpState);
  inputString = orgInputString; 
  inputPosition = orgInputPosition;
  g_inputFromFile = orgInputFromFile;

  //printf("**** parsePrototype end\n");
}

void scanFreeScanner()
{
#if defined(YY_FLEX_SUBMINOR_VERSION)
  if (g_lexInit)
  {
    scanYYlex_destroy();
  }
#endif
}

//static void handleGroupStartCommand(const char *header)
//{
//  memberGroupHeader=header;
//  startGroupInDoc();
//}
//
//static void handleGroupEndCommand()
//{
//  endGroup();
//  previous=0;
//}

//----------------------------------------------------------------------------

void CLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);
}

void CLanguageScanner::parseCode(CodeOutputInterface & codeOutIntf,
                   const char * scopeName,
                   const QCString & input,
                   bool isExampleBlock,
                   const char * exampleName,
                   FileDef * fileDef,
                   int startLine,
                   int endLine,
                   bool inlineFragment,
		   MemberDef *memberDef
                  )
{
  ::parseCCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
               fileDef,startLine,endLine,inlineFragment,memberDef);
}

bool CLanguageScanner::needsPreprocessing(const QCString &extension)
{
  QCString fe=extension.lower();
  return 
   !( fe==".java" || fe==".as"  || fe==".d"    || fe==".php" || 
      fe==".php4" || fe==".inc" || fe==".phtml" 
    );
}

void CLanguageScanner::resetCodeParserState()
{
  ::resetCCodeParserState();
}

void CLanguageScanner::parsePrototype(const char *text)
{
  ::parsePrototype(text);
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void scannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


