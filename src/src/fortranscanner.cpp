
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE fscanYYrestart(fscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int fscanYYleng;

extern FILE *fscanYYin, *fscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up fscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via fscanYYrestart()), so that the user can continue scanning by
	 * just pointing fscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when fscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int fscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow fscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh fscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void fscanYYrestart (FILE *input_file  );
void fscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE fscanYY_create_buffer (FILE *file,int size  );
void fscanYY_delete_buffer (YY_BUFFER_STATE b  );
void fscanYY_flush_buffer (YY_BUFFER_STATE b  );
void fscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void fscanYYpop_buffer_state (void );

static void fscanYYensure_buffer_stack (void );
static void fscanYY_load_buffer_state (void );
static void fscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER fscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE fscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE fscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE fscanYY_scan_bytes (yyconst char *bytes,int len  );

void *fscanYYalloc (yy_size_t  );
void *fscanYYrealloc (void *,yy_size_t  );
void fscanYYfree (void *  );

#define yy_new_buffer fscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        fscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            fscanYY_create_buffer(fscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        fscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            fscanYY_create_buffer(fscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define fscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *fscanYYin = (FILE *) 0, *fscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int fscanYYlineno;

int fscanYYlineno = 1;

extern char *fscanYYtext;
#define yytext_ptr fscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up fscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	fscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 75
#define YY_END_OF_BUFFER 76
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[2070] =
    {   0,
       62,   62,   43,   43,   47,   47,   70,   70,   68,   68,
       76,   74,   75,   73,   75,   74,   75,    6,   74,   75,
       74,   75,   74,   75,    1,   73,   75,   74,   75,    6,
       74,   75,   74,   75,   62,   74,   75,   63,   74,   75,
       62,   74,   75,   63,   74,   75,   74,   75,   74,   75,
       74,   75,   74,   75,   74,   75,   74,   75,   74,   75,
       74,   75,   74,   75,   65,   73,   75,   74,   75,   74,
       75,    1,   65,   73,   75,   74,   75,   74,   75,   41,
       74,   75,   41,   74,   75,   41,   74,   75,   41,   74,
       75,   41,   74,   75,   41,   74,   75,   41,   74,   75,

       41,   74,   75,   41,   74,   75,   41,   74,   75,   41,
       74,   75,   74,   75,   74,   75,   38,   41,   74,   75,
       38,   41,   74,   75,   38,   41,   74,   75,   38,   41,
       74,   75,   38,   41,   74,   75,   38,   41,   74,   75,
       38,   41,   74,   75,   38,   41,   74,   75,   38,   41,
       74,   75,   38,   41,   74,   75,   38,   41,   74,   75,
       38,   41,   74,   75,   38,   41,   74,   75,   38,   41,
       74,   75,   38,   41,   74,   75,   74,   75,   74,   75,
       74,   75,   74,   75,   74,   75,   74,   75,   74,   75,
       74,   75,   74,   75,   74,   75,   74,   75,   74,   75,

       41,   74,   75,   41,   74,   75,   41,   74,   75,   74,
       75,   38,   41,   74,   75,   38,   41,   74,   75,   38,
       41,   74,   75,   38,   41,   74,   75,   38,   41,   74,
       75,   38,   41,   74,   75,   28,   74,   75,   28,   74,
       75,   29,   74,   75,   29,   74,   75,   41,   74,   75,
       74,   75,   38,   41,   74,   75,   38,   41,   74,   75,
       74,   75,   74,   75,   46,   74,   75,   43,   46,   74,
       75,   46,   74,   75,    6,   46,   74,   75,   42,   46,
       74,   75,   46,   74,   75,   46,   74,   75,   46,   74,
       75,   46,   74,   75,   46,   74,   75,   46,   74,   75,

       46,   74,   75,   46,   74,   75,   46,   74,   75,   46,
       74,   75,   46,   74,   75,   43,   46,   74,   75,   46,
       74,   75,    6,   46,   74,   75,   42,   46,   74,   75,
       46,   74,   75,   46,   74,   75,   46,   74,   75,   46,
       74,   75,   46,   74,   75,   46,   74,   75,   46,   74,
       75,   46,   74,   75,   46,   74,   75,   46,   74,   75,
       47,   74,   75,   52,   73,   75,   74,   75,   48,   74,
       75,   74,   75,   50,   74,   75,   51,   74,   75,   47,
       74,   75,    1,   52,   73,   75,   74,   75,   48,   74,
       75,   74,   75,   50,   74,   75,   51,   74,   75,   58,

       74,   75,   58,   74,   75,   57,   73,   75,   57,   58,
       74,   75,    6,   58,   74,   75,   58,   74,   75,   56,
       58,   74,   75,   58,   74,   75,   58,   74,   75,   58,
       74,   75,    1,   57,   73,   75,   57,   58,   74,   75,
        6,   58,   74,   75,   58,   74,   75,   56,   58,   74,
       75,   58,   74,   75,   55,   74,   75,   55,   74,   75,
        6,   55,   74,   75,   55,   74,   75,   55,   74,   75,
       55,   74,   75,   55,   74,   75,   55,   74,   75,    6,
       55,   74,   75,   55,   74,   75,   55,   74,   75,   55,
       74,   75,   34,   74,   75,   34,   74,   75,   34,   74,

       75,   34,   74,   75,   74,   75,   38,   41,   74,   75,
       38,   41,   74,   75,   38,   41,   74,   75,   38,   41,
       74,   75,   38,   41,   74,   75,   38,   41,   74,   75,
       38,   41,   74,   75,   38,   41,   74,   75,   38,   41,
       74,   75,   22,   74,   75,   22,   74,   75,    6,   22,
       74,   75,   22,   74,   75,   22,   74,   75,   22,   74,
       75,   22,   74,   75,   22,   74,   75,    6,   22,   74,
       75,   22,   74,   75,   22,   74,   75,   22,   74,   75,
       22,   74,   75,   22,   74,   75,   22,   74,   75,   22,
       74,   75,   22,   74,   75,   22,   74,   75,   22,   74,

       75,   22,   74,   75,   22,   74,   75,   22,   74,   75,
        9,   74,   75,    8,   73,   75,    9,   74,   75,    6,
        9,   74,   75,    9,   74,   75,    9,   74,   75,    1,
        8,   73,   75,    9,   74,   75,    6,    9,   74,   75,
        9,   74,   75,    5,   74,   75,    5,   74,   75,    4,
        5,    6,   74,   75,    5,   74,   75,    5,   74,   75,
        5,   74,   75,    4,    5,    6,   74,   75,    5,   74,
       75,   16,   73,   75,   11,   74,   75,   74,   75,    1,
       16,   73,   75,   11,   74,   75,   74,   75,   74,   75,
       15,   74,   75,   14,   74,   75,   74,   75,   15,   74,

       75,   14,   74,   75,   21,   73,   75,   20,   74,   75,
        1,   21,   73,   75,   20,   74,   75,   70,   74,   75,
       72,   73,   75,   70,   74,   75,    6,   70,   74,   75,
       70,   74,   75,   70,   74,   75,    1,   72,   73,   75,
       70,   74,   75,    6,   70,   74,   75,   70,   74,   75,
       68,   74,   75,   68,   74,   75,    6,   68,   74,   75,
       68,   74,   75,   68,   74,   75,   68,   74,   75,    6,
       68,   74,   75,   68,   74,   75,    7,    3,    2,    1,
        7,    3,    2,   62,   63,   63,   63,   62,   63,   63,
       63,   65,   64,    1,   65,    1,   64,   69,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   69,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   41,
       41,   41,   38,   38,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   28,   28,   28,   28,

       28,   28,   29,   29,   29,   29,   29,   29,   41,   41,
       38,   38,   41,   38,   41,   38,   41,   43,   42,   42,
       45,   43,   42,   42,   45,   47,   50,   51,   67,   48,
       48,   48,   49,   50,   47,   50,   51,   67,   48,   48,
       48,    1,   49,   50,   56,   53,   56,   56,   53,   56,
       54,   54,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   38,   38,   38,   38,   38,   38,   38,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,    8,    1,    8,
       11,   12,   11,   11,   11,   12,   11,   11,   14,   15,

       15,   15,   14,   14,   15,   15,   15,   14,   20,   20,
       20,   20,   20,   20,   70,    7,   70,    3,   70,    2,
       70,   70,    7,   70,    3,   70,    2,   70,   68,    7,
       68,    3,   68,    2,   68,   68,    7,   68,    3,   68,
        2,   68,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
        1,   38,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
    16420,   38,   41,   38,   41,   38,   41,   38,   41,   38,

       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,16420,   41,   41,
       41,   38,   38,   38,   41,   38,   41,16411,   38,   41,
       38,   41,   38,   41,   41,   41,   38,   38,   41,   38,
       41,   38,   41,16411,   34,   34,   34,   34,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,16402,   71,   71,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,16423,16424,   41,

       10,   38,   38,   38,   38,   38,   38,   38,16420,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,16420,    1, 8228, 8228,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,16443,   38,
       41,   38,   41,   38,   41,16423,16424,   38,   41,   38,
       41,   38,   41,   10,16420,16443,   41,   41,   41,   38,
       38,16411,   38,   41,16411,    1, 8219, 8219,   38,   41,

       38,   41,   38,   41,   38,   41,   38,   41,   41,   41,
       38,   38,   41,   38,   41,   38,   41,16411,   44,   44,
       34,   34,   34,   34,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,16402,    1,
     8210, 8210,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,16443,   38,
       38,   38,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,

       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   37,16443,
       37,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,16443,   41,   41,   32,   38,
       38,   38,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   32,   41,   41,   38,   38,   41,   38,   41,
       38,   41,   34,   34,   34,   34,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   37,   13,   13,   60,

       60,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,16423,16424,   41, 8231, 8232,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   41,   61,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   38,   41,   38,   41,16423,
    16424,16443,    1,   38,16443,16443,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41, 8231, 8232,   38,   41,

        1,   61,    1,16443,16443,    1,   26,   41,   41,   38,
       38,   38,   38,   41,   38,   41,   38,   41,   26,   38,
       41,   38,   41,   41,   41,16423,16424,   38,   38,   41,
       38,   41,   38,   41,16423,16424,   34,   33,   34,   34,
       33,   34,   38,   38,   38,   38,   38,   38,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
        1,   38,    1,   41,   41,   41,   41,   41,   41, 8231,
     8231,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   41,
       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,

       38,   41,   38,   41,   38,   41,   38,   41,   38,   41,
       38,   41,   38,   41,   38,   41,   38,16443,   37,16443,
       38,   41,   38,   41,   38,   41,   38,   41, 8231, 8231,
       38,   41,16443,16443,   41,   38,   38,   38,   38,   41,
       38,   41,   38,   41,   38,   41,   41,16423,16424,   31,
       38,   38,   41,   38,   41,16423,16424,    1,   31,   31,
       38,   38,   38,   38,   38,   38,   38,   41,   38,   41,
    16419,   38,   41,   41,   41,   41,   66,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   41,   38,   41, 8217,   38,   41,16409,   38,   41,

       38,   41,   38,   41,16420,   38,   41,   38,   41,   38,
       41,   38,   41,   38,   41,   37,16443,   37,   38,   41,
       38,   41,   38,   41,   38,   41,   66,   38,   41,16420,
    16443,   26,   38,   38,   38, 8215,   38,   41,16407,   38,
       41,   38,   41,   26,   30,   38, 8216,   38,   41,16408,
        1,   30,   30,   38,   38,16419,   38,   41,16419,16419,
        1, 8227, 8227,   41,   41,16423,16424,   66,   66,   38,
     8217,   38,16409,   38,   38,16420,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   41,   38,   41,16443, 8217,
        1, 8217, 8217,   38,   41,16423,16424,   38,   41,16420,

       38,   41,   38,   41,   38,   41,16401,   38,   41,   38,
       41,   38,   41,   38,   41,   66,   66,   38,   41,16443,
    16420, 8215,   38,16407,   38,   38, 8215,    1, 8215, 8215,
       38,   41,16411,   38,   41, 8216,   38,16408, 8216,    1,
     8216, 8216,16411,   38,   38,   41,16419,16419,   41,16423,
    16424,   38,16443,   38,   38,   38,   38,16401,   38,   38,
       38,   38,   38,   38,   41,   37,16443,16420,   38,   41,
       38,   41,   38,16423,16424,    1, 8209, 8209, 8251,   38,
       41,   38,   41,16443, 8251,   38,16411,   38,16411,16411,
       38,   37,16419,16419,16419,   38,   38,   38,   38,16443,

        1,   38,16443,16443,    1,16420,16420,16420,   38,   41,
    16401,   38,   41,   38,   41,    1,16443,16443,   32,16411,
       32,    1,    1,   38,   38,   38,   38,   38,16443,    1,
    16443,   38,16423,16424,   38,   41,16401,16401,   38,   41,
    16443,    1,16443,16411,16411,16411,   38,    1,16402,   38,
       38,16443,    1, 8251,   38,   41,16443,16402,   38,16401,
    16401,16402, 8209,   19,16402,16402,16402,   19,16443
    } ;

static yyconst flex_int16_t yy_accept[1878] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    5,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    8,    9,   10,   11,   11,   11,   12,   14,   16,
       18,   21,   23,   25,   28,   30,   33,   35,   38,   41,
       44,   47,   49,   51,   53,   55,   57,   59,   61,   63,
       65,   68,   70,   72,   76,   78,   80,   83,   86,   89,
       92,   95,   98,  101,  104,  107,  110,  113,  115,  117,

      121,  125,  129,  133,  137,  141,  145,  149,  153,  157,
      161,  165,  169,  173,  177,  179,  181,  183,  185,  187,
      189,  191,  193,  195,  197,  199,  201,  204,  207,  210,
      212,  216,  220,  224,  228,  232,  236,  239,  242,  245,
      248,  251,  253,  257,  261,  263,  265,  268,  272,  275,
      279,  283,  286,  289,  292,  295,  298,  301,  304,  307,
      310,  313,  316,  320,  323,  327,  331,  334,  337,  340,
      343,  346,  349,  352,  355,  358,  361,  364,  367,  369,
      372,  374,  377,  380,  383,  387,  389,  392,  394,  397,
      400,  403,  406,  409,  413,  417,  420,  424,  427,  430,

      433,  437,  441,  445,  448,  452,  455,  458,  461,  465,
      468,  471,  474,  477,  480,  484,  487,  490,  493,  496,
      499,  502,  505,  507,  511,  515,  519,  523,  527,  531,
      535,  539,  543,  546,  549,  553,  556,  559,  562,  565,
      568,  572,  575,  578,  581,  584,  587,  590,  593,  596,
      599,  602,  605,  608,  611,  614,  617,  620,  624,  627,
      630,  634,  637,  641,  644,  647,  650,  655,  658,  661,
      664,  669,  672,  675,  678,  680,  684,  687,  689,  691,
      694,  697,  699,  702,  705,  708,  711,  715,  718,  721,
      724,  727,  731,  734,  737,  741,  744,  748,  751,  754,

      757,  761,  764,  767,  770,  774,  777,  778,  779,  780,
      780,  781,  782,  783,  784,  785,  786,  787,  788,  789,
      790,  791,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  793,  793,
      793,  794,  794,  796,  796,  796,  797,  798,  799,  800,
      801,  802,  803,  804,  805,  806,  807,  808,  809,  810,
      811,  812,  813,  814,  815,  815,  816,  817,  818,  819,
      820,  821,  822,  823,  824,  825,  826,  827,  828,  828,
      830,  830,  832,  834,  836,  838,  840,  842,  844,  846,
      848,  850,  852,  854,  856,  858,  860,  862,  864,  866,

      868,  870,  872,  874,  876,  878,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  880,  880,  880,
      880,  880,  881,  882,  883,  883,  884,  885,  887,  889,
      891,  893,  895,  897,  898,  899,  900,  901,  902,  903,
      904,  905,  906,  907,  908,  909,  910,  911,  911,  912,
      914,  916,  918,  918,  918,  918,  919,  920,  921,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  923,  924,  925,  926,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  926,  927,  927,  928,  929,

      930,  931,  932,  933,  933,  934,  935,  936,  936,  937,
      938,  939,  940,  941,  942,  942,  943,  944,  945,  945,
      946,  947,  948,  948,  949,  950,  951,  952,  953,  954,
      955,  956,  957,  958,  959,  960,  961,  962,  963,  963,
      964,  965,  966,  967,  968,  969,  970,  972,  974,  976,
      978,  980,  982,  984,  986,  988,  988,  988,  988,  988,
      988,  989,  991,  992,  993,  994,  995,  995,  995,  996,
      997,  998,  999,  999,  999,  999, 1000, 1001, 1002, 1003,
     1004, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012,
     1013, 1014, 1015, 1016, 1016, 1016, 1018, 1020, 1022, 1023,

     1025, 1027, 1029, 1030, 1032, 1034, 1036, 1037, 1039, 1041,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
     1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
     1067, 1068, 1069, 1070, 1071, 1071, 1072, 1073, 1075, 1077,
     1079, 1081, 1083, 1085, 1087, 1089, 1092, 1094, 1096, 1098,
     1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118,
     1120, 1122, 1124, 1126, 1128, 1128, 1128, 1128, 1128, 1128,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1130,
     1131, 1132, 1133, 1134, 1136, 1139, 1141, 1143, 1145, 1146,

     1147, 1148, 1150, 1152, 1154, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1156, 1157,
     1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
     1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1183, 1184,
     1184, 1184, 1184, 1185, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
     1196, 1197, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
     1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
     1218, 1219, 1221, 1223, 1225, 1227, 1229, 1231, 1233, 1235,

     1236, 1238, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253,
     1255, 1257, 1259, 1261, 1263, 1265, 1267, 1270, 1272, 1274,
     1278, 1280, 1282, 1284, 1285, 1285, 1285, 1285, 1285, 1285,
     1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1287, 1287,
     1287, 1287, 1288, 1289, 1290, 1291, 1293, 1295, 1296, 1298,
     1299, 1301, 1303, 1305, 1307, 1309, 1310, 1311, 1312, 1314,
     1316, 1318, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1321, 1321, 1322,
     1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,

     1333, 1335, 1337, 1339, 1339, 1341, 1343, 1345, 1347, 1349,
     1349, 1350, 1352, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
     1360, 1361, 1362, 1363, 1364, 1364, 1364, 1365, 1366, 1367,
     1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
     1378, 1380, 1381, 1382, 1383, 1385, 1387, 1389, 1391, 1393,
     1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413,
     1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1429, 1431,
     1431, 1431, 1432, 1434, 1436, 1438, 1440, 1442, 1442, 1442,
     1444, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,

     1446, 1446, 1446, 1446, 1446, 1446, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1447, 1447, 1448, 1449, 1450, 1450,
     1451, 1452, 1453, 1455, 1457, 1459, 1461, 1463, 1464, 1464,
     1465, 1466, 1467, 1469, 1471, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483,
     1484, 1485, 1487, 1489, 1491, 1491, 1493, 1495, 1497, 1498,
     1498, 1498, 1498, 1498, 1498, 1498, 1498, 1499, 1500, 1501,
     1501, 1501, 1502, 1502, 1502, 1503, 1504, 1505, 1506, 1507,

     1508, 1509, 1510, 1511, 1514, 1515, 1516, 1517, 1518, 1519,
     1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
     1530, 1531, 1532, 1533, 1534, 1535, 1537, 1538, 1540, 1542,
     1544, 1546, 1548, 1550, 1552, 1554, 1556, 1558, 1560, 1562,
     1564, 1566, 1568, 1570, 1572, 1574, 1576, 1578, 1582, 1582,
     1582, 1582, 1583, 1583, 1584, 1586, 1586, 1587, 1589, 1591,
     1593, 1595, 1597, 1598, 1599, 1601, 1601, 1602, 1603, 1603,
     1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
     1604, 1605, 1605, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
     1607, 1609, 1610, 1610, 1610, 1611, 1612, 1613, 1615, 1617,

     1619, 1622, 1624, 1624, 1624, 1625, 1628, 1629, 1631, 1633,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
     1637, 1638, 1640, 1641, 1643, 1644, 1645, 1646, 1647, 1648,
     1649, 1651, 1653, 1655, 1655, 1657, 1659, 1661, 1661, 1661,
     1662, 1663, 1663, 1663, 1663, 1664, 1664, 1664, 1664, 1664,
     1664, 1664, 1664, 1665, 1666, 1667, 1667, 1667, 1668, 1669,
     1670, 1670, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
     1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
     1688, 1689, 1691, 1693, 1695, 1697, 1697, 1699, 1701, 1703,

     1705, 1707, 1709, 1709, 1709, 1711, 1713, 1715, 1717, 1717,
     1717, 1717, 1717, 1719, 1721, 1723, 1725, 1727, 1729, 1729,
     1729, 1730, 1731, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
     1733, 1733, 1733, 1734, 1735, 1735, 1735, 1735, 1735, 1735,
     1735, 1736, 1736, 1736, 1737, 1738, 1739, 1741, 1743, 1745,
     1747, 1747, 1747, 1750, 1750, 1751, 1752, 1754, 1758, 1758,
     1760, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761,
     1762, 1763, 1764, 1765, 1766, 1767, 1769, 1769, 1769, 1772,
     1772, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773, 1773,

     1774, 1775, 1775, 1775, 1775, 1776, 1777, 1777, 1778, 1779,
     1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
     1790, 1791, 1793, 1795, 1799, 1801, 1801, 1803, 1806, 1808,
     1810, 1810, 1810, 1810, 1812, 1814, 1816, 1816, 1816, 1816,
     1818, 1819, 1819, 1819, 1819, 1821, 1823, 1825, 1827, 1827,
     1828, 1830, 1830, 1830, 1830, 1831, 1831, 1831, 1832, 1832,
     1832, 1832, 1832, 1832, 1833, 1833, 1833, 1834, 1835, 1836,
     1840, 1842, 1844, 1845, 1845, 1845, 1845, 1846, 1847, 1851,
     1851, 1853, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854,
     1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1855,

     1857, 1859, 1859, 1860, 1861, 1863, 1864, 1864, 1864, 1864,
     1864, 1864, 1865, 1868, 1868, 1868, 1869, 1870, 1871, 1874,
     1875, 1877, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885,
     1887, 1890, 1891, 1893, 1894, 1898, 1898, 1900, 1901, 1903,
     1905, 1905, 1905, 1908, 1908, 1908, 1908, 1908, 1908, 1908,
     1910, 1912, 1914, 1916, 1917, 1918, 1920, 1921, 1921, 1921,
     1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922, 1922,
     1925, 1926, 1927, 1928, 1930, 1931, 1934, 1936, 1936, 1936,
     1939, 1940, 1942, 1943, 1944, 1944, 1944, 1944, 1944, 1944,
     1944, 1944, 1944, 1944, 1945, 1947, 1947, 1948, 1949, 1949,

     1949, 1949, 1950, 1950, 1950, 1950, 1952, 1952, 1952, 1954,
     1955, 1956, 1957, 1959, 1960, 1961, 1962, 1963, 1964, 1966,
     1968, 1968, 1968, 1968, 1968, 1968, 1968, 1969, 1971, 1973,
     1973, 1976, 1976, 1976, 1976, 1978, 1979, 1979, 1979, 1979,
     1979, 1979, 1979, 1980, 1982, 1984, 1984, 1985, 1985, 1985,
     1985, 1985, 1985, 1985, 1986, 1986, 1986, 1986, 1986, 1986,
     1988, 1989, 1990, 1990, 1990, 1991, 1991, 1991, 1991, 1991,
     1991, 1991, 1991, 1991, 1991, 1991, 1991, 1991, 1992, 1993,
     1993, 1993, 1993, 1994, 1995, 1996, 1996, 1996, 1996, 1996,
     1996, 1996, 1997, 1998, 1999, 2000, 2001, 2001, 2002, 2004,

     2004, 2004, 2005, 2005, 2006, 2006, 2007, 2008, 2009, 2011,
     2011, 2011, 2011, 2012, 2012, 2012, 2012, 2012, 2012, 2012,
     2012, 2012, 2014, 2016, 2016, 2017, 2018, 2018, 2018, 2019,
     2019, 2019, 2019, 2019, 2019, 2020, 2021, 2021, 2022, 2022,
     2022, 2022, 2022, 2023, 2023, 2023, 2023, 2023, 2024, 2025,
     2025, 2025, 2025, 2025, 2025, 2025, 2025, 2026, 2027, 2028,
     2028, 2030, 2030, 2031, 2032, 2032, 2035, 2035, 2037, 2037,
     2037, 2038, 2039, 2039, 2039, 2039, 2039, 2039, 2039, 2039,
     2039, 2041, 2041, 2042, 2042, 2043, 2044, 2044, 2044, 2044,
     2045, 2046, 2047, 2047, 2048, 2048, 2049, 2049, 2049, 2049,

     2050, 2050, 2051, 2052, 2052, 2053, 2053, 2053, 2053, 2054,
     2054, 2054, 2054, 2054, 2054, 2055, 2055, 2055, 2057, 2057,
     2058, 2058, 2058, 2058, 2058, 2058, 2058, 2059, 2059, 2060,
     2060, 2060, 2061, 2061, 2061, 2062, 2062, 2062, 2062, 2062,
     2062, 2062, 2062, 2062, 2062, 2062, 2063, 2063, 2063, 2063,
     2063, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064, 2064,
     2065, 2066, 2067, 2068, 2069, 2070, 2070, 2070, 2070, 2070,
     2070, 2070, 2070, 2070, 2070, 2070, 2070
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    8,
        9,   10,    1,   11,    1,    1,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,    1,   15,
       16,   17,    1,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   19,   29,   30,   31,   32,   33,   34,
       19,   35,   36,   37,   38,   39,   19,   40,   41,   19,
        1,   18,    1,    1,   19,    1,   20,   21,   22,   23,

       24,   25,   26,   27,   28,   19,   29,   30,   31,   32,
       33,   34,   19,   35,   36,   37,   38,   39,   19,   40,
       41,   19,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[42] =
    {   0,
        1,    2,    3,    1,    1,    4,    1,    5,    1,    1,
        6,    1,    7,    8,    9,    1,    9,    1,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10
    } ;

static yyconst flex_int16_t yy_base[1972] =
    {   0,
        0,    5,   23,   64,  104,  139,  111,  113,  175,  216,
      129,  256,   89,  292,  137,  262,  329,  370,  411,  452,
       93,  273,  264,  135,  492,  528,  565,  606,  646,  663,
      679,  695,  713,  754, 6826,  794,  794,  831,  148,  258,
      299,  504,  872,  913,  954,  995, 1036, 1077,  498,  519,
      655,  672,  802, 1116,  522, 1120, 6860, 6862, 6862,    0,
     6862,  156, 6856, 6862,  153, 6855,  264, 6855,    0,   12,
     1156, 1196, 6826, 6817, 6816, 1197,  115,  267,  271,   14,
     6862, 6844,  310, 6862,  312, 6835,  104,  650,  532,  672,
     1118, 1119, 1196,  682,  688, 1120, 1199, 1235, 1127, 1276,

     6821, 6820,  292,  139,  770, 6811, 6816, 6814, 6812,  788,
     6821,  498,  128, 6808, 1316,  269, 1321,  524, 1198,  499,
      256, 1322,  511,  298,  658,  270, 1122, 6808, 1315,  687,
      471, 1097, 6809, 1116, 6817,  652,  798, 1356, 1133, 1397,
      515, 1201,  677, 1419,  539, 1317, 6862,    0,    0, 6862,
     6838, 6825, 1201, 6808, 6809, 6796, 6803, 6800, 1420, 6813,
     6812, 6828, 1320, 1444, 6827,   17,  800, 1208, 1438, 1439,
      514, 1440, 1441, 1443,  649, 1204, 1454, 6862, 6814, 1214,
     6819, 6825, 6862, 1471, 6862, 1468, 1487, 1201, 1145, 6823,
     6862, 1141, 6862,    0, 6862, 6813, 6822, 1325, 6820, 1331,

     6862, 1526, 6819, 1324, 1446, 1527, 6862,    0, 6862, 6809,
     6811, 1459, 6816, 1532, 6815, 1448, 1477, 1533, 1531, 1533,
     1571, 1291, 1611, 1515, 1417,  288, 6785, 6783, 1532, 6791,
     6794, 1513, 6862, 6796, 6862, 1548, 6779, 6808, 1613, 1547,
     6807, 1611, 1528, 1616, 1617, 1621, 1614, 1622, 1623, 1624,
     1620, 1618, 1625, 1619, 6806, 6862, 6805, 6804, 1659, 6803,
     6862, 1652, 6802, 1665, 6862,    0, 6862, 1666, 6801, 1671,
     6800, 1673, 6862, 1550, 1628, 6862, 1691, 1731, 1558, 1625,
     6800, 1679, 1764, 1733, 6862, 1731, 6862, 1805,    0, 1555,
     1670,    0, 1733, 6798, 1737, 1739, 6797, 1740,    0, 1731,

        0, 1745, 6796, 1844, 6795, 1845, 6862, 6862, 6862, 6794,
     6862, 6793, 6792, 6791, 6791, 1747,    0, 1749, 1851,    0,
     1863,    0, 1903, 6762, 6753, 6752, 6756, 6756, 6766, 1904,
     1905, 1637, 1641, 1656, 1906, 1909, 1854, 6862, 6777, 6776,
     6862, 1908, 6862, 1846, 1910, 6775, 6780, 6862, 1845,    0,
     1908, 1914, 1920, 1909, 1928, 1930, 1936, 1941, 1942, 1939,
     1944, 1950, 1953, 1955,    0, 1989, 6752, 1890, 6748, 1727,
     6742, 6747, 6745, 6739, 6752, 6737, 6733, 6770, 1929,    0,
     1955, 2030,    0, 6742, 6738, 6750, 1941, 6738, 6730, 6743,
     6743, 6728, 6732, 6726, 6736, 6724, 6725, 6731, 6730,  792,

     2052, 6718, 6735, 6720, 6720, 6729,    0, 2070, 1950, 2072,
     2074, 2073, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2083,
      293, 2082, 2084, 1959, 2086, 2087,  109, 2088, 2090, 2092,
     2091, 2113, 2116, 2121, 2126, 1948, 1944, 1953, 6729, 6728,
     2064, 2076, 6716, 2124,    0, 2125,    0, 2155,    0, 2126,
        0, 2127,    0, 2196,    0, 2232, 2233, 2239, 2108, 1955,
     6721, 2221, 2238, 2113, 2241, 2140, 6746, 6745, 6862, 6716,
     6714, 6707, 6706, 6705, 6706, 6712, 6711, 6717, 6698, 6701,
     2246, 2144, 2150, 6732, 2240, 2244, 2247, 2248, 2249, 2252,
     2250, 2255, 2256, 2262, 2263, 2265, 6725, 6731, 6862, 6862,

     2266,    0, 2276, 6723, 6862, 6729, 2288, 2265, 2290, 6727,
     6726,    0, 2304,    0, 2285, 6719, 6724, 2300, 2269, 6724,
     6862, 6723, 2344, 2346, 6721, 2348, 6862, 6720, 2346,    0,
     2347, 2348, 2350, 2376, 2417,    0, 6694, 6700, 2457, 2331,
     6687, 6687, 6686, 6684, 6692, 6674, 6694, 6682, 6674, 6688,
     6673, 6683, 6687, 6687, 6672, 6682, 2459, 2465, 2461, 2463,
     6862, 6862, 2356, 6862, 6693, 2359, 2267, 6671, 2497, 6699,
     2538,    0, 2578, 2457, 2355, 6699, 2362,    0, 2456, 6698,
     2580, 2371, 2611, 2652,    0, 2468, 2459,    0, 2461, 2693,
     2734,    0,    0, 2097,  688,    0,    0,    0, 6696, 6695,

     6694, 6693,    0,    0,    0,    0, 6692, 6691, 6690, 6689,
     6669, 6668, 6654, 2474, 2581, 2773, 2771, 2580, 2581, 2772,
     2579, 2582, 2773, 2774, 2776, 2777, 2584, 2583, 2786, 2815,
        0, 6655, 6667, 2444, 6648, 6661, 6661, 6651, 6645, 6655,
     6645, 2275, 6658, 6644, 2597, 6668, 6673, 6642, 6652, 6638,
     6638, 6634, 6646, 6648, 6637, 2855, 6643, 6644, 2575, 6637,
     6636, 6643, 6630, 6622, 6630, 6635, 6628, 6619, 6618, 6631,
     6619, 6627, 6628, 6649, 2778, 2857, 2859, 2788, 2858, 2861,
     2790, 2863, 2460, 2864, 2865, 2866, 2867, 2870, 2865, 2788,
     2866, 2766, 6627, 6612, 2881, 6610, 6621, 6622, 2868, 2892,

     2771, 6608, 6605, 6613, 2897, 6609, 6617, 6616, 2882, 6611,
     6618, 6605, 6597, 6605, 6610, 6607, 2893, 2905, 2906, 2908,
     2907, 2470, 2910, 2911, 2915, 2913, 2918, 2914, 2927, 6593,
     6601, 6610, 6598, 6590, 6604, 6589, 6599, 6604, 6589, 6587,
     6587, 6599, 2917, 2899, 6591, 6588, 6593, 6578, 2944, 2921,
     6585, 2922, 6610, 6862, 6584, 6575, 6578, 2933, 2936, 2935,
     2943, 2945, 2954, 2958, 2957, 2963, 2968, 2969, 2973, 2974,
     2978, 2998, 2992, 6608, 6587, 6573, 6573, 6569, 6584, 6573,
     3011, 6581, 6578, 6573, 6576, 6569, 6560, 6562, 6572, 6586,
     6862, 6572, 6564, 6572, 6561, 6570, 6557, 6558, 6563, 3046,

     6862, 6583, 6555, 6546, 6545, 6547, 6544, 2962, 6552, 6557,
     6545, 6546, 6539, 6555, 6546, 6571, 3081, 6537, 6541,  499,
     6537, 6545, 2953, 3015, 2963, 2975, 2980, 2998, 3000, 3017,
     3004, 3006, 3019, 3022, 3026, 3023, 2808, 3116, 3027, 3028,
     3038, 3045, 3050, 3063, 6531, 3076, 6547, 3096, 6862, 6563,
     6532, 6529, 6533, 6527, 3062, 3081, 3075, 6524, 6540, 6539,
     6530, 3109, 3057, 3074, 6535, 6524, 6520, 6522, 6525, 6519,
     6520, 6513, 6529, 6520, 6862, 6523, 3083, 3034, 3081, 3036,
     3069, 3090, 3024, 3105, 3111, 3093, 6543, 3112, 3119, 3116,
     6525, 6516, 6508, 6508, 6520, 3118, 6516, 6511, 6508, 6513,

     6516, 6505, 6504, 3143, 6492, 3102, 6510, 3146, 3145, 6501,
     3159, 6862, 6527, 3132, 3135, 6488, 3130, 6526, 6499, 6488,
     3147, 3155, 3156, 3161, 3160, 3163, 3162, 3166, 3171, 3176,
     3180, 3172, 3184, 3195, 1747, 6511, 3199, 6495, 6503, 6492,
     6501, 6490, 6495, 6488, 6479, 6478, 6478, 3176, 6492, 6511,
     3235, 6477, 6478, 3205, 6490, 6507, 6486, 6483, 6478, 6469,
     6475, 6281, 6279, 6277, 6287, 6274, 6277, 6278, 6264, 6273,
     6265, 6276, 6263, 6270, 6268, 6192, 6206, 3216, 3270, 3207,
     3212, 6223, 6195, 6124, 6122, 6123, 6121, 3306, 3214, 6118,
     6090, 3218, 3220, 3189, 3216, 3224, 3228, 3227, 3230, 3232,

     3167, 3219, 3231, 3238, 3242, 3346, 3258, 3266, 3251, 3236,
     3250, 3239, 3254, 3281, 3284, 3344, 3284, 3283, 3268, 6087,
     6070, 6067, 6071, 6075, 6063, 6071, 6072, 3350, 3357, 3349,
     3357, 6071, 6060, 6050, 6063, 3259, 3348, 6064, 6045, 6048,
     6039, 6043, 6040, 6047, 6044, 6030, 6042, 6026, 3283, 3262,
     3361, 3362, 3363, 3366, 3370, 3372, 3369, 3375, 3371, 3370,
     3379, 6013, 6027, 6026, 6015, 5986, 5965, 5950, 5944, 3401,
     3297, 5940, 5937, 5935, 3377, 5924, 5931, 5934, 3411, 3381,
     3414, 3402, 3417, 5928, 3385, 3399, 6862, 5948, 5946, 5914,
     5907, 3298, 3397, 3421, 3419, 3422, 3423, 3431, 3425, 3428,

     3434, 3439, 3436, 3449, 3451, 3459, 6862, 5939, 5918, 5914,
     5909, 5890, 5881, 5878, 5878, 5886, 5878, 5880, 5878, 5880,
     5869, 5859, 5858, 5857, 5854, 5853, 3465, 5852, 5826, 5833,
     5835, 5860, 5802, 5811, 5637, 5623, 5636, 5621, 5618, 3467,
     5631, 5614, 5619, 5628, 5609, 5610, 5619, 3375, 3451, 3463,
     3467, 3500, 3473, 5633, 3535, 3475, 3570, 5608, 5607, 5617,
     5609, 3477, 3606, 5633, 5598, 3477, 5625, 3481, 3486, 3484,
     3490, 3491, 3487, 3492, 3494, 3493, 3495, 3497, 3496, 5623,
     3514, 3509, 3530, 3501, 3510, 3537, 3503, 3504, 3544, 5622,
     3539, 3548, 3542, 2563, 5601, 5605, 5594, 5530, 5522, 5533,

        0, 5527, 3560, 3554, 3561, 3584, 5529, 5524, 5531, 3566,
     3561, 3556, 5517, 5525, 5532, 3594, 5511, 5526, 5457, 5458,
     5468, 3645, 3572, 3545, 3647, 3648, 3649, 3650, 3651, 3653,
     3651, 3652, 5467,    0, 5468, 5463, 5461, 5450, 5458, 5461,
     5443, 5366,   19, 3656,  147,  470,  529, 3658, 3664,  646,
     3660, 3676, 3689, 3667, 1129, 3670, 3677, 3691, 1182, 1317,
     3678, 3575, 3692, 3682, 3693, 3705, 3681, 3705, 3711, 3713,
     3714, 1467,    0, 3714, 1447, 1625, 1828, 1916, 1941, 2132,
     2773, 2840, 2844, 2906, 3013, 3005, 3010, 3264, 3366, 3418,
     3478, 3498, 3495, 3484, 3544, 3726, 3573, 3572, 3567, 3572,

     3655, 3664, 3728, 3736, 3675, 3680, 3691, 3708, 3732, 3737,
     3739, 3734, 3752, 3746, 3722, 3724, 3712, 3711, 3749, 3788,
     3829,    0, 3725, 3746, 3755, 3869, 3765, 3870, 3871, 3872,
     3874, 3753, 3876, 3877, 3762, 3873, 3879, 3878, 3881, 3761,
     3774, 3746, 3754, 3746, 3743, 3757, 3750, 3853, 3850, 3884,
     3887, 3886, 3889, 3916, 6862, 3855, 3852, 3919, 3922, 6862,
     3891, 3897, 3893, 3884, 3877, 3881, 3927, 3914, 3903, 3902,
     3910, 3933, 3934, 3935, 3937, 3941, 3938, 3943, 3946, 3911,
     3910, 3949, 3928, 3919, 3925, 3932, 3955, 3956, 3958, 3955,
     3970, 3959, 3969, 3940, 3973, 3975, 3976, 3950, 3980, 3979,

     3981, 3986, 3954, 3952, 3985, 3989, 3991, 3991, 3972, 3963,
     3981, 3976, 3969, 3977, 3983, 3994, 3995, 3996, 3985, 3982,
     3994, 4002, 3990, 4024, 3997, 4027, 4001, 4030, 4007, 3998,
     4035, 4037, 4036, 4017, 4020, 4008, 4044, 4046, 4045, 4051,
     6862, 4020, 4013, 4014, 4025, 4018, 4023, 4033,    0, 4087,
     4026, 4126, 4127, 4056, 4062, 4057, 4128, 4131, 4129, 4131,
     4132, 4058, 4137, 4065, 4032, 4043, 4041, 4048, 4044, 4134,
     4056, 4061, 4139, 4136, 4140, 4146, 6862, 4048, 4142, 4151,
     6862, 4148, 4154, 4156, 4142, 4132, 4169, 4140, 4135, 4152,
     4142, 4177, 4176, 4179, 4181, 4180, 4182, 4184, 4162, 4186,

     4156, 4189, 4191, 4224, 6862, 4193, 4166, 4197, 4263, 4177,
     4264, 4262, 4207, 4267, 4166,    0, 4208, 4170, 4268, 4176,
     4275, 4188, 4179, 4196, 4194, 4236, 4241, 4256, 4249, 4252,
     4299, 4281, 6862, 4282, 4285, 4287, 4284, 4335, 4258, 4257,
     4295, 4374, 4312, 4299, 4303, 4292, 4270, 4276, 4291, 4315,
     4290, 4281, 4319, 4411,    0, 4298, 4451, 4375, 4323, 4377,
     4377, 4452, 4327, 4378, 4453, 4329, 4379, 4313, 4306, 4384,
     4360, 4369, 4388, 6862, 4389, 4391, 4366, 4454, 4455, 4398,
     4460, 6862, 4395, 4405, 4457, 4374, 4462, 4464, 4368, 4462,
     4476, 4491, 4464, 4434, 4488, 4479, 4469, 4524, 4453, 4492,

     4482, 4560, 4503, 4471, 4565, 4504, 4443, 4505, 4597, 4484,
     4475, 4472, 4517, 4508, 4485, 4477, 4514, 4498, 4499, 4632,
     4566, 4568, 4570, 4574, 4565, 4578, 4668, 4547, 4554, 4586,
     4589, 4587, 4591, 4709, 6862, 4582, 4594, 4604, 4601, 4579,
     4587, 4575, 4612, 4583, 4580, 4621, 4749, 4618, 4628, 4621,
     4630, 4750, 4751, 4644, 4753, 4752, 4756, 4607, 4626, 4647,
     4621, 4791, 4830, 4759, 4658, 4634, 4659, 4650, 4832, 4624,
     4758, 4760, 4763, 4766, 4833, 4834, 4774, 4836, 4846, 4769,
     4849, 4765, 4856, 4872,    0, 4639, 4842, 4837, 4752, 4727,
     4861, 4741, 4760, 4806, 4806, 4912, 4914, 4844, 4947, 4916,

     4918, 4982, 4922, 4846, 4913, 4932, 5018,    0, 4836, 4924,
     4936, 4944, 5059, 4925, 4927, 4937, 4935, 4939, 4840, 4834,
     4910, 4912, 4923, 4951, 4943, 4953, 4963, 4960, 4977, 4978,
     4967, 4979, 4984, 4940, 6862, 5100, 4985, 4974, 4977, 4954,
     4992, 5001, 4983, 5139, 5141, 5143, 5005, 4988, 5145, 5152,
     5149, 5159, 5146, 4977, 5154, 5160, 4973, 4983, 4988, 5008,
     5166, 5166, 5155, 5201, 5157, 5165, 5178, 5147, 5182, 5186,
     5237,    0, 5179, 5189, 5190, 5197, 5193, 5195, 5170, 5163,
     5173, 5197, 5277, 5207, 5198, 5278, 5279, 5205, 5280, 5231,
     5315,    0, 5200, 5209, 5215, 5212, 5282, 5354, 5189, 5284,

     5355, 5204, 5198, 5222, 5358, 5356, 5292, 5302, 5288, 5358,
     5360, 5361, 5359, 5362, 5234, 5256, 5254, 5268, 5297, 5371,
     5367, 5363, 5298, 5366, 5371, 5273, 5407, 5368, 5285, 5372,
     5447, 5398, 5380, 5449, 5450, 5457, 5452, 5459, 5454, 5461,
     5335, 5348, 5462, 5463, 5354, 5496, 5464, 5535, 5466, 5469,
     6862, 5537, 5537, 5539, 5539, 5542, 5349, 5546, 5547, 6862,
     5475, 5579,    0, 5395, 5619, 5620, 5540, 5542, 5380, 5472,
     5545, 5548, 5621, 5622, 5623, 6862, 5660, 5670, 5680, 5690,
     5700, 5710, 5720, 5730, 5740, 5750, 5760, 5770, 5780, 5790,
     5800, 5810, 5820, 5830, 5840, 5850, 5857, 5867, 5877, 5884,

     5891, 5898, 5905, 5915, 5925, 5932, 5939, 5946, 5953, 5963,
     5973, 5983, 5993, 6003, 6013, 6023, 6033, 6037, 6041, 6051,
     6055, 6059, 6063, 6067, 6072, 6079, 6083, 6090, 6094, 6104,
     6114, 6124, 6134, 6144, 6153, 6163, 6173, 6183, 6193, 6203,
     6213, 6220, 6230, 6240, 6250, 6260, 6270, 6280, 6289, 6293,
     6300, 6304, 6314, 6324, 6334, 6344, 6354, 6364, 6374, 6384,
     6394, 6404, 6414, 6424, 6434, 6444, 6454, 6464, 6474, 6484,
     6494
    } ;

static yyconst flex_int16_t yy_def[1972] =
    {   0,
     1877, 1878, 1876, 1876, 1877, 1878,    5,    6, 1876, 1876,
        5,    6,    9,   10,    5,    6, 1876, 1876, 1876, 1876,
        9,   10,    5,   12, 1879, 1880, 1876, 1876, 1881, 1882,
     1883, 1884, 1876, 1876,    9,   10, 1885, 1876, 1886, 1887,
     1888, 1889, 1876, 1876, 1876, 1876, 1876, 1876,    5,    6,
     1890, 1891, 1892, 1893,    5,    6, 1876, 1876, 1876, 1894,
     1876, 1876, 1895, 1876, 1896, 1895, 1895, 1876, 1897, 1895,
     1876, 1876, 1876, 1876, 1876, 1895, 1895, 1895, 1895, 1876,
     1876, 1898, 1895, 1876, 1899, 1894, 1900, 1900, 1900, 1900,
     1900, 1900, 1900, 1900, 1900, 1900, 1900, 1876, 1896, 1876,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1900,   93, 1900,   98,
      100,  100,  100,  100,  100,  100, 1901, 1876, 1902, 1876,
       93,   98,  100,  100,  115, 1895, 1876, 1876, 1894, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1895, 1895, 1896, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1876, 1876, 1894, 1903,
     1904, 1876, 1876, 1895, 1876, 1896, 1876, 1905, 1895, 1895,
     1876, 1876, 1876, 1894, 1876, 1876, 1876, 1876, 1895, 1895,

     1876, 1896, 1895, 1895, 1895, 1895, 1876, 1894, 1876, 1876,
     1876, 1876, 1895, 1896, 1895, 1895, 1895, 1895, 1906, 1906,
     1876,  221,   98,  100,  100,  100,  100,  100,  100,  100,
      100,  100, 1876, 1894, 1876, 1876, 1876, 1895,  115, 1896,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1876, 1876, 1894, 1876, 1876, 1895,
     1876, 1896, 1895, 1895, 1876, 1894, 1876, 1876, 1895, 1896,
     1895, 1895, 1876, 1907, 1876, 1876, 1876, 1895, 1876, 1908,
     1876, 1895, 1876, 1895, 1876, 1909, 1876, 1876, 1910, 1876,
     1911, 1910, 1910, 1912, 1876, 1913, 1912, 1912, 1914, 1915,

     1914, 1914, 1916, 1917, 1916, 1916, 1876, 1876, 1876, 1895,
     1876, 1895, 1895, 1895, 1876, 1897, 1918, 1897, 1895,   71,
     1876,   71, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1876, 1876, 1898, 1898,
     1876, 1895, 1876, 1899, 1899, 1898, 1895, 1876, 1900, 1919,
     1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900,
     1900, 1900, 1900, 1900,   98, 1876,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366, 1895, 1895,  100,
     1920, 1876,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  115, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1900, 1900, 1900,   98,  366,  366,  100,  100,  100,
      100,  100,  100, 1901, 1921, 1901,  138, 1876,  138, 1902,
     1922, 1902,  140, 1876,  140, 1900, 1900,   98,  366,  100,
      100,  100,  115, 1895, 1895, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1876, 1904, 1876, 1876, 1876,

     1903, 1923, 1903, 1904, 1876, 1876, 1895, 1905, 1895, 1895,
     1895,  187, 1876,  187, 1905, 1904, 1895, 1895, 1876, 1876,
     1876, 1876, 1895, 1895, 1895, 1895, 1876, 1895, 1906, 1924,
     1906, 1906, 1906, 1876, 1876,  534,  534,  534,   98,  366,
      366,  366,  366,  366,  366,  366,  100,  100,  100,  100,
      100,  100,  100,  100,  100, 1876,  115, 1895, 1895, 1895,
     1876, 1876, 1907, 1876, 1925, 1907, 1876, 1876, 1876, 1895,
     1876,  569, 1895, 1895, 1876, 1876, 1926, 1927, 1926, 1876,
     1895, 1895, 1876, 1876,  583, 1895, 1928, 1929, 1928, 1876,
     1876,  590, 1930, 1876, 1876, 1930, 1930, 1930, 1931, 1931,

     1931, 1931, 1932, 1932, 1932, 1932, 1933, 1933, 1933, 1933,
     1876, 1876, 1876, 1895, 1895, 1895, 1900, 1900, 1900, 1900,
     1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900, 1876,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366, 1920, 1934, 1895,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1900, 1900,
     1900,  366,  366,  100,  100,  100,  100,  100, 1900, 1900,

      366,  100,  100,  100, 1895, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1906, 1906,  534,
      534,  366,  366,  366,  366,  366,  366,  366,  366,  100,
      100,  100,  100,  100,  100,  100,  100, 1876, 1895, 1895,
     1876, 1895, 1876, 1876, 1876, 1876, 1876, 1895, 1895, 1895,
     1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900, 1900,
     1900, 1900, 1900, 1876,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366, 1934,
     1876,  100,  100,  100,  100,  100,  100,  100,  100, 1895,

     1876, 1895,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1900, 1900, 1900,  366,  366,  100, 1895, 1876, 1895,
      100,  100,  100,  100,  100, 1900, 1900,  366,  100,  100,
      100, 1895, 1895, 1895, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1895, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1906, 1906,
      534,  534,  366,  366,  366,  366,  366,  366,  366,  366,

      100,  100,  100, 1895,  100,  100,  100,  100,  100, 1876,
     1895, 1876, 1895, 1895, 1895, 1876, 1895, 1876, 1876, 1876,
     1895, 1895, 1895, 1900, 1900, 1900, 1900, 1900, 1900, 1900,
     1900, 1900, 1900, 1900, 1935, 1876, 1900,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  115, 1895, 1936,
     1895, 1895,  100,  100,  100,  100,  100, 1876, 1895,  100,
      100, 1895, 1937, 1895, 1895, 1895, 1895, 1895, 1895, 1895,

     1895, 1895, 1895, 1895,  115, 1895, 1938, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1939, 1900, 1900, 1876, 1876,  366,
      366,  366,  100,  100,  100,  100,  100, 1895, 1895, 1900,
     1900,  366,  100,  100,  100, 1895, 1895, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1906,
     1906,  534,  534,  366,  366,  366,  366,  366,  366,  366,
      366,  100,  100,  100, 1895,  100,  100,  100, 1895, 1940,
     1895, 1895, 1941, 1876, 1895, 1895, 1876, 1895, 1876, 1876,
     1876, 1895, 1895, 1895, 1900, 1900, 1900, 1900, 1900, 1900,

     1900, 1900, 1900, 1900, 1900, 1942, 1876,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  100, 1895,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100, 1895, 1895,
     1895, 1895, 1936, 1943, 1895, 1895, 1895,  100,  100,  100,
      100,  100, 1876, 1895,  100, 1937, 1944, 1895, 1895, 1895,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1938, 1945,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1939, 1946,
     1900, 1900, 1876, 1876,  366,  366,  366,  100,  100,  100,

      100,  100, 1895, 1895, 1900, 1900,  366,  100,  100,  100,
     1895, 1895, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1906, 1906,  534,  534,  366,  366,  366,  366,  366,  366,
      100,  100,  100, 1895,  100,  100,  100, 1895, 1940, 1947,
     1895, 1895, 1895, 1941, 1948, 1876, 1895, 1895, 1876, 1876,
     1895, 1895, 1900, 1900, 1900, 1876, 1876, 1900, 1900, 1900,
     1876, 1949, 1950, 1942,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  100,  100,  100,  100, 1895,  100,  100,  100,  100,

      100,  100, 1895, 1920,  100,  100,  100,  100, 1895, 1895,
     1895, 1943, 1876, 1895,  100,  100,  100,  100, 1895, 1876,
     1876, 1163,  100, 1944, 1895, 1895, 1895, 1895, 1895, 1895,
     1895, 1945, 1876, 1895, 1895, 1895, 1895, 1895, 1895, 1946,
     1900, 1876, 1876,  366,  366,  366,  100,  100,  100,  100,
     1895, 1895, 1206, 1935, 1876,  366,  100,  100,  988, 1876,
     1895, 1895, 1895, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,  366,
      366,  366,  366,  366,  366,  100, 1895, 1895,  100, 1947,
     1876, 1948, 1876, 1876, 1895, 1895, 1895, 1876, 1895, 1900,

     1900, 1876, 1876, 1876, 1900, 1900, 1949, 1951,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  100,  100,  100,  100, 1895,  100,  100,  100,  100,
     1920, 1920, 1920,  100,  100,  100, 1895, 1895, 1895, 1876,
     1876, 1876, 1876, 1876,  100,  100,  100,  100, 1320, 1876,
      100, 1895, 1895, 1895, 1895, 1895, 1895, 1876, 1895, 1895,
     1895, 1895, 1895, 1876, 1876, 1876,  366,  366,  366,  100,
      100,  100, 1895, 1895, 1895, 1935, 1876,  366,  100,  988,
     1876, 1895, 1895, 1895, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1895, 1895, 1895, 1895, 1895, 1895, 1895,  366,  366,

      100, 1895, 1895, 1876, 1876, 1895, 1876, 1895, 1895, 1876,
     1895, 1900, 1206, 1876, 1876, 1952, 1951,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  100,
      100, 1895, 1876, 1895,  100, 1895,  100, 1876,  100,  100,
     1920, 1920,  100, 1895, 1895, 1895, 1876, 1876, 1876,  100,
      100,  100,  100, 1876, 1450,  100, 1895, 1895, 1895, 1538,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1876, 1876,  366,
      366,  366, 1895, 1876, 1895,  100,  100, 1895, 1895,  366,
     1895, 1876, 1895, 1895, 1895, 1876, 1876, 1876, 1876, 1895,
     1895, 1895, 1895,  366,  100, 1895, 1504, 1876, 1876, 1895,

     1895, 1900, 1935, 1953, 1876, 1876, 1876, 1876,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  100, 1895,
     1954, 1895,  988, 1955, 1895,  115, 1876,  100,  100, 1920,
     1895, 1920, 1920, 1876, 1876, 1895, 1895,  115, 1895, 1876,
     1876, 1876, 1895,  100,  100,  115, 1895, 1956, 1895, 1895,
      115, 1895, 1895, 1895, 1895, 1895,  115, 1876, 1876,  366,
      366, 1876, 1895, 1895, 1662, 1876, 1876, 1957, 1876, 1876,
     1876, 1895, 1895, 1958, 1895, 1895, 1895,  366, 1895, 1959,
     1895, 1895, 1895, 1876, 1598, 1876, 1895, 1895, 1953, 1876,
     1876,  366,  366,  366,  366, 1895, 1954, 1960, 1895, 1895,

     1961, 1895, 1955, 1962, 1895, 1895, 1876, 1627,  100,  988,
     1920, 1920, 1876, 1895, 1895, 1895, 1895, 1895, 1876, 1876,
     1876,  100,  100, 1956, 1963, 1895, 1895, 1964, 1895, 1895,
     1895, 1895, 1895, 1876, 1876, 1876, 1895, 1895, 1957, 1876,
     1876, 1958, 1957, 1895, 1895, 1895, 1959, 1965, 1895, 1895,
     1966, 1895, 1895, 1876, 1895, 1895,  366,  366,  366, 1960,
     1876, 1961, 1967, 1895, 1962, 1876, 1895,  100, 1895, 1968,
     1876, 1713, 1895, 1895, 1895, 1895, 1895, 1876, 1876, 1876,
      100, 1963, 1876, 1964, 1969, 1895, 1895, 1895, 1895, 1895,
     1876, 1736, 1965, 1876, 1966, 1970, 1895, 1895, 1876, 1895,

     1895,  366,  366, 1967, 1876, 1895, 1968, 1968, 1971, 1895,
     1895, 1895, 1895, 1895, 1876, 1876, 1876,  100, 1969, 1876,
     1895, 1895, 1970, 1876, 1895, 1876, 1876, 1895,  366, 1895,
     1895, 1895, 1971, 1876, 1876, 1895, 1895, 1895, 1895, 1895,
     1876, 1876, 1895, 1895, 1876, 1876, 1895, 1895, 1895, 1876,
     1876,  115, 1895,  115, 1895,  115, 1876, 1895, 1895, 1876,
     1895, 1876, 1846, 1895, 1895, 1895, 1895, 1895, 1876, 1895,
     1895, 1895, 1895, 1895, 1895,    0, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,

     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876
    } ;

static yyconst flex_int16_t yy_nxt[6904] =
    {   0,
     1876,  466,   59,   60,   61,  316,   61,   64,   65,   66,
      467,   66,  317,  319,  311,  337,  338,   62,  483,  311,
     1387,  339,   67,   58,   68,   59,   60,   61,   69,   61,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       62,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   63,   70,   64,   65,   66,   71,
       66,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   67,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   72,   59,   60,   61,  349,
       61,  311,   80,   81,   83,   84,  350,  311,   82,  127,
       85,   62,  128,   87,   73,  129,  141,   87,   74,  129,
       58,   58,   86,   63,  683,   58,  145,   63,   58,   75,
       76,   64,   65,   66,  334,   66,   58,  404,   63,   58,
      256,  257,  258,   58,  258,  311,   67,   58,  146,   77,
      308,   58,  308,   78,   58,  259,  388,  310,  405,  310,
     1389,  389,   58,  309,   79,   58,   58,   59,   86,   61,
       87,   61,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   62,   87,   88,   87,   87,   89,   90,   87,

       87,   87,   91,   87,   87,   87,   87,   92,   93,   94,
       95,   96,   97,   87,   87,   87,   63,   98,   64,   99,
       66,  100,   66,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   67,  100,  101,  102,  103,  104,  105,
      106,  100,  100,  107,  100,  108,  100,  100,  109,  110,
      111,  112,  113,  114,  100,  100,  100,  115,  311,   99,
      261,  262,  263,   63,  263,   58,  311,   86,  313,  311,
      313,  311,  311,  311,  142,  264,  116,  117,  118,  119,
      120,  314,   63,  121,   58,  122,   63,  426,   58,  123,
      124,  125,  126,  130,  143,  311,  132,   63,  419,   58,

      311,   59,  266,  267,  335,  267,  144,  135,  336,  136,
      431,  342,  343,  131,  346,  132,  268,  344,  386,  550,
      347,  429,  133,  677,  387,  134,  135,  392,  136,   58,
       58,   59,   60,   61,  137,   61,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   62,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
       63,   63,   64,   65,   66,  138,   66,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   67,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,   58,   58,   59,   60,   61,  139,   61,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   62,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,   63,   63,   64,   65,   66,  140,   66,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   67,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  148,   59,  149,  150,  386,  150,   58,

      988,  311,  151,  438,  908,  152,   64,  270,  271,  153,
      271,  154,  989,  311,  155,  156,  311,  402,   58,  157,
       63,  272,   58,   58,  158,  159,  311,  160,  161,  163,
       64,  164,  165,   58,  165,  403,  425,  349,  166,   63,
      463,  167,   58,   63,  350,  168,   58,  169,  428,  456,
      170,  171,  457,  487,   63,  172,  422,   58,  908,  353,
      173,  174,  464,  175,  176,   58,  177,  178,  179,   61,
      180,   61,  181,   58,   58,  182,   58,   58,   58,   58,
      183,   58,   62,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

      180,  180,  180,  180,  180,  180,   63,  184,  185,  186,
       66,  187,   66,  188,   63,   63,  189,   63,   63,   63,
       63,  190,   63,   67,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  192,  193,  194,
      195,  311,  195,  196, 1391,  349,  197,  290,  291,  292,
      311,  292,  350,  198,  200,  201,  202,  203,  494,  203,
      204,  404,  293,  205,  295,  296,  297,  349,  297,  352,
      206,   59,  208,  209,  350,  209,  210,  349,  435,  298,
      211,  753,  443,  349,  350,  430,  212,   64,  214,  215,

      350,  215,  216,  386,  754,  361,  217,  362,  436,  460,
      437,  354,  218,   58,   58,   59,   60,   61,  219,   61,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       62,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  220,  219,  219,  219,
      219,  219,  219,  219,   63,   63,   64,   65,   66,  221,
       66,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   67,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  222,  221,  221,
      221,  221,  221,  221,  221,  223,   59,  234,  235,  390,

      235,  391,  311,  444,   59,  300,  301,  397,  301,  392,
      445,  236,  665,  484,  100,  224,  225,  226,  100,  302,
      398,  227,  399,  228,  237,  400,  666,  229,  230,  231,
      232,  238,  239,   64,  240,  241,  238,  241,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  242,  238,
      238,  243,  244,  245,  246,  247,  238,  238,  248,  238,
      249,  250,  238,  238,  251,  252,  253,  254,  238,  238,
      238,  238,   58,   58,  273,   60,   61,  274,   61,   58,
       58,   58,  275,   58,   58,   58,   58,   58,   58,   62,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,   63,   63,  276,   65,   66,  277,   66,
       63,   63,   63,  278,   63,   63,   63,   63,   63,   63,
       67,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,   58,  279,  273,   60,   61,  280,
       61,   58,   58,   58,  281,   58,   58,   58,   58,   58,
       58,   62,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,   63,  282,  276,   65,   66,

      283,   66,   63,   63,   63,  284,   63,   63,   63,   63,
       63,   63,   67,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,   58,   58,  285,   60,
       61,  286,   61,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   62,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,   63,   63,  287,
       65,   66,  288,   66,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   67,  288,  288,  288,  288,  288,

      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,   64,  304,
      305,   63,  305,  349,  349,  349,  390,  349,  439,  311,
      350,  350,  350,  306,  350,  397,  392, 1391,  450,  363,
       63,  310,  519,  378,   63,  451,  518,  311,  398,  355,
      441,  520,  356,  400,  432,   63,  310,  310,  311,  310,
      310,  320,  310,  310,  310,  310,  310,  310,  321,  310,
      310,  310,  310,  310,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  322,  322,  323,  330,  311,

      311,  349,  458,  516,  349,  308,  311,  308,  350,  517,
      311,  350,  313,  918,  313,  357,  324,  331,  309,  501,
      325,  332,  459,  495,  437,  314,  502,  423,  358,  424,
      359,  326,  333,  360,  364,  310,  365,  311,  310,  310,
      366,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  366,  366,  367,  368,  369,  370,  371,
      366,  366,  372,  366,  373,  366,  366,  366,  374,  375,
      376,  377,  366,  366,  366,  366,  310,  379,  311,  310,
      310,  380,  310,  381,  310,  310,  310,  310,  382,  310,
      310,  310,  310,  310,  383,  383,  383,  383,  383,  383,

      383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  407,  311,  311,
      349,  481,  311,  311,  311,  537,  311,  350,  538,  308,
      482,  308,  523,  311,  363,  525,  408,  409,  410,  411,
      412,  524,  309,  413, 1398,  414,  423,  420,  465,  415,
      416,  417,  418,  421,  427,  434,  310,  310,  311,  310,
      310,  447,  310,  310,  310,  310,  310,  310,  448,  310,
      310,  310,  310,  310,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  310,  310,  311,

      310,  310,  453,  310,  310,  310,  310,  310,  310,  454,
      310,  310,  310,  310,  310,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  397,  475,
      311,  311,  311,  311,  388,  311,  311,  526,  311,  549,
      311,  398,  476,  461,  477,  496,  462,  478,  310,  525,
      310,  497,  490,  308,  498,  308,  486,  485, 1407,  499,
      311,  488,  507,  311,  489,  491,  309,  492,  508,  311,
      493,  509,  511, 1409,  310,  528,  510,  310,  310,  311,
      310,  310,  512,  310,  310,  310,  310,  310,  310,  513,

      310,  310,  310,  310,  310,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  311,  311,
      311,  313,  404,  313,  311,  311,  529,  313,  529,  313,
      310,  547,  310,  530,  314,  530,  310,  548,  310,  311,
      314,  397,  308,  555,  308,  563,  594,  419,  595,  575,
      564,  310,  565,  378,  398,  309,  399,  532,  576,  553,
      533,  310,  310,  311,  310,  310,  534,  310,  310,  310,
      310,  310,  310,  535,  310,  310,  310,  310,  310,  536,
      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,

      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  539,  311,  557,  313,  311,  313,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  314,  567,
      577,  366,  540,  541,  542,  366,  558,  578,  543,  311,
      544,  429,  420,  311,  366,  545,  366,  546,  421,  422,
      423,  425,  559,  426,  562,  427,  560,  428,  311,  431,
      568,  561,  430,  308,  951,  308,  310,  562,  310,  313,
      308,  313,  308,  311,  335,  311,  309,  313,  336,  313,
      581,  311,  314,  309,  593,  310,  593,  310,  614,  582,
      314,  310,  310,  311,  310,  310,  569,  310,  310,  310,

      310,  570,  310,  571,  310,  310,  310,  310,  310,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  573,  311,  586,  311,  587,  597,  594,  597,
      595,  311,  311,  588,  601,  603,  601,  603,  935,  605,
      598,  605,  316,  599,  316,  599,  636,  602,  637,  317,
      936,  317,  606,  574,  310,  310,  311,  310,  310,  583,
      310,  310,  310,  310,  310,  310,  584,  310,  310,  310,
      310,  310,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,

      585,  585,  585,  585,  585,  310,  310,  311,  310,  310,
      590,  310,  310,  310,  310,  310,  310,  591,  310,  310,
      310,  310,  310,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  311,  311,  346,  609,
      349,  609,  319,  311,  347,  337,  338,  350,  607, 1410,
      607,  339,  610,  310,  310,  311,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  321,  310,  310,  310,  310,
      310,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  323,  330,  311,  311,  311,  342,
      343,  311,  346,  349,  349,  344,  633, 1296,  347,  349,
      350,  350,  634,  324,  331,  349,  350,  325,  332,  616,
      379,  311,  350,  349,  334,  349,  381,  615,  326,  333,
      350,  349,  350,  617,  349,  619,  349,  349,  350,  349,
      618,  350,  311,  350,  350,  349,  350,  646,  349,  625,
      349,  311,  350,  647,  620,  350,  621,  350,  623,  624,
      622,  651,  652,  636,  633,  693,  420, 1411,  629,  626,
      692,  680,  421,  651,  694,  651,  702,  628,  627,  310,
      379,  311,  310,  310,  366,  310,  381,  310,  310,  310,

      310,  630,  310,  310,  310,  310,  310,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      310,  379,  311,  310,  310,  310,  310,  381,  310,  310,
      310,  310,  382,  310,  310,  310,  310,  310,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  667,  311,  668,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  669,  311,  311,
      311,  664,  311,  311,  311,  667,  697,  668,  594,  419,

      595,  429,  676,  423,  422,  424,  426,  679,  427,  685,
      425,  686,  687,  675,  428,  311,  430,  681,  349,  678,
      431,  349,  684,  682,  688,  350,  349,  435,  350,  444,
      444,  450,  450,  350,  633,  689,  445,  445,  451,  451,
      701,  466,  423,  624,  465,  483,  311,  436,  690,  437,
      467,  483,  311, 1412,  691,  310,  310,  311,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  448,  310,  310,
      310,  310,  310,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  310,  310,  311,  310,

      310,  310,  310,  310,  310,  310,  310,  310,  454,  310,
      310,  310,  310,  310,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  349,  349,  463,
      458,  704,  311,  311,  350,  350,  311,  481,  311,  311,
      311,  311,  311,  700,  311,  666,  482,  311,  311,  699,
      459,  464,  437,  705,  311,  311,  496,  516,  567,  717,
      519,  501,  497,  517,  718,  498,  725,  723,  502,  520,
      499,  501,  724,  719,  720,  721,  722,  516,  502,  507,
      311,  518,  311,  517,  786,  508,  787,  727,  509,  568,

      726,  518,  311,  510,  310,  310,  311,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  513,  310,  310,  310,
      310,  310,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  523,  311,  526,  311,  526,
      311,  529,  529,  529,  524,  529,  575,  732,  530,  530,
      530,  563,  530,  733,  563,  576,  564,  577,  565,  564,
      729,  565,  586,  311,  578,  728,  310,  310,  311,  310,
      310,  534,  310,  310,  310,  310,  310,  310,  535,  310,
      310,  310,  310,  310,  536,  536,  536,  536,  536,  536,

      536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  536,  536,  536,  536,  536,  310,  310,  311,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  535,
      310,  310,  310,  310,  310,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  539,  311,
      557,  577,  311,  311,  587,  311,  587,  311,  578,  586,
      311,  588,  311,  588,  777,  778,  311,  366,  540,  541,
      542,  366,  558,  749,  543,  750,  544,  836,  752,  883,
      366,  545,  366,  546,  423,  758,  559,  310,  310,  311,

      310,  310,  569,  310,  310,  310,  310,  570,  310,  571,
      310,  310,  310,  310,  310,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  310,  310,
      311,  310,  310,  310,  310,  310,  310,  310,  570,  310,
      571,  310,  310,  310,  310,  310,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  573,
      311,  581,  311,  311,  349,  349,  349,  349,  349,  349,
      582,  350,  350,  350,  350,  350,  350, 1342,  808,  646,

     1343,  767,  759,  762,  763,  647,  766,  772,  773,  809,
      574,  310,  310,  311,  310,  310,  583,  310,  310,  310,
      310,  310,  310,  584,  310,  310,  310,  310,  310,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      585,  585,  310,  310,  311,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  584,  310,  310,  310,  310,  310,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  310,  310,  311,  310,  310,  590,  310,

      310,  310,  310,  310,  310,  591,  310,  310,  310,  310,
      310,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  310,  310,  311,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  591,  310,  310,  310,
      310,  310,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  311,  349,  349,  349,  349,
      311,  349,  349,  350,  350,  350,  350,  774,  350,  350,
      311,  349,  311,  349, 1413,  764,  777,  845,  350,  825,

      350,  777,  858,  761,  768,  770,  765,  760,  828, 1005,
      311,  834,  769,  843,  771,  310,  379,  311,  310,  310,
      310,  310,  381,  310,  310,  310,  310,  630,  310,  310,
      310,  310,  310,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  800,  801,  802,  311,
      311,  311,  830,  801,  802,  311,  311,  311,  311,  311,
      349,  349,  311,  349, 1414,  803, 1415,  350,  350,  804,
      350,  831,  848,  849,  850,  832,  835,  837,  829,  844,
      805,  826,  827,  841,  838,  311,  833,  349,  862,  849,

      850,  840,  842,  839,  350,  868,  856,  311,  311,  311,
      311,  851,  311,  311,  852,  311,  869,  311,  904,  529,
      311,  857,  906,  311,  311,  877,  530,  863,  878,  879,
      864,  880,  529,  809,  882,  311,  887,  311,  311,  530,
      951,  884,  881,  888,  886,  911,  912,  913,  349,  885,
      349,  917,  889,  905,  992,  350,  890,  350,  915,  349,
      993,  921,  349,  349,  924,  311,  350,  923,  349,  350,
      350,  914,  922,  349,  349,  350,  925,  311,  349,  349,
      350,  350,  311,  349,  928,  350,  350,  968,  926,  927,
      350,  994,  932,  969,  995,  929,  970,  349,  930,  935,

      311,  933,  311,  349,  350,  931,  311,  934,  311,  996,
      350,  936,  800,  801,  802,  937,  824,  311,  830,  801,
      802,  311,  381,  998,  311,  311,  311,  997,  311,  311,
      311,  944, 1416,  999,  951,  945,  311,  831,  311, 1014,
      311,  832, 1417, 1000, 1004, 1015,  946,  800,  801,  802,
      349, 1003,  833,  381, 1055,  349, 1001,  350, 1002,  311,
     1013, 1012,  350, 1028, 1018, 1050,  831, 1052,  349,  993,
      832,  311, 1029, 1019, 1016,  350,  311,  848,  849,  850,
      349,  833,  979,  311, 1017,  311,  349,  350,  980, 1036,
      981,  982,  311,  350,  982,  311, 1053,  848,  849,  850,

     1030,  983, 1031,  381, 1049,  984, 1021,  311, 1037, 1022,
      862,  849,  850,  311,  311, 1051,  985, 1006,  311,  904,
     1058,  529, 1054, 1007,  529, 1008,  863, 1077,  530,  864,
     1057,  530,  311,  969,  311, 1059, 1009,  311, 1060,  863,
     1010, 1056,  864, 1061,  904,  311, 1082, 1079, 1092,  311,
      381, 1011, 1083, 1080, 1067, 1081,  982,  311,  311,  982,
      911,  912,  913, 1085, 1086,  349,  349,  349,  349,  311,
     1088,  349,  350,  350,  350,  350,  349,  349,  350, 1075,
     1095,  349, 1093,  350,  350,  349,  914, 1175,  350,  349,
     1168,  311,  350, 1094, 1097, 1096,  350, 1099, 1098, 1101,

      349, 1118, 1100, 1102,  349, 1104,  992,  350, 1103, 1154,
     1119,  350,  993, 1156,  311, 1155,  311,  978,  311,  992,
      311,  311, 1167,  381, 1157,  993,  311, 1164, 1155,  311,
      311, 1105,  311,  311,  311,  772,  979, 1169,  311, 1149,
      311,  311,  980, 1005,  981,  982, 1176, 1170,  982, 1150,
     1151, 1171,  311,  311, 1177, 1121,  311, 1178, 1172, 1122,
     1180,  311, 1173, 1174,  311, 1149, 1181, 1182,  311, 1193,
     1123, 1152,  311, 1185, 1187, 1150, 1151,  980, 1183,  981,
     1184, 1211, 1014,  311, 1018,  311, 1190, 1186, 1015,  349,
     1009, 1188, 1181, 1019, 1010, 1418,  350, 1223, 1082, 1092,

      311, 1194, 1222, 1192, 1083, 1011,  310,  988,  311,  310,
      310, 1163,  310,  381,  310,  310,  310,  310,  310,  989,
      310,  310,  310,  310, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1006,  311,  349,
      311, 1028,  311, 1007,  349, 1008,  350,  993, 1203,  311,
     1029,  350,  349,  311,  311,  311, 1009, 1191,  311,  350,
     1010,  311,  311,  311,  311,  529,  988,  311, 1206,  311,
     1212, 1011,  530, 1250,  529, 1205, 1419,  311,  989, 1251,
     1204,  530, 1224, 1228, 1226, 1229,  887, 1227, 1225,  311,

     1232,  311, 1079, 1082,  311, 1230, 1231,  887, 1080, 1083,
     1081,  982, 1248,  311,  982, 1252,  311, 1244, 1080, 1255,
     1081, 1257, 1258,  311,  349, 1251, 1253,  349,  349, 1261,
      349,  350, 1266,  349,  350,  350,  349,  350, 1267,  349,
      350,  349, 1265,  350,  349, 1420,  350, 1269,  350, 1264,
      935,  350, 1271,  311,  349, 1263,  349, 1262, 1272, 1104,
     1268,  350,  936,  350, 1106,  311, 1127,  311, 1303,  311,
     1270, 1273,  381,  772, 1304, 1154, 1156,  311, 1319, 1167,
     1309, 1155, 1168,  311, 1320, 1155,  311, 1157,  311,  311,
     1311, 1326,  311,  311,  311,  311,  311,  311, 1180,  311,

     1310, 1152,  311,  311, 1181,  311,  311,  980, 1328,  981,
     1182,  311,  311, 1329, 1421, 1334,  311, 1422, 1423, 1424,
     1009, 1183, 1325,  838, 1010, 1331,  838, 1327, 1330,  838,
     1338, 1334,  311, 1335, 1009, 1011, 1314,  311, 1010,  311,
     1339, 1336, 1183, 1193,  349,  982, 1190,  311,  982, 1011,
     1009,  350, 1181,  349, 1010, 1009,  311, 1337,  311, 1010,
      350, 1203,  311,  311, 1374, 1011,  349, 1359, 1360, 1361,
     1011, 1314,  311,  350,  311, 1194, 1425,  311, 1341,  989,
      982, 1363, 1157,  982, 1353, 1354, 1355, 1355, 1351,  349,
     1009, 1352, 1427, 1204, 1010, 1367,  350,  936, 1362, 1373,

     1428, 1368, 1399, 1429, 1430, 1011,  310,  310,  311,  310,
      310, 1163,  310,  310,  310,  310,  310,  310, 1321,  310,
      310,  310,  310,  310, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322,  311, 1375,  311,
      311,  311,  311,  311, 1376,  311,  529,  529,  311, 1248,
      311,  982,  311,  530,  530, 1080, 1250, 1081, 1378, 1255,
      982, 1393, 1251,  982, 1232, 1251,  887, 1252,  311,  311,
      311, 1372, 1402, 1377,  820,  887, 1379,  349, 1253, 1388,
      982,  311, 1396,  311,  350,  956, 1434,  349,  349,  982,

     1395, 1253,  982, 1394,  350,  350, 1266, 1435, 1403,  921,
      349, 1400, 1267, 1404, 1401, 1271,  349,  350,  349, 1106,
      820, 1272,  772,  350, 1397,  350, 1273, 1296,  311, 1303,
      311, 1436, 1405,  381,  311, 1304, 1406, 1431,  646,  311,
      772,  311, 1313, 1445,  647, 1446, 1447, 1334,  311, 1448,
     1319,  311, 1451, 1440, 1313, 1437, 1320,  311,  685, 1426,
     1439, 1333, 1441, 1432,  311, 1441, 1009,  311, 1433, 1333,
     1010, 1438, 1442, 1465, 1466, 1464, 1443, 1467, 1452,  349,
     1468, 1011, 1469, 1459, 1454, 1470,  350, 1444,  645, 1449,
      646,  645,  645, 1450,  645,  645,  647,  645,  645,  645,

      645,  645,  645,  645,  645,  645, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,  310,
      310,  311,  310,  310,  310,  310,  310,  310,  310,  310,
      310, 1321,  310,  310,  310,  310,  310, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1326,  311,  311,  311,  311,  311,  311, 1458, 1334,  311,
      311,  311, 1471,  311, 1472, 1473, 1478, 1479,  311,  311,
     1476, 1477, 1477,  311, 1460,  311, 1442, 1009, 1455,  311,

     1443, 1010, 1453, 1485, 1457,  994, 1475, 1456, 1463, 1486,
      875, 1444, 1011, 1461, 1474, 1487, 1462, 1354, 1355, 1355,
     1480, 1481, 1482, 1359, 1360, 1361, 1483, 1484, 1367,  936,
     1490,  875,  989, 1491, 1368,  311,  311,  311, 1375,  311,
      311, 1488, 1494,  311, 1376,  311, 1489, 1499,  311, 1070,
     1387, 1500, 1492, 1070, 1070, 1501, 1387,  311,  311, 1504,
     1505, 1506,  381, 1391,  887, 1497, 1493, 1391, 1495, 1498,
     1393, 1441,  887, 1496, 1507,  311, 1396,  311,  311, 1503,
     1441, 1510,  311, 1441,  349, 1514,  349, 1402, 1502, 1515,
      349,  350, 1407,  350,  349, 1518, 1408,  350, 1519, 1512,

     1520,  350, 1394, 1516, 1521, 1522,  772, 1508, 1397, 1523,
     1509, 1511, 1513, 1403, 1108, 1524, 1525, 1526, 1404, 1527,
     1528, 1529, 1530,  772, 1531, 1532, 1533, 1534, 1535,  311,
     1537, 1538,  801,  802, 1539, 1540, 1431,  646,  646,  646,
     1543,  820,  820,  647,  647,  647,  311,  311,  311, 1547,
     1548, 1549, 1458, 1550, 1551, 1552, 1553, 1556,  311,  311,
      311, 1536, 1432, 1560,  801,  802, 1464, 1433, 1541, 1545,
     1568, 1442, 1569, 1542, 1544, 1443, 1570, 1571, 1572, 1576,
     1577, 1566, 1546, 1580, 1561, 1559, 1444,  645,  645,  646,
      645,  645, 1450,  645,  645,  647,  645,  645,  645, 1554,

      645,  645,  645,  645,  645, 1555, 1555, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555,  311,  311,
      311,  311, 1458,  311,  311, 1573, 1574, 1575,  311,  311,
     1473,  311,  311, 1581, 1582, 1583,  381, 1476, 1477, 1477,
      311, 1442, 1480, 1481, 1482, 1443,  311, 1563,  311,  936,
     1557, 1558, 1586, 1587, 1565, 1562, 1444, 1564, 1567, 1579,
     1487, 1588, 1589,  875, 1578, 1585,  875, 1584,  311,  311,
     1494,  311,  311,  311,  311, 1594,  311, 1504, 1505, 1506,
     1595,  311, 1597, 1505, 1506,  311, 1488, 1590, 1599,  311,

      918, 1489, 1608,  887, 1609, 1610, 1495, 1591, 1603, 1876,
     1876, 1496, 1592, 1408, 1604, 1611, 1612, 1593,  887, 1613,
     1516, 1600, 1614, 1596,  310, 1504, 1505, 1506,  310, 1598,
      310,  381,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598,  311,  311,  349, 1605, 1532,
     1533, 1534, 1615, 1616,  350, 1606, 1538,  801,  802, 1617,
     1618, 1619, 1532,  311,  311, 1626, 1623,  921,  381,  311,
     1628, 1602, 1624, 1629,  311, 1601, 1630,  646,  989, 1607,

     1620,  311, 1640, 1631, 1638,  311, 1621, 1641, 1622,  982,
     1625, 1642,  982, 1634, 1635, 1636, 1643, 1644, 1645,  983,
     1646,  956, 1637,  984, 1651,  311, 1639, 1632, 1654,  311,
     1657,  311, 1658, 1659,  985,  310, 1538,  801,  802,  310,
     1627,  310,  381,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627,  646,  311, 1560,  311,
      311,  311,  647, 1660,  310, 1573, 1574, 1575, 1661, 1573,
      311,  311, 1662,  849,  850,  381, 1576,  311, 1650, 1581,

     1582, 1583,  994, 1666, 1671, 1655, 1665,  849,  850, 1652,
     1633,  645,  645,  646,  645,  645,  645,  645,  645,  647,
      645,  645,  645, 1554,  645,  645,  645,  645,  645, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1647,  311,  311,  311,  311,  311, 1648,  311,
     1649, 1581,  311, 1667,  311, 1669,  311,  381, 1678, 1668,
     1597, 1009,  875, 1663, 1686, 1010,  310, 1673,  311, 1606,
     1690,  311, 1664, 1674,  311, 1626, 1011, 1584, 1653, 1679,
     1656, 1672, 1675,  311,  311, 1680, 1670, 1681,  982,  887,

     1677,  982, 1682, 1688, 1603,  935, 1691, 1692, 1693, 1643,
     1604, 1687, 1694, 1606, 1695, 1646,  936,  936, 1634, 1635,
     1636, 1108,  820, 1676,  310, 1683, 1505, 1506,  310, 1598,
      310,  310,  310,  310,  310,  310, 1684,  310,  310,  310,
      310,  310, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685,
     1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685, 1685,
     1685, 1685, 1685, 1685, 1685,  349, 1605,  311, 1698, 1700,
      311, 1623,  350, 1606, 1699, 1701, 1704, 1624, 1428, 1626,
     1702, 1709, 1631,  772,  311,  381, 1705, 1630,  646,  646,
     1710,  311, 1712,  646, 1631,  647,  311, 1607, 1620, 1631,

     1719, 1149,  989,  311, 1621, 1638, 1622,  982, 1720, 1721,
      982, 1150, 1151, 1643,  311, 1722, 1723, 1121, 1632,  381,
     1725, 1122, 1646,  311, 1711, 1714, 1726, 1715,  381, 1727,
      311, 1651, 1123, 1696,  311, 1728, 1718, 1716, 1717, 1621,
     1729, 1622, 1730, 1734, 1149, 1654,  311, 1735, 1662,  849,
      850, 1660, 1009, 1149, 1150, 1151, 1010,  875,  875, 1665,
     1667, 1740, 1754, 1150, 1151,  310, 1668, 1011,  310, 1706,
      801,  802,  310, 1627,  310,  310,  310,  310,  310,  310,
     1707,  310,  310,  310,  310,  310, 1708, 1708, 1708, 1708,
     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,

     1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,  310,
     1634, 1635, 1636,  310, 1713,  310,  381,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1647,  311,  311,  311,  311,  311, 1648, 1657, 1649, 1741,
     1606,  311,  311, 1608, 1673,  311,  875,  311, 1743, 1009,
     1674, 1748, 1521, 1010,  887, 1745,  311, 1749, 1731, 1149,
     1738, 1455,  887,  887, 1011, 1732, 1753, 1757, 1733, 1150,
     1151,  310, 1662,  849,  850,  310, 1736,  310,  381,  310,

      310,  310,  310,  310,  310,  310,  310,  310,  310, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736,  311, 1669, 1675,  311,  311, 1679, 1758,  311,
      875,  887, 1759, 1680,  311, 1681,  982, 1746,  311,  982,
     1750,  311, 1761, 1680, 1766, 1681, 1751, 1683, 1505, 1506,
     1756, 1752, 1691, 1755, 1670, 1676, 1737, 1768, 1778, 1606,
     1779, 1744,  310, 1683, 1505, 1506,  310,  310,  310,  310,
      310,  310,  310,  310, 1684,  310,  310,  310,  310,  310,
     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,

     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
     1684, 1684, 1684, 1696,  311,  311, 1698, 1700,  311, 1621,
     1763, 1622, 1699, 1701, 1704, 1710, 1764,  311, 1702,  311,
     1631,  310, 1009, 1706,  801,  802, 1010,  311,  646,  311,
     1767,  311, 1780, 1550,  647, 1712,  646, 1011, 1314,  311,
     1781, 1783, 1631, 1725, 1334,  311, 1774,  982, 1776, 1726,
      982, 1773, 1785, 1735, 1727,  311, 1777, 1009, 1786,  311,
     1728, 1010, 1633, 1009, 1775, 1729,  311, 1010, 1334,  311,
      311,  311, 1011, 1314,  311,  875,  311,  311, 1011, 1729,
     1671,  875,  982, 1741, 1702,  982, 1794, 1009, 1788, 1799,

      875, 1010, 1009, 1743, 1802, 1787, 1010, 1748, 1738,  887,
     1563, 1789, 1011, 1749, 1614, 1803, 1761, 1011,  310, 1706,
      801,  802,  310,  310,  310,  310,  310,  310,  310,  310,
     1707,  310,  310,  310,  310,  310, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,  310,
     1769, 1635, 1636,  310, 1713,  310, 1770,  310,  310,  310,
      310, 1771,  310,  310,  310,  310,  310, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772,
     1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772,

      310, 1790,  849,  850,  310, 1736,  310,  310,  310,  310,
      310,  310, 1791,  310,  310,  310,  310,  310, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792, 1792,
     1792,  311, 1745,  311, 1746,  311,  982,  311,  311,  887,
     1680, 1796, 1681, 1750,  311,  982,  311, 1797,  982, 1751,
      982,  311,  311, 1805, 1752, 1766,  935, 1440, 1763,  982,
     1428, 1752,  982, 1798, 1764, 1677, 1441, 1800,  936, 1441,
      311,  311, 1801, 1769, 1635, 1636, 1442, 1808, 1809, 1770,
     1443,  311,  311,  310,  310,  311, 1815, 1816, 1810,  311,

     1817, 1444, 1314,  311, 1818, 1783, 1820,  311, 1794, 1785,
     1441,  982, 1811, 1806,  982, 1786,  685, 1796, 1813, 1441,
     1824, 1009, 1441, 1797, 1812, 1010, 1826, 1521, 1455, 1829,
     1805, 1814, 1790,  849,  850, 1815, 1011,  310, 1769, 1635,
     1636,  310,  310,  310, 1770,  310,  310,  310,  310, 1771,
      310,  310,  310,  310,  310, 1771, 1771, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1458, 1334,
      311,  311,  311,  982,  311, 1827,  912,  913, 1841, 1834,
     1842, 1550,  982, 1831, 1809,  982, 1835, 1442, 1009,  310,

     1832, 1443, 1010, 1808, 1809, 1820, 1824, 1845, 1614,  310,
      310, 1822, 1444, 1011, 1821,  310, 1790,  849,  850,  310,
      310,  310,  310,  310,  310,  310,  310, 1791,  310,  310,
      310,  310,  310, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1791,  311,  311,  311, 1440,
      311,  311,  311,  311,  311,  311, 1778, 1441, 1441,  311,
      311, 1441, 1458,  311,  311, 1857, 1441, 1860, 1442, 1441,
     1869, 1834, 1443, 1830, 1838, 1840, 1563, 1836, 1835, 1825,
     1837, 1442, 1828, 1444, 1843, 1443, 1839,  311, 1844, 1849,

     1635, 1636, 1847, 1778, 1848,  908, 1444,  310, 1827,  912,
      913,  310, 1846,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1831,  311,
     1834, 1850, 1851, 1851,  311, 1832,  311, 1835, 1852,  311,
     1854,  311, 1856,  311,  311,  311,  311, 1849, 1635, 1636,
     1850, 1851, 1851,  982,  311, 1853, 1861,  912,  913, 1386,
     1385, 1384,  982, 1383, 1382,  982, 1381, 1864, 1855, 1380,
     1234,  875,  875, 1371, 1858, 1859,  310, 1861,  912,  913,

      310, 1846,  310,  310,  310,  310,  310,  310, 1862,  310,
      310,  310,  310,  310, 1863, 1863, 1863, 1863, 1863, 1863,
     1863, 1863, 1863, 1863, 1863, 1863, 1863, 1863, 1863, 1863,
     1863, 1863, 1863, 1863, 1863, 1863, 1863,  311, 1852,  311,
     1854,  311,  311, 1856,  311, 1370, 1369,  311,  311,  311,
      311, 1366, 1365, 1364, 1358, 1357, 1356, 1350, 1349, 1348,
     1715, 1347,  310, 1872, 1874, 1715, 1865,  685, 1866, 1873,
     1716, 1717,  310, 1867, 1868, 1716, 1717, 1181, 1870,  310,
     1861,  912,  913,  310,  310,  310,  310,  310,  310,  310,
      310, 1862,  310,  310,  310,  310,  310, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1314,  311,  311,  311,  311,  311, 1346, 1345, 1344,  982,
     1333, 1333,  982, 1313, 1323,  311, 1318, 1317, 1316, 1009,
     1315, 1313, 1148, 1010,  820, 1308, 1838, 1307,  817, 1306,
     1305, 1838,  817, 1302, 1011, 1301, 1871, 1300, 1299, 1875,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,

      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,

      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      307,  307, 1298,  307,  307,  307,  307,  307, 1297,  307,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      312,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      318, 1296, 1295,  318, 1294,  817,  318,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  351, 1293, 1292,
      351, 1291, 1290,  351,  446, 1289, 1288,  446, 1287, 1286,

      446,  452, 1285, 1284,  452, 1283, 1282,  452,  503, 1281,
     1280,  503, 1279, 1278,  503,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  531, 1277, 1276,  531, 1275,
     1127,  531,  566, 1260,  566,  566, 1259, 1089,  566,  579,
      311, 1256,  579, 1247, 1246,  579,  589, 1245, 1243,  589,
     1242, 1241,  589,  593,  593, 1240,  593,  593,  593,  593,
      593,  593,  593,  596,  596, 1239,  596,  596,  596,  596,
      596,  596,  596,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  600,  600,  600,  600,  600,  600,  600,

      600,  600,  600,  603,  603, 1238,  603,  603,  603,  603,
      603,  603,  603,  604,  604, 1237,  604,  604,  604,  604,
      604,  604,  604,  607,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  317, 1236, 1235,  317,  350, 1234, 1233,
      350,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  445,  875,  875,  445,  451, 1221, 1220,  451,  502,
     1219, 1218,  502,  530, 1217, 1216,  530,  565,  565, 1215,
     1214,  565,  579, 1213, 1210,  579, 1209, 1208,  579,  578,
     1207, 1202,  578,  589, 1201, 1200,  589, 1199, 1198,  589,

      588, 1197, 1196,  588,  593,  593, 1195,  593,  593,  593,
      593,  593,  593,  593,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  603,  603,  820,  603,  603,  603,
      603,  603,  603,  603,  607,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790, 1106, 1165, 1106, 1162, 1161, 1160,
     1106, 1159, 1106, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1189, 1189, 1189, 1189, 1189, 1189, 1189,

     1189, 1189, 1189, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1274, 1158,  311, 1274, 1148, 1147, 1274,
     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390,
     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
     1408, 1146, 1408, 1145, 1144, 1143, 1142, 1141, 1408, 1273,

     1140, 1139, 1273, 1517, 1138, 1137, 1517, 1136, 1135, 1517,
     1516, 1134, 1133, 1516, 1689, 1689, 1689, 1689, 1689, 1689,
     1689, 1689, 1689, 1689, 1697, 1697, 1697, 1697, 1697, 1697,
     1697, 1697, 1697, 1697, 1703, 1703, 1703, 1703, 1703, 1703,
     1703, 1703, 1703, 1703, 1724, 1724, 1724, 1724, 1724, 1724,
     1724, 1724, 1724, 1724, 1739, 1739, 1739, 1739, 1739, 1739,
     1739, 1739, 1739, 1739, 1742, 1742, 1742, 1742, 1742, 1742,
     1742, 1742, 1742, 1742, 1747, 1747, 1747, 1747, 1747, 1747,
     1747, 1747, 1747, 1747, 1760, 1760, 1760, 1760, 1760, 1760,
     1760, 1760, 1760, 1760, 1762, 1762, 1762, 1762, 1762, 1762,

     1762, 1762, 1762, 1762, 1765, 1765, 1765, 1765, 1765, 1765,
     1765, 1765, 1765, 1765, 1782, 1782, 1782, 1782, 1782, 1782,
     1782, 1782, 1782, 1782, 1784, 1784, 1784, 1784, 1784, 1784,
     1784, 1784, 1784, 1784, 1793, 1793, 1793, 1793, 1793, 1793,
     1793, 1793, 1793, 1793, 1795, 1795, 1795, 1795, 1795, 1795,
     1795, 1795, 1795, 1795, 1804, 1804, 1804, 1804, 1804, 1804,
     1804, 1804, 1804, 1804, 1807, 1807, 1807, 1807, 1807, 1807,
     1807, 1807, 1807, 1807, 1819, 1819, 1819, 1819, 1819, 1819,
     1819, 1819, 1819, 1819, 1823, 1823, 1823, 1823, 1823, 1823,
     1823, 1823, 1823, 1823, 1833, 1833, 1833, 1833, 1132, 1833,

     1833, 1833, 1833, 1833, 1131, 1130, 1129, 1128, 1127, 1126,
     1125, 1124,  978, 1120, 1117, 1116, 1115, 1114, 1113, 1112,
     1111, 1110, 1109, 1108, 1107, 1091, 1090, 1089, 1087,  311,
     1084, 1078, 1076, 1074, 1073, 1072, 1071, 1070, 1069, 1068,
     1066, 1065, 1064, 1063, 1062,  311, 1048, 1047, 1046, 1045,
     1044, 1043, 1042, 1041, 1040, 1039, 1038, 1035, 1034, 1033,
     1032, 1027, 1026, 1025, 1024,  311, 1023, 1020,  991,  990,
      987,  986,  978,  977,  976,  975,  974,  973,  972,  971,
      967,  966,  965,  964,  963,  311,  962,  961,  960,  959,
      958,  957,  956,  955,  791,  954,  953,  952,  951,  950,

      949,  948,  947,  943,  942,  941,  940,  939,  938,  774,
      920,  919,  918,  753,  916,  910,  909,  908,  907,  903,
      902,  901,  900,  899,  898,  897,  896,  895,  894,  893,
      892,  891,  876,  875,  874,  873,  872,  871,  870,  867,
      866,  865,  861,  860,  859,  855,  854,  853,  847,  846,
      824,  823,  822,  821,  820,  819,  818,  817,  816,  815,
      814,  813,  812,  811,  810,  807,  806,  799,  798,  797,
      796,  795,  794,  793,  792,  311,  791,  789,  788,  785,
      784,  783,  782,  781,  780,  779,  776,  775,  757,  756,
      755,  311,  311,  311,  311,  311,  311,  311,  311,  580,

      580,  311,  751,  564,  748,  747,  746,  665,  745,  744,
      743,  742,  741,  740,  739,  738,  737,  736,  735,  734,
      731,  730,  311,  311,  522,  522,  311,  505,  311,  311,
      506,  505,  506,  505,  311,  716,  715,  714,  713,  712,
      711,  710,  709,  708,  707,  706,  468,  468,  703,  698,
      696,  695,  674,  673,  672,  671,  670,  664,  663,  662,
      661,  660,  659,  658,  657,  656,  655,  654,  653,  650,
      649,  648,  311,  644,  643,  642,  641,  640,  639,  638,
      635,  632,  311,  341,  341,  341,  613,  612,  611,  329,
      328,  327,  315,  311,  311,  311,  311,  311,  311,  311,

      311,  580,  311,  311,  562,  562,  561,  561,  561,  311,
      311,  556,  348,  402,  554,  552,  551,  311,  311,  527,
      521,  311,  311,  522,  521,  311,  506,  505,  500,  311,
      311,  480,  479,  474,  473,  472,  471,  470,  469,  468,
      442,  440,  433,  406,  401,  396,  395,  394,  393,  385,
      384,  348,  341,  329,  328,  327,  315,  311,  311, 1876,
       87,   57, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,

     1876, 1876, 1876
    } ;

static yyconst flex_int16_t yy_chk[6904] =
    {   0,
        0,  148,    1,    1,    1,   69,    1,    2,    2,    2,
      148,    2,   69,   70,   70,   80,   80,    1,  166,  166,
     1243,   80,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    5,    5,    5,    5,   87,
        5,  427,    7,    7,    8,    8,   87,   77,    7,   13,
        8,    5,   13,   13,    5,   13,   21,   21,    5,   21,
       11,    7,   11,    8,  427,    7,   24,    8,   15,    5,
        6,    6,    6,    6,   77,    6,    7,  113,    8,   11,
       39,   39,   39,   11,   39,   65,    6,   15,   24,    6,
       62,   15,   62,    6,   11,   39,  104,   65,  113,   65,
     1245,  104,   15,   62,    6,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   12,  121,   12,
       40,   40,   40,   16,   40,   23,   67,   23,   67,   78,
       67,  116,  126,   79,   22,   40,   12,   12,   12,   12,
       12,   67,   16,   12,   23,   12,   16,  121,   23,   12,
       12,   12,   12,   14,   22,  421,   22,   16,  116,   23,

      124,   41,   41,   41,   78,   41,   22,   22,   79,   22,
      126,   83,   83,   14,   85,   14,   41,   83,  103,  226,
       85,  124,   14,  421,  103,   14,   14,  226,   14,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   25,   25,   25,   25,  131,   25,   49,

      820,  120,   25,  131, 1246,   25,   42,   42,   42,   25,
       42,   25,  820,  123,   25,   25,  171,  112,   49,   25,
       50,   42,   49,   55,   25,   25,  118,   25,   25,   26,
       26,   26,   26,   49,   26,  112,  120,   89,   26,   50,
      145,   26,   55,   50,   89,   26,   55,   26,  123,  141,
       26,   26,  141,  171,   50,   26,  118,   55, 1247,   89,
       26,   26,  145,   26,   26,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   29,   29,   29,
       29,  175,   29,   29, 1250,   88,   29,   51,   51,   51,
      125,   51,   88,   29,   30,   30,   30,   30,  175,   30,
       30,  136,   51,   30,   52,   52,   52,   90,   52,   88,
       30,   31,   31,   31,   90,   31,   31,   94,  130,   52,
       31,  595,  136,   95,   94,  125,   31,   32,   32,   32,

       95,   32,   32,  143,  595,   94,   32,   95,  130,  143,
      130,   90,   32,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   36,   37,   37,   37,  105,

       37,  105,  167,  137,   53,   53,   53,  110,   53,  105,
      137,   37,  400,  167,   36,   36,   36,   36,   36,   53,
      110,   36,  110,   36,   37,  110,  400,   36,   36,   36,
       36,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,

       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   54,   54,
       54,   56,   54,   91,   92,   96,  132,  127,  132,   99,
       91,   92,   96,   54,  127,  134,  132, 1255,  139,   96,
       56,   99,  192,   99,   56,  139,  189,  189,  134,   91,
      134,  192,   92,  134,  127,   56,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   72,   76,   76,

      119,   93,  142,  188,   97,  153,  176,  153,   93,  188,
      168,   97,  168, 1259,  168,   93,   72,   76,  153,  180,
       72,   76,  142,  176,  142,  168,  180,  119,   93,  119,
       93,   72,   76,   93,   97,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  115,  115,  146,
      129,  163,  163,  117,  122,  222,  204,  129,  222,  198,
      163,  198,  200,  200,  129,  204,  115,  115,  115,  115,
      115,  200,  198,  115, 1260,  115,  146,  117,  146,  115,
      115,  115,  115,  117,  122,  129,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  140,  140,  140,

      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  144,  159,
      169,  170,  172,  173,  225,  174,  164,  205,  205,  225,
      216,  144,  159,  144,  159,  177,  144,  159,  164,  216,
      164,  177,  174,  212,  177,  212,  170,  169, 1272,  177,
      186,  172,  184,  184,  173,  174,  212,  174,  184,  217,
      174,  184,  186, 1275,  186,  217,  184,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,

      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  202,  206,
      243,  206,  232,  206,  214,  218,  219,  218,  220,  218,
      202,  224,  202,  219,  206,  220,  214,  224,  214,  240,
      218,  229,  236,  232,  236,  274,  290,  243,  290,  279,
      274,  240,  274,  240,  229,  236,  229,  220,  279,  229,
      220,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  223,  242,  239,  242,  247,  242,  244,  245,
      252,  254,  251,  246,  248,  249,  250,  253,  242,  275,
      280,  223,  223,  223,  223,  223,  239,  280,  223,  332,
      223,  252,  244,  333,  223,  223,  223,  223,  244,  245,
      246,  247,  246,  248,  262,  249,  250,  251,  334,  254,
      275,  259,  253,  259, 1276,  259,  262,  264,  262,  264,
      268,  264,  268,  270,  332,  272,  259,  272,  333,  272,
      282,  282,  264,  268,  291,  270,  291,  270,  334,  282,
      272,  277,  277,  277,  277,  277,  277,  277,  277,  277,

      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  278,  278,  284,  284,  286,  293,  295,  293,
      295,  296,  298,  286,  298,  300,  298,  300,  935,  302,
      293,  302,  316,  296,  318,  296,  370,  298,  370,  316,
      935,  318,  302,  278,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  283,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  304,  306,  344,  306,
      349,  306,  319,  319,  344,  337,  337,  349,  304, 1277,
      304,  337,  306,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  323,  330,  330,  331,  335,  342,
      342,  336,  345,  351,  354,  342,  368, 1278,  345,  352,
      351,  354,  368,  323,  330,  353,  352,  323,  330,  336,
      379,  379,  353,  355,  331,  356,  379,  335,  323,  330,
      355,  357,  356,  352,  360,  354,  358,  359,  357,  361,
      353,  360,  409,  358,  359,  362,  361,  381,  363,  360,
      364,  424,  362,  381,  355,  363,  356,  364,  358,  359,
      357,  387,  387,  437,  436,  437,  409, 1279,  364,  361,
      436,  424,  409,  438,  438,  460,  460,  363,  362,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  401,  408,  401,  410,  412,  411,  413,  414,  415,
      416,  417,  418,  419,  422,  420,  423,  401,  425,  426,
      428,  441,  429,  431,  430,  442,  441,  442,  594,  408,

      594,  416,  420,  411,  410,  411,  413,  423,  414,  429,
      412,  429,  430,  419,  415,  464,  417,  425,  432,  422,
      418,  433,  428,  426,  431,  432,  434,  435,  433,  444,
      446,  450,  452,  434,  459,  432,  444,  446,  450,  452,
      459,  466,  464,  433,  464,  482,  482,  435,  433,  435,
      466,  483,  483, 1280,  434,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  454,  454,  454,  454,

      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  456,  457,  463,
      458,  462,  485,  465,  456,  457,  486,  481,  481,  487,
      488,  489,  491,  457,  490,  462,  481,  492,  493,  456,
      458,  463,  458,  465,  494,  495,  496,  508,  567,  485,
      519,  501,  496,  508,  486,  496,  493,  491,  501,  519,
      496,  503,  492,  487,  488,  489,  490,  515,  503,  507,
      507,  509,  509,  515,  642,  507,  642,  495,  507,  567,

      494,  518,  518,  507,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  523,  523,  524,  524,  526,
      526,  529,  531,  532,  523,  533,  575,  540,  529,  531,
      532,  563,  533,  540,  566,  575,  563,  577,  563,  566,
      533,  566,  582,  582,  577,  532,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,

      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  535,  535,
      535,  535,  535,  535,  535,  535,  535,  535,  539,  574,
      557,  579,  683,  559,  587,  560,  589,  558,  579,  586,
      586,  587,  722,  589,  634,  634,  614,  539,  539,  539,
      539,  539,  557,  559,  539,  560,  539,  683,  574,  722,
      539,  539,  539,  539,  558,  614,  558,  569,  569,  569,

      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  569,  569,  569,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  573,
      573,  581,  581,  615,  621,  618,  619,  622,  628,  627,
      581,  621,  618,  619,  622,  628,  627, 1194,  659,  645,

     1194,  622,  615,  618,  619,  645,  621,  627,  628,  659,
      573,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  583,  583,  583,  583,  583,  583,  583,  583,
      583,  583,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  590,  590,  590,  590,  590,  590,  590,

      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  616,  617,  620,  623,  624,
      675,  625,  626,  617,  620,  623,  624,  629,  625,  626,
      678,  629,  681,  690, 1281,  620,  692,  692,  629,  675,

      690,  701,  701,  617,  623,  625,  620,  616,  678,  837,
      837,  681,  624,  690,  626,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  656,  656,  656,  676,
      679,  677,  680,  680,  680,  682,  684,  685,  686,  687,
      689,  691,  688,  699, 1282,  656, 1283,  689,  691,  656,
      699,  680,  695,  695,  695,  680,  682,  684,  679,  691,
      656,  676,  677,  688,  685,  717,  680,  700,  705,  705,

      705,  687,  689,  686,  700,  709,  699,  718,  719,  721,
      720,  695,  723,  724,  695,  726,  709,  725,  743,  728,
      727,  700,  744,  750,  752,  717,  728,  705,  718,  719,
      705,  720,  729,  744,  721,  758,  726,  760,  759,  729,
     1284,  723,  720,  727,  725,  749,  749,  749,  761,  724,
      762,  752,  728,  743,  823,  761,  729,  762,  750,  763,
      823,  758,  765,  764,  761,  825,  763,  760,  766,  765,
      764,  749,  759,  767,  768,  766,  762,  826,  769,  770,
      767,  768,  827,  771,  765,  769,  770,  808,  763,  764,
      771,  825,  769,  808,  826,  766,  808,  773,  767,  772,

      828,  770,  829,  772,  773,  768,  831,  771,  832,  827,
      772,  772,  781,  781,  781,  773,  824,  824,  830,  830,
      830,  833,  824,  829,  834,  836,  883,  828,  835,  839,
      840,  781, 1285,  831, 1286,  781,  878,  830,  880,  841,
      841,  830, 1287,  832,  836,  841,  781,  800,  800,  800,
      842,  835,  830,  800,  883,  843,  833,  842,  834,  863,
      840,  839,  843,  855,  844,  878,  800,  880,  844,  855,
      800,  881,  855,  844,  842,  844,  864,  846,  846,  846,
      857,  800,  817,  879,  843,  877,  856,  857,  817,  863,
      817,  817,  882,  856,  817,  886,  881,  848,  848,  848,

      856,  817,  857,  848,  877,  817,  846,  884,  864,  846,
      862,  862,  862,  885,  888,  879,  817,  838,  838,  896,
      886,  890,  882,  838,  889,  838,  848,  906,  890,  848,
      885,  889,  917,  906,  914,  888,  838,  915,  889,  862,
      838,  884,  862,  890,  904,  904,  909,  908,  921,  921,
      904,  838,  909,  908,  896,  908,  908,  922,  923,  908,
      911,  911,  911,  914,  915,  925,  924,  927,  926, 1001,
      917,  928,  925,  924,  927,  926,  929,  932,  928,  904,
      924,  930,  922,  929,  932,  931,  911, 1001,  930,  933,
      994,  994,  931,  923,  926,  925,  933,  928,  927,  930,

      934,  948,  929,  931,  937,  933,  954,  934,  932,  980,
      948,  937,  954,  981,  981,  980,  989,  978,  995,  992,
      992, 1002,  993,  978,  981,  992,  996,  989,  993,  998,
      997,  934,  999, 1003, 1000,  937,  951,  995, 1010,  978,
     1004, 1012,  951, 1005,  951,  951, 1002,  996,  951,  978,
      978,  997, 1011, 1009, 1003,  951, 1013, 1004,  998,  951,
     1007, 1036,  999, 1000, 1050, 1005, 1007, 1008, 1008, 1019,
      951,  979,  979, 1010, 1012, 1005, 1005,  979, 1008,  979,
     1009, 1036, 1014, 1014, 1018, 1049, 1015, 1011, 1014, 1017,
      979, 1013, 1015, 1018,  979, 1288, 1017, 1050, 1071, 1092,

     1092, 1019, 1049, 1017, 1071,  979,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  988,  988, 1006, 1006, 1016,
     1037, 1028, 1028, 1006, 1030, 1006, 1016, 1028, 1029, 1029,
     1028, 1030, 1031, 1051, 1052, 1053, 1006, 1016, 1054, 1031,
     1006, 1057, 1055, 1059, 1056, 1060, 1148, 1058, 1031, 1075,
     1037, 1006, 1060, 1080, 1061, 1030, 1289, 1085, 1148, 1080,
     1029, 1061, 1051, 1055, 1053, 1056, 1058, 1054, 1052, 1093,

     1061, 1086, 1070, 1082, 1082, 1057, 1060, 1059, 1070, 1082,
     1070, 1070, 1079, 1079, 1070, 1081, 1081, 1075, 1079, 1083,
     1079, 1085, 1086, 1094, 1095, 1083, 1081, 1096, 1097, 1093,
     1099, 1095, 1098, 1100, 1096, 1097, 1098, 1099, 1098, 1101,
     1100, 1103, 1097, 1098, 1102, 1290, 1101, 1100, 1103, 1096,
     1104, 1102, 1105, 1149, 1104, 1095, 1105, 1094, 1105, 1103,
     1099, 1104, 1104, 1105, 1106, 1150, 1127, 1127, 1140, 1151,
     1101, 1106, 1127, 1102, 1140, 1153, 1156, 1156, 1162, 1166,
     1149, 1153, 1168, 1168, 1162, 1166, 1170, 1156, 1169, 1173,
     1151, 1171, 1171, 1172, 1174, 1176, 1175, 1177, 1179, 1178,

     1150, 1152, 1152, 1184, 1179, 1187, 1188, 1152, 1173, 1152,
     1182, 1182, 1185, 1174, 1291, 1181, 1181, 1292, 1293, 1294,
     1152, 1182, 1169, 1170, 1152, 1176, 1178, 1172, 1175, 1177,
     1187, 1183, 1183, 1184, 1181, 1152, 1155, 1155, 1181, 1186,
     1188, 1185, 1183, 1193, 1191, 1155, 1189, 1224, 1155, 1181,
     1183, 1191, 1189, 1192, 1183, 1155, 1204, 1186, 1212, 1155,
     1192, 1203, 1203, 1211, 1224, 1183, 1205, 1210, 1210, 1210,
     1155, 1157, 1157, 1205, 1223, 1193, 1295, 1262, 1192, 1210,
     1157, 1212, 1157, 1157, 1205, 1206, 1206, 1206, 1204, 1206,
     1157, 1204, 1297, 1203, 1157, 1216, 1206, 1206, 1211, 1223,

     1298, 1216, 1262, 1299, 1300, 1157, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1222, 1225, 1225,
     1226, 1227, 1228, 1229, 1225, 1230, 1231, 1232, 1244, 1248,
     1248, 1251, 1251, 1231, 1232, 1248, 1249, 1248, 1227, 1254,
     1251, 1256, 1249, 1251, 1231, 1254, 1230, 1252, 1252, 1257,
     1261, 1222, 1267, 1226, 1301, 1229, 1228, 1264, 1252, 1244,
     1253, 1253, 1258, 1258, 1264, 1302, 1305, 1263, 1265, 1253,

     1257, 1253, 1253, 1256, 1263, 1265, 1266, 1306, 1267, 1261,
     1268, 1263, 1266, 1267, 1264, 1271, 1269, 1268, 1270, 1274,
     1307, 1271, 1265, 1269, 1258, 1270, 1274, 1296, 1296, 1303,
     1303, 1308, 1268, 1296, 1309, 1303, 1270, 1304, 1304, 1310,
     1269, 1311, 1312, 1315, 1304, 1316, 1317, 1314, 1314, 1318,
     1319, 1319, 1323, 1313, 1324, 1309, 1319, 1325, 1311, 1296,
     1311, 1332, 1313, 1304, 1335, 1313, 1314, 1327, 1304, 1340,
     1314, 1310, 1313, 1342, 1343, 1341, 1313, 1344, 1325, 1341,
     1345, 1314, 1346, 1335, 1327, 1347, 1341, 1313, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,

     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1326, 1326, 1328, 1329, 1330, 1336, 1331, 1333, 1334, 1334,
     1338, 1337, 1348, 1339, 1349, 1350, 1356, 1357, 1352, 1351,
     1353, 1353, 1353, 1361, 1336, 1363, 1333, 1334, 1328, 1362,

     1333, 1334, 1326, 1364, 1330, 1331, 1352, 1329, 1339, 1365,
     1366, 1333, 1334, 1337, 1351, 1368, 1338, 1354, 1354, 1354,
     1358, 1358, 1358, 1359, 1359, 1359, 1362, 1363, 1367, 1354,
     1369, 1370, 1358, 1371, 1367, 1372, 1373, 1374, 1375, 1375,
     1377, 1368, 1376, 1376, 1375, 1378, 1368, 1380, 1379, 1381,
     1382, 1383, 1372, 1384, 1385, 1386, 1387, 1387, 1388, 1389,
     1389, 1389, 1387, 1390, 1374, 1377, 1373, 1392, 1376, 1379,
     1393, 1391, 1378, 1376, 1394, 1395, 1396, 1396, 1397, 1388,
     1391, 1398, 1399, 1391, 1400, 1403, 1401, 1402, 1387, 1404,
     1405, 1400, 1407, 1401, 1406, 1409, 1408, 1405, 1410, 1400,

     1411, 1406, 1393, 1408, 1412, 1413, 1405, 1395, 1396, 1414,
     1397, 1399, 1401, 1402, 1415, 1416, 1417, 1418, 1402, 1419,
     1420, 1421, 1422, 1406, 1423, 1424, 1424, 1424, 1425, 1426,
     1427, 1428, 1428, 1428, 1429, 1430, 1431, 1431, 1433, 1432,
     1434, 1435, 1436, 1431, 1433, 1432, 1437, 1439, 1438, 1442,
     1443, 1444, 1440, 1445, 1446, 1447, 1448, 1451, 1454, 1456,
     1462, 1426, 1431, 1455, 1455, 1455, 1464, 1431, 1432, 1438,
     1465, 1440, 1466, 1433, 1437, 1440, 1467, 1468, 1469, 1471,
     1472, 1462, 1439, 1478, 1456, 1454, 1440, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,

     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1450, 1452, 1453,
     1457, 1459, 1458, 1460, 1461, 1470, 1470, 1470, 1474, 1463,
     1473, 1473, 1475, 1479, 1479, 1479, 1473, 1476, 1476, 1476,
     1482, 1458, 1480, 1480, 1480, 1458, 1483, 1459, 1484, 1476,
     1452, 1453, 1485, 1486, 1461, 1457, 1458, 1460, 1463, 1475,
     1487, 1488, 1489, 1490, 1474, 1484, 1491, 1483, 1493, 1492,
     1494, 1494, 1496, 1495, 1497, 1499, 1498, 1500, 1500, 1500,
     1501, 1502, 1503, 1503, 1503, 1506, 1487, 1492, 1507, 1508,

     1510, 1487, 1515, 1497, 1518, 1520, 1494, 1493, 1513, 1513,
     1513, 1494, 1495, 1517, 1513, 1522, 1523, 1496, 1498, 1524,
     1517, 1508, 1525, 1502, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1504, 1509, 1511, 1512, 1514, 1519,
     1519, 1519, 1526, 1527, 1512, 1514, 1521, 1521, 1521, 1528,
     1529, 1530, 1532, 1532, 1534, 1537, 1535, 1511, 1532, 1536,
     1539, 1512, 1535, 1540, 1546, 1509, 1541, 1541, 1535, 1514,

     1531, 1544, 1547, 1541, 1545, 1545, 1531, 1548, 1531, 1531,
     1536, 1549, 1531, 1543, 1543, 1543, 1550, 1551, 1552, 1531,
     1553, 1556, 1544, 1531, 1559, 1559, 1546, 1541, 1563, 1563,
     1566, 1566, 1568, 1569, 1531, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1542, 1558, 1560, 1561,
     1564, 1567, 1542, 1571, 1560, 1570, 1570, 1570, 1572, 1573,
     1573, 1575, 1576, 1576, 1576, 1573, 1577, 1583, 1558, 1580,

     1580, 1580, 1567, 1586, 1589, 1564, 1584, 1584, 1584, 1561,
     1542, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
     1554, 1554, 1557, 1557, 1562, 1565, 1578, 1579, 1557, 1585,
     1557, 1581, 1581, 1587, 1590, 1588, 1593, 1581, 1594, 1587,
     1597, 1557, 1588, 1578, 1599, 1557, 1597, 1591, 1591, 1604,
     1607, 1596, 1579, 1591, 1601, 1610, 1557, 1585, 1562, 1595,
     1565, 1590, 1592, 1592, 1600, 1595, 1588, 1595, 1595, 1592,

     1593, 1595, 1596, 1601, 1603, 1606, 1608, 1611, 1612, 1614,
     1603, 1600, 1615, 1608, 1616, 1617, 1603, 1606, 1613, 1613,
     1613, 1618, 1619, 1592, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
     1598, 1598, 1598, 1598, 1598, 1602, 1605, 1625, 1621, 1622,
     1622, 1623, 1602, 1605, 1621, 1622, 1624, 1623, 1628, 1626,
     1622, 1629, 1624, 1602, 1636, 1626, 1625, 1630, 1630, 1632,
     1631, 1631, 1633, 1633, 1630, 1632, 1637, 1605, 1609, 1633,

     1640, 1626, 1631, 1639, 1609, 1638, 1609, 1609, 1641, 1642,
     1609, 1626, 1626, 1643, 1643, 1644, 1645, 1609, 1630, 1643,
     1648, 1609, 1646, 1650, 1632, 1637, 1648, 1638, 1646, 1649,
     1649, 1651, 1609, 1620, 1620, 1649, 1639, 1638, 1638, 1620,
     1649, 1620, 1650, 1658, 1646, 1654, 1654, 1659, 1660, 1660,
     1660, 1661, 1620, 1651, 1646, 1646, 1620, 1666, 1668, 1665,
     1667, 1670, 1686, 1651, 1651, 1665, 1667, 1620, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,

     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
     1647, 1647, 1652, 1653, 1656, 1655, 1647, 1657, 1647, 1671,
     1689, 1664, 1672, 1690, 1673, 1673, 1671, 1682, 1674, 1647,
     1673, 1680, 1692, 1647, 1674, 1677, 1677, 1680, 1653, 1657,
     1664, 1652, 1677, 1672, 1647, 1655, 1682, 1693, 1656, 1657,
     1657, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,

     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
     1662, 1662, 1663, 1669, 1675, 1675, 1676, 1678, 1694, 1688,
     1669, 1675, 1695, 1678, 1687, 1678, 1678, 1679, 1679, 1678,
     1681, 1681, 1698, 1679, 1704, 1679, 1681, 1683, 1683, 1683,
     1688, 1681, 1691, 1687, 1669, 1675, 1663, 1709, 1719, 1691,
     1720, 1676, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,

     1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
     1684, 1684, 1684, 1696, 1696, 1705, 1697, 1700, 1700, 1696,
     1701, 1696, 1697, 1700, 1703, 1710, 1701, 1714, 1700, 1715,
     1703, 1710, 1696, 1706, 1706, 1706, 1696, 1717, 1711, 1716,
     1705, 1718, 1721, 1722, 1711, 1712, 1712, 1696, 1699, 1699,
     1723, 1725, 1712, 1724, 1726, 1726, 1715, 1699, 1717, 1724,
     1699, 1714, 1728, 1734, 1727, 1727, 1718, 1699, 1728, 1731,
     1727, 1699, 1711, 1726, 1716, 1727, 1738, 1726, 1729, 1729,
     1730, 1732, 1699, 1702, 1702, 1739, 1733, 1737, 1726, 1729,
     1740, 1743, 1702, 1741, 1702, 1702, 1748, 1729, 1731, 1754,

     1741, 1729, 1702, 1742, 1757, 1730, 1702, 1747, 1737, 1742,
     1732, 1733, 1729, 1747, 1758, 1759, 1760, 1702, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
     1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,

     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736,
     1736, 1744, 1745, 1745, 1746, 1746, 1749, 1749, 1753, 1745,
     1746, 1751, 1746, 1750, 1750, 1749, 1755, 1751, 1749, 1750,
     1752, 1752, 1756, 1763, 1750, 1765, 1766, 1761, 1762, 1752,
     1768, 1752, 1752, 1753, 1762, 1744, 1761, 1755, 1766, 1761,
     1767, 1773, 1756, 1769, 1769, 1769, 1761, 1770, 1770, 1769,
     1761, 1774, 1775, 1770, 1770, 1777, 1778, 1779, 1773, 1776,

     1780, 1761, 1764, 1764, 1781, 1782, 1785, 1788, 1793, 1784,
     1794, 1764, 1774, 1767, 1764, 1784, 1776, 1795, 1776, 1794,
     1796, 1764, 1794, 1795, 1775, 1764, 1799, 1802, 1788, 1803,
     1804, 1777, 1790, 1790, 1790, 1815, 1764, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771,
     1771, 1771, 1771, 1771, 1771, 1771, 1771, 1771, 1783, 1786,
     1786, 1787, 1789, 1797, 1797, 1800, 1800, 1800, 1816, 1809,
     1817, 1818, 1797, 1807, 1807, 1797, 1809, 1783, 1786, 1807,

     1807, 1783, 1786, 1808, 1808, 1819, 1823, 1826, 1829, 1808,
     1808, 1789, 1783, 1786, 1787, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791,
     1791, 1791, 1791, 1791, 1791, 1791, 1798, 1801, 1806, 1805,
     1810, 1813, 1811, 1812, 1814, 1822, 1841, 1824, 1805, 1821,
     1828, 1805, 1820, 1825, 1830, 1842, 1824, 1845, 1805, 1824,
     1857, 1833, 1805, 1806, 1812, 1814, 1822, 1810, 1833, 1798,
     1811, 1820, 1801, 1805, 1821, 1820, 1813, 1864, 1825, 1832,

     1832, 1832, 1828, 1869, 1830, 1242, 1820, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827,
     1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1831, 1831,
     1834, 1835, 1835, 1835, 1837, 1831, 1839, 1834, 1836, 1836,
     1838, 1838, 1840, 1840, 1843, 1844, 1847, 1849, 1849, 1849,
     1850, 1850, 1850, 1870, 1870, 1837, 1861, 1861, 1861, 1241,
     1240, 1239, 1870, 1238, 1237, 1870, 1236, 1847, 1839, 1235,
     1233, 1221, 1220, 1219, 1843, 1844, 1846, 1846, 1846, 1846,

     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846, 1846,
     1846, 1846, 1846, 1846, 1846, 1846, 1846, 1848, 1852, 1853,
     1854, 1855, 1867, 1856, 1868, 1218, 1217, 1871, 1858, 1859,
     1872, 1215, 1214, 1213, 1209, 1208, 1207, 1202, 1200, 1199,
     1852, 1198, 1854, 1867, 1871, 1856, 1848, 1872, 1853, 1868,
     1852, 1852, 1854, 1854, 1855, 1856, 1856, 1858, 1859, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,

     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
     1865, 1865, 1866, 1873, 1874, 1875, 1197, 1196, 1195, 1865,
     1190, 1180, 1865, 1167, 1165, 1164, 1161, 1160, 1159, 1865,
     1158, 1154, 1147, 1865, 1146, 1145, 1875, 1144, 1143, 1142,
     1141, 1874, 1139, 1138, 1865, 1137, 1866, 1136, 1135, 1873,
     1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877,
     1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878, 1878,
     1879, 1879, 1879, 1879, 1879, 1879, 1879, 1879, 1879, 1879,
     1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880,

     1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881,
     1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882, 1882,
     1883, 1883, 1883, 1883, 1883, 1883, 1883, 1883, 1883, 1883,
     1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884,
     1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885,
     1886, 1886, 1886, 1886, 1886, 1886, 1886, 1886, 1886, 1886,
     1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887,
     1888, 1888, 1888, 1888, 1888, 1888, 1888, 1888, 1888, 1888,
     1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889, 1889,
     1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890, 1890,

     1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891, 1891,
     1892, 1892, 1892, 1892, 1892, 1892, 1892, 1892, 1892, 1892,
     1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893, 1893,
     1894, 1894, 1134, 1894, 1894, 1894, 1894, 1894, 1133, 1894,
     1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895, 1895,
     1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896, 1896,
     1897, 1132, 1131, 1897, 1130, 1129, 1897, 1898, 1898, 1898,
     1898, 1898, 1898, 1898, 1898, 1898, 1898, 1899, 1899, 1899,
     1899, 1899, 1899, 1899, 1899, 1899, 1899, 1900, 1128, 1126,
     1900, 1125, 1124, 1900, 1901, 1123, 1122, 1901, 1121, 1120,

     1901, 1902, 1119, 1118, 1902, 1117, 1116, 1902, 1903, 1115,
     1114, 1903, 1113, 1112, 1903, 1904, 1904, 1904, 1904, 1904,
     1904, 1904, 1904, 1904, 1904, 1905, 1905, 1905, 1905, 1905,
     1905, 1905, 1905, 1905, 1905, 1906, 1111, 1110, 1906, 1109,
     1108, 1906, 1907, 1091, 1907, 1907, 1090, 1089, 1907, 1908,
     1088, 1084, 1908, 1078, 1077, 1908, 1909, 1076, 1074, 1909,
     1073, 1072, 1909, 1910, 1910, 1069, 1910, 1910, 1910, 1910,
     1910, 1910, 1910, 1911, 1911, 1068, 1911, 1911, 1911, 1911,
     1911, 1911, 1911, 1912, 1912, 1912, 1912, 1912, 1912, 1912,
     1912, 1912, 1912, 1913, 1913, 1913, 1913, 1913, 1913, 1913,

     1913, 1913, 1913, 1914, 1914, 1067, 1914, 1914, 1914, 1914,
     1914, 1914, 1914, 1915, 1915, 1066, 1915, 1915, 1915, 1915,
     1915, 1915, 1915, 1916, 1916, 1916, 1916, 1916, 1916, 1916,
     1916, 1916, 1916, 1917, 1917, 1917, 1917, 1917, 1917, 1917,
     1917, 1917, 1917, 1918, 1065, 1064, 1918, 1919, 1063, 1062,
     1919, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920, 1920,
     1920, 1921, 1048, 1047, 1921, 1922, 1046, 1045, 1922, 1923,
     1044, 1043, 1923, 1924, 1042, 1041, 1924, 1925, 1925, 1040,
     1039, 1925, 1926, 1038, 1035, 1926, 1034, 1033, 1926, 1927,
     1032, 1027, 1927, 1928, 1026, 1025, 1928, 1024, 1023, 1928,

     1929, 1022, 1021, 1929, 1930, 1930, 1020, 1930, 1930, 1930,
     1930, 1930, 1930, 1930, 1931, 1931, 1931, 1931, 1931, 1931,
     1931, 1931, 1931, 1931, 1932, 1932,  991, 1932, 1932, 1932,
     1932, 1932, 1932, 1932, 1933, 1933, 1933, 1933, 1933, 1933,
     1933, 1933, 1933, 1933, 1934, 1934, 1934, 1934, 1934, 1934,
     1934, 1934, 1934, 1934, 1935,  990, 1935,  987,  986,  985,
     1935,  984, 1935, 1936, 1936, 1936, 1936, 1936, 1936, 1936,
     1936, 1936, 1936, 1937, 1937, 1937, 1937, 1937, 1937, 1937,
     1937, 1937, 1937, 1938, 1938, 1938, 1938, 1938, 1938, 1938,
     1938, 1938, 1938, 1939, 1939, 1939, 1939, 1939, 1939, 1939,

     1939, 1939, 1939, 1940, 1940, 1940, 1940, 1940, 1940, 1940,
     1940, 1940, 1940, 1941, 1941, 1941, 1941, 1941, 1941, 1941,
     1941, 1941, 1941, 1942,  983,  982, 1942,  977,  976, 1942,
     1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943, 1943,
     1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944,
     1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945, 1945,
     1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946,
     1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947, 1947,
     1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948,
     1949,  975, 1949,  974,  973,  972,  971,  970, 1949, 1950,

      969,  968, 1950, 1951,  967,  966, 1951,  965,  964, 1951,
     1952,  963,  962, 1952, 1953, 1953, 1953, 1953, 1953, 1953,
     1953, 1953, 1953, 1953, 1954, 1954, 1954, 1954, 1954, 1954,
     1954, 1954, 1954, 1954, 1955, 1955, 1955, 1955, 1955, 1955,
     1955, 1955, 1955, 1955, 1956, 1956, 1956, 1956, 1956, 1956,
     1956, 1956, 1956, 1956, 1957, 1957, 1957, 1957, 1957, 1957,
     1957, 1957, 1957, 1957, 1958, 1958, 1958, 1958, 1958, 1958,
     1958, 1958, 1958, 1958, 1959, 1959, 1959, 1959, 1959, 1959,
     1959, 1959, 1959, 1959, 1960, 1960, 1960, 1960, 1960, 1960,
     1960, 1960, 1960, 1960, 1961, 1961, 1961, 1961, 1961, 1961,

     1961, 1961, 1961, 1961, 1962, 1962, 1962, 1962, 1962, 1962,
     1962, 1962, 1962, 1962, 1963, 1963, 1963, 1963, 1963, 1963,
     1963, 1963, 1963, 1963, 1964, 1964, 1964, 1964, 1964, 1964,
     1964, 1964, 1964, 1964, 1965, 1965, 1965, 1965, 1965, 1965,
     1965, 1965, 1965, 1965, 1966, 1966, 1966, 1966, 1966, 1966,
     1966, 1966, 1966, 1966, 1967, 1967, 1967, 1967, 1967, 1967,
     1967, 1967, 1967, 1967, 1968, 1968, 1968, 1968, 1968, 1968,
     1968, 1968, 1968, 1968, 1969, 1969, 1969, 1969, 1969, 1969,
     1969, 1969, 1969, 1969, 1970, 1970, 1970, 1970, 1970, 1970,
     1970, 1970, 1970, 1970, 1971, 1971, 1971, 1971,  961, 1971,

     1971, 1971, 1971, 1971,  960,  959,  958,  957,  956,  955,
      953,  952,  950,  949,  947,  946,  945,  944,  943,  942,
      941,  940,  939,  938,  936,  920,  919,  918,  916,  913,
      910,  907,  905,  903,  902,  901,  900,  899,  898,  897,
      895,  894,  893,  892,  891,  887,  876,  874,  873,  872,
      871,  870,  869,  868,  867,  866,  865,  861,  860,  859,
      858,  854,  853,  852,  851,  850,  847,  845,  822,  821,
      819,  818,  816,  815,  814,  813,  812,  811,  810,  809,
      807,  806,  805,  804,  803,  802,  799,  798,  797,  796,
      795,  794,  793,  792,  790,  789,  788,  787,  786,  785,

      784,  783,  782,  780,  779,  778,  777,  776,  775,  774,
      757,  756,  755,  753,  751,  748,  747,  746,  745,  742,
      741,  740,  739,  738,  737,  736,  735,  734,  733,  732,
      731,  730,  716,  715,  714,  713,  712,  711,  710,  708,
      707,  706,  704,  703,  702,  698,  697,  696,  694,  693,
      674,  673,  672,  671,  670,  669,  668,  667,  666,  665,
      664,  663,  662,  661,  660,  658,  657,  655,  654,  653,
      652,  651,  650,  649,  648,  647,  646,  644,  643,  641,
      640,  639,  638,  637,  636,  635,  633,  632,  613,  612,
      611,  610,  609,  608,  607,  602,  601,  600,  599,  580,

      576,  570,  568,  565,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  546,  545,  544,  543,  542,  541,
      538,  537,  528,  525,  522,  520,  517,  516,  511,  510,
      506,  504,  498,  497,  484,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  468,  467,  461,  443,
      440,  439,  406,  405,  404,  403,  402,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  386,
      385,  384,  378,  377,  376,  375,  374,  373,  372,  371,
      369,  367,  347,  346,  340,  339,  329,  328,  327,  326,
      325,  324,  315,  314,  313,  312,  310,  305,  303,  297,

      294,  281,  271,  269,  263,  260,  258,  257,  255,  241,
      238,  237,  234,  231,  230,  228,  227,  215,  213,  211,
      210,  203,  199,  197,  196,  190,  182,  181,  179,  165,
      162,  161,  160,  158,  157,  156,  155,  154,  152,  151,
      135,  133,  128,  114,  111,  109,  108,  107,  106,  102,
      101,   86,   82,   75,   74,   73,   68,   66,   63,   57,
       35, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,
     1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876, 1876,

     1876, 1876, 1876
    } ;

extern int fscanYY_flex_debug;
int fscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = yy_full_lp; /* restore orig. accepting pos. */ \
(yy_state_ptr) = yy_full_state; /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *fscanYYtext;
#line 1 "fortranscanner.l"
/* -*- mode: fundamental; indent-tabs-mode: 1; -*- */
/*****************************************************************************
 * Parser for Fortran90 F subset
 *
 * Copyright (C) by Anke Visser
 * based on the work of Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */ 
/* Developer notes.
 *
 * - Consider using startScope(), endScope() functions with  module, program, 
 * subroutine or any other scope in fortran program.
 *
 * - Symbol modifiers (attributes) are collected using SymbolModifiers |= operator during
 * substructure parsing. When substructure ends all modifiers are applied to actual
 * entries in applyModifiers() functions.
 * 
 * - How case insensitiveness should be handled in code?
 * On one side we have arg->name and entry->name, on another side modifierMap[name].
 * In entries and arguments case is the same as in code, in modifier map case is lowered and
 * then it is compared to lowered entry/argument names.
 *
 * - Do not like constructs like aa{BS} or {BS}bb. Should try to handle blank space
 * with separate rule?: It seems it is often necessary, because we may parse something like 
 * "functionA" or "MyInterface". So constructs like `(^|[ \t])interface({BS_}{ID})?/[ \t\n]'
 * are desired.
 */
#line 40 "fortranscanner.l"

#include <stdio.h> 
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h> 
#include <qfile.h>
#include <qmap.h>
  
#include "fortranscanner.h"
#include "entry.h"
#include "message.h"
#include "config.h"
#include "doxygen.h"
#include "util.h"
#include "defargs.h"
#include "language.h"
#include "commentscan.h" 
#include "fortrancode.h"
#include "pre.h"

#define YY_NEVER_INTERACTIVE 1

enum ScanVar { V_IGNORE, V_VARIABLE, V_PARAMETER};

// {{{ ----- Helper structs -----
//! Holds modifiers (ie attributes) for one symbol (variable, function, etc)
struct SymbolModifiers {
  enum Protection {NONE_P, PUBLIC, PRIVATE};
  enum Direction {NONE_D, IN, OUT, INOUT};

  //!< This is only used with function return value.
  QCString type, returnName;
  Protection protection;
  Direction direction;
  bool optional;
  QCString dimension;
  bool allocatable;
  bool external;
  bool intrinsic;
  bool parameter;
  bool pointer;
  bool target;
  bool save;

  SymbolModifiers() : type(), returnName(), protection(NONE_P), direction(NONE_D),
    optional(FALSE), dimension(), allocatable(FALSE),
    external(FALSE), intrinsic(FALSE), parameter(FALSE),
    pointer(FALSE), target(FALSE), save(FALSE) {}

  SymbolModifiers& operator|=(const SymbolModifiers &mdfs);
  SymbolModifiers& operator|=(QCString mdfrString);
};

//ostream& operator<<(ostream& out, const SymbolModifiers& mdfs);

static const char *directionStrs[] = 
{
   "", "intent(in)", "intent(out)", "intent(inout)"
};

// }}}

/* -----------------------------------------------------------------
 *
 *	statics
 */
static ParserInterface *g_thisParser; 
static const char *     inputString;
static int		inputPosition;
static bool             isFixedForm;
static QCString         inputStringPrepass; ///< Input string for prepass of line cont. '&'
static unsigned int     inputPositionPrepass;
static int              lineCountPrepass = 0;

struct CommentInPrepass {
  int column;
  QCString str;
  CommentInPrepass(int column, QCString str) : column(column), str(str) {}
};
static QList<CommentInPrepass>  comments;

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

static QFile            inputFile;
static QCString		yyFileName;
static int		yyLineNr     = 1 ;
static Entry*		current_root = 0 ;
static Entry*		global_root  = 0 ;
static Entry*		file_root    = 0 ;
static Entry*		current      = 0 ;
static Entry*		last_entry   = 0 ;
static ScanVar          v_type       = V_IGNORE; // type of parsed variable
static QList<Entry>     moduleProcedures; // list of all interfaces which contain unresolved 
                                          // module procedures
static QCString         docBlock;
static QCString         docBlockName;
static bool             docBlockInBody;
static bool             docBlockJavaStyle;

static MethodTypes 	mtype;
static bool    		gstat;
static Specifier 	virt;

static QCString          debugStr;
static QCString          result; // function result
static Argument          *parameter; // element of parameter list
static QCString          argType;  // fortran type of an argument of a parameter list
static QCString          argName;  // last identifier name in variable list
static QCString          initializer;  // initial value of a variable
static int               initializerScope;  // number if nested array scopes in initializer
static QCString          useModuleName;  // name of module in the use statement
static Protection        defaultProtection;

static char              stringStartSymbol; // single or double quote

//! Accumulated modifiers of current statement, eg variable declaration.
static SymbolModifiers currentModifiers;
//! Holds program scope->symbol name->symbol modifiers.
static QMap<Entry*,QMap<QCString,SymbolModifiers> > modifiers;

//-----------------------------------------------------------------------------

static int yyread(char *buf,int max_size);
static void startCommentBlock(bool);
static void handleCommentBlock(const QCString &doc,bool brief);
static void addCurrentEntry();
static void addModule(const char *name, bool isModule=FALSE);
static void addSubprogram(const char *text);
static void addInterface(QCString name);
static Argument *addFortranParameter(const QCString &type,const QCString &name, const QCString docs);
static void scanner_abort();

static void startScope(Entry *scope);
static bool endScope(Entry *scope, bool isGlobalRoot=FALSE);
static QCString getFullName(Entry *e);
static bool isTypeName(QCString name);
static void resolveModuleProcedures(QList<Entry> &moduleProcedures, Entry *current_root);
static int getAmpersandAtTheStart(const char *buf, int length);
static int getAmpOrExclAtTheEnd(const char *buf, int length);
static void truncatePrepass(int index);
static void pushBuffer(QCString &buffer);
static void popBuffer();
static void extractPrefix(QCString& text);

//-----------------------------------------------------------------------------
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
/* Assume that attribute statements are almost the same as attributes. */
/*%option debug */
//---------------------------------------------------------------------------------
/** fortran parsing states */
























/** comment parsing states */



#line 3086 "<stdout>"

#define INITIAL 0
#define Subprog 1
#define SubprogPrefix 2
#define Parameterlist 3
#define SubprogBody 4
#define SubprogBodyContains 5
#define Start 6
#define Comment 7
#define Module 8
#define Program 9
#define ModuleBody 10
#define ModuleBodyContains 11
#define AttributeList 12
#define Variable 13
#define Initialization 14
#define ArrayInitializer 15
#define Typedef 16
#define TypedefBody 17
#define InterfaceBody 18
#define StrIgnore 19
#define String 20
#define Use 21
#define UseOnly 22
#define ModuleProcedure 23
#define Prepass 24
#define DocBlock 25
#define DocBackLine 26
#define EndDoc 27

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int fscanYYwrap (void );
#else
extern int fscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( fscanYYtext, fscanYYleng, 1, fscanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( fscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( fscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, fscanYYin))==0 && ferror(fscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(fscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int fscanYYlex (void);

#define YY_DECL int fscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after fscanYYtext and fscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( fscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(fscanYYtext[fscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 268 "fortranscanner.l"


 /*-----------------------------------------------------------------------------------*/

#line 3284 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)fscanYYalloc(YY_STATE_BUF_SIZE  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! fscanYYin )
			fscanYYin = stdin;

		if ( ! fscanYYout )
			fscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			fscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				fscanYY_create_buffer(fscanYYin,YY_BUF_SIZE );
		}

		fscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of fscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1877 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 6862 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 272 "fortranscanner.l"
{ // prepass: look for line continuations

                                          //fprintf(stderr, "---%s", fscanYYtext);

                                            int indexStart = getAmpersandAtTheStart(fscanYYtext, fscanYYleng);                              
                                            int indexEnd = getAmpOrExclAtTheEnd(fscanYYtext, fscanYYleng);
					    if (indexEnd>=0 && fscanYYtext[indexEnd]!='&') //we are only interested in amp
					      indexEnd=-1;

                                            if(indexEnd<0){ // ----- no ampersand as line continuation
                                               if(YY_START == Prepass) { // last line in "continuation"

                                                 // Only take input after initial ampersand
                                                 inputStringPrepass+=(const char*)(fscanYYtext+(indexStart+1));
   
                                                 pushBuffer(inputStringPrepass);
                                                 yy_pop_state();
                                               } else { // simple line
                                                 REJECT;
                                               }

                                            } else { // ----- line with continuation
                                              if(YY_START != Prepass) {
                                                comments.setAutoDelete(TRUE);
						comments.clear();
                                                yy_push_state(Prepass);
                                              }

                                              int length = inputStringPrepass.length();

                                              // Only take input after initial ampersand
                                              inputStringPrepass+=(const char*)(fscanYYtext+(indexStart+1));
                                              lineCountPrepass ++;

                                              // cut off & and remove following comment if present
					      truncatePrepass(length+indexEnd-(indexStart+1));
                                            }

                                        }
	YY_BREAK
/*------ ignore strings */ 
case 2:
YY_RULE_SETUP
#line 314 "fortranscanner.l"
{ /* ignore \\  */}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 315 "fortranscanner.l"
{ /* ignore \" and \'  */}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 317 "fortranscanner.l"
{ // string ends with next quote without previous backspace
                                          if (fscanYYtext[0]!=stringStartSymbol) REJECT; // single vs double quote
                                          // fprintf(stderr,"string end: %s\n",debugStr.data());
                                          yy_pop_state();
                                        }           
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 323 "fortranscanner.l"
{ debugStr+=fscanYYtext; } // ignore String contents (especially '!') 
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 325 "fortranscanner.l"
{ /* string starts */
					  if (YY_START == StrIgnore) REJECT; // ignore in simple comments
                                          // fprintf(stderr,"string start: %c %d\n",fscanYYtext[0],yyLineNr);
                                          yy_push_state(YY_START);
                                          stringStartSymbol=fscanYYtext[0]; // single or double quote
                                          BEGIN(String); debugStr="!^!";
                                        }
	YY_BREAK
/*------ ignore simple comment (not documentation comments) */
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */
YY_RULE_SETUP
#line 335 "fortranscanner.l"
{  if (YY_START == String) REJECT; // "!" is ignored in strings
                                          // skip comment line (without docu comments "!>" "!<" ) 
                                          /* ignore further "!" and ignore comments in Strings */
                                          if ((YY_START != StrIgnore) && (YY_START != String)) 
					  {
                                            yy_push_state(YY_START);
                                            BEGIN(StrIgnore); 
                                            debugStr="*!";
                                            //fprintf(stderr,"start comment %d\n",yyLineNr);
                                           }      
                                        }
	YY_BREAK
case 8:
/* rule 8 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */
YY_RULE_SETUP
#line 346 "fortranscanner.l"
{ yy_pop_state(); // comment ends with endline character
                                          //fprintf(stderr,"end comment %d %s\n",yyLineNr,debugStr.data());
                                        } // comment line ends
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 349 "fortranscanner.l"
{ debugStr+=fscanYYtext; } 
	YY_BREAK
/*------ use handling ------------------------------------------------------------*/
case 10:
YY_RULE_SETUP
#line 354 "fortranscanner.l"
{
                                          if(YY_START == Start)
                                          {
                                            addModule(NULL); 
                                            yy_push_state(ModuleBody); //anon program
                                          }
                                          yy_push_state(Use);
                                        }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 362 "fortranscanner.l"
{ 
                                          //fprintf(stderr,"using dir %s\n",fscanYYtext);
                                          current->name=fscanYYtext;
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDIR_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry;
                                          yy_pop_state();
                                        }
	YY_BREAK
case 12:
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */
YY_RULE_SETUP
#line 371 "fortranscanner.l"
{ 
                                          useModuleName=fscanYYtext;
                                        }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 374 "fortranscanner.l"
{ BEGIN(UseOnly); 
                                        }           
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 376 "fortranscanner.l"
{}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 377 "fortranscanner.l"
{
  					  current->name= useModuleName+"::"+fscanYYtext;
                                          current->fileName = yyFileName; 
  					  current->section=Entry::USINGDECL_SEC;
					  current_root->addSubEntry(current);
					  current = new Entry ;
  					}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 384 "fortranscanner.l"
{
                                          unput(*fscanYYtext);
                                          yy_pop_state();
                                        }
	YY_BREAK
/*------ ignore special fortran statements */
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 390 "fortranscanner.l"
{ // handle interface block
                                          if(YY_START == Start)
                                          {
                                            addModule(NULL); 
                                            yy_push_state(ModuleBody); //anon program
                                          }

					  QCString name = fscanYYtext;
					  int index = name.find("interface", 0, FALSE);
					  index = name.find(QRegExp("[^ \\t]"), index+9);
					  //printf(stderr,"%s,%d\n",name.data(),index);
					  if (index!=-1)
					    name = name.right(name.length()-index);
					  else // interface without name, must be inside subprog
					    name = "interface"; 
					  addInterface(name);
					  yy_push_state(InterfaceBody);
 					  startScope(last_entry);
                                        }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 409 "fortranscanner.l"
{
					  if (!endScope(current_root))
					    yyterminate();
					  yy_pop_state();
                                        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 414 "fortranscanner.l"
{ yy_push_state(YY_START);
                                          BEGIN(ModuleProcedure);
                                        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 417 "fortranscanner.l"
{                       			
                                          current->section = Entry::FUNCTION_SEC ;
                                          current->name = fscanYYtext; 
 	                                  moduleProcedures.append(current);
                                          addCurrentEntry();
                                        }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 423 "fortranscanner.l"
{ unput(*fscanYYtext); 
                                          yy_pop_state();
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 426 "fortranscanner.l"
{}
	YY_BREAK
/*-- Contains handling --*/
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 429 "fortranscanner.l"
{
                                          if(YY_START == Start)
                                          {
                                            addModule(NULL); 
                                            yy_push_state(ModuleBodyContains); //anon program
                                          }                                            
                                        }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 436 "fortranscanner.l"
{ BEGIN(ModuleBodyContains); }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 437 "fortranscanner.l"
{ BEGIN(SubprogBodyContains); }
	YY_BREAK
/*------ module handling ------------------------------------------------------------*/ 
case 26:
YY_RULE_SETUP
#line 440 "fortranscanner.l"
{  //
					    if(fscanYYtext[0]=='m' || fscanYYtext[0]=='M')
					      yy_push_state(Module);
					    else
					      yy_push_state(Program);
                                            defaultProtection = Public;
                                       }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 447 "fortranscanner.l"
{ // end module	
					    resolveModuleProcedures(moduleProcedures, current_root);
					    if (!endScope(current_root))
					      yyterminate();
                                            defaultProtection = Public;
					    yy_pop_state();
                                       }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 454 "fortranscanner.l"
{  
                                            addModule(fscanYYtext, TRUE);
					    BEGIN(ModuleBody);
                                       }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 459 "fortranscanner.l"
{  
                                            addModule(fscanYYtext, FALSE);
					    BEGIN(ModuleBody);
                                       }
	YY_BREAK
/*------- access specification --------------------------------------------------------------------------*/
case 30:
/* rule 30 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */
YY_RULE_SETUP
#line 466 "fortranscanner.l"
{ defaultProtection = Private; }
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */
YY_RULE_SETUP
#line 467 "fortranscanner.l"
{ defaultProtection = Public; }
	YY_BREAK
/*------- type definition  -------------------------------------------------------------------------------*/
case 32:
YY_RULE_SETUP
#line 471 "fortranscanner.l"
{ /* type definition found : TYPE , access-spec::type-name |*/
                                          if(YY_START == Start)
                                          {
                                            addModule(NULL); 
                                            yy_push_state(ModuleBody); //anon program
                                          }

 					    yy_push_state(Typedef);
					    current->protection = defaultProtection;
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 481 "fortranscanner.l"
{ 	
                                            QCString type= fscanYYtext;				    
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 484 "fortranscanner.l"
{ /* type name found */
                                            //cout << "=========> got typedef " << fscanYYtext << ": " << yyLineNr << endl; 
                                            current->section = Entry::CLASS_SEC; // was Entry::STRUCT_SEC;
   					    current->spec = Entry::Struct;        	
  					    current->name = fscanYYtext;

                                            /* if type is part of a module, mod name is necessary for output */
                                            if ((current_root) && 
                                               (current_root->section ==  Entry::CLASS_SEC ||
					        current_root->section ==  Entry::NAMESPACE_SEC))
						//current_root->section ==  Entry::INTERFACE_SEC)) 
					    {
                                              current->name= current_root->name+"::"+current->name;
                                            }
					    current->fileName = yyFileName;
					    current->bodyLine  = yyLineNr; 
                                            addCurrentEntry();
					    startScope(last_entry); 
                                            BEGIN(TypedefBody);
                                        }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 504 "fortranscanner.l"
{ /* end type definition */
                                           //printf("=========> got typedef end \n"); 
					   if (!endScope(current_root))
					     yyterminate();
                                           yy_pop_state();
                                        } 
	YY_BREAK
/*------- module/global/typedef variable ---------------------------------------------------*/
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 513 "fortranscanner.l"
{  
                                           //fprintf(stderr,"1e=========> got end subprog: %s\n", fscanYYtext);

                                           /* args is used for parameters in list of functions, argList for 
                                             parameters in detailed function descripttion */
                                           //current->args = argListToString(current->argList); 
					   //current->endBodyLine  = yyLineNr; // ??? what ist endBodyLine for
					   if (!endScope(current_root))
					     yyterminate();
					   yy_pop_state() ;
				       } 
	YY_BREAK

case 37:
/* rule 37 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up fscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up fscanYYtext again */
YY_RULE_SETUP
#line 525 "fortranscanner.l"
{
                                          /* variable declaration starts */
                                          if(YY_START == Start)
                                          {
                                            addModule(NULL); 
                                            yy_push_state(ModuleBody); //anon program
                                          }
                                          //fprintf(stderr,"4=========> got variable type: %s\n",fscanYYtext);
 					  QCString help=fscanYYtext;
					  help= help.simplifyWhiteSpace();
					  argType= help;
					  yy_push_state(AttributeList);
                                        }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 538 "fortranscanner.l"
{ /* check for preprocessor symbol expand to type */
					  QCString str = fscanYYtext;
					  str = str.stripWhiteSpace();
					  DefineDict* defines = getFileDefineDict();
					  QCString name;
					  int index = str.find("(");
					  if (index != -1)
					    name = str.left(index).stripWhiteSpace();
					  else
					    name = str;

					  Define *define = (*defines)[name];
					  if (define != 0 && isTypeName(define->definition)) 
					  {
					    argType = str;
					    yy_push_state(AttributeList);
					  } 
					  else 
					  {
					    REJECT;
					  }
					}
	YY_BREAK
case 39:
/* rule 39 can match eol */
#line 561 "fortranscanner.l"
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 561 "fortranscanner.l"
{ 
                                          /* attribute statement starts */
                                          //fprintf(stderr,"5=========> Attribute statement: %s\n", fscanYYtext); 
                                          QCString tmp = fscanYYtext;
                                          currentModifiers |= tmp.stripWhiteSpace();
					  argType="";
					  yy_push_state(YY_START);
					  BEGIN( AttributeList ) ;
  				       }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 570 "fortranscanner.l"
{
                                       }  
	YY_BREAK


case 42:
YY_RULE_SETUP
#line 574 "fortranscanner.l"
{}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 575 "fortranscanner.l"
{}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 576 "fortranscanner.l"
{ /* update current modifiers */
                                          QCString tmp = fscanYYtext;
                                          currentModifiers |= (tmp);
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 580 "fortranscanner.l"
{ /* end attribute list */
					  BEGIN( Variable );
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 583 "fortranscanner.l"
{ /* unknown attribute, consider variable name */
					  //cout<<"start variables, unput "<<*fscanYYtext<<endl;
					  unput(*fscanYYtext);
					  BEGIN( Variable );
					}
	YY_BREAK

case 47:
YY_RULE_SETUP
#line 590 "fortranscanner.l"
{}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 591 "fortranscanner.l"
{ /* parse variable declaration */
                                          //cout << "5=========> got variable: " << argType << "::" << fscanYYtext << endl;
 					  /* work around for bug in QCString.replace (QCString works) */
					  QCString name=fscanYYtext;
					  /* remember attributes for the symbol */
					  modifiers[current_root][name.lower()] |= currentModifiers;
					  argName= name;

					  v_type= V_IGNORE;
  					  if (!argType.isEmpty() && current_root->section!=Entry::FUNCTION_SEC) 
					  { // new variable entry
					    v_type = V_VARIABLE;
                                            current->section = Entry::VARIABLE_SEC;
 					    current->name = argName;
					    current->type = argType;
					    current->fileName = yyFileName;
					    current->bodyLine  = yyLineNr; // used for source reference
                                            addCurrentEntry();
                                          } 
					  else if (!argType.isEmpty())
					  { // deklaration of parameter list: add type for corr. parameter 
					    parameter= addFortranParameter(argType,argName,docBlock);
					    if (parameter) v_type= V_PARAMETER;
					    // save, it may be function return type
					    modifiers[current_root][name.lower()].type = argType;
					    // any accumulated doc for argument should be emptied,
					    // because it is handled other way and this doc can be
					    // unexpectedly passed to the next member.
					    current->doc.resize(0);
					    current->brief.resize(0);
                                          } 
  					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 623 "fortranscanner.l"
{ /* dimension of the previous entry. */
					  QCString name(argName);
					  QCString attr("dimension");
					  attr += fscanYYtext;
					  modifiers[current_root][name] |= attr;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 629 "fortranscanner.l"
{}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 630 "fortranscanner.l"
{ yy_push_state(YY_START);
                                          initializer="";
                                          initializerScope = 0;
					  BEGIN(Initialization);
                                        }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 635 "fortranscanner.l"
{ currentModifiers = SymbolModifiers();
                                          yy_pop_state(); // end variable deklaration list
                                          yyLineNr++; yyLineNr+=lineCountPrepass; lineCountPrepass=0;
                                          docBlock.resize(0);
                                        }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 641 "fortranscanner.l"
{ initializer+=fscanYYtext;
                                           initializerScope++;
                                           BEGIN(ArrayInitializer); // initializer may contain comma
                                        }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 645 "fortranscanner.l"
{ initializer+=fscanYYtext;
                                           initializerScope--;
                                           if(initializerScope<=0)
                                           {
                                              initializerScope = 0; // just in case
                                              BEGIN(Initialization);
                                           }
                                        }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 653 "fortranscanner.l"
{ initializer+=fscanYYtext; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 654 "fortranscanner.l"
{ yy_pop_state(); // end initialization
                                          if (v_type == V_VARIABLE) last_entry->initializer= initializer;
                                        }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 657 "fortranscanner.l"
{ //| 
                                          yy_pop_state(); // end initialization
                                          if (v_type == V_VARIABLE) last_entry->initializer= initializer;
 					  unput(*fscanYYtext);
                                        }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 662 "fortranscanner.l"
{ initializer+=fscanYYtext; }
	YY_BREAK
/*------ fortran subroutine/function handling ------------------------------------------------------------*/
/*       Start is initial condition                                                                       */
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 667 "fortranscanner.l"
{   
		                           // TYPE_SPEC is for old function style function result
                                           result= fscanYYtext;
                                           result= result.stripWhiteSpace();
                                           extractPrefix(result);
                                           //fprintf(stderr, "===%s\n", (const char*)result);
  					   current->type = result;
                                           yy_push_state(SubprogPrefix);
                                       }          
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 677 "fortranscanner.l"
{
                                         // Fortran subroutine or function found
                                         addSubprogram(fscanYYtext);
                                         BEGIN(Subprog);
                                       }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 683 "fortranscanner.l"
{
                                         // Fortran subroutine or function found
                                         result= fscanYYtext;
                                         result= result.stripWhiteSpace();
                                         extractPrefix(result);
                                         addSubprogram(result);
                                         yy_push_state(Subprog);
                                       }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 692 "fortranscanner.l"
{   /* ignore white space */   }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 693 "fortranscanner.l"
{   current->name = fscanYYtext;
					   //cout << "1a==========> got " << current->type << " " << fscanYYtext << " " << yyLineNr << endl;
					   modifiers[current_root][current->name.lower()].returnName = current->name;
					   BEGIN(Parameterlist);
                                       } 
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 698 "fortranscanner.l"
{   
				           //current->type not yet available
                                           QCString arglist= fscanYYtext;
					   //cout << "3=========> got parameterlist " << fscanYYtext << endl;
                                           //yyLineNr+= arglist.contains('\n');
					   //static QRegExp re("&[^\n]*\n");
                                           //arglist = arglist.replace(re,"");
					   //cout << "3=========> got parameterlist " << arglist << endl;
					   current->args = arglist;
					   current->args = removeRedundantWhiteSpace(current->args);
					   stringToArgumentList(current->args, current->argList);
                                           addCurrentEntry();
					   startScope(last_entry);
					   BEGIN(SubprogBody);
 				       } 
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 713 "fortranscanner.l"
{   
                                           yyLineNr++; yyLineNr+=lineCountPrepass; lineCountPrepass=0;
					   //printf("3=========> without parameterlist \n");
 					   stringToArgumentList("", current->argList);
                                           addCurrentEntry();
					   startScope(last_entry);
					   BEGIN(SubprogBody);				           
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 721 "fortranscanner.l"
{  
                                           result= fscanYYtext;
                                           result= result.right(result.length()-result.find("(")-1);
                                           result= result.stripWhiteSpace();
 					   modifiers[current_root->parent()][current_root->name.lower()].returnName = result;
                                           //cout << "=====> got result " <<  result << endl;
 				       } 
	YY_BREAK
/*---- documentation comments --------------------------------------------------------------------*/
case 67:
YY_RULE_SETUP
#line 731 "fortranscanner.l"
{ /* backward docu comment (only one line) */
                                          if (v_type != V_IGNORE) {
                                           yy_push_state(YY_START);
					   current->docLine  = yyLineNr;
 					   docBlockJavaStyle = FALSE;
					   docBlock.resize(0);
					   docBlockJavaStyle = Config_getBool("JAVADOC_AUTOBRIEF");
					   startCommentBlock(TRUE);
					   BEGIN(DocBackLine);
                                          }
  					 }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 742 "fortranscanner.l"
{ // contents of current comment line
                                          docBlock=fscanYYtext;
					  if (v_type == V_VARIABLE) 
					  {
					    Entry *tmp_entry = current; 
					    current = last_entry; // temporarily switch to the previous entry
  					    handleCommentBlock(docBlock,TRUE);
 					    current=tmp_entry;
                                          }
					  else if (v_type == V_PARAMETER) 
					  {
					    parameter->docs=docBlock;
                                          }
                                          yy_pop_state();
 					 }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 758 "fortranscanner.l"
{
                                          yy_push_state(YY_START);
					  current->docLine  = yyLineNr;
 					  docBlockJavaStyle = FALSE;
					  docBlock.resize(0);
					  docBlockJavaStyle = Config_getBool("JAVADOC_AUTOBRIEF");
					  startCommentBlock(TRUE);
					  BEGIN(DocBlock);
                                          //cout << "start DocBlock " << endl;
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 769 "fortranscanner.l"
{ // contents of current comment line
                                          docBlock+=fscanYYtext;
  					}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 772 "fortranscanner.l"
{ // comment block (next line is also comment line)
					  docBlock+="\n"; // \n is necessary for lists
                                          yyLineNr++; yyLineNr+=lineCountPrepass; lineCountPrepass=0;
  					}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 776 "fortranscanner.l"
{ // comment block ends at the end of this line
                                          //cout <<"3=========> comment block : "<< docBlock << endl;
					  unput(*fscanYYtext);                                        
 					  handleCommentBlock(docBlock,TRUE);
                                          yy_pop_state();                                          
  					}
	YY_BREAK
/*------------------------------------------------------------------------------------------------*/
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 785 "fortranscanner.l"
{
                                          yyLineNr++; yyLineNr+=lineCountPrepass; lineCountPrepass=0;
                                          //if (debugStr.stripWhiteSpace().length() > 0) cout << "ignored text: " << debugStr << " state: " <<YY_START << endl;
                                          debugStr="";
                                        }
	YY_BREAK
/*---- error: EOF in wrong state --------------------------------------------------------------------*/
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Subprog):
case YY_STATE_EOF(SubprogPrefix):
case YY_STATE_EOF(Parameterlist):
case YY_STATE_EOF(SubprogBody):
case YY_STATE_EOF(SubprogBodyContains):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Comment):
case YY_STATE_EOF(Module):
case YY_STATE_EOF(Program):
case YY_STATE_EOF(ModuleBody):
case YY_STATE_EOF(ModuleBodyContains):
case YY_STATE_EOF(AttributeList):
case YY_STATE_EOF(Variable):
case YY_STATE_EOF(Initialization):
case YY_STATE_EOF(ArrayInitializer):
case YY_STATE_EOF(Typedef):
case YY_STATE_EOF(TypedefBody):
case YY_STATE_EOF(InterfaceBody):
case YY_STATE_EOF(StrIgnore):
case YY_STATE_EOF(String):
case YY_STATE_EOF(Use):
case YY_STATE_EOF(UseOnly):
case YY_STATE_EOF(ModuleProcedure):
case YY_STATE_EOF(Prepass):
case YY_STATE_EOF(DocBlock):
case YY_STATE_EOF(DocBackLine):
case YY_STATE_EOF(EndDoc):
#line 794 "fortranscanner.l"
{
                                          if ( include_stack_ptr <= 0 ) {
                                            if (YY_START!=INITIAL && YY_START!=Start) {
                                              //fprintf(stderr,"==== Error: EOF reached in wrong state (end missing)");
                                              scanner_abort();
                                            }
                                            yyterminate();
                                          } else {
                                            popBuffer();
                                          }
                                        }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 805 "fortranscanner.l"
{
                                          //debugStr+=fscanYYtext;
					  //printf("I:%c\n", *fscanYYtext);
                                        } // ignore remaining text 
	YY_BREAK
/**********************************************************************************/
/**********************************************************************************/
/**********************************************************************************/
case 75:
YY_RULE_SETUP
#line 813 "fortranscanner.l"
ECHO;
	YY_BREAK
#line 4276 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed fscanYYin at a new source and called
			 * fscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = fscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( fscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * fscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of fscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			fscanYYrestart(fscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1877 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1877 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1876);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up fscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					fscanYYrestart(fscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( fscanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve fscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void fscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        fscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            fscanYY_create_buffer(fscanYYin,YY_BUF_SIZE );
	}

	fscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	fscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void fscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		fscanYYpop_buffer_state();
	 *		fscanYYpush_buffer_state(new_buffer);
     */
	fscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	fscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (fscanYYwrap()) processing, but the only time this flag
	 * is looked at is after fscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void fscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	fscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE fscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) fscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in fscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) fscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in fscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	fscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with fscanYY_create_buffer()
 * 
 */
    void fscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		fscanYYfree((void *) b->yy_ch_buf  );

	fscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a fscanYYrestart() or at EOF.
 */
    static void fscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	fscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then fscanYY_init_buffer was _probably_
     * called from fscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void fscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		fscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void fscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	fscanYYensure_buffer_stack();

	/* This block is copied from fscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from fscanYY_switch_to_buffer. */
	fscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void fscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	fscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		fscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void fscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)fscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)fscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE fscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) fscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in fscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	fscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to fscanYYlex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       fscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE fscanYY_scan_string (yyconst char * yystr )
{
    
	return fscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to fscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE fscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) fscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in fscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = fscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in fscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) fscanYYalloc(new_size  );

		else
			(yy_start_stack) = (int *) fscanYYrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up fscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		fscanYYtext[fscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = fscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		fscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int fscanYYget_lineno  (void)
{
        
    return fscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *fscanYYget_in  (void)
{
        return fscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *fscanYYget_out  (void)
{
        return fscanYYout;
}

/** Get the length of the current token.
 * 
 */
int fscanYYget_leng  (void)
{
        return fscanYYleng;
}

/** Get the current token.
 * 
 */

char *fscanYYget_text  (void)
{
        return fscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void fscanYYset_lineno (int  line_number )
{
    
    fscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see fscanYY_switch_to_buffer
 */
void fscanYYset_in (FILE *  in_str )
{
        fscanYYin = in_str ;
}

void fscanYYset_out (FILE *  out_str )
{
        fscanYYout = out_str ;
}

int fscanYYget_debug  (void)
{
        return fscanYY_flex_debug;
}

void fscanYYset_debug (int  bdebug )
{
        fscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from fscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    fscanYYin = stdin;
    fscanYYout = stdout;
#else
    fscanYYin = (FILE *) 0;
    fscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * fscanYYlex_init()
     */
    return 0;
}

/* fscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int fscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		fscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		fscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	fscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        fscanYYfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    fscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * fscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *fscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *fscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void fscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see fscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 813 "fortranscanner.l"


//----------------------------------------------------------------------------

static void extractPrefix(QCString &text) {
  int prefixIndex = 0;
  int curIndex = 0;
  bool cont = TRUE;
  const char* pre[] = {"RECURSIVE","PURE","ELEMENTAL"};
  while(cont)
  {
    cont = FALSE;
    for(unsigned int i=0; i<3; i++)
    {
      if((prefixIndex=text.find(pre[i], curIndex, FALSE))==0)
      {
        text.remove(0,strlen(pre[i]));
        text.stripWhiteSpace();
        cont = TRUE;
      }
    }
  }
}

static int getAmpersandAtTheStart(const char *buf, int length)
{
  for(int i=0; i<length; i++) {
    switch(buf[i]) {
      case ' ':
      case '\t':
        break;
      case '&':
        return i;
      default:
        return -1;
    }
  }
  return -1;
}

/* Returns ampersand index, comment start index or -1 if neither exist.*/ 
static int getAmpOrExclAtTheEnd(const char *buf, int length)
{
  // Avoid ampersands in string and comments
  int parseState = Start;
  char quoteSymbol = 0;
  int ampIndex = -1;
  int commentIndex = -1;

  for(int i=0; i<length && parseState!=Comment; i++)
  {
    // When in string, skip backslashes
    // Legacy code, not sure whether this is correct?
    if(parseState==String)
    {
      if(buf[i]=='\\') i++;
    }

    switch(buf[i])
    {
        case '\'':
        case '"':
          // Close string, if quote symbol matches.
          // Quote symbol is set iff parseState==String
          if(buf[i]==quoteSymbol)
          {
             parseState = Start;
             quoteSymbol = 0;
          }
          // Start new string, if not already in string or comment
          else if(parseState==Start)
          {
            parseState = String;
            quoteSymbol = buf[i];
          }
          ampIndex = -1; // invalidate prev ampersand
          break;
        case '!':
          // When in string or comment, ignore exclamation mark
          if(parseState==Start)
          {
            parseState = Comment;
            commentIndex = i;
          }
          break;
        case ' ':  // ignore whitespace
        case '\t':
        case '\n': // this may be at the end of line
          break;
        case '&':
          ampIndex = i;
          break;
        default:
          ampIndex = -1; // invalidate prev ampersand
    }
  }

  if (ampIndex>=0)
    return ampIndex;
  else
   return commentIndex;
}

/* Although comments at the end of continuation line are grabbed by this function,
* we still do not know how to use them later in parsing.
*/
void truncatePrepass(int index)
{
  int length = inputStringPrepass.length();
  for (int i=index+1; i<length; i++) {
    if (inputStringPrepass[i]=='!') { // save comment 
      //printf("-----SAVE----- %d:%s", i, (const char*)inputStringPrepass.right(length-i));
      struct CommentInPrepass *c=new CommentInPrepass(index, inputStringPrepass.right(length-i));
      comments.append(c);
    }
  }
  inputStringPrepass.truncate(index);
}

// simplified way to know if this is fixed form
// duplicate in fortrancode.l
static bool recognizeFixedForm(const char* contents)
{
  int column=0;
  bool skipLine=FALSE;

  for(int i=0;;i++) {
    column++;

    switch(contents[i]) {
      case '\n':
        column=0;
        skipLine=FALSE;
        break;
      case ' ':
        break;
      case '\000':
        return FALSE;
      case 'C':
      case 'c':
      case '*':
        if(column==1) return TRUE;
        if(skipLine) break;
        return FALSE;
      case '!':
        if(column>1 && column<7) return FALSE;
        skipLine=TRUE;
        break;
      default:
        if(skipLine) break;
        if(column==7) return TRUE;
        return FALSE;
    }
  }
  return FALSE;
}

/* This function assumes that contents has at least size=length+1 */
static void insertCharacter(char *contents, int length, int pos, char c)
{
  // shift tail by one character
  for(int i=length; i>pos; i--)
    contents[i]=contents[i-1];
  // set the character
  contents[pos] = c;
}

/* change comments and bring line continuation character to previous line */
static const char* prepassFixedForm(const char* contents)
{
  int column=0;
  int prevLineLength=0;
  int prevLineAmpOrExclIndex=-1;
  bool emptyLabel=TRUE;
  int newContentsSize = strlen(contents)+2; // \000 and one spare character (to avoid reallocation)
  char* newContents = (char*)malloc(newContentsSize);

  for(int i=0, j=0;;i++,j++) {
    if(j>=newContentsSize-1) { // check for one spare character, which may be eventually used below (by &)
      newContents = (char*)realloc(newContents, newContentsSize+1000);
      newContentsSize = newContentsSize+1000;
    }

    column++;
    char c = contents[i];
    switch(c) {
      case '\n':
        prevLineLength=column;
        prevLineAmpOrExclIndex=getAmpOrExclAtTheEnd(&contents[i-prevLineLength+1], prevLineLength);
        column=0;
	emptyLabel=TRUE;
        newContents[j]=c;
        break;
      case ' ':
        newContents[j]=c;
        break;
      case '\000':
        newContents[j]='\000';
        return newContents;
      case 'C':
      case 'c':
      case '*':
	emptyLabel=FALSE;
        if(column==1)
	  newContents[j]='!';
        else
          newContents[j]=c;
        break;
      default:
        if(column==6 && emptyLabel) { // continuation
          newContents[j]=' ';

          if(prevLineAmpOrExclIndex==-1) { // add & just before end of previous line
            insertCharacter(newContents, j+1, (j+1)-6-1, '&');
            j++;
          } else { // add & just before end of previous line comment
            insertCharacter(newContents, j+1, (j+1)-6-prevLineLength+prevLineAmpOrExclIndex, '&');
            j++;
          }
	} else {
	  newContents[j]=c;
	  emptyLabel=FALSE;
	}
        break;
    }
  }
  return newContents;
}

static void pushBuffer(QCString& buffer)
{
  if ( include_stack_ptr >= MAX_INCLUDE_DEPTH )
  {
    fprintf( stderr, "Stack buffers nested too deeply" );
    exit( 1 );
  }
  include_stack[include_stack_ptr++] = YY_CURRENT_BUFFER;
  fscanYY_switch_to_buffer(fscanYY_scan_string(buffer));

  //fprintf(stderr, "--PUSH--%s", (const char *)buffer);
  buffer = NULL;
}

static void popBuffer() {
  //fprintf(stderr, "--POP--");
  include_stack_ptr --;
  fscanYY_delete_buffer(YY_CURRENT_BUFFER );
  fscanYY_switch_to_buffer(include_stack[include_stack_ptr] );
}

/** used to copy entry to an interface module procedure */
static void copyEntry(Entry *dest, Entry *src) 
{
   dest->type     = src->type;
   dest->fileName = src->fileName;
   dest->bodyLine = src->bodyLine;
   dest->args     = src->args;
   dest->argList  = new ArgumentList(*src->argList);
}

/** fill empty interface module procedures with info from 
    corresponding module subprogs 
    @TODO: handle procedures in used modules
*/
void resolveModuleProcedures(QList<Entry> &moduleProcedures, Entry *current_root)
{
  if (moduleProcedures.isEmpty()) return;
 
  EntryListIterator eli1(moduleProcedures);
  // for all module procedures
  for (Entry *ce1; (ce1=eli1.current()); ++eli1) 
  {
    // check all entries in this module
    EntryListIterator eli2(*current_root->children());
    for (Entry *ce2; (ce2=eli2.current()); ++eli2) 
    {
      if (ce1->name == ce2->name) 
      {
        copyEntry(ce1, ce2);
      }
    } // for procedures in current module
  } // for all interface module procedures
  moduleProcedures.clear();
}

static bool isTypeName(QCString name)
{
  name = name.lower();
  return name=="integer" || name == "real" || 
    name=="complex" || name == "logical";
}

/*! Extracts string which resides within parentheses of provided string. */
static QCString extractFromParens(const QCString name)
{
  QCString extracted = name;
  int start = extracted.find("(");
  if (start != -1) 
  {
    extracted.remove(0, start+1);
  }
  int end = extracted.findRev(")");
  if (end != -1) 
  {
    int length = extracted.length();
    extracted.remove(end, length);
  }
  extracted = extracted.stripWhiteSpace();

  return extracted;
}

/*! Adds passed modifiers to these modifiers.*/
SymbolModifiers& SymbolModifiers::operator|=(const SymbolModifiers &mdfs)
{
  if (mdfs.protection!=NONE_P) protection = mdfs.protection;
  if (mdfs.direction!=NONE_D) direction = mdfs.direction;
  optional |= mdfs.optional;
  if (!mdfs.dimension.isNull()) dimension = mdfs.dimension;
  allocatable |= mdfs.allocatable;
  external |= mdfs.external;
  intrinsic |= mdfs.intrinsic;
  parameter |= mdfs.parameter;
  pointer |= mdfs.pointer;
  target |= mdfs.target;
  save |= mdfs.save;
  return *this;
}

/*! Extracts  and adds passed modifier to these modifiers.*/
SymbolModifiers& SymbolModifiers::operator|=(QCString mdfString)
{
  mdfString = mdfString.lower();
  SymbolModifiers newMdf;

  if (mdfString.find("dimension")==0) 
  {
    newMdf.dimension=mdfString;
  }
  else if (mdfString.contains("intent")) 
  {
    QCString tmp = extractFromParens(mdfString);
    bool isin = tmp.contains("in");
    bool isout = tmp.contains("out");
    if (isin && isout) newMdf.direction = SymbolModifiers::INOUT;
    else if (isin) newMdf.direction = SymbolModifiers::IN;
    else if (isout) newMdf.direction = SymbolModifiers::OUT;
  }
  else if (mdfString=="public") 
  {
    newMdf.protection = SymbolModifiers::PUBLIC;
  }
  else if (mdfString=="private") 
  {
    newMdf.protection = SymbolModifiers::PRIVATE;
  }
  else if (mdfString=="optional") 
  {
    newMdf.optional = TRUE;
  }
  else if (mdfString=="allocatable") 
  {
    newMdf.allocatable = TRUE;
  }
  else if (mdfString=="external") 
  {
    newMdf.external = TRUE;
  }
  else if (mdfString=="intrinsic") 
  {
    newMdf.intrinsic = TRUE;
  }
  else if (mdfString=="parameter") 
  {
    newMdf.parameter = TRUE;
  }
  else if (mdfString=="pointer") 
  {
    newMdf.pointer = TRUE;
  }
  else if (mdfString=="target") 
  {
    newMdf.target = TRUE;
  }
  else if (mdfString=="save") 
  {
    newMdf.save = TRUE;
  }

  (*this) |= newMdf;
  return *this;
}

/*! For debugging purposes. */
//ostream& operator<<(ostream& out, const SymbolModifiers& mdfs)
//{
//  out<<mdfs.protection<<", "<<mdfs.direction<<", "<<mdfs.optional<<
//    ", "<<(mdfs.dimension.isNull() ? "" : mdfs.dimension.latin1())<<
//    ", "<<mdfs.allocatable<<", "<<mdfs.external<<", "<<mdfs.intrinsic;
//
//  return out;
//}

/*! Find argument with given name in \a subprog entry. */
static Argument *findArgument(Entry* subprog, QCString name, bool byTypeName = FALSE)
{
  QCString cname(name.lower());
  for (unsigned int i=0; i<subprog->argList->count(); i++) 
  {
    Argument *arg = subprog->argList->at(i);
    if ((!byTypeName && arg->name.lower() == cname) ||
	(byTypeName && arg->type.lower() == cname)
       )
    {
      return arg;
    }
  }
  return 0;
}

/*! Find function with given name in \a entry. */
#if 0
static Entry *findFunction(Entry* entry, QCString name)
{
  QCString cname(name.lower());

  EntryListIterator eli(*entry->children());
  Entry *ce;
  for (;(ce=eli.current());++eli) 
  {
    if (ce->section != Entry::FUNCTION_SEC)
      continue;

    if (ce->name.lower() == cname)
      return ce;
  }

  return 0;
}
#endif

/*! Apply modifiers stored in \a mdfs to the \a typeName string. */
static QCString applyModifiers(QCString typeName, SymbolModifiers& mdfs) 
{
  if (!mdfs.dimension.isNull()) 
  {
    typeName += ",";
    typeName += mdfs.dimension;
  }
  if (mdfs.direction!=SymbolModifiers::NONE_D) 
  {
    typeName += ",";
    typeName += directionStrs[mdfs.direction];
  }
  if (mdfs.optional) 
  {
    typeName += ",";
    typeName += "optional";
  }
  if (mdfs.allocatable) 
  {
    typeName += ",";
    typeName += "allocatable";
  }
  if (mdfs.external) 
  {
    typeName += ",";
    typeName += "external";
  }
  if (mdfs.intrinsic) 
  {
    typeName += ",";
    typeName += "intrinsic";
  }
  if (mdfs.parameter) 
  {
    typeName += ",";
    typeName += "parameter";
  }
  if (mdfs.pointer) 
  {
    typeName += ",";
    typeName += "pointer";
  }
  if (mdfs.target) 
  {
    typeName += ",";
    typeName += "target";
  }
  if (mdfs.save) 
  {
    typeName += ",";
    typeName += "save";
  }

  return typeName;
}

/*! Apply modifiers stored in \a mdfs to the \a arg argument. */
static void applyModifiers(Argument *arg, SymbolModifiers& mdfs)
{
  QCString tmp = arg->type;
  arg->type = applyModifiers(tmp, mdfs);
}

/*! Apply modifiers stored in \a mdfs to the \a ent entry. */
static void applyModifiers(Entry *ent, SymbolModifiers& mdfs)
{
  QCString tmp = ent->type;
  ent->type = applyModifiers(tmp, mdfs);

  if (mdfs.protection == SymbolModifiers::PUBLIC)
    ent->protection = Public;
  else if (mdfs.protection == SymbolModifiers::PRIVATE)
    ent->protection = Private;
}

/*! Starts the new scope in fortran program. Consider using this function when
 * starting module, interface, function or other program block.
 * \see endScope()
 */
static void startScope(Entry *scope) 
{
  //cout<<"start scope: "<<scope->name<<endl;
  current_root= scope; /* start substructure */

  QMap<QCString,SymbolModifiers> mdfMap;
  modifiers.insert(scope, mdfMap);
}

/*! Ends scope in fortran program: may update subprogram arguments or module variable attributes.
 * \see startScope()
 */
static bool endScope(Entry *scope, bool isGlobalRoot)
{
  //cout<<"end scope: "<<scope->name<<endl;
  if (current_root->parent() || isGlobalRoot)
  {
    current_root= current_root->parent(); /* end substructure */
  }
  else 
  {
    fprintf(stderr,"parse error in end <scopename>");
    scanner_abort();
    return FALSE;
  }

  // update variables or subprogram arguments with modifiers
  QMap<QCString,SymbolModifiers>& mdfsMap = modifiers[scope];

  if (scope->section == Entry::FUNCTION_SEC) 
  {
    // iterate all symbol modifiers of the scope
    for (QMap<QCString,SymbolModifiers>::Iterator it=mdfsMap.begin(); it!=mdfsMap.end(); it++) 
    {
      //cout<<it.key()<<": "<<it.data()<<endl;
      Argument *arg = findArgument(scope, it.key());

      if (arg)
        applyModifiers(arg, it.data());
    }

    // find return type for function
    //cout<<"RETURN NAME "<<modifiers[current_root][scope->name.lower()].returnName<<endl;
    QCString returnName = modifiers[current_root][scope->name.lower()].returnName.lower();
    if (modifiers[scope].contains(returnName)) 
    {
      scope->type = modifiers[scope][returnName].type; // returning type works
      applyModifiers(scope, modifiers[scope][returnName]); // returning array works
    }

  } 
  if (scope->section == Entry::CLASS_SEC) 
  { // was INTERFACE_SEC
    if (scope->parent()->section == Entry::FUNCTION_SEC) 
    { // interface within function
      // iterate functions of interface and 
      // try to find types for dummy(ie. argument) procedures.
      //cout<<"Search in "<<scope->name<<endl;
      EntryListIterator eli(*scope->children());
      Entry *ce;
      for (;(ce=eli.current());++eli) 
      {
        if (ce->section != Entry::FUNCTION_SEC)
          continue;

        Argument *arg = findArgument(scope->parent(), ce->name, TRUE);
        if (arg != 0) 
	{
          // set type of dummy procedure argument to interface
	  arg->name = arg->type;
          arg->type = scope->name;
        }
      }
    }
  } 
  if (scope->section!=Entry::FUNCTION_SEC) 
  { // not function section 
    // iterate variables: get and apply modifiers
    EntryListIterator eli(*scope->children());
    Entry *ce;
    for (;(ce=eli.current());++eli) 
    {
      if (ce->section != Entry::VARIABLE_SEC && ce->section != Entry::FUNCTION_SEC)
        continue;

      //cout<<ce->name<<", "<<mdfsMap.contains(ce->name.lower())<<mdfsMap.count()<<endl;
      if (mdfsMap.contains(ce->name.lower()))
        applyModifiers(ce, mdfsMap[ce->name.lower()]);
    }
  }

  // clear all modifiers of the scope
  modifiers.remove(scope);

  return TRUE;
}

//! Return full name of the entry. Sometimes we must combine several names recursively.
static QCString getFullName(Entry *e) 
{
  QCString name = e->name;
  if (e->section == Entry::CLASS_SEC //  || e->section == Entry::INTERFACE_SEC
     || !e->parent() || e->parent()->name.isEmpty())
    return name;

  return getFullName(e->parent())+"::"+name;
}

static int yyread(char *buf,int max_size)
{
  int c=0;

  while ( c < max_size && inputString[inputPosition] )
  {
    *buf = inputString[inputPosition++] ;
    c++; buf++;
  }
  return c;
}

static void initParser()
{
  last_entry = 0;
}

static void initEntry()
{
  current->protection = defaultProtection ;
  current->mtype      = mtype;
  current->virt       = virt;
  current->stat       = gstat;
  initGroupInfo(current);
}

/**
  adds current entry to current_root and creates new current
*/
static void addCurrentEntry()
{
  //printf("===Adding entry %s to %s\n", current->name.data(), current_root->name.data());
  current_root->addSubEntry(current);
  last_entry = current;
  current = new Entry ;
  initEntry();
}

static int max(int a, int b) {return a>b?a:b;}

static void addModule(const char *name, bool isModule)
{
  //fprintf(stderr, "0=========> got module %s\n", name);

  if (isModule)
    current->section = Entry::NAMESPACE_SEC;
  else
    current->section = Entry::FUNCTION_SEC;

  if (name!=NULL)
  {
    current->name = name;
  } 
  else
  {
    QCString fname = yyFileName;
    int index = max(fname.findRev('/'), fname.findRev('\\'));
    fname = fname.right(fname.length()-index-1);
    fname = fname.prepend("__").append("__");
    current->name = fname;
  }
  current->type = "program";
  current->fileName  = yyFileName;
  current->bodyLine  = yyLineNr; // used for source reference
  current->protection = Public ;
  addCurrentEntry();
  startScope(last_entry);
}


static void addSubprogram(const char *text)
{
  //fprintf(stderr,"1=========> got subprog, type: %s\n",text); 
  current->section = Entry::FUNCTION_SEC ;
  QCString subtype = text; subtype=subtype.lower().stripWhiteSpace();
  if (!current->type) current->type = subtype;
  current->fileName  = yyFileName;
  current->bodyLine  = yyLineNr; // used for source reference
  current->startLine = -1; // ??? what is startLine for?
  current->args.resize(0);
  current->argList->clear();
  docBlock.resize(0);
}

/*! Adds interface to the root entry.
 * \note Code was brought to this procedure from the parser,
 * because there was/is idea to use it in several parts of the parser.
 */ 
static void addInterface(QCString name) 
{
  current->section = Entry::CLASS_SEC; // was Entry::INTERFACE_SEC;
  current->spec = Entry::Interface;
  current->name = name;

  /* if type is part of a module, mod name is necessary for output */
  if ((current_root) && 
      (current_root->section ==  Entry::CLASS_SEC ||
       current_root->section ==  Entry::NAMESPACE_SEC)) 
  {
    current->name= current_root->name+"::"+current->name;
  }
  if ((current_root) &&
      (current_root->section ==  Entry::FUNCTION_SEC)) 
  {
    current->name = getFullName(current_root) + "__" + QCString(current->name);
  }

  current->fileName = yyFileName;
  current->bodyLine  = yyLineNr; 
  addCurrentEntry();
}


//-----------------------------------------------------------------------------

/*! Update the argument \a name with additional \a type info. 
 */
static Argument *addFortranParameter(const QCString &type,const QCString &name, const QCString docs)
{
  //cout<<"addFortranParameter(): "<<name<<" DOCS:"<<(docs.isNull()?QCString("null"):docs)<<endl;
  Argument *ret = 0;
  if (current_root->argList==0) return 0;
  ArgumentListIterator ali(*current_root->argList);
  Argument *a;
  for (ali.toFirst();(a=ali.current());++ali)
  {
    if (a->type.lower()==name.lower())
    {
      ret=a;
//cout << "addParameter found:   " << type << " , " << name << endl;
      a->type=type.stripWhiteSpace();
      a->name=name.stripWhiteSpace();
      if (!docs.isNull())
        a->docs = docs;
      break;
    }
  } // for
  return ret;
}

  //----------------------------------------------------------------------------
static void startCommentBlock(bool brief)
{
  if (brief)
  {
    current->briefFile = yyFileName;
    current->briefLine = yyLineNr;
  }
  else
  {
    current->docFile = yyFileName;
    current->docLine = yyLineNr;
  }
}

  //----------------------------------------------------------------------------
static void handleCommentBlock(const QCString &doc,bool brief)
{
  docBlockInBody = FALSE;
  bool needsEntry = FALSE;
  static bool hideInBodyDocs = Config_getBool("HIDE_IN_BODY_DOCS");
  int position=0;
  if (docBlockInBody && hideInBodyDocs) return;
  //fprintf(stderr,"call parseCommentBlock [%s]\n",doc.data());
  while (parseCommentBlock(
	g_thisParser,
	docBlockInBody ? last_entry : current,
	doc,        // text
	yyFileName, // file
	brief ? current->briefLine : current->docLine,   // line of block start
	docBlockInBody ? FALSE : brief, 
	docBlockInBody ? FALSE : docBlockJavaStyle,
	docBlockInBody,
	defaultProtection,
        position,
        needsEntry
        )) 
  {
	   //fprintf(stderr,"parseCommentBlock position=%d [%s]  needsEntry=%d\n",position,doc.data()+position,needsEntry);
   if (needsEntry) addCurrentEntry();
  }
  //fprintf(stderr,"parseCommentBlock position=%d [%s]  needsEntry=%d\n",position,doc.data()+position,needsEntry);

  if (needsEntry) addCurrentEntry();
}

//----------------------------------------------------------------------------
static int level=0;
static void debugCompounds(Entry *rt)  // print Entry structure (for debugging)
{
 level++;
  printf("%d) debugCompounds(%s) line %d\n",level, rt->name.data(), rt->bodyLine);
  EntryListIterator eli(*rt->children());
  Entry *ce;
  for (;(ce=eli.current());++eli)
  {
     debugCompounds(ce); 
  } 
level--;
}


static void parseMain(const char *fileName,const char *fileBuf,Entry *rt)
{
  initParser();

  defaultProtection = Public;
  inputString = fileBuf;
  inputPosition = 0;
  inputStringPrepass = NULL;
  inputPositionPrepass = 0;

  //anonCount     = 0;  // don't reset per file
  mtype         = Method;
  gstat         = FALSE;
  virt          = Normal;
  current_root  = rt;
  global_root   = rt;
  inputFile.setName(fileName);
  if (inputFile.open(IO_ReadOnly))
  {
    isFixedForm = recognizeFixedForm(fileBuf);

    if (isFixedForm) {
      printf("Prepassing fixed form of %s\n", yyFileName.data());
      //printf("---strlen=%d\n", strlen(fileBuf));
      //clock_t start=clock();

      inputString = prepassFixedForm(fileBuf);

      //clock_t end=clock();
      //printf("CPU time used=%f\n", ((double) (end-start))/CLOCKS_PER_SEC);
    }

    yyLineNr= 1 ; 
    yyFileName = fileName;
    msg("Parsing file %s...\n",yyFileName.data());

    startScope(rt); // implies current_root = rt
    initParser();
    groupEnterFile(yyFileName,yyLineNr);

    current          = new Entry;
    current->name    = yyFileName;
    current->section = Entry::SOURCE_SEC;
    current_root->addSubEntry(current);
    file_root        = current;
    current          = new Entry;

    fscanYYrestart( fscanYYin );
    {
      BEGIN( Start );
    }

    fscanYYlex();
    groupLeaveFile(yyFileName,yyLineNr);

    endScope(current_root, TRUE); // TRUE - global root

    //debugCompounds(rt); //debug 

    rt->program.resize(0);
    delete current; current=0;
    moduleProcedures.clear();
    if (isFixedForm) {
      free((char*)inputString);
      inputString=NULL;
    }

    inputFile.close();
  }
}

//----------------------------------------------------------------------------

void FortranLanguageScanner::parseInput(const char *fileName,const char *fileBuf,Entry *root)
{
  g_thisParser = this;
  ::parseMain(fileName,fileBuf,root);
}

void FortranLanguageScanner::parseCode(CodeOutputInterface & codeOutIntf,
                   const char * scopeName,
                   const QCString & input,
                   bool isExampleBlock,
                   const char * exampleName,
                   FileDef * fileDef,
                   int startLine,
                   int endLine,
                   bool inlineFragment,
		   MemberDef *memberDef
                  )
{
  ::parseFortranCode(codeOutIntf,scopeName,input,isExampleBlock,exampleName,
                     fileDef,startLine,endLine,inlineFragment,memberDef);
}

bool FortranLanguageScanner::needsPreprocessing(const QCString &extension)
{
  (void)extension;
  return TRUE;
}
void FortranLanguageScanner::resetCodeParserState()
{
  ::resetFortranCodeParserState();
}

void FortranLanguageScanner::parsePrototype(const char *text)
{
  (void)text;
}

static void scanner_abort() 
{
  fprintf(stderr,"********************************************************************\n");
  fprintf(stderr,"Error in file %s line: %d, state: %d\n",yyFileName.data(),yyLineNr,YY_START);
  fprintf(stderr,"********************************************************************\n");
   
  EntryListIterator eli(*global_root->children());
  Entry *ce;
  bool start=FALSE;

  for (;(ce=eli.current());++eli)
  {
     if (ce == file_root) start=TRUE;
     if (start) ce->reset(); 
  } 

  // dummy call to avoid compiler warning
  (void)yy_top_state();
  
  return;
  //exit(-1);
}

//----------------------------------------------------------------------------

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void fscannerYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


